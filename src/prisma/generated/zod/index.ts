import { z } from 'zod';
import type { Prisma } from '@prisma/client';

/////////////////////////////////////////
// HELPER FUNCTIONS
/////////////////////////////////////////


/////////////////////////////////////////
// ENUMS
/////////////////////////////////////////

export const TransactionIsolationLevelSchema = z.enum(['ReadUncommitted','ReadCommitted','RepeatableRead','Serializable']);

export const AccountScalarFieldEnumSchema = z.enum(['id','userId','type','provider','providerAccountId','refresh_token','access_token','expires_at','token_type','scope','state','id_token','session_state','refresh_token_expires_in','epic_dstu2_patient','appointment','dob','encounter','location','loginDepartment','need_patient_banner','patient','smart_style_url','unconfirmed_status','user_email','username','tenant','createdAt','updatedAt']);

export const AdminScalarFieldEnumSchema = z.enum(['Id','Name','Email','UserAttributeId']);

export const AttachmentScalarFieldEnumSchema = z.enum(['Id','AttachmentType','AttachmentUrl','CreatedAt','UpdatedAt']);

export const BIOMARKERScalarFieldEnumSchema = z.enum(['HGNCId','HGNCStatus','HGNCApprovedSymbol','HGNCApprovedName']);

export const ICDScalarFieldEnumSchema = z.enum(['Id','Code','ShortDescription','CreatedAt','UpdatedAt']);

export const LOINCScalarFieldEnumSchema = z.enum(['Loinc_Num','COMPONENT','PROPERTY','TIME_ASPCT','SYSTEM','SCALE_TYP','METHOD_TYP','CLASS','VersionLastChanged','CHNG_TYPE','DefinitionDescription','STATUS','CONSUMER_NAME','CLASSTYPE','FORMULA','EXMPL_ANSWERS','SURVEY_QUEST_TEXT','SURVEY_QUEST_SRC','UNITSREQUIRED','RELATEDNAMES2','SHORTNAME','ORDER_OBS','HL7_FIELD_SUBFIELD_ID','EXTERNAL_COPYRIGHT_NOTICE','EXAMPLE_UNITS','LONG_COMMON_NAME','EXAMPLE_UCUM_UNITS','STATUS_REASON','STATUS_TEXT','CHANGE_REASON_PUBLIC','COMMON_TEST_RANK','COMMON_ORDER_RANK','HL7_ATTACHMENT_STRUCTURE','EXTERNAL_COPYRIGHT_LINK','PanelType','AskAtOrderEntry','AssociatedObservations','VersionFirstReleased','ValidHL7AttachmentRequest','DisplayName']);

export const LabScalarFieldEnumSchema = z.enum(['LabId','LabName','LabCode','Address','City','State','Zip']);

export const LabOrderScalarFieldEnumSchema = z.enum(['Id','OrderNumber','AccessionNumber','OrderingProviderId','TreatingProviderId','PatientId','PatientMRN','PatientMobile','PatientEmail','OrganizationId','OrderDate','OrderNotes','CreatedAt','UpdatedAt']);

export const LabOrderAttachmentScalarFieldEnumSchema = z.enum(['Id','LabOrderId','AttachmentId','CreatedAt','UpdatedAt']);

export const LabOrderBillingScalarFieldEnumSchema = z.enum(['Id','LabOrderId','BillToId','HealthPalnId','PatientStatus','SponoseredTestCouponCode','CreatedAt','UpdatedAt']);

export const LabOrderIcdScalarFieldEnumSchema = z.enum(['Id','LabOrderId','ICDId','CreatedAt','UpdatedAt']);

export const LabOrderSpecimenScalarFieldEnumSchema = z.enum(['Id','LabOrderId','SpecimenType','SpecimenCount','CollectedDate','CollectedTime','SpecimenID','BodySite','TumorType','Fixative','FixativeDuration','ColdIschemicTime','CreatedAt','UpdatedAt']);

export const LabOrderSponsoredTestConsentScalarFieldEnumSchema = z.enum(['Id','LabOrderId','SponsoredCasandraTestId','ProviderName','ProviderNPI','ConsentAt','CreatedAt','UpdatedAt']);

export const LabOrderStatusScalarFieldEnumSchema = z.enum(['Id','LabOrderId','Status','StatusDate','CreatedAt','UpdatedAt']);

export const LabOrderTestScalarFieldEnumSchema = z.enum(['Id','LabOrderId','TestId','CreatedAt','UpdatedAt']);

export const LoincComponentHierarchyScalarFieldEnumSchema = z.enum(['Id','ParentId','Level','Code','Sequence','CodeText','Component','Property','Timing','Scale','Method']);

export const LoincPanelHierarchyScalarFieldEnumSchema = z.enum(['Id','ParentId','Level','Code','Sequence','CodeText','Component','Property','Timing','Scale','Method']);

export const LoincUniveralLabOrdersScalarFieldEnumSchema = z.enum(['Loinc_Num','Long_Common_Name','ORDER_OBS']);

export const OrganizationScalarFieldEnumSchema = z.enum(['Id','href','ParentId','Level','ParentOrgName','OrgName','OrgType','OrgSpecialty','OrgAddress','OrgCity','OrgState','OrgZip']);

export const OrganizationEndpointScalarFieldEnumSchema = z.enum(['Id','OrgName','EHRVendor','FHIRVersion','Endpoint']);

export const OrganizationFavoriteTestScalarFieldEnumSchema = z.enum(['Id','OrganizationId','ParentId','ParentName','Level','TestId','CreatedAt','UpdatedAt']);

export const PatientScalarFieldEnumSchema = z.enum(['Id','FirstName','LastName','DateOfBirth','Gender','Email','Mobile','CreatedAt','UpdatedAt']);

export const PatientOrganizationScalarFieldEnumSchema = z.enum(['Id','PatientId','OrganizationId','MRN','Mobile','Email']);

export const PostScalarFieldEnumSchema = z.enum(['id','name','createdAt','updatedAt']);

export const ProviderScalarFieldEnumSchema = z.enum(['Id','href','NPI','Name','Email','Credentials','Specialty','Aboutme','Gender','ProviderType','Affiliation','ProceduresAndResearch','SpecialInterests','UserAttributeId']);

export const ProviderEducationScalarFieldEnumSchema = z.enum(['Id','ProviderId','ProviderNPI','Name','EducationType','SchoolName','AreaOfEducation']);

export const ProviderFavoriteTestScalarFieldEnumSchema = z.enum(['Id','ProviderId','ParentId','ParentName','Level','TestId','CreatedAt','UpdatedAt']);

export const ProviderOrganizationScalarFieldEnumSchema = z.enum(['Id','ProviderId','OrganizationId','ProviderNPI','Name','ParentOrgName','OrgName','OrgAddress','OrgCity','OrgState','OrgZip']);

export const SessionScalarFieldEnumSchema = z.enum(['id','sessionToken','userId','expires']);

export const SponsorScalarFieldEnumSchema = z.enum(['SponsorId','SponsorName','SponsorCode','SponsorWebsite','SponsorType','Address','City','State','Zip']);

export const SponsoredProgramScalarFieldEnumSchema = z.enum(['ProgramId','SponsorId','TherapeuticArea','ProgramName','ProgramUrl','ProgramLabUrl','SponosoredTestingUrl','ProgramEligibility','CreatedAt','UpdatedAt']);

export const SponsoredTestScalarFieldEnumSchema = z.enum(['Id','TestId','LabTestId','SponsoredProgramId','LabId','CasandraTestId','Category','SubCategory','CreatedAt','UpdatedAt']);

export const TestBiomarkerScalarFieldEnumSchema = z.enum(['Id','TestId','LabTestId','HGNCId','TranscriptReference','CreatedAt','UpdatedAt']);

export const TestCatalogScalarFieldEnumSchema = z.enum(['TestId','LabId','href','CasandraTestId','LabTestId','TestName','AlternativeName','AlternativeName1','AlternativeName2','AlternativeName3','AlternativeName4','AlternativeName5','TestIncludes','SpecimenType','SpecialInstructions','Methodology','TestDescription','Diseases','Probes','ClinicalSignificance','SpecimenRequirements','Volume','MinimumVolume','Container','Collection','StabilityRequirements','StorageTransportation','PatientPreparation','CausesForRejection','TestUsage','TestLimitations','CPTCodes','NewYorkApproved','LevelOfService','TurnAroundTime','AssayCategory','ReferenceRanges','SetupSchedule','AlternativeSpecimen','LoincCodesText','LoincCodesHTML','TestCategory','TestSubCategory','CreatedAt','UpdatedAt']);

export const TestCptCodeScalarFieldEnumSchema = z.enum(['Id','TestId','LabTestId','CptCode','Modifier','Comments','CreatedAt','UpdatedAt']);

export const TestGeneScalarFieldEnumSchema = z.enum(['Id','TestId','LabTestId','Gene','TranscriptReference','CreatedAt','UpdatedAt']);

export const TestOrderLoincScalarFieldEnumSchema = z.enum(['Id','TestId','LabTestId','OrderLoinc','CreatedAt','UpdatedAt']);

export const TestResultLoincScalarFieldEnumSchema = z.enum(['Id','TestId','LabTestId','ResultCode','ResultCodeName','UofM','ResultLoinc','CreatedAt','UpdatedAt']);

export const UserScalarFieldEnumSchema = z.enum(['id','name','email','password','emailVerified','image']);

export const UserAttributeScalarFieldEnumSchema = z.enum(['Id','UserId','UserType']);

export const VerificationTokenScalarFieldEnumSchema = z.enum(['identifier','token','expires']);

export const SortOrderSchema = z.enum(['asc','desc']);

export const NullsOrderSchema = z.enum(['first','last']);

export const AccountOrderByRelevanceFieldEnumSchema = z.enum(['id','userId','type','provider','providerAccountId','refresh_token','access_token','token_type','scope','state','id_token','session_state','epic_dstu2_patient','appointment','dob','encounter','location','loginDepartment','need_patient_banner','patient','smart_style_url','unconfirmed_status','user_email','username','tenant']);

export const AdminOrderByRelevanceFieldEnumSchema = z.enum(['Id','Name','Email','UserAttributeId']);

export const AttachmentOrderByRelevanceFieldEnumSchema = z.enum(['Id','AttachmentType','AttachmentUrl']);

export const BIOMARKEROrderByRelevanceFieldEnumSchema = z.enum(['HGNCId','HGNCStatus','HGNCApprovedSymbol','HGNCApprovedName']);

export const ICDOrderByRelevanceFieldEnumSchema = z.enum(['Id','Code','ShortDescription']);

export const LOINCOrderByRelevanceFieldEnumSchema = z.enum(['Loinc_Num','COMPONENT','PROPERTY','TIME_ASPCT','SYSTEM','SCALE_TYP','METHOD_TYP','CLASS','VersionLastChanged','CHNG_TYPE','DefinitionDescription','STATUS','CONSUMER_NAME','FORMULA','EXMPL_ANSWERS','SURVEY_QUEST_TEXT','SURVEY_QUEST_SRC','UNITSREQUIRED','RELATEDNAMES2','SHORTNAME','ORDER_OBS','HL7_FIELD_SUBFIELD_ID','EXTERNAL_COPYRIGHT_NOTICE','EXAMPLE_UNITS','LONG_COMMON_NAME','EXAMPLE_UCUM_UNITS','STATUS_REASON','STATUS_TEXT','CHANGE_REASON_PUBLIC','HL7_ATTACHMENT_STRUCTURE','EXTERNAL_COPYRIGHT_LINK','PanelType','AskAtOrderEntry','AssociatedObservations','VersionFirstReleased','ValidHL7AttachmentRequest','DisplayName']);

export const LabOrderByRelevanceFieldEnumSchema = z.enum(['LabName','LabCode','Address','City','State','Zip']);

export const LabOrderOrderByRelevanceFieldEnumSchema = z.enum(['Id','OrderNumber','AccessionNumber','OrderingProviderId','TreatingProviderId','PatientId','PatientMRN','PatientMobile','PatientEmail','OrganizationId','OrderNotes']);

export const LabOrderAttachmentOrderByRelevanceFieldEnumSchema = z.enum(['Id','LabOrderId','AttachmentId']);

export const LabOrderBillingOrderByRelevanceFieldEnumSchema = z.enum(['Id','LabOrderId','BillToId','HealthPalnId','PatientStatus','SponoseredTestCouponCode']);

export const LabOrderIcdOrderByRelevanceFieldEnumSchema = z.enum(['Id','LabOrderId','ICDId']);

export const LabOrderSpecimenOrderByRelevanceFieldEnumSchema = z.enum(['Id','LabOrderId','SpecimenType','SpecimenCount','CollectedTime','SpecimenID','BodySite','TumorType','Fixative','FixativeDuration','ColdIschemicTime']);

export const LabOrderSponsoredTestConsentOrderByRelevanceFieldEnumSchema = z.enum(['Id','LabOrderId','SponsoredCasandraTestId','ProviderName','ProviderNPI']);

export const LabOrderStatusOrderByRelevanceFieldEnumSchema = z.enum(['Id','LabOrderId','Status']);

export const LabOrderTestOrderByRelevanceFieldEnumSchema = z.enum(['Id','LabOrderId']);

export const LoincComponentHierarchyOrderByRelevanceFieldEnumSchema = z.enum(['Code','Sequence','CodeText','Component','Property','Timing','Scale','Method']);

export const LoincPanelHierarchyOrderByRelevanceFieldEnumSchema = z.enum(['Code','Sequence','CodeText','Component','Property','Timing','Scale','Method']);

export const LoincUniveralLabOrdersOrderByRelevanceFieldEnumSchema = z.enum(['Loinc_Num','Long_Common_Name','ORDER_OBS']);

export const OrganizationOrderByRelevanceFieldEnumSchema = z.enum(['Id','href','ParentId','ParentOrgName','OrgName','OrgType','OrgSpecialty','OrgAddress','OrgCity','OrgState','OrgZip']);

export const OrganizationEndpointOrderByRelevanceFieldEnumSchema = z.enum(['Id','OrgName','EHRVendor','FHIRVersion','Endpoint']);

export const OrganizationFavoriteTestOrderByRelevanceFieldEnumSchema = z.enum(['Id','OrganizationId','ParentId','ParentName']);

export const PatientOrderByRelevanceFieldEnumSchema = z.enum(['Id','FirstName','LastName','Gender','Email','Mobile']);

export const PatientOrganizationOrderByRelevanceFieldEnumSchema = z.enum(['Id','PatientId','OrganizationId','MRN','Mobile','Email']);

export const PostOrderByRelevanceFieldEnumSchema = z.enum(['name']);

export const ProviderOrderByRelevanceFieldEnumSchema = z.enum(['Id','href','NPI','Name','Email','Credentials','Specialty','Aboutme','Gender','ProviderType','Affiliation','ProceduresAndResearch','SpecialInterests','UserAttributeId']);

export const ProviderEducationOrderByRelevanceFieldEnumSchema = z.enum(['Id','ProviderId','ProviderNPI','Name','EducationType','SchoolName','AreaOfEducation']);

export const ProviderFavoriteTestOrderByRelevanceFieldEnumSchema = z.enum(['Id','ProviderId','ParentId','ParentName']);

export const ProviderOrganizationOrderByRelevanceFieldEnumSchema = z.enum(['Id','ProviderId','OrganizationId','ProviderNPI','Name','ParentOrgName','OrgName','OrgAddress','OrgCity','OrgState','OrgZip']);

export const SessionOrderByRelevanceFieldEnumSchema = z.enum(['id','sessionToken','userId']);

export const SponsorOrderByRelevanceFieldEnumSchema = z.enum(['SponsorName','SponsorCode','SponsorWebsite','SponsorType','Address','City','State','Zip']);

export const SponsoredProgramOrderByRelevanceFieldEnumSchema = z.enum(['TherapeuticArea','ProgramName','ProgramUrl','ProgramLabUrl','SponosoredTestingUrl','ProgramEligibility']);

export const SponsoredTestOrderByRelevanceFieldEnumSchema = z.enum(['Id','LabTestId','CasandraTestId','Category','SubCategory']);

export const TestBiomarkerOrderByRelevanceFieldEnumSchema = z.enum(['LabTestId','HGNCId','TranscriptReference']);

export const TestCatalogOrderByRelevanceFieldEnumSchema = z.enum(['href','CasandraTestId','LabTestId','TestName','AlternativeName','AlternativeName1','AlternativeName2','AlternativeName3','AlternativeName4','AlternativeName5','TestIncludes','SpecimenType','SpecialInstructions','Methodology','TestDescription','Diseases','Probes','ClinicalSignificance','SpecimenRequirements','Volume','MinimumVolume','Container','Collection','StabilityRequirements','StorageTransportation','PatientPreparation','CausesForRejection','TestUsage','TestLimitations','CPTCodes','NewYorkApproved','LevelOfService','TurnAroundTime','AssayCategory','ReferenceRanges','SetupSchedule','AlternativeSpecimen','LoincCodesText','LoincCodesHTML','TestCategory','TestSubCategory']);

export const TestCptCodeOrderByRelevanceFieldEnumSchema = z.enum(['LabTestId','CptCode','Modifier','Comments']);

export const TestGeneOrderByRelevanceFieldEnumSchema = z.enum(['LabTestId','Gene','TranscriptReference']);

export const TestOrderLoincOrderByRelevanceFieldEnumSchema = z.enum(['LabTestId','OrderLoinc']);

export const TestResultLoincOrderByRelevanceFieldEnumSchema = z.enum(['LabTestId','ResultCode','ResultCodeName','UofM','ResultLoinc']);

export const UserOrderByRelevanceFieldEnumSchema = z.enum(['id','name','email','password','image']);

export const UserAttributeOrderByRelevanceFieldEnumSchema = z.enum(['Id','UserId']);

export const VerificationTokenOrderByRelevanceFieldEnumSchema = z.enum(['identifier','token']);

export const UserAttribute_UserTypeSchema = z.enum(['Admin','Provider']);

export type UserAttribute_UserTypeType = `${z.infer<typeof UserAttribute_UserTypeSchema>}`

/////////////////////////////////////////
// MODELS
/////////////////////////////////////////

/////////////////////////////////////////
// ACCOUNT SCHEMA
/////////////////////////////////////////

export const AccountSchema = z.object({
  id: z.string(),
  userId: z.string(),
  type: z.string(),
  provider: z.string(),
  providerAccountId: z.string(),
  refresh_token: z.string().nullable(),
  access_token: z.string().nullable(),
  expires_at: z.number().nullable(),
  token_type: z.string().nullable(),
  scope: z.string().nullable(),
  state: z.string().nullable(),
  id_token: z.string().nullable(),
  session_state: z.string().nullable(),
  refresh_token_expires_in: z.number().nullable(),
  epic_dstu2_patient: z.string().nullable(),
  appointment: z.string().nullable(),
  dob: z.string().nullable(),
  encounter: z.string().nullable(),
  location: z.string().nullable(),
  loginDepartment: z.string().nullable(),
  need_patient_banner: z.string().nullable(),
  patient: z.string().nullable(),
  smart_style_url: z.string().nullable(),
  unconfirmed_status: z.string().nullable(),
  user_email: z.string().nullable(),
  username: z.string().nullable(),
  tenant: z.string().nullable(),
  createdAt: z.date().nullable(),
  updatedAt: z.date().nullable(),
})

export type Account = z.infer<typeof AccountSchema>

/////////////////////////////////////////
// ACCOUNT PARTIAL SCHEMA
/////////////////////////////////////////

export const AccountPartialSchema = AccountSchema.partial()

export type AccountPartial = z.infer<typeof AccountPartialSchema>

// ACCOUNT RELATION SCHEMA
//------------------------------------------------------

export type AccountRelations = {
  user: UserWithRelations;
};

export type AccountWithRelations = z.infer<typeof AccountSchema> & AccountRelations

export const AccountWithRelationsSchema: z.ZodType<AccountWithRelations> = AccountSchema.merge(z.object({
  user: z.lazy(() => UserWithRelationsSchema),
}))

// ACCOUNT PARTIAL RELATION SCHEMA
//------------------------------------------------------

export type AccountPartialRelations = {
  user?: UserPartialWithRelations;
};

export type AccountPartialWithRelations = z.infer<typeof AccountPartialSchema> & AccountPartialRelations

export const AccountPartialWithRelationsSchema: z.ZodType<AccountPartialWithRelations> = AccountPartialSchema.merge(z.object({
  user: z.lazy(() => UserPartialWithRelationsSchema),
})).partial()

export type AccountWithPartialRelations = z.infer<typeof AccountSchema> & AccountPartialRelations

export const AccountWithPartialRelationsSchema: z.ZodType<AccountWithPartialRelations> = AccountSchema.merge(z.object({
  user: z.lazy(() => UserPartialWithRelationsSchema),
}).partial())

/////////////////////////////////////////
// ADMIN SCHEMA
/////////////////////////////////////////

export const AdminSchema = z.object({
  Id: z.string(),
  Name: z.string().nullable(),
  Email: z.string().nullable(),
  UserAttributeId: z.string(),
})

export type Admin = z.infer<typeof AdminSchema>

/////////////////////////////////////////
// ADMIN PARTIAL SCHEMA
/////////////////////////////////////////

export const AdminPartialSchema = AdminSchema.partial()

export type AdminPartial = z.infer<typeof AdminPartialSchema>

// ADMIN RELATION SCHEMA
//------------------------------------------------------

export type AdminRelations = {
  UserAttribute: UserAttributeWithRelations;
};

export type AdminWithRelations = z.infer<typeof AdminSchema> & AdminRelations

export const AdminWithRelationsSchema: z.ZodType<AdminWithRelations> = AdminSchema.merge(z.object({
  UserAttribute: z.lazy(() => UserAttributeWithRelationsSchema),
}))

// ADMIN PARTIAL RELATION SCHEMA
//------------------------------------------------------

export type AdminPartialRelations = {
  UserAttribute?: UserAttributePartialWithRelations;
};

export type AdminPartialWithRelations = z.infer<typeof AdminPartialSchema> & AdminPartialRelations

export const AdminPartialWithRelationsSchema: z.ZodType<AdminPartialWithRelations> = AdminPartialSchema.merge(z.object({
  UserAttribute: z.lazy(() => UserAttributePartialWithRelationsSchema),
})).partial()

export type AdminWithPartialRelations = z.infer<typeof AdminSchema> & AdminPartialRelations

export const AdminWithPartialRelationsSchema: z.ZodType<AdminWithPartialRelations> = AdminSchema.merge(z.object({
  UserAttribute: z.lazy(() => UserAttributePartialWithRelationsSchema),
}).partial())

/////////////////////////////////////////
// ATTACHMENT SCHEMA
/////////////////////////////////////////

export const AttachmentSchema = z.object({
  Id: z.string(),
  AttachmentType: z.string().nullable(),
  AttachmentUrl: z.string().nullable(),
  CreatedAt: z.date().nullable(),
  UpdatedAt: z.date().nullable(),
})

export type Attachment = z.infer<typeof AttachmentSchema>

/////////////////////////////////////////
// ATTACHMENT PARTIAL SCHEMA
/////////////////////////////////////////

export const AttachmentPartialSchema = AttachmentSchema.partial()

export type AttachmentPartial = z.infer<typeof AttachmentPartialSchema>

// ATTACHMENT RELATION SCHEMA
//------------------------------------------------------

export type AttachmentRelations = {
  LabOrderAttachment: LabOrderAttachmentWithRelations[];
};

export type AttachmentWithRelations = z.infer<typeof AttachmentSchema> & AttachmentRelations

export const AttachmentWithRelationsSchema: z.ZodType<AttachmentWithRelations> = AttachmentSchema.merge(z.object({
  LabOrderAttachment: z.lazy(() => LabOrderAttachmentWithRelationsSchema).array(),
}))

// ATTACHMENT PARTIAL RELATION SCHEMA
//------------------------------------------------------

export type AttachmentPartialRelations = {
  LabOrderAttachment?: LabOrderAttachmentPartialWithRelations[];
};

export type AttachmentPartialWithRelations = z.infer<typeof AttachmentPartialSchema> & AttachmentPartialRelations

export const AttachmentPartialWithRelationsSchema: z.ZodType<AttachmentPartialWithRelations> = AttachmentPartialSchema.merge(z.object({
  LabOrderAttachment: z.lazy(() => LabOrderAttachmentPartialWithRelationsSchema).array(),
})).partial()

export type AttachmentWithPartialRelations = z.infer<typeof AttachmentSchema> & AttachmentPartialRelations

export const AttachmentWithPartialRelationsSchema: z.ZodType<AttachmentWithPartialRelations> = AttachmentSchema.merge(z.object({
  LabOrderAttachment: z.lazy(() => LabOrderAttachmentPartialWithRelationsSchema).array(),
}).partial())

/////////////////////////////////////////
// BIOMARKER SCHEMA
/////////////////////////////////////////

export const BIOMARKERSchema = z.object({
  HGNCId: z.string(),
  HGNCStatus: z.string().nullable(),
  HGNCApprovedSymbol: z.string().nullable(),
  HGNCApprovedName: z.string().nullable(),
})

export type BIOMARKER = z.infer<typeof BIOMARKERSchema>

/////////////////////////////////////////
// BIOMARKER PARTIAL SCHEMA
/////////////////////////////////////////

export const BIOMARKERPartialSchema = BIOMARKERSchema.partial()

export type BIOMARKERPartial = z.infer<typeof BIOMARKERPartialSchema>

// BIOMARKER RELATION SCHEMA
//------------------------------------------------------

export type BIOMARKERRelations = {
  TestBiomarker: TestBiomarkerWithRelations[];
};

export type BIOMARKERWithRelations = z.infer<typeof BIOMARKERSchema> & BIOMARKERRelations

export const BIOMARKERWithRelationsSchema: z.ZodType<BIOMARKERWithRelations> = BIOMARKERSchema.merge(z.object({
  TestBiomarker: z.lazy(() => TestBiomarkerWithRelationsSchema).array(),
}))

// BIOMARKER PARTIAL RELATION SCHEMA
//------------------------------------------------------

export type BIOMARKERPartialRelations = {
  TestBiomarker?: TestBiomarkerPartialWithRelations[];
};

export type BIOMARKERPartialWithRelations = z.infer<typeof BIOMARKERPartialSchema> & BIOMARKERPartialRelations

export const BIOMARKERPartialWithRelationsSchema: z.ZodType<BIOMARKERPartialWithRelations> = BIOMARKERPartialSchema.merge(z.object({
  TestBiomarker: z.lazy(() => TestBiomarkerPartialWithRelationsSchema).array(),
})).partial()

export type BIOMARKERWithPartialRelations = z.infer<typeof BIOMARKERSchema> & BIOMARKERPartialRelations

export const BIOMARKERWithPartialRelationsSchema: z.ZodType<BIOMARKERWithPartialRelations> = BIOMARKERSchema.merge(z.object({
  TestBiomarker: z.lazy(() => TestBiomarkerPartialWithRelationsSchema).array(),
}).partial())

/////////////////////////////////////////
// ICD SCHEMA
/////////////////////////////////////////

export const ICDSchema = z.object({
  Id: z.string(),
  Code: z.string().nullable(),
  ShortDescription: z.string().nullable(),
  CreatedAt: z.date().nullable(),
  UpdatedAt: z.date().nullable(),
})

export type ICD = z.infer<typeof ICDSchema>

/////////////////////////////////////////
// ICD PARTIAL SCHEMA
/////////////////////////////////////////

export const ICDPartialSchema = ICDSchema.partial()

export type ICDPartial = z.infer<typeof ICDPartialSchema>

// ICD RELATION SCHEMA
//------------------------------------------------------

export type ICDRelations = {
  LabOrderIcd: LabOrderIcdWithRelations[];
};

export type ICDWithRelations = z.infer<typeof ICDSchema> & ICDRelations

export const ICDWithRelationsSchema: z.ZodType<ICDWithRelations> = ICDSchema.merge(z.object({
  LabOrderIcd: z.lazy(() => LabOrderIcdWithRelationsSchema).array(),
}))

// ICD PARTIAL RELATION SCHEMA
//------------------------------------------------------

export type ICDPartialRelations = {
  LabOrderIcd?: LabOrderIcdPartialWithRelations[];
};

export type ICDPartialWithRelations = z.infer<typeof ICDPartialSchema> & ICDPartialRelations

export const ICDPartialWithRelationsSchema: z.ZodType<ICDPartialWithRelations> = ICDPartialSchema.merge(z.object({
  LabOrderIcd: z.lazy(() => LabOrderIcdPartialWithRelationsSchema).array(),
})).partial()

export type ICDWithPartialRelations = z.infer<typeof ICDSchema> & ICDPartialRelations

export const ICDWithPartialRelationsSchema: z.ZodType<ICDWithPartialRelations> = ICDSchema.merge(z.object({
  LabOrderIcd: z.lazy(() => LabOrderIcdPartialWithRelationsSchema).array(),
}).partial())

/////////////////////////////////////////
// LOINC SCHEMA
/////////////////////////////////////////

export const LOINCSchema = z.object({
  Loinc_Num: z.string(),
  COMPONENT: z.string().nullable(),
  PROPERTY: z.string().nullable(),
  TIME_ASPCT: z.string().nullable(),
  SYSTEM: z.string().nullable(),
  SCALE_TYP: z.string().nullable(),
  METHOD_TYP: z.string().nullable(),
  CLASS: z.string().nullable(),
  VersionLastChanged: z.string().nullable(),
  CHNG_TYPE: z.string().nullable(),
  DefinitionDescription: z.string().nullable(),
  STATUS: z.string().nullable(),
  CONSUMER_NAME: z.string().nullable(),
  CLASSTYPE: z.number().nullable(),
  FORMULA: z.string().nullable(),
  EXMPL_ANSWERS: z.string().nullable(),
  SURVEY_QUEST_TEXT: z.string().nullable(),
  SURVEY_QUEST_SRC: z.string().nullable(),
  UNITSREQUIRED: z.string().nullable(),
  RELATEDNAMES2: z.string().nullable(),
  SHORTNAME: z.string().nullable(),
  ORDER_OBS: z.string().nullable(),
  HL7_FIELD_SUBFIELD_ID: z.string().nullable(),
  EXTERNAL_COPYRIGHT_NOTICE: z.string().nullable(),
  EXAMPLE_UNITS: z.string().nullable(),
  LONG_COMMON_NAME: z.string().nullable(),
  EXAMPLE_UCUM_UNITS: z.string().nullable(),
  STATUS_REASON: z.string().nullable(),
  STATUS_TEXT: z.string().nullable(),
  CHANGE_REASON_PUBLIC: z.string().nullable(),
  COMMON_TEST_RANK: z.number().nullable(),
  COMMON_ORDER_RANK: z.number().nullable(),
  HL7_ATTACHMENT_STRUCTURE: z.string().nullable(),
  EXTERNAL_COPYRIGHT_LINK: z.string().nullable(),
  PanelType: z.string().nullable(),
  AskAtOrderEntry: z.string().nullable(),
  AssociatedObservations: z.string().nullable(),
  VersionFirstReleased: z.string().nullable(),
  ValidHL7AttachmentRequest: z.string().nullable(),
  DisplayName: z.string().nullable(),
})

export type LOINC = z.infer<typeof LOINCSchema>

/////////////////////////////////////////
// LOINC PARTIAL SCHEMA
/////////////////////////////////////////

export const LOINCPartialSchema = LOINCSchema.partial()

export type LOINCPartial = z.infer<typeof LOINCPartialSchema>

// LOINC RELATION SCHEMA
//------------------------------------------------------

export type LOINCRelations = {
  TestOrderLoinc: TestOrderLoincWithRelations[];
  TestResultLoinc: TestResultLoincWithRelations[];
};

export type LOINCWithRelations = z.infer<typeof LOINCSchema> & LOINCRelations

export const LOINCWithRelationsSchema: z.ZodType<LOINCWithRelations> = LOINCSchema.merge(z.object({
  TestOrderLoinc: z.lazy(() => TestOrderLoincWithRelationsSchema).array(),
  TestResultLoinc: z.lazy(() => TestResultLoincWithRelationsSchema).array(),
}))

// LOINC PARTIAL RELATION SCHEMA
//------------------------------------------------------

export type LOINCPartialRelations = {
  TestOrderLoinc?: TestOrderLoincPartialWithRelations[];
  TestResultLoinc?: TestResultLoincPartialWithRelations[];
};

export type LOINCPartialWithRelations = z.infer<typeof LOINCPartialSchema> & LOINCPartialRelations

export const LOINCPartialWithRelationsSchema: z.ZodType<LOINCPartialWithRelations> = LOINCPartialSchema.merge(z.object({
  TestOrderLoinc: z.lazy(() => TestOrderLoincPartialWithRelationsSchema).array(),
  TestResultLoinc: z.lazy(() => TestResultLoincPartialWithRelationsSchema).array(),
})).partial()

export type LOINCWithPartialRelations = z.infer<typeof LOINCSchema> & LOINCPartialRelations

export const LOINCWithPartialRelationsSchema: z.ZodType<LOINCWithPartialRelations> = LOINCSchema.merge(z.object({
  TestOrderLoinc: z.lazy(() => TestOrderLoincPartialWithRelationsSchema).array(),
  TestResultLoinc: z.lazy(() => TestResultLoincPartialWithRelationsSchema).array(),
}).partial())

/////////////////////////////////////////
// LAB SCHEMA
/////////////////////////////////////////

export const LabSchema = z.object({
  LabId: z.number(),
  LabName: z.string().nullable(),
  LabCode: z.string().nullable(),
  Address: z.string().nullable(),
  City: z.string().nullable(),
  State: z.string().nullable(),
  Zip: z.string().nullable(),
})

export type Lab = z.infer<typeof LabSchema>

/////////////////////////////////////////
// LAB PARTIAL SCHEMA
/////////////////////////////////////////

export const LabPartialSchema = LabSchema.partial()

export type LabPartial = z.infer<typeof LabPartialSchema>

// LAB RELATION SCHEMA
//------------------------------------------------------

export type LabRelations = {
  SponsoredTest: SponsoredTestWithRelations[];
  TestCatalog: TestCatalogWithRelations[];
};

export type LabWithRelations = z.infer<typeof LabSchema> & LabRelations

export const LabWithRelationsSchema: z.ZodType<LabWithRelations> = LabSchema.merge(z.object({
  SponsoredTest: z.lazy(() => SponsoredTestWithRelationsSchema).array(),
  TestCatalog: z.lazy(() => TestCatalogWithRelationsSchema).array(),
}))

// LAB PARTIAL RELATION SCHEMA
//------------------------------------------------------

export type LabPartialRelations = {
  SponsoredTest?: SponsoredTestPartialWithRelations[];
  TestCatalog?: TestCatalogPartialWithRelations[];
};

export type LabPartialWithRelations = z.infer<typeof LabPartialSchema> & LabPartialRelations

export const LabPartialWithRelationsSchema: z.ZodType<LabPartialWithRelations> = LabPartialSchema.merge(z.object({
  SponsoredTest: z.lazy(() => SponsoredTestPartialWithRelationsSchema).array(),
  TestCatalog: z.lazy(() => TestCatalogPartialWithRelationsSchema).array(),
})).partial()

export type LabWithPartialRelations = z.infer<typeof LabSchema> & LabPartialRelations

export const LabWithPartialRelationsSchema: z.ZodType<LabWithPartialRelations> = LabSchema.merge(z.object({
  SponsoredTest: z.lazy(() => SponsoredTestPartialWithRelationsSchema).array(),
  TestCatalog: z.lazy(() => TestCatalogPartialWithRelationsSchema).array(),
}).partial())

/////////////////////////////////////////
// LAB ORDER SCHEMA
/////////////////////////////////////////

export const LabOrderSchema = z.object({
  Id: z.string(),
  OrderNumber: z.string().nullable(),
  AccessionNumber: z.string().nullable(),
  OrderingProviderId: z.string().nullable(),
  TreatingProviderId: z.string().nullable(),
  PatientId: z.string().nullable(),
  PatientMRN: z.string().nullable(),
  PatientMobile: z.string().nullable(),
  PatientEmail: z.string().nullable(),
  OrganizationId: z.string().nullable(),
  OrderDate: z.date().nullable(),
  OrderNotes: z.string().nullable(),
  CreatedAt: z.date().nullable(),
  UpdatedAt: z.date().nullable(),
})

export type LabOrder = z.infer<typeof LabOrderSchema>

/////////////////////////////////////////
// LAB ORDER PARTIAL SCHEMA
/////////////////////////////////////////

export const LabOrderPartialSchema = LabOrderSchema.partial()

export type LabOrderPartial = z.infer<typeof LabOrderPartialSchema>

// LAB ORDER RELATION SCHEMA
//------------------------------------------------------

export type LabOrderRelations = {
  OrderingProvider?: ProviderWithRelations | null;
  TreatingProvider?: ProviderWithRelations | null;
  Patient?: PatientWithRelations | null;
  Organization?: OrganizationWithRelations | null;
  LabOrderAttachment: LabOrderAttachmentWithRelations[];
  LabOrderBilling: LabOrderBillingWithRelations[];
  LabOrderIcd: LabOrderIcdWithRelations[];
  LabOrderSpecimen: LabOrderSpecimenWithRelations[];
  LabOrderSponsoredTestConsent: LabOrderSponsoredTestConsentWithRelations[];
  LabOrderStatus: LabOrderStatusWithRelations[];
  LabOrderTest: LabOrderTestWithRelations[];
};

export type LabOrderWithRelations = z.infer<typeof LabOrderSchema> & LabOrderRelations

export const LabOrderWithRelationsSchema: z.ZodType<LabOrderWithRelations> = LabOrderSchema.merge(z.object({
  OrderingProvider: z.lazy(() => ProviderWithRelationsSchema).nullable(),
  TreatingProvider: z.lazy(() => ProviderWithRelationsSchema).nullable(),
  Patient: z.lazy(() => PatientWithRelationsSchema).nullable(),
  Organization: z.lazy(() => OrganizationWithRelationsSchema).nullable(),
  LabOrderAttachment: z.lazy(() => LabOrderAttachmentWithRelationsSchema).array(),
  LabOrderBilling: z.lazy(() => LabOrderBillingWithRelationsSchema).array(),
  LabOrderIcd: z.lazy(() => LabOrderIcdWithRelationsSchema).array(),
  LabOrderSpecimen: z.lazy(() => LabOrderSpecimenWithRelationsSchema).array(),
  LabOrderSponsoredTestConsent: z.lazy(() => LabOrderSponsoredTestConsentWithRelationsSchema).array(),
  LabOrderStatus: z.lazy(() => LabOrderStatusWithRelationsSchema).array(),
  LabOrderTest: z.lazy(() => LabOrderTestWithRelationsSchema).array(),
}))

// LAB ORDER PARTIAL RELATION SCHEMA
//------------------------------------------------------

export type LabOrderPartialRelations = {
  OrderingProvider?: ProviderPartialWithRelations | null;
  TreatingProvider?: ProviderPartialWithRelations | null;
  Patient?: PatientPartialWithRelations | null;
  Organization?: OrganizationPartialWithRelations | null;
  LabOrderAttachment?: LabOrderAttachmentPartialWithRelations[];
  LabOrderBilling?: LabOrderBillingPartialWithRelations[];
  LabOrderIcd?: LabOrderIcdPartialWithRelations[];
  LabOrderSpecimen?: LabOrderSpecimenPartialWithRelations[];
  LabOrderSponsoredTestConsent?: LabOrderSponsoredTestConsentPartialWithRelations[];
  LabOrderStatus?: LabOrderStatusPartialWithRelations[];
  LabOrderTest?: LabOrderTestPartialWithRelations[];
};

export type LabOrderPartialWithRelations = z.infer<typeof LabOrderPartialSchema> & LabOrderPartialRelations

export const LabOrderPartialWithRelationsSchema: z.ZodType<LabOrderPartialWithRelations> = LabOrderPartialSchema.merge(z.object({
  OrderingProvider: z.lazy(() => ProviderPartialWithRelationsSchema).nullable(),
  TreatingProvider: z.lazy(() => ProviderPartialWithRelationsSchema).nullable(),
  Patient: z.lazy(() => PatientPartialWithRelationsSchema).nullable(),
  Organization: z.lazy(() => OrganizationPartialWithRelationsSchema).nullable(),
  LabOrderAttachment: z.lazy(() => LabOrderAttachmentPartialWithRelationsSchema).array(),
  LabOrderBilling: z.lazy(() => LabOrderBillingPartialWithRelationsSchema).array(),
  LabOrderIcd: z.lazy(() => LabOrderIcdPartialWithRelationsSchema).array(),
  LabOrderSpecimen: z.lazy(() => LabOrderSpecimenPartialWithRelationsSchema).array(),
  LabOrderSponsoredTestConsent: z.lazy(() => LabOrderSponsoredTestConsentPartialWithRelationsSchema).array(),
  LabOrderStatus: z.lazy(() => LabOrderStatusPartialWithRelationsSchema).array(),
  LabOrderTest: z.lazy(() => LabOrderTestPartialWithRelationsSchema).array(),
})).partial()

export type LabOrderWithPartialRelations = z.infer<typeof LabOrderSchema> & LabOrderPartialRelations

export const LabOrderWithPartialRelationsSchema: z.ZodType<LabOrderWithPartialRelations> = LabOrderSchema.merge(z.object({
  OrderingProvider: z.lazy(() => ProviderPartialWithRelationsSchema).nullable(),
  TreatingProvider: z.lazy(() => ProviderPartialWithRelationsSchema).nullable(),
  Patient: z.lazy(() => PatientPartialWithRelationsSchema).nullable(),
  Organization: z.lazy(() => OrganizationPartialWithRelationsSchema).nullable(),
  LabOrderAttachment: z.lazy(() => LabOrderAttachmentPartialWithRelationsSchema).array(),
  LabOrderBilling: z.lazy(() => LabOrderBillingPartialWithRelationsSchema).array(),
  LabOrderIcd: z.lazy(() => LabOrderIcdPartialWithRelationsSchema).array(),
  LabOrderSpecimen: z.lazy(() => LabOrderSpecimenPartialWithRelationsSchema).array(),
  LabOrderSponsoredTestConsent: z.lazy(() => LabOrderSponsoredTestConsentPartialWithRelationsSchema).array(),
  LabOrderStatus: z.lazy(() => LabOrderStatusPartialWithRelationsSchema).array(),
  LabOrderTest: z.lazy(() => LabOrderTestPartialWithRelationsSchema).array(),
}).partial())

/////////////////////////////////////////
// LAB ORDER ATTACHMENT SCHEMA
/////////////////////////////////////////

export const LabOrderAttachmentSchema = z.object({
  Id: z.string(),
  LabOrderId: z.string().nullable(),
  AttachmentId: z.string().nullable(),
  CreatedAt: z.date().nullable(),
  UpdatedAt: z.date().nullable(),
})

export type LabOrderAttachment = z.infer<typeof LabOrderAttachmentSchema>

/////////////////////////////////////////
// LAB ORDER ATTACHMENT PARTIAL SCHEMA
/////////////////////////////////////////

export const LabOrderAttachmentPartialSchema = LabOrderAttachmentSchema.partial()

export type LabOrderAttachmentPartial = z.infer<typeof LabOrderAttachmentPartialSchema>

// LAB ORDER ATTACHMENT RELATION SCHEMA
//------------------------------------------------------

export type LabOrderAttachmentRelations = {
  LabOrder?: LabOrderWithRelations | null;
  Attachment?: AttachmentWithRelations | null;
};

export type LabOrderAttachmentWithRelations = z.infer<typeof LabOrderAttachmentSchema> & LabOrderAttachmentRelations

export const LabOrderAttachmentWithRelationsSchema: z.ZodType<LabOrderAttachmentWithRelations> = LabOrderAttachmentSchema.merge(z.object({
  LabOrder: z.lazy(() => LabOrderWithRelationsSchema).nullable(),
  Attachment: z.lazy(() => AttachmentWithRelationsSchema).nullable(),
}))

// LAB ORDER ATTACHMENT PARTIAL RELATION SCHEMA
//------------------------------------------------------

export type LabOrderAttachmentPartialRelations = {
  LabOrder?: LabOrderPartialWithRelations | null;
  Attachment?: AttachmentPartialWithRelations | null;
};

export type LabOrderAttachmentPartialWithRelations = z.infer<typeof LabOrderAttachmentPartialSchema> & LabOrderAttachmentPartialRelations

export const LabOrderAttachmentPartialWithRelationsSchema: z.ZodType<LabOrderAttachmentPartialWithRelations> = LabOrderAttachmentPartialSchema.merge(z.object({
  LabOrder: z.lazy(() => LabOrderPartialWithRelationsSchema).nullable(),
  Attachment: z.lazy(() => AttachmentPartialWithRelationsSchema).nullable(),
})).partial()

export type LabOrderAttachmentWithPartialRelations = z.infer<typeof LabOrderAttachmentSchema> & LabOrderAttachmentPartialRelations

export const LabOrderAttachmentWithPartialRelationsSchema: z.ZodType<LabOrderAttachmentWithPartialRelations> = LabOrderAttachmentSchema.merge(z.object({
  LabOrder: z.lazy(() => LabOrderPartialWithRelationsSchema).nullable(),
  Attachment: z.lazy(() => AttachmentPartialWithRelationsSchema).nullable(),
}).partial())

/////////////////////////////////////////
// LAB ORDER BILLING SCHEMA
/////////////////////////////////////////

export const LabOrderBillingSchema = z.object({
  Id: z.string(),
  LabOrderId: z.string().nullable(),
  BillToId: z.string().nullable(),
  HealthPalnId: z.string().nullable(),
  PatientStatus: z.string().nullable(),
  SponoseredTestCouponCode: z.string().nullable(),
  CreatedAt: z.date().nullable(),
  UpdatedAt: z.date().nullable(),
})

export type LabOrderBilling = z.infer<typeof LabOrderBillingSchema>

/////////////////////////////////////////
// LAB ORDER BILLING PARTIAL SCHEMA
/////////////////////////////////////////

export const LabOrderBillingPartialSchema = LabOrderBillingSchema.partial()

export type LabOrderBillingPartial = z.infer<typeof LabOrderBillingPartialSchema>

// LAB ORDER BILLING RELATION SCHEMA
//------------------------------------------------------

export type LabOrderBillingRelations = {
  LabOrder?: LabOrderWithRelations | null;
};

export type LabOrderBillingWithRelations = z.infer<typeof LabOrderBillingSchema> & LabOrderBillingRelations

export const LabOrderBillingWithRelationsSchema: z.ZodType<LabOrderBillingWithRelations> = LabOrderBillingSchema.merge(z.object({
  LabOrder: z.lazy(() => LabOrderWithRelationsSchema).nullable(),
}))

// LAB ORDER BILLING PARTIAL RELATION SCHEMA
//------------------------------------------------------

export type LabOrderBillingPartialRelations = {
  LabOrder?: LabOrderPartialWithRelations | null;
};

export type LabOrderBillingPartialWithRelations = z.infer<typeof LabOrderBillingPartialSchema> & LabOrderBillingPartialRelations

export const LabOrderBillingPartialWithRelationsSchema: z.ZodType<LabOrderBillingPartialWithRelations> = LabOrderBillingPartialSchema.merge(z.object({
  LabOrder: z.lazy(() => LabOrderPartialWithRelationsSchema).nullable(),
})).partial()

export type LabOrderBillingWithPartialRelations = z.infer<typeof LabOrderBillingSchema> & LabOrderBillingPartialRelations

export const LabOrderBillingWithPartialRelationsSchema: z.ZodType<LabOrderBillingWithPartialRelations> = LabOrderBillingSchema.merge(z.object({
  LabOrder: z.lazy(() => LabOrderPartialWithRelationsSchema).nullable(),
}).partial())

/////////////////////////////////////////
// LAB ORDER ICD SCHEMA
/////////////////////////////////////////

export const LabOrderIcdSchema = z.object({
  Id: z.string(),
  LabOrderId: z.string().nullable(),
  ICDId: z.string().nullable(),
  CreatedAt: z.date().nullable(),
  UpdatedAt: z.date().nullable(),
})

export type LabOrderIcd = z.infer<typeof LabOrderIcdSchema>

/////////////////////////////////////////
// LAB ORDER ICD PARTIAL SCHEMA
/////////////////////////////////////////

export const LabOrderIcdPartialSchema = LabOrderIcdSchema.partial()

export type LabOrderIcdPartial = z.infer<typeof LabOrderIcdPartialSchema>

// LAB ORDER ICD RELATION SCHEMA
//------------------------------------------------------

export type LabOrderIcdRelations = {
  LabOrder?: LabOrderWithRelations | null;
  ICD?: ICDWithRelations | null;
};

export type LabOrderIcdWithRelations = z.infer<typeof LabOrderIcdSchema> & LabOrderIcdRelations

export const LabOrderIcdWithRelationsSchema: z.ZodType<LabOrderIcdWithRelations> = LabOrderIcdSchema.merge(z.object({
  LabOrder: z.lazy(() => LabOrderWithRelationsSchema).nullable(),
  ICD: z.lazy(() => ICDWithRelationsSchema).nullable(),
}))

// LAB ORDER ICD PARTIAL RELATION SCHEMA
//------------------------------------------------------

export type LabOrderIcdPartialRelations = {
  LabOrder?: LabOrderPartialWithRelations | null;
  ICD?: ICDPartialWithRelations | null;
};

export type LabOrderIcdPartialWithRelations = z.infer<typeof LabOrderIcdPartialSchema> & LabOrderIcdPartialRelations

export const LabOrderIcdPartialWithRelationsSchema: z.ZodType<LabOrderIcdPartialWithRelations> = LabOrderIcdPartialSchema.merge(z.object({
  LabOrder: z.lazy(() => LabOrderPartialWithRelationsSchema).nullable(),
  ICD: z.lazy(() => ICDPartialWithRelationsSchema).nullable(),
})).partial()

export type LabOrderIcdWithPartialRelations = z.infer<typeof LabOrderIcdSchema> & LabOrderIcdPartialRelations

export const LabOrderIcdWithPartialRelationsSchema: z.ZodType<LabOrderIcdWithPartialRelations> = LabOrderIcdSchema.merge(z.object({
  LabOrder: z.lazy(() => LabOrderPartialWithRelationsSchema).nullable(),
  ICD: z.lazy(() => ICDPartialWithRelationsSchema).nullable(),
}).partial())

/////////////////////////////////////////
// LAB ORDER SPECIMEN SCHEMA
/////////////////////////////////////////

export const LabOrderSpecimenSchema = z.object({
  Id: z.string(),
  LabOrderId: z.string().nullable(),
  SpecimenType: z.string().nullable(),
  SpecimenCount: z.string().nullable(),
  CollectedDate: z.date().nullable(),
  CollectedTime: z.string().nullable(),
  SpecimenID: z.string().nullable(),
  BodySite: z.string().nullable(),
  TumorType: z.string().nullable(),
  Fixative: z.string().nullable(),
  FixativeDuration: z.string().nullable(),
  ColdIschemicTime: z.string().nullable(),
  CreatedAt: z.date().nullable(),
  UpdatedAt: z.date().nullable(),
})

export type LabOrderSpecimen = z.infer<typeof LabOrderSpecimenSchema>

/////////////////////////////////////////
// LAB ORDER SPECIMEN PARTIAL SCHEMA
/////////////////////////////////////////

export const LabOrderSpecimenPartialSchema = LabOrderSpecimenSchema.partial()

export type LabOrderSpecimenPartial = z.infer<typeof LabOrderSpecimenPartialSchema>

// LAB ORDER SPECIMEN RELATION SCHEMA
//------------------------------------------------------

export type LabOrderSpecimenRelations = {
  LabOrder?: LabOrderWithRelations | null;
};

export type LabOrderSpecimenWithRelations = z.infer<typeof LabOrderSpecimenSchema> & LabOrderSpecimenRelations

export const LabOrderSpecimenWithRelationsSchema: z.ZodType<LabOrderSpecimenWithRelations> = LabOrderSpecimenSchema.merge(z.object({
  LabOrder: z.lazy(() => LabOrderWithRelationsSchema).nullable(),
}))

// LAB ORDER SPECIMEN PARTIAL RELATION SCHEMA
//------------------------------------------------------

export type LabOrderSpecimenPartialRelations = {
  LabOrder?: LabOrderPartialWithRelations | null;
};

export type LabOrderSpecimenPartialWithRelations = z.infer<typeof LabOrderSpecimenPartialSchema> & LabOrderSpecimenPartialRelations

export const LabOrderSpecimenPartialWithRelationsSchema: z.ZodType<LabOrderSpecimenPartialWithRelations> = LabOrderSpecimenPartialSchema.merge(z.object({
  LabOrder: z.lazy(() => LabOrderPartialWithRelationsSchema).nullable(),
})).partial()

export type LabOrderSpecimenWithPartialRelations = z.infer<typeof LabOrderSpecimenSchema> & LabOrderSpecimenPartialRelations

export const LabOrderSpecimenWithPartialRelationsSchema: z.ZodType<LabOrderSpecimenWithPartialRelations> = LabOrderSpecimenSchema.merge(z.object({
  LabOrder: z.lazy(() => LabOrderPartialWithRelationsSchema).nullable(),
}).partial())

/////////////////////////////////////////
// LAB ORDER SPONSORED TEST CONSENT SCHEMA
/////////////////////////////////////////

export const LabOrderSponsoredTestConsentSchema = z.object({
  Id: z.string(),
  LabOrderId: z.string().nullable(),
  SponsoredCasandraTestId: z.string().nullable(),
  ProviderName: z.string().nullable(),
  ProviderNPI: z.string().nullable(),
  ConsentAt: z.date().nullable(),
  CreatedAt: z.date().nullable(),
  UpdatedAt: z.date().nullable(),
})

export type LabOrderSponsoredTestConsent = z.infer<typeof LabOrderSponsoredTestConsentSchema>

/////////////////////////////////////////
// LAB ORDER SPONSORED TEST CONSENT PARTIAL SCHEMA
/////////////////////////////////////////

export const LabOrderSponsoredTestConsentPartialSchema = LabOrderSponsoredTestConsentSchema.partial()

export type LabOrderSponsoredTestConsentPartial = z.infer<typeof LabOrderSponsoredTestConsentPartialSchema>

// LAB ORDER SPONSORED TEST CONSENT RELATION SCHEMA
//------------------------------------------------------

export type LabOrderSponsoredTestConsentRelations = {
  SponsoredTest?: SponsoredTestWithRelations | null;
  LabOrder?: LabOrderWithRelations | null;
};

export type LabOrderSponsoredTestConsentWithRelations = z.infer<typeof LabOrderSponsoredTestConsentSchema> & LabOrderSponsoredTestConsentRelations

export const LabOrderSponsoredTestConsentWithRelationsSchema: z.ZodType<LabOrderSponsoredTestConsentWithRelations> = LabOrderSponsoredTestConsentSchema.merge(z.object({
  SponsoredTest: z.lazy(() => SponsoredTestWithRelationsSchema).nullable(),
  LabOrder: z.lazy(() => LabOrderWithRelationsSchema).nullable(),
}))

// LAB ORDER SPONSORED TEST CONSENT PARTIAL RELATION SCHEMA
//------------------------------------------------------

export type LabOrderSponsoredTestConsentPartialRelations = {
  SponsoredTest?: SponsoredTestPartialWithRelations | null;
  LabOrder?: LabOrderPartialWithRelations | null;
};

export type LabOrderSponsoredTestConsentPartialWithRelations = z.infer<typeof LabOrderSponsoredTestConsentPartialSchema> & LabOrderSponsoredTestConsentPartialRelations

export const LabOrderSponsoredTestConsentPartialWithRelationsSchema: z.ZodType<LabOrderSponsoredTestConsentPartialWithRelations> = LabOrderSponsoredTestConsentPartialSchema.merge(z.object({
  SponsoredTest: z.lazy(() => SponsoredTestPartialWithRelationsSchema).nullable(),
  LabOrder: z.lazy(() => LabOrderPartialWithRelationsSchema).nullable(),
})).partial()

export type LabOrderSponsoredTestConsentWithPartialRelations = z.infer<typeof LabOrderSponsoredTestConsentSchema> & LabOrderSponsoredTestConsentPartialRelations

export const LabOrderSponsoredTestConsentWithPartialRelationsSchema: z.ZodType<LabOrderSponsoredTestConsentWithPartialRelations> = LabOrderSponsoredTestConsentSchema.merge(z.object({
  SponsoredTest: z.lazy(() => SponsoredTestPartialWithRelationsSchema).nullable(),
  LabOrder: z.lazy(() => LabOrderPartialWithRelationsSchema).nullable(),
}).partial())

/////////////////////////////////////////
// LAB ORDER STATUS SCHEMA
/////////////////////////////////////////

export const LabOrderStatusSchema = z.object({
  Id: z.string(),
  LabOrderId: z.string().nullable(),
  Status: z.string().nullable(),
  StatusDate: z.date().nullable(),
  CreatedAt: z.date().nullable(),
  UpdatedAt: z.date().nullable(),
})

export type LabOrderStatus = z.infer<typeof LabOrderStatusSchema>

/////////////////////////////////////////
// LAB ORDER STATUS PARTIAL SCHEMA
/////////////////////////////////////////

export const LabOrderStatusPartialSchema = LabOrderStatusSchema.partial()

export type LabOrderStatusPartial = z.infer<typeof LabOrderStatusPartialSchema>

// LAB ORDER STATUS RELATION SCHEMA
//------------------------------------------------------

export type LabOrderStatusRelations = {
  LabOrder?: LabOrderWithRelations | null;
};

export type LabOrderStatusWithRelations = z.infer<typeof LabOrderStatusSchema> & LabOrderStatusRelations

export const LabOrderStatusWithRelationsSchema: z.ZodType<LabOrderStatusWithRelations> = LabOrderStatusSchema.merge(z.object({
  LabOrder: z.lazy(() => LabOrderWithRelationsSchema).nullable(),
}))

// LAB ORDER STATUS PARTIAL RELATION SCHEMA
//------------------------------------------------------

export type LabOrderStatusPartialRelations = {
  LabOrder?: LabOrderPartialWithRelations | null;
};

export type LabOrderStatusPartialWithRelations = z.infer<typeof LabOrderStatusPartialSchema> & LabOrderStatusPartialRelations

export const LabOrderStatusPartialWithRelationsSchema: z.ZodType<LabOrderStatusPartialWithRelations> = LabOrderStatusPartialSchema.merge(z.object({
  LabOrder: z.lazy(() => LabOrderPartialWithRelationsSchema).nullable(),
})).partial()

export type LabOrderStatusWithPartialRelations = z.infer<typeof LabOrderStatusSchema> & LabOrderStatusPartialRelations

export const LabOrderStatusWithPartialRelationsSchema: z.ZodType<LabOrderStatusWithPartialRelations> = LabOrderStatusSchema.merge(z.object({
  LabOrder: z.lazy(() => LabOrderPartialWithRelationsSchema).nullable(),
}).partial())

/////////////////////////////////////////
// LAB ORDER TEST SCHEMA
/////////////////////////////////////////

export const LabOrderTestSchema = z.object({
  Id: z.string(),
  LabOrderId: z.string().nullable(),
  TestId: z.number().nullable(),
  CreatedAt: z.date().nullable(),
  UpdatedAt: z.date().nullable(),
})

export type LabOrderTest = z.infer<typeof LabOrderTestSchema>

/////////////////////////////////////////
// LAB ORDER TEST PARTIAL SCHEMA
/////////////////////////////////////////

export const LabOrderTestPartialSchema = LabOrderTestSchema.partial()

export type LabOrderTestPartial = z.infer<typeof LabOrderTestPartialSchema>

// LAB ORDER TEST RELATION SCHEMA
//------------------------------------------------------

export type LabOrderTestRelations = {
  LabOrder?: LabOrderWithRelations | null;
  TestCatalog?: TestCatalogWithRelations | null;
};

export type LabOrderTestWithRelations = z.infer<typeof LabOrderTestSchema> & LabOrderTestRelations

export const LabOrderTestWithRelationsSchema: z.ZodType<LabOrderTestWithRelations> = LabOrderTestSchema.merge(z.object({
  LabOrder: z.lazy(() => LabOrderWithRelationsSchema).nullable(),
  TestCatalog: z.lazy(() => TestCatalogWithRelationsSchema).nullable(),
}))

// LAB ORDER TEST PARTIAL RELATION SCHEMA
//------------------------------------------------------

export type LabOrderTestPartialRelations = {
  LabOrder?: LabOrderPartialWithRelations | null;
  TestCatalog?: TestCatalogPartialWithRelations | null;
};

export type LabOrderTestPartialWithRelations = z.infer<typeof LabOrderTestPartialSchema> & LabOrderTestPartialRelations

export const LabOrderTestPartialWithRelationsSchema: z.ZodType<LabOrderTestPartialWithRelations> = LabOrderTestPartialSchema.merge(z.object({
  LabOrder: z.lazy(() => LabOrderPartialWithRelationsSchema).nullable(),
  TestCatalog: z.lazy(() => TestCatalogPartialWithRelationsSchema).nullable(),
})).partial()

export type LabOrderTestWithPartialRelations = z.infer<typeof LabOrderTestSchema> & LabOrderTestPartialRelations

export const LabOrderTestWithPartialRelationsSchema: z.ZodType<LabOrderTestWithPartialRelations> = LabOrderTestSchema.merge(z.object({
  LabOrder: z.lazy(() => LabOrderPartialWithRelationsSchema).nullable(),
  TestCatalog: z.lazy(() => TestCatalogPartialWithRelationsSchema).nullable(),
}).partial())

/////////////////////////////////////////
// LOINC COMPONENT HIERARCHY SCHEMA
/////////////////////////////////////////

export const LoincComponentHierarchySchema = z.object({
  Id: z.bigint(),
  ParentId: z.bigint(),
  Level: z.number(),
  Code: z.string(),
  Sequence: z.string(),
  CodeText: z.string(),
  Component: z.string(),
  Property: z.string(),
  Timing: z.string(),
  Scale: z.string(),
  Method: z.string(),
})

export type LoincComponentHierarchy = z.infer<typeof LoincComponentHierarchySchema>

/////////////////////////////////////////
// LOINC COMPONENT HIERARCHY PARTIAL SCHEMA
/////////////////////////////////////////

export const LoincComponentHierarchyPartialSchema = LoincComponentHierarchySchema.partial()

export type LoincComponentHierarchyPartial = z.infer<typeof LoincComponentHierarchyPartialSchema>

/////////////////////////////////////////
// LOINC PANEL HIERARCHY SCHEMA
/////////////////////////////////////////

export const LoincPanelHierarchySchema = z.object({
  Id: z.number(),
  ParentId: z.number(),
  Level: z.number(),
  Code: z.string(),
  Sequence: z.string(),
  CodeText: z.string(),
  Component: z.string(),
  Property: z.string(),
  Timing: z.string(),
  Scale: z.string(),
  Method: z.string(),
})

export type LoincPanelHierarchy = z.infer<typeof LoincPanelHierarchySchema>

/////////////////////////////////////////
// LOINC PANEL HIERARCHY PARTIAL SCHEMA
/////////////////////////////////////////

export const LoincPanelHierarchyPartialSchema = LoincPanelHierarchySchema.partial()

export type LoincPanelHierarchyPartial = z.infer<typeof LoincPanelHierarchyPartialSchema>

/////////////////////////////////////////
// LOINC UNIVERAL LAB ORDERS SCHEMA
/////////////////////////////////////////

export const LoincUniveralLabOrdersSchema = z.object({
  Loinc_Num: z.string(),
  Long_Common_Name: z.string().nullable(),
  ORDER_OBS: z.string().nullable(),
})

export type LoincUniveralLabOrders = z.infer<typeof LoincUniveralLabOrdersSchema>

/////////////////////////////////////////
// LOINC UNIVERAL LAB ORDERS PARTIAL SCHEMA
/////////////////////////////////////////

export const LoincUniveralLabOrdersPartialSchema = LoincUniveralLabOrdersSchema.partial()

export type LoincUniveralLabOrdersPartial = z.infer<typeof LoincUniveralLabOrdersPartialSchema>

/////////////////////////////////////////
// ORGANIZATION SCHEMA
/////////////////////////////////////////

export const OrganizationSchema = z.object({
  Id: z.string(),
  href: z.string().nullable(),
  ParentId: z.string().nullable(),
  Level: z.number().nullable(),
  ParentOrgName: z.string().nullable(),
  OrgName: z.string().nullable(),
  OrgType: z.string().nullable(),
  OrgSpecialty: z.string().nullable(),
  OrgAddress: z.string().nullable(),
  OrgCity: z.string().nullable(),
  OrgState: z.string().nullable(),
  OrgZip: z.string().nullable(),
})

export type Organization = z.infer<typeof OrganizationSchema>

/////////////////////////////////////////
// ORGANIZATION PARTIAL SCHEMA
/////////////////////////////////////////

export const OrganizationPartialSchema = OrganizationSchema.partial()

export type OrganizationPartial = z.infer<typeof OrganizationPartialSchema>

// ORGANIZATION RELATION SCHEMA
//------------------------------------------------------

export type OrganizationRelations = {
  LabOrder: LabOrderWithRelations[];
  Organization?: OrganizationWithRelations | null;
  ChildOrganization: OrganizationWithRelations[];
  OrganizationFavoriteTest: OrganizationFavoriteTestWithRelations[];
  PatientOrganization: PatientOrganizationWithRelations[];
  ProviderOrganization: ProviderOrganizationWithRelations[];
};

export type OrganizationWithRelations = z.infer<typeof OrganizationSchema> & OrganizationRelations

export const OrganizationWithRelationsSchema: z.ZodType<OrganizationWithRelations> = OrganizationSchema.merge(z.object({
  LabOrder: z.lazy(() => LabOrderWithRelationsSchema).array(),
  Organization: z.lazy(() => OrganizationWithRelationsSchema).nullable(),
  ChildOrganization: z.lazy(() => OrganizationWithRelationsSchema).array(),
  OrganizationFavoriteTest: z.lazy(() => OrganizationFavoriteTestWithRelationsSchema).array(),
  PatientOrganization: z.lazy(() => PatientOrganizationWithRelationsSchema).array(),
  ProviderOrganization: z.lazy(() => ProviderOrganizationWithRelationsSchema).array(),
}))

// ORGANIZATION PARTIAL RELATION SCHEMA
//------------------------------------------------------

export type OrganizationPartialRelations = {
  LabOrder?: LabOrderPartialWithRelations[];
  Organization?: OrganizationPartialWithRelations | null;
  ChildOrganization?: OrganizationPartialWithRelations[];
  OrganizationFavoriteTest?: OrganizationFavoriteTestPartialWithRelations[];
  PatientOrganization?: PatientOrganizationPartialWithRelations[];
  ProviderOrganization?: ProviderOrganizationPartialWithRelations[];
};

export type OrganizationPartialWithRelations = z.infer<typeof OrganizationPartialSchema> & OrganizationPartialRelations

export const OrganizationPartialWithRelationsSchema: z.ZodType<OrganizationPartialWithRelations> = OrganizationPartialSchema.merge(z.object({
  LabOrder: z.lazy(() => LabOrderPartialWithRelationsSchema).array(),
  Organization: z.lazy(() => OrganizationPartialWithRelationsSchema).nullable(),
  ChildOrganization: z.lazy(() => OrganizationPartialWithRelationsSchema).array(),
  OrganizationFavoriteTest: z.lazy(() => OrganizationFavoriteTestPartialWithRelationsSchema).array(),
  PatientOrganization: z.lazy(() => PatientOrganizationPartialWithRelationsSchema).array(),
  ProviderOrganization: z.lazy(() => ProviderOrganizationPartialWithRelationsSchema).array(),
})).partial()

export type OrganizationWithPartialRelations = z.infer<typeof OrganizationSchema> & OrganizationPartialRelations

export const OrganizationWithPartialRelationsSchema: z.ZodType<OrganizationWithPartialRelations> = OrganizationSchema.merge(z.object({
  LabOrder: z.lazy(() => LabOrderPartialWithRelationsSchema).array(),
  Organization: z.lazy(() => OrganizationPartialWithRelationsSchema).nullable(),
  ChildOrganization: z.lazy(() => OrganizationPartialWithRelationsSchema).array(),
  OrganizationFavoriteTest: z.lazy(() => OrganizationFavoriteTestPartialWithRelationsSchema).array(),
  PatientOrganization: z.lazy(() => PatientOrganizationPartialWithRelationsSchema).array(),
  ProviderOrganization: z.lazy(() => ProviderOrganizationPartialWithRelationsSchema).array(),
}).partial())

/////////////////////////////////////////
// ORGANIZATION ENDPOINT SCHEMA
/////////////////////////////////////////

export const OrganizationEndpointSchema = z.object({
  Id: z.string(),
  OrgName: z.string().nullable(),
  EHRVendor: z.string().nullable(),
  FHIRVersion: z.string().nullable(),
  Endpoint: z.string().nullable(),
})

export type OrganizationEndpoint = z.infer<typeof OrganizationEndpointSchema>

/////////////////////////////////////////
// ORGANIZATION ENDPOINT PARTIAL SCHEMA
/////////////////////////////////////////

export const OrganizationEndpointPartialSchema = OrganizationEndpointSchema.partial()

export type OrganizationEndpointPartial = z.infer<typeof OrganizationEndpointPartialSchema>

/////////////////////////////////////////
// ORGANIZATION FAVORITE TEST SCHEMA
/////////////////////////////////////////

export const OrganizationFavoriteTestSchema = z.object({
  Id: z.string(),
  OrganizationId: z.string().nullable(),
  ParentId: z.string().nullable(),
  ParentName: z.string().nullable(),
  Level: z.number().nullable(),
  TestId: z.number().nullable(),
  CreatedAt: z.date().nullable(),
  UpdatedAt: z.date().nullable(),
})

export type OrganizationFavoriteTest = z.infer<typeof OrganizationFavoriteTestSchema>

/////////////////////////////////////////
// ORGANIZATION FAVORITE TEST PARTIAL SCHEMA
/////////////////////////////////////////

export const OrganizationFavoriteTestPartialSchema = OrganizationFavoriteTestSchema.partial()

export type OrganizationFavoriteTestPartial = z.infer<typeof OrganizationFavoriteTestPartialSchema>

// ORGANIZATION FAVORITE TEST RELATION SCHEMA
//------------------------------------------------------

export type OrganizationFavoriteTestRelations = {
  Organization?: OrganizationWithRelations | null;
  TestCatalog?: TestCatalogWithRelations | null;
};

export type OrganizationFavoriteTestWithRelations = z.infer<typeof OrganizationFavoriteTestSchema> & OrganizationFavoriteTestRelations

export const OrganizationFavoriteTestWithRelationsSchema: z.ZodType<OrganizationFavoriteTestWithRelations> = OrganizationFavoriteTestSchema.merge(z.object({
  Organization: z.lazy(() => OrganizationWithRelationsSchema).nullable(),
  TestCatalog: z.lazy(() => TestCatalogWithRelationsSchema).nullable(),
}))

// ORGANIZATION FAVORITE TEST PARTIAL RELATION SCHEMA
//------------------------------------------------------

export type OrganizationFavoriteTestPartialRelations = {
  Organization?: OrganizationPartialWithRelations | null;
  TestCatalog?: TestCatalogPartialWithRelations | null;
};

export type OrganizationFavoriteTestPartialWithRelations = z.infer<typeof OrganizationFavoriteTestPartialSchema> & OrganizationFavoriteTestPartialRelations

export const OrganizationFavoriteTestPartialWithRelationsSchema: z.ZodType<OrganizationFavoriteTestPartialWithRelations> = OrganizationFavoriteTestPartialSchema.merge(z.object({
  Organization: z.lazy(() => OrganizationPartialWithRelationsSchema).nullable(),
  TestCatalog: z.lazy(() => TestCatalogPartialWithRelationsSchema).nullable(),
})).partial()

export type OrganizationFavoriteTestWithPartialRelations = z.infer<typeof OrganizationFavoriteTestSchema> & OrganizationFavoriteTestPartialRelations

export const OrganizationFavoriteTestWithPartialRelationsSchema: z.ZodType<OrganizationFavoriteTestWithPartialRelations> = OrganizationFavoriteTestSchema.merge(z.object({
  Organization: z.lazy(() => OrganizationPartialWithRelationsSchema).nullable(),
  TestCatalog: z.lazy(() => TestCatalogPartialWithRelationsSchema).nullable(),
}).partial())

/////////////////////////////////////////
// PATIENT SCHEMA
/////////////////////////////////////////

export const PatientSchema = z.object({
  Id: z.string(),
  FirstName: z.string().nullable(),
  LastName: z.string().nullable(),
  DateOfBirth: z.date().nullable(),
  Gender: z.string().nullable(),
  Email: z.string().nullable(),
  Mobile: z.string().nullable(),
  CreatedAt: z.date().nullable(),
  UpdatedAt: z.date().nullable(),
})

export type Patient = z.infer<typeof PatientSchema>

/////////////////////////////////////////
// PATIENT PARTIAL SCHEMA
/////////////////////////////////////////

export const PatientPartialSchema = PatientSchema.partial()

export type PatientPartial = z.infer<typeof PatientPartialSchema>

// PATIENT RELATION SCHEMA
//------------------------------------------------------

export type PatientRelations = {
  LabOrder: LabOrderWithRelations[];
  PatientOrganization: PatientOrganizationWithRelations[];
};

export type PatientWithRelations = z.infer<typeof PatientSchema> & PatientRelations

export const PatientWithRelationsSchema: z.ZodType<PatientWithRelations> = PatientSchema.merge(z.object({
  LabOrder: z.lazy(() => LabOrderWithRelationsSchema).array(),
  PatientOrganization: z.lazy(() => PatientOrganizationWithRelationsSchema).array(),
}))

// PATIENT PARTIAL RELATION SCHEMA
//------------------------------------------------------

export type PatientPartialRelations = {
  LabOrder?: LabOrderPartialWithRelations[];
  PatientOrganization?: PatientOrganizationPartialWithRelations[];
};

export type PatientPartialWithRelations = z.infer<typeof PatientPartialSchema> & PatientPartialRelations

export const PatientPartialWithRelationsSchema: z.ZodType<PatientPartialWithRelations> = PatientPartialSchema.merge(z.object({
  LabOrder: z.lazy(() => LabOrderPartialWithRelationsSchema).array(),
  PatientOrganization: z.lazy(() => PatientOrganizationPartialWithRelationsSchema).array(),
})).partial()

export type PatientWithPartialRelations = z.infer<typeof PatientSchema> & PatientPartialRelations

export const PatientWithPartialRelationsSchema: z.ZodType<PatientWithPartialRelations> = PatientSchema.merge(z.object({
  LabOrder: z.lazy(() => LabOrderPartialWithRelationsSchema).array(),
  PatientOrganization: z.lazy(() => PatientOrganizationPartialWithRelationsSchema).array(),
}).partial())

/////////////////////////////////////////
// PATIENT ORGANIZATION SCHEMA
/////////////////////////////////////////

export const PatientOrganizationSchema = z.object({
  Id: z.string(),
  PatientId: z.string(),
  OrganizationId: z.string(),
  MRN: z.string().nullable(),
  Mobile: z.string().nullable(),
  Email: z.string().nullable(),
})

export type PatientOrganization = z.infer<typeof PatientOrganizationSchema>

/////////////////////////////////////////
// PATIENT ORGANIZATION PARTIAL SCHEMA
/////////////////////////////////////////

export const PatientOrganizationPartialSchema = PatientOrganizationSchema.partial()

export type PatientOrganizationPartial = z.infer<typeof PatientOrganizationPartialSchema>

// PATIENT ORGANIZATION RELATION SCHEMA
//------------------------------------------------------

export type PatientOrganizationRelations = {
  Organization: OrganizationWithRelations;
  Patient: PatientWithRelations;
};

export type PatientOrganizationWithRelations = z.infer<typeof PatientOrganizationSchema> & PatientOrganizationRelations

export const PatientOrganizationWithRelationsSchema: z.ZodType<PatientOrganizationWithRelations> = PatientOrganizationSchema.merge(z.object({
  Organization: z.lazy(() => OrganizationWithRelationsSchema),
  Patient: z.lazy(() => PatientWithRelationsSchema),
}))

// PATIENT ORGANIZATION PARTIAL RELATION SCHEMA
//------------------------------------------------------

export type PatientOrganizationPartialRelations = {
  Organization?: OrganizationPartialWithRelations;
  Patient?: PatientPartialWithRelations;
};

export type PatientOrganizationPartialWithRelations = z.infer<typeof PatientOrganizationPartialSchema> & PatientOrganizationPartialRelations

export const PatientOrganizationPartialWithRelationsSchema: z.ZodType<PatientOrganizationPartialWithRelations> = PatientOrganizationPartialSchema.merge(z.object({
  Organization: z.lazy(() => OrganizationPartialWithRelationsSchema),
  Patient: z.lazy(() => PatientPartialWithRelationsSchema),
})).partial()

export type PatientOrganizationWithPartialRelations = z.infer<typeof PatientOrganizationSchema> & PatientOrganizationPartialRelations

export const PatientOrganizationWithPartialRelationsSchema: z.ZodType<PatientOrganizationWithPartialRelations> = PatientOrganizationSchema.merge(z.object({
  Organization: z.lazy(() => OrganizationPartialWithRelationsSchema),
  Patient: z.lazy(() => PatientPartialWithRelationsSchema),
}).partial())

/////////////////////////////////////////
// POST SCHEMA
/////////////////////////////////////////

export const PostSchema = z.object({
  id: z.number(),
  name: z.string(),
  createdAt: z.date(),
  updatedAt: z.date(),
})

export type Post = z.infer<typeof PostSchema>

/////////////////////////////////////////
// POST PARTIAL SCHEMA
/////////////////////////////////////////

export const PostPartialSchema = PostSchema.partial()

export type PostPartial = z.infer<typeof PostPartialSchema>

/////////////////////////////////////////
// PROVIDER SCHEMA
/////////////////////////////////////////

export const ProviderSchema = z.object({
  Id: z.string(),
  href: z.string().nullable(),
  NPI: z.string().nullable(),
  Name: z.string().nullable(),
  Email: z.string().nullable(),
  Credentials: z.string().nullable(),
  Specialty: z.string().nullable(),
  Aboutme: z.string().nullable(),
  Gender: z.string().nullable(),
  ProviderType: z.string().nullable(),
  Affiliation: z.string().nullable(),
  ProceduresAndResearch: z.string().nullable(),
  SpecialInterests: z.string().nullable(),
  UserAttributeId: z.string().nullable(),
})

export type Provider = z.infer<typeof ProviderSchema>

/////////////////////////////////////////
// PROVIDER PARTIAL SCHEMA
/////////////////////////////////////////

export const ProviderPartialSchema = ProviderSchema.partial()

export type ProviderPartial = z.infer<typeof ProviderPartialSchema>

// PROVIDER RELATION SCHEMA
//------------------------------------------------------

export type ProviderRelations = {
  OrderingProviderLabOrder: LabOrderWithRelations[];
  TreatingProviderLabOrder: LabOrderWithRelations[];
  UserAttribute?: UserAttributeWithRelations | null;
  ProviderEducation: ProviderEducationWithRelations[];
  ProviderFavoriteTest: ProviderFavoriteTestWithRelations[];
  ProviderOrganization: ProviderOrganizationWithRelations[];
};

export type ProviderWithRelations = z.infer<typeof ProviderSchema> & ProviderRelations

export const ProviderWithRelationsSchema: z.ZodType<ProviderWithRelations> = ProviderSchema.merge(z.object({
  OrderingProviderLabOrder: z.lazy(() => LabOrderWithRelationsSchema).array(),
  TreatingProviderLabOrder: z.lazy(() => LabOrderWithRelationsSchema).array(),
  UserAttribute: z.lazy(() => UserAttributeWithRelationsSchema).nullable(),
  ProviderEducation: z.lazy(() => ProviderEducationWithRelationsSchema).array(),
  ProviderFavoriteTest: z.lazy(() => ProviderFavoriteTestWithRelationsSchema).array(),
  ProviderOrganization: z.lazy(() => ProviderOrganizationWithRelationsSchema).array(),
}))

// PROVIDER PARTIAL RELATION SCHEMA
//------------------------------------------------------

export type ProviderPartialRelations = {
  OrderingProviderLabOrder?: LabOrderPartialWithRelations[];
  TreatingProviderLabOrder?: LabOrderPartialWithRelations[];
  UserAttribute?: UserAttributePartialWithRelations | null;
  ProviderEducation?: ProviderEducationPartialWithRelations[];
  ProviderFavoriteTest?: ProviderFavoriteTestPartialWithRelations[];
  ProviderOrganization?: ProviderOrganizationPartialWithRelations[];
};

export type ProviderPartialWithRelations = z.infer<typeof ProviderPartialSchema> & ProviderPartialRelations

export const ProviderPartialWithRelationsSchema: z.ZodType<ProviderPartialWithRelations> = ProviderPartialSchema.merge(z.object({
  OrderingProviderLabOrder: z.lazy(() => LabOrderPartialWithRelationsSchema).array(),
  TreatingProviderLabOrder: z.lazy(() => LabOrderPartialWithRelationsSchema).array(),
  UserAttribute: z.lazy(() => UserAttributePartialWithRelationsSchema).nullable(),
  ProviderEducation: z.lazy(() => ProviderEducationPartialWithRelationsSchema).array(),
  ProviderFavoriteTest: z.lazy(() => ProviderFavoriteTestPartialWithRelationsSchema).array(),
  ProviderOrganization: z.lazy(() => ProviderOrganizationPartialWithRelationsSchema).array(),
})).partial()

export type ProviderWithPartialRelations = z.infer<typeof ProviderSchema> & ProviderPartialRelations

export const ProviderWithPartialRelationsSchema: z.ZodType<ProviderWithPartialRelations> = ProviderSchema.merge(z.object({
  OrderingProviderLabOrder: z.lazy(() => LabOrderPartialWithRelationsSchema).array(),
  TreatingProviderLabOrder: z.lazy(() => LabOrderPartialWithRelationsSchema).array(),
  UserAttribute: z.lazy(() => UserAttributePartialWithRelationsSchema).nullable(),
  ProviderEducation: z.lazy(() => ProviderEducationPartialWithRelationsSchema).array(),
  ProviderFavoriteTest: z.lazy(() => ProviderFavoriteTestPartialWithRelationsSchema).array(),
  ProviderOrganization: z.lazy(() => ProviderOrganizationPartialWithRelationsSchema).array(),
}).partial())

/////////////////////////////////////////
// PROVIDER EDUCATION SCHEMA
/////////////////////////////////////////

export const ProviderEducationSchema = z.object({
  Id: z.string(),
  ProviderId: z.string(),
  ProviderNPI: z.string().nullable(),
  Name: z.string().nullable(),
  EducationType: z.string().nullable(),
  SchoolName: z.string().nullable(),
  AreaOfEducation: z.string().nullable(),
})

export type ProviderEducation = z.infer<typeof ProviderEducationSchema>

/////////////////////////////////////////
// PROVIDER EDUCATION PARTIAL SCHEMA
/////////////////////////////////////////

export const ProviderEducationPartialSchema = ProviderEducationSchema.partial()

export type ProviderEducationPartial = z.infer<typeof ProviderEducationPartialSchema>

// PROVIDER EDUCATION RELATION SCHEMA
//------------------------------------------------------

export type ProviderEducationRelations = {
  Provider: ProviderWithRelations;
};

export type ProviderEducationWithRelations = z.infer<typeof ProviderEducationSchema> & ProviderEducationRelations

export const ProviderEducationWithRelationsSchema: z.ZodType<ProviderEducationWithRelations> = ProviderEducationSchema.merge(z.object({
  Provider: z.lazy(() => ProviderWithRelationsSchema),
}))

// PROVIDER EDUCATION PARTIAL RELATION SCHEMA
//------------------------------------------------------

export type ProviderEducationPartialRelations = {
  Provider?: ProviderPartialWithRelations;
};

export type ProviderEducationPartialWithRelations = z.infer<typeof ProviderEducationPartialSchema> & ProviderEducationPartialRelations

export const ProviderEducationPartialWithRelationsSchema: z.ZodType<ProviderEducationPartialWithRelations> = ProviderEducationPartialSchema.merge(z.object({
  Provider: z.lazy(() => ProviderPartialWithRelationsSchema),
})).partial()

export type ProviderEducationWithPartialRelations = z.infer<typeof ProviderEducationSchema> & ProviderEducationPartialRelations

export const ProviderEducationWithPartialRelationsSchema: z.ZodType<ProviderEducationWithPartialRelations> = ProviderEducationSchema.merge(z.object({
  Provider: z.lazy(() => ProviderPartialWithRelationsSchema),
}).partial())

/////////////////////////////////////////
// PROVIDER FAVORITE TEST SCHEMA
/////////////////////////////////////////

export const ProviderFavoriteTestSchema = z.object({
  Id: z.string(),
  ProviderId: z.string().nullable(),
  ParentId: z.string().nullable(),
  ParentName: z.string().nullable(),
  Level: z.number().nullable(),
  TestId: z.number().nullable(),
  CreatedAt: z.date().nullable(),
  UpdatedAt: z.date().nullable(),
})

export type ProviderFavoriteTest = z.infer<typeof ProviderFavoriteTestSchema>

/////////////////////////////////////////
// PROVIDER FAVORITE TEST PARTIAL SCHEMA
/////////////////////////////////////////

export const ProviderFavoriteTestPartialSchema = ProviderFavoriteTestSchema.partial()

export type ProviderFavoriteTestPartial = z.infer<typeof ProviderFavoriteTestPartialSchema>

// PROVIDER FAVORITE TEST RELATION SCHEMA
//------------------------------------------------------

export type ProviderFavoriteTestRelations = {
  Provider?: ProviderWithRelations | null;
  TestCatalog?: TestCatalogWithRelations | null;
};

export type ProviderFavoriteTestWithRelations = z.infer<typeof ProviderFavoriteTestSchema> & ProviderFavoriteTestRelations

export const ProviderFavoriteTestWithRelationsSchema: z.ZodType<ProviderFavoriteTestWithRelations> = ProviderFavoriteTestSchema.merge(z.object({
  Provider: z.lazy(() => ProviderWithRelationsSchema).nullable(),
  TestCatalog: z.lazy(() => TestCatalogWithRelationsSchema).nullable(),
}))

// PROVIDER FAVORITE TEST PARTIAL RELATION SCHEMA
//------------------------------------------------------

export type ProviderFavoriteTestPartialRelations = {
  Provider?: ProviderPartialWithRelations | null;
  TestCatalog?: TestCatalogPartialWithRelations | null;
};

export type ProviderFavoriteTestPartialWithRelations = z.infer<typeof ProviderFavoriteTestPartialSchema> & ProviderFavoriteTestPartialRelations

export const ProviderFavoriteTestPartialWithRelationsSchema: z.ZodType<ProviderFavoriteTestPartialWithRelations> = ProviderFavoriteTestPartialSchema.merge(z.object({
  Provider: z.lazy(() => ProviderPartialWithRelationsSchema).nullable(),
  TestCatalog: z.lazy(() => TestCatalogPartialWithRelationsSchema).nullable(),
})).partial()

export type ProviderFavoriteTestWithPartialRelations = z.infer<typeof ProviderFavoriteTestSchema> & ProviderFavoriteTestPartialRelations

export const ProviderFavoriteTestWithPartialRelationsSchema: z.ZodType<ProviderFavoriteTestWithPartialRelations> = ProviderFavoriteTestSchema.merge(z.object({
  Provider: z.lazy(() => ProviderPartialWithRelationsSchema).nullable(),
  TestCatalog: z.lazy(() => TestCatalogPartialWithRelationsSchema).nullable(),
}).partial())

/////////////////////////////////////////
// PROVIDER ORGANIZATION SCHEMA
/////////////////////////////////////////

export const ProviderOrganizationSchema = z.object({
  Id: z.string(),
  ProviderId: z.string(),
  OrganizationId: z.string(),
  ProviderNPI: z.string().nullable(),
  Name: z.string().nullable(),
  ParentOrgName: z.string().nullable(),
  OrgName: z.string().nullable(),
  OrgAddress: z.string().nullable(),
  OrgCity: z.string().nullable(),
  OrgState: z.string().nullable(),
  OrgZip: z.string().nullable(),
})

export type ProviderOrganization = z.infer<typeof ProviderOrganizationSchema>

/////////////////////////////////////////
// PROVIDER ORGANIZATION PARTIAL SCHEMA
/////////////////////////////////////////

export const ProviderOrganizationPartialSchema = ProviderOrganizationSchema.partial()

export type ProviderOrganizationPartial = z.infer<typeof ProviderOrganizationPartialSchema>

// PROVIDER ORGANIZATION RELATION SCHEMA
//------------------------------------------------------

export type ProviderOrganizationRelations = {
  Organization: OrganizationWithRelations;
  Provider: ProviderWithRelations;
};

export type ProviderOrganizationWithRelations = z.infer<typeof ProviderOrganizationSchema> & ProviderOrganizationRelations

export const ProviderOrganizationWithRelationsSchema: z.ZodType<ProviderOrganizationWithRelations> = ProviderOrganizationSchema.merge(z.object({
  Organization: z.lazy(() => OrganizationWithRelationsSchema),
  Provider: z.lazy(() => ProviderWithRelationsSchema),
}))

// PROVIDER ORGANIZATION PARTIAL RELATION SCHEMA
//------------------------------------------------------

export type ProviderOrganizationPartialRelations = {
  Organization?: OrganizationPartialWithRelations;
  Provider?: ProviderPartialWithRelations;
};

export type ProviderOrganizationPartialWithRelations = z.infer<typeof ProviderOrganizationPartialSchema> & ProviderOrganizationPartialRelations

export const ProviderOrganizationPartialWithRelationsSchema: z.ZodType<ProviderOrganizationPartialWithRelations> = ProviderOrganizationPartialSchema.merge(z.object({
  Organization: z.lazy(() => OrganizationPartialWithRelationsSchema),
  Provider: z.lazy(() => ProviderPartialWithRelationsSchema),
})).partial()

export type ProviderOrganizationWithPartialRelations = z.infer<typeof ProviderOrganizationSchema> & ProviderOrganizationPartialRelations

export const ProviderOrganizationWithPartialRelationsSchema: z.ZodType<ProviderOrganizationWithPartialRelations> = ProviderOrganizationSchema.merge(z.object({
  Organization: z.lazy(() => OrganizationPartialWithRelationsSchema),
  Provider: z.lazy(() => ProviderPartialWithRelationsSchema),
}).partial())

/////////////////////////////////////////
// SESSION SCHEMA
/////////////////////////////////////////

export const SessionSchema = z.object({
  id: z.string(),
  sessionToken: z.string(),
  userId: z.string(),
  expires: z.date(),
})

export type Session = z.infer<typeof SessionSchema>

/////////////////////////////////////////
// SESSION PARTIAL SCHEMA
/////////////////////////////////////////

export const SessionPartialSchema = SessionSchema.partial()

export type SessionPartial = z.infer<typeof SessionPartialSchema>

// SESSION RELATION SCHEMA
//------------------------------------------------------

export type SessionRelations = {
  User: UserWithRelations;
};

export type SessionWithRelations = z.infer<typeof SessionSchema> & SessionRelations

export const SessionWithRelationsSchema: z.ZodType<SessionWithRelations> = SessionSchema.merge(z.object({
  User: z.lazy(() => UserWithRelationsSchema),
}))

// SESSION PARTIAL RELATION SCHEMA
//------------------------------------------------------

export type SessionPartialRelations = {
  User?: UserPartialWithRelations;
};

export type SessionPartialWithRelations = z.infer<typeof SessionPartialSchema> & SessionPartialRelations

export const SessionPartialWithRelationsSchema: z.ZodType<SessionPartialWithRelations> = SessionPartialSchema.merge(z.object({
  User: z.lazy(() => UserPartialWithRelationsSchema),
})).partial()

export type SessionWithPartialRelations = z.infer<typeof SessionSchema> & SessionPartialRelations

export const SessionWithPartialRelationsSchema: z.ZodType<SessionWithPartialRelations> = SessionSchema.merge(z.object({
  User: z.lazy(() => UserPartialWithRelationsSchema),
}).partial())

/////////////////////////////////////////
// SPONSOR SCHEMA
/////////////////////////////////////////

export const SponsorSchema = z.object({
  SponsorId: z.number(),
  SponsorName: z.string().nullable(),
  SponsorCode: z.string().nullable(),
  SponsorWebsite: z.string().nullable(),
  SponsorType: z.string().nullable(),
  Address: z.string().nullable(),
  City: z.string().nullable(),
  State: z.string().nullable(),
  Zip: z.string().nullable(),
})

export type Sponsor = z.infer<typeof SponsorSchema>

/////////////////////////////////////////
// SPONSOR PARTIAL SCHEMA
/////////////////////////////////////////

export const SponsorPartialSchema = SponsorSchema.partial()

export type SponsorPartial = z.infer<typeof SponsorPartialSchema>

// SPONSOR RELATION SCHEMA
//------------------------------------------------------

export type SponsorRelations = {
  SponsoredProgram: SponsoredProgramWithRelations[];
};

export type SponsorWithRelations = z.infer<typeof SponsorSchema> & SponsorRelations

export const SponsorWithRelationsSchema: z.ZodType<SponsorWithRelations> = SponsorSchema.merge(z.object({
  SponsoredProgram: z.lazy(() => SponsoredProgramWithRelationsSchema).array(),
}))

// SPONSOR PARTIAL RELATION SCHEMA
//------------------------------------------------------

export type SponsorPartialRelations = {
  SponsoredProgram?: SponsoredProgramPartialWithRelations[];
};

export type SponsorPartialWithRelations = z.infer<typeof SponsorPartialSchema> & SponsorPartialRelations

export const SponsorPartialWithRelationsSchema: z.ZodType<SponsorPartialWithRelations> = SponsorPartialSchema.merge(z.object({
  SponsoredProgram: z.lazy(() => SponsoredProgramPartialWithRelationsSchema).array(),
})).partial()

export type SponsorWithPartialRelations = z.infer<typeof SponsorSchema> & SponsorPartialRelations

export const SponsorWithPartialRelationsSchema: z.ZodType<SponsorWithPartialRelations> = SponsorSchema.merge(z.object({
  SponsoredProgram: z.lazy(() => SponsoredProgramPartialWithRelationsSchema).array(),
}).partial())

/////////////////////////////////////////
// SPONSORED PROGRAM SCHEMA
/////////////////////////////////////////

export const SponsoredProgramSchema = z.object({
  ProgramId: z.number(),
  SponsorId: z.number().nullable(),
  TherapeuticArea: z.string().nullable(),
  ProgramName: z.string().nullable(),
  ProgramUrl: z.string().nullable(),
  ProgramLabUrl: z.string().nullable(),
  SponosoredTestingUrl: z.string().nullable(),
  ProgramEligibility: z.string().nullable(),
  CreatedAt: z.date().nullable(),
  UpdatedAt: z.date().nullable(),
})

export type SponsoredProgram = z.infer<typeof SponsoredProgramSchema>

/////////////////////////////////////////
// SPONSORED PROGRAM PARTIAL SCHEMA
/////////////////////////////////////////

export const SponsoredProgramPartialSchema = SponsoredProgramSchema.partial()

export type SponsoredProgramPartial = z.infer<typeof SponsoredProgramPartialSchema>

// SPONSORED PROGRAM RELATION SCHEMA
//------------------------------------------------------

export type SponsoredProgramRelations = {
  Sponsor?: SponsorWithRelations | null;
  SponsoredTest: SponsoredTestWithRelations[];
};

export type SponsoredProgramWithRelations = z.infer<typeof SponsoredProgramSchema> & SponsoredProgramRelations

export const SponsoredProgramWithRelationsSchema: z.ZodType<SponsoredProgramWithRelations> = SponsoredProgramSchema.merge(z.object({
  Sponsor: z.lazy(() => SponsorWithRelationsSchema).nullable(),
  SponsoredTest: z.lazy(() => SponsoredTestWithRelationsSchema).array(),
}))

// SPONSORED PROGRAM PARTIAL RELATION SCHEMA
//------------------------------------------------------

export type SponsoredProgramPartialRelations = {
  Sponsor?: SponsorPartialWithRelations | null;
  SponsoredTest?: SponsoredTestPartialWithRelations[];
};

export type SponsoredProgramPartialWithRelations = z.infer<typeof SponsoredProgramPartialSchema> & SponsoredProgramPartialRelations

export const SponsoredProgramPartialWithRelationsSchema: z.ZodType<SponsoredProgramPartialWithRelations> = SponsoredProgramPartialSchema.merge(z.object({
  Sponsor: z.lazy(() => SponsorPartialWithRelationsSchema).nullable(),
  SponsoredTest: z.lazy(() => SponsoredTestPartialWithRelationsSchema).array(),
})).partial()

export type SponsoredProgramWithPartialRelations = z.infer<typeof SponsoredProgramSchema> & SponsoredProgramPartialRelations

export const SponsoredProgramWithPartialRelationsSchema: z.ZodType<SponsoredProgramWithPartialRelations> = SponsoredProgramSchema.merge(z.object({
  Sponsor: z.lazy(() => SponsorPartialWithRelationsSchema).nullable(),
  SponsoredTest: z.lazy(() => SponsoredTestPartialWithRelationsSchema).array(),
}).partial())

/////////////////////////////////////////
// SPONSORED TEST SCHEMA
/////////////////////////////////////////

export const SponsoredTestSchema = z.object({
  Id: z.string(),
  TestId: z.number(),
  LabTestId: z.string().nullable(),
  SponsoredProgramId: z.number().nullable(),
  LabId: z.number().nullable(),
  CasandraTestId: z.string(),
  Category: z.string(),
  SubCategory: z.string().nullable(),
  CreatedAt: z.date().nullable(),
  UpdatedAt: z.date().nullable(),
})

export type SponsoredTest = z.infer<typeof SponsoredTestSchema>

/////////////////////////////////////////
// SPONSORED TEST PARTIAL SCHEMA
/////////////////////////////////////////

export const SponsoredTestPartialSchema = SponsoredTestSchema.partial()

export type SponsoredTestPartial = z.infer<typeof SponsoredTestPartialSchema>

// SPONSORED TEST RELATION SCHEMA
//------------------------------------------------------

export type SponsoredTestRelations = {
  LabOrderSponsoredTestConsent: LabOrderSponsoredTestConsentWithRelations[];
  Lab?: LabWithRelations | null;
  SponsoredProgram?: SponsoredProgramWithRelations | null;
  TestCatalog: TestCatalogWithRelations;
};

export type SponsoredTestWithRelations = z.infer<typeof SponsoredTestSchema> & SponsoredTestRelations

export const SponsoredTestWithRelationsSchema: z.ZodType<SponsoredTestWithRelations> = SponsoredTestSchema.merge(z.object({
  LabOrderSponsoredTestConsent: z.lazy(() => LabOrderSponsoredTestConsentWithRelationsSchema).array(),
  Lab: z.lazy(() => LabWithRelationsSchema).nullable(),
  SponsoredProgram: z.lazy(() => SponsoredProgramWithRelationsSchema).nullable(),
  TestCatalog: z.lazy(() => TestCatalogWithRelationsSchema),
}))

// SPONSORED TEST PARTIAL RELATION SCHEMA
//------------------------------------------------------

export type SponsoredTestPartialRelations = {
  LabOrderSponsoredTestConsent?: LabOrderSponsoredTestConsentPartialWithRelations[];
  Lab?: LabPartialWithRelations | null;
  SponsoredProgram?: SponsoredProgramPartialWithRelations | null;
  TestCatalog?: TestCatalogPartialWithRelations;
};

export type SponsoredTestPartialWithRelations = z.infer<typeof SponsoredTestPartialSchema> & SponsoredTestPartialRelations

export const SponsoredTestPartialWithRelationsSchema: z.ZodType<SponsoredTestPartialWithRelations> = SponsoredTestPartialSchema.merge(z.object({
  LabOrderSponsoredTestConsent: z.lazy(() => LabOrderSponsoredTestConsentPartialWithRelationsSchema).array(),
  Lab: z.lazy(() => LabPartialWithRelationsSchema).nullable(),
  SponsoredProgram: z.lazy(() => SponsoredProgramPartialWithRelationsSchema).nullable(),
  TestCatalog: z.lazy(() => TestCatalogPartialWithRelationsSchema),
})).partial()

export type SponsoredTestWithPartialRelations = z.infer<typeof SponsoredTestSchema> & SponsoredTestPartialRelations

export const SponsoredTestWithPartialRelationsSchema: z.ZodType<SponsoredTestWithPartialRelations> = SponsoredTestSchema.merge(z.object({
  LabOrderSponsoredTestConsent: z.lazy(() => LabOrderSponsoredTestConsentPartialWithRelationsSchema).array(),
  Lab: z.lazy(() => LabPartialWithRelationsSchema).nullable(),
  SponsoredProgram: z.lazy(() => SponsoredProgramPartialWithRelationsSchema).nullable(),
  TestCatalog: z.lazy(() => TestCatalogPartialWithRelationsSchema),
}).partial())

/////////////////////////////////////////
// TEST BIOMARKER SCHEMA
/////////////////////////////////////////

export const TestBiomarkerSchema = z.object({
  Id: z.number(),
  TestId: z.number(),
  LabTestId: z.string().nullable(),
  HGNCId: z.string(),
  TranscriptReference: z.string().nullable(),
  CreatedAt: z.date(),
  UpdatedAt: z.date(),
})

export type TestBiomarker = z.infer<typeof TestBiomarkerSchema>

/////////////////////////////////////////
// TEST BIOMARKER PARTIAL SCHEMA
/////////////////////////////////////////

export const TestBiomarkerPartialSchema = TestBiomarkerSchema.partial()

export type TestBiomarkerPartial = z.infer<typeof TestBiomarkerPartialSchema>

// TEST BIOMARKER RELATION SCHEMA
//------------------------------------------------------

export type TestBiomarkerRelations = {
  BIOMARKER: BIOMARKERWithRelations;
  TestCatalog: TestCatalogWithRelations;
};

export type TestBiomarkerWithRelations = z.infer<typeof TestBiomarkerSchema> & TestBiomarkerRelations

export const TestBiomarkerWithRelationsSchema: z.ZodType<TestBiomarkerWithRelations> = TestBiomarkerSchema.merge(z.object({
  BIOMARKER: z.lazy(() => BIOMARKERWithRelationsSchema),
  TestCatalog: z.lazy(() => TestCatalogWithRelationsSchema),
}))

// TEST BIOMARKER PARTIAL RELATION SCHEMA
//------------------------------------------------------

export type TestBiomarkerPartialRelations = {
  BIOMARKER?: BIOMARKERPartialWithRelations;
  TestCatalog?: TestCatalogPartialWithRelations;
};

export type TestBiomarkerPartialWithRelations = z.infer<typeof TestBiomarkerPartialSchema> & TestBiomarkerPartialRelations

export const TestBiomarkerPartialWithRelationsSchema: z.ZodType<TestBiomarkerPartialWithRelations> = TestBiomarkerPartialSchema.merge(z.object({
  BIOMARKER: z.lazy(() => BIOMARKERPartialWithRelationsSchema),
  TestCatalog: z.lazy(() => TestCatalogPartialWithRelationsSchema),
})).partial()

export type TestBiomarkerWithPartialRelations = z.infer<typeof TestBiomarkerSchema> & TestBiomarkerPartialRelations

export const TestBiomarkerWithPartialRelationsSchema: z.ZodType<TestBiomarkerWithPartialRelations> = TestBiomarkerSchema.merge(z.object({
  BIOMARKER: z.lazy(() => BIOMARKERPartialWithRelationsSchema),
  TestCatalog: z.lazy(() => TestCatalogPartialWithRelationsSchema),
}).partial())

/////////////////////////////////////////
// TEST CATALOG SCHEMA
/////////////////////////////////////////

export const TestCatalogSchema = z.object({
  TestId: z.number(),
  LabId: z.number().nullable(),
  href: z.string().nullable(),
  CasandraTestId: z.string(),
  LabTestId: z.string().nullable(),
  TestName: z.string().nullable(),
  AlternativeName: z.string().nullable(),
  AlternativeName1: z.string().nullable(),
  AlternativeName2: z.string().nullable(),
  AlternativeName3: z.string().nullable(),
  AlternativeName4: z.string().nullable(),
  AlternativeName5: z.string().nullable(),
  TestIncludes: z.string().nullable(),
  SpecimenType: z.string().nullable(),
  SpecialInstructions: z.string().nullable(),
  Methodology: z.string().nullable(),
  TestDescription: z.string().nullable(),
  Diseases: z.string().nullable(),
  Probes: z.string().nullable(),
  ClinicalSignificance: z.string().nullable(),
  SpecimenRequirements: z.string().nullable(),
  Volume: z.string().nullable(),
  MinimumVolume: z.string().nullable(),
  Container: z.string().nullable(),
  Collection: z.string().nullable(),
  StabilityRequirements: z.string().nullable(),
  StorageTransportation: z.string().nullable(),
  PatientPreparation: z.string().nullable(),
  CausesForRejection: z.string().nullable(),
  TestUsage: z.string().nullable(),
  TestLimitations: z.string().nullable(),
  CPTCodes: z.string().nullable(),
  NewYorkApproved: z.string().nullable(),
  LevelOfService: z.string().nullable(),
  TurnAroundTime: z.string().nullable(),
  AssayCategory: z.string().nullable(),
  ReferenceRanges: z.string().nullable(),
  SetupSchedule: z.string().nullable(),
  AlternativeSpecimen: z.string().nullable(),
  LoincCodesText: z.string().nullable(),
  LoincCodesHTML: z.string().nullable(),
  TestCategory: z.string().nullable(),
  TestSubCategory: z.string().nullable(),
  CreatedAt: z.date(),
  UpdatedAt: z.date(),
})

export type TestCatalog = z.infer<typeof TestCatalogSchema>

/////////////////////////////////////////
// TEST CATALOG PARTIAL SCHEMA
/////////////////////////////////////////

export const TestCatalogPartialSchema = TestCatalogSchema.partial()

export type TestCatalogPartial = z.infer<typeof TestCatalogPartialSchema>

// TEST CATALOG RELATION SCHEMA
//------------------------------------------------------

export type TestCatalogRelations = {
  LabOrderTest: LabOrderTestWithRelations[];
  OrganizationFavoriteTest: OrganizationFavoriteTestWithRelations[];
  ProviderFavoriteTest: ProviderFavoriteTestWithRelations[];
  SponsoredTest: SponsoredTestWithRelations[];
  TestBiomarker: TestBiomarkerWithRelations[];
  Lab?: LabWithRelations | null;
  TestCptCode: TestCptCodeWithRelations[];
  TestGene: TestGeneWithRelations[];
  TestOrderLoinc: TestOrderLoincWithRelations[];
  TestResultLoinc: TestResultLoincWithRelations[];
};

export type TestCatalogWithRelations = z.infer<typeof TestCatalogSchema> & TestCatalogRelations

export const TestCatalogWithRelationsSchema: z.ZodType<TestCatalogWithRelations> = TestCatalogSchema.merge(z.object({
  LabOrderTest: z.lazy(() => LabOrderTestWithRelationsSchema).array(),
  OrganizationFavoriteTest: z.lazy(() => OrganizationFavoriteTestWithRelationsSchema).array(),
  ProviderFavoriteTest: z.lazy(() => ProviderFavoriteTestWithRelationsSchema).array(),
  SponsoredTest: z.lazy(() => SponsoredTestWithRelationsSchema).array(),
  TestBiomarker: z.lazy(() => TestBiomarkerWithRelationsSchema).array(),
  Lab: z.lazy(() => LabWithRelationsSchema).nullable(),
  TestCptCode: z.lazy(() => TestCptCodeWithRelationsSchema).array(),
  TestGene: z.lazy(() => TestGeneWithRelationsSchema).array(),
  TestOrderLoinc: z.lazy(() => TestOrderLoincWithRelationsSchema).array(),
  TestResultLoinc: z.lazy(() => TestResultLoincWithRelationsSchema).array(),
}))

// TEST CATALOG PARTIAL RELATION SCHEMA
//------------------------------------------------------

export type TestCatalogPartialRelations = {
  LabOrderTest?: LabOrderTestPartialWithRelations[];
  OrganizationFavoriteTest?: OrganizationFavoriteTestPartialWithRelations[];
  ProviderFavoriteTest?: ProviderFavoriteTestPartialWithRelations[];
  SponsoredTest?: SponsoredTestPartialWithRelations[];
  TestBiomarker?: TestBiomarkerPartialWithRelations[];
  Lab?: LabPartialWithRelations | null;
  TestCptCode?: TestCptCodePartialWithRelations[];
  TestGene?: TestGenePartialWithRelations[];
  TestOrderLoinc?: TestOrderLoincPartialWithRelations[];
  TestResultLoinc?: TestResultLoincPartialWithRelations[];
};

export type TestCatalogPartialWithRelations = z.infer<typeof TestCatalogPartialSchema> & TestCatalogPartialRelations

export const TestCatalogPartialWithRelationsSchema: z.ZodType<TestCatalogPartialWithRelations> = TestCatalogPartialSchema.merge(z.object({
  LabOrderTest: z.lazy(() => LabOrderTestPartialWithRelationsSchema).array(),
  OrganizationFavoriteTest: z.lazy(() => OrganizationFavoriteTestPartialWithRelationsSchema).array(),
  ProviderFavoriteTest: z.lazy(() => ProviderFavoriteTestPartialWithRelationsSchema).array(),
  SponsoredTest: z.lazy(() => SponsoredTestPartialWithRelationsSchema).array(),
  TestBiomarker: z.lazy(() => TestBiomarkerPartialWithRelationsSchema).array(),
  Lab: z.lazy(() => LabPartialWithRelationsSchema).nullable(),
  TestCptCode: z.lazy(() => TestCptCodePartialWithRelationsSchema).array(),
  TestGene: z.lazy(() => TestGenePartialWithRelationsSchema).array(),
  TestOrderLoinc: z.lazy(() => TestOrderLoincPartialWithRelationsSchema).array(),
  TestResultLoinc: z.lazy(() => TestResultLoincPartialWithRelationsSchema).array(),
})).partial()

export type TestCatalogWithPartialRelations = z.infer<typeof TestCatalogSchema> & TestCatalogPartialRelations

export const TestCatalogWithPartialRelationsSchema: z.ZodType<TestCatalogWithPartialRelations> = TestCatalogSchema.merge(z.object({
  LabOrderTest: z.lazy(() => LabOrderTestPartialWithRelationsSchema).array(),
  OrganizationFavoriteTest: z.lazy(() => OrganizationFavoriteTestPartialWithRelationsSchema).array(),
  ProviderFavoriteTest: z.lazy(() => ProviderFavoriteTestPartialWithRelationsSchema).array(),
  SponsoredTest: z.lazy(() => SponsoredTestPartialWithRelationsSchema).array(),
  TestBiomarker: z.lazy(() => TestBiomarkerPartialWithRelationsSchema).array(),
  Lab: z.lazy(() => LabPartialWithRelationsSchema).nullable(),
  TestCptCode: z.lazy(() => TestCptCodePartialWithRelationsSchema).array(),
  TestGene: z.lazy(() => TestGenePartialWithRelationsSchema).array(),
  TestOrderLoinc: z.lazy(() => TestOrderLoincPartialWithRelationsSchema).array(),
  TestResultLoinc: z.lazy(() => TestResultLoincPartialWithRelationsSchema).array(),
}).partial())

/////////////////////////////////////////
// TEST CPT CODE SCHEMA
/////////////////////////////////////////

export const TestCptCodeSchema = z.object({
  Id: z.number(),
  TestId: z.number(),
  LabTestId: z.string().nullable(),
  CptCode: z.string().nullable(),
  Modifier: z.string().nullable(),
  Comments: z.string().nullable(),
  CreatedAt: z.date(),
  UpdatedAt: z.date(),
})

export type TestCptCode = z.infer<typeof TestCptCodeSchema>

/////////////////////////////////////////
// TEST CPT CODE PARTIAL SCHEMA
/////////////////////////////////////////

export const TestCptCodePartialSchema = TestCptCodeSchema.partial()

export type TestCptCodePartial = z.infer<typeof TestCptCodePartialSchema>

// TEST CPT CODE RELATION SCHEMA
//------------------------------------------------------

export type TestCptCodeRelations = {
  TestCatalog: TestCatalogWithRelations;
};

export type TestCptCodeWithRelations = z.infer<typeof TestCptCodeSchema> & TestCptCodeRelations

export const TestCptCodeWithRelationsSchema: z.ZodType<TestCptCodeWithRelations> = TestCptCodeSchema.merge(z.object({
  TestCatalog: z.lazy(() => TestCatalogWithRelationsSchema),
}))

// TEST CPT CODE PARTIAL RELATION SCHEMA
//------------------------------------------------------

export type TestCptCodePartialRelations = {
  TestCatalog?: TestCatalogPartialWithRelations;
};

export type TestCptCodePartialWithRelations = z.infer<typeof TestCptCodePartialSchema> & TestCptCodePartialRelations

export const TestCptCodePartialWithRelationsSchema: z.ZodType<TestCptCodePartialWithRelations> = TestCptCodePartialSchema.merge(z.object({
  TestCatalog: z.lazy(() => TestCatalogPartialWithRelationsSchema),
})).partial()

export type TestCptCodeWithPartialRelations = z.infer<typeof TestCptCodeSchema> & TestCptCodePartialRelations

export const TestCptCodeWithPartialRelationsSchema: z.ZodType<TestCptCodeWithPartialRelations> = TestCptCodeSchema.merge(z.object({
  TestCatalog: z.lazy(() => TestCatalogPartialWithRelationsSchema),
}).partial())

/////////////////////////////////////////
// TEST GENE SCHEMA
/////////////////////////////////////////

export const TestGeneSchema = z.object({
  Id: z.number(),
  TestId: z.number(),
  LabTestId: z.string().nullable(),
  Gene: z.string(),
  TranscriptReference: z.string().nullable(),
  CreatedAt: z.date(),
  UpdatedAt: z.date(),
})

export type TestGene = z.infer<typeof TestGeneSchema>

/////////////////////////////////////////
// TEST GENE PARTIAL SCHEMA
/////////////////////////////////////////

export const TestGenePartialSchema = TestGeneSchema.partial()

export type TestGenePartial = z.infer<typeof TestGenePartialSchema>

// TEST GENE RELATION SCHEMA
//------------------------------------------------------

export type TestGeneRelations = {
  TestCatalog: TestCatalogWithRelations;
};

export type TestGeneWithRelations = z.infer<typeof TestGeneSchema> & TestGeneRelations

export const TestGeneWithRelationsSchema: z.ZodType<TestGeneWithRelations> = TestGeneSchema.merge(z.object({
  TestCatalog: z.lazy(() => TestCatalogWithRelationsSchema),
}))

// TEST GENE PARTIAL RELATION SCHEMA
//------------------------------------------------------

export type TestGenePartialRelations = {
  TestCatalog?: TestCatalogPartialWithRelations;
};

export type TestGenePartialWithRelations = z.infer<typeof TestGenePartialSchema> & TestGenePartialRelations

export const TestGenePartialWithRelationsSchema: z.ZodType<TestGenePartialWithRelations> = TestGenePartialSchema.merge(z.object({
  TestCatalog: z.lazy(() => TestCatalogPartialWithRelationsSchema),
})).partial()

export type TestGeneWithPartialRelations = z.infer<typeof TestGeneSchema> & TestGenePartialRelations

export const TestGeneWithPartialRelationsSchema: z.ZodType<TestGeneWithPartialRelations> = TestGeneSchema.merge(z.object({
  TestCatalog: z.lazy(() => TestCatalogPartialWithRelationsSchema),
}).partial())

/////////////////////////////////////////
// TEST ORDER LOINC SCHEMA
/////////////////////////////////////////

export const TestOrderLoincSchema = z.object({
  Id: z.number(),
  TestId: z.number(),
  LabTestId: z.string().nullable(),
  OrderLoinc: z.string().nullable(),
  CreatedAt: z.date(),
  UpdatedAt: z.date(),
})

export type TestOrderLoinc = z.infer<typeof TestOrderLoincSchema>

/////////////////////////////////////////
// TEST ORDER LOINC PARTIAL SCHEMA
/////////////////////////////////////////

export const TestOrderLoincPartialSchema = TestOrderLoincSchema.partial()

export type TestOrderLoincPartial = z.infer<typeof TestOrderLoincPartialSchema>

// TEST ORDER LOINC RELATION SCHEMA
//------------------------------------------------------

export type TestOrderLoincRelations = {
  LOINC?: LOINCWithRelations | null;
  TestCatalog: TestCatalogWithRelations;
};

export type TestOrderLoincWithRelations = z.infer<typeof TestOrderLoincSchema> & TestOrderLoincRelations

export const TestOrderLoincWithRelationsSchema: z.ZodType<TestOrderLoincWithRelations> = TestOrderLoincSchema.merge(z.object({
  LOINC: z.lazy(() => LOINCWithRelationsSchema).nullable(),
  TestCatalog: z.lazy(() => TestCatalogWithRelationsSchema),
}))

// TEST ORDER LOINC PARTIAL RELATION SCHEMA
//------------------------------------------------------

export type TestOrderLoincPartialRelations = {
  LOINC?: LOINCPartialWithRelations | null;
  TestCatalog?: TestCatalogPartialWithRelations;
};

export type TestOrderLoincPartialWithRelations = z.infer<typeof TestOrderLoincPartialSchema> & TestOrderLoincPartialRelations

export const TestOrderLoincPartialWithRelationsSchema: z.ZodType<TestOrderLoincPartialWithRelations> = TestOrderLoincPartialSchema.merge(z.object({
  LOINC: z.lazy(() => LOINCPartialWithRelationsSchema).nullable(),
  TestCatalog: z.lazy(() => TestCatalogPartialWithRelationsSchema),
})).partial()

export type TestOrderLoincWithPartialRelations = z.infer<typeof TestOrderLoincSchema> & TestOrderLoincPartialRelations

export const TestOrderLoincWithPartialRelationsSchema: z.ZodType<TestOrderLoincWithPartialRelations> = TestOrderLoincSchema.merge(z.object({
  LOINC: z.lazy(() => LOINCPartialWithRelationsSchema).nullable(),
  TestCatalog: z.lazy(() => TestCatalogPartialWithRelationsSchema),
}).partial())

/////////////////////////////////////////
// TEST RESULT LOINC SCHEMA
/////////////////////////////////////////

export const TestResultLoincSchema = z.object({
  Id: z.number(),
  TestId: z.number(),
  LabTestId: z.string().nullable(),
  ResultCode: z.string().nullable(),
  ResultCodeName: z.string().nullable(),
  UofM: z.string().nullable(),
  ResultLoinc: z.string().nullable(),
  CreatedAt: z.date(),
  UpdatedAt: z.date(),
})

export type TestResultLoinc = z.infer<typeof TestResultLoincSchema>

/////////////////////////////////////////
// TEST RESULT LOINC PARTIAL SCHEMA
/////////////////////////////////////////

export const TestResultLoincPartialSchema = TestResultLoincSchema.partial()

export type TestResultLoincPartial = z.infer<typeof TestResultLoincPartialSchema>

// TEST RESULT LOINC RELATION SCHEMA
//------------------------------------------------------

export type TestResultLoincRelations = {
  LOINC?: LOINCWithRelations | null;
  TestCatalog: TestCatalogWithRelations;
};

export type TestResultLoincWithRelations = z.infer<typeof TestResultLoincSchema> & TestResultLoincRelations

export const TestResultLoincWithRelationsSchema: z.ZodType<TestResultLoincWithRelations> = TestResultLoincSchema.merge(z.object({
  LOINC: z.lazy(() => LOINCWithRelationsSchema).nullable(),
  TestCatalog: z.lazy(() => TestCatalogWithRelationsSchema),
}))

// TEST RESULT LOINC PARTIAL RELATION SCHEMA
//------------------------------------------------------

export type TestResultLoincPartialRelations = {
  LOINC?: LOINCPartialWithRelations | null;
  TestCatalog?: TestCatalogPartialWithRelations;
};

export type TestResultLoincPartialWithRelations = z.infer<typeof TestResultLoincPartialSchema> & TestResultLoincPartialRelations

export const TestResultLoincPartialWithRelationsSchema: z.ZodType<TestResultLoincPartialWithRelations> = TestResultLoincPartialSchema.merge(z.object({
  LOINC: z.lazy(() => LOINCPartialWithRelationsSchema).nullable(),
  TestCatalog: z.lazy(() => TestCatalogPartialWithRelationsSchema),
})).partial()

export type TestResultLoincWithPartialRelations = z.infer<typeof TestResultLoincSchema> & TestResultLoincPartialRelations

export const TestResultLoincWithPartialRelationsSchema: z.ZodType<TestResultLoincWithPartialRelations> = TestResultLoincSchema.merge(z.object({
  LOINC: z.lazy(() => LOINCPartialWithRelationsSchema).nullable(),
  TestCatalog: z.lazy(() => TestCatalogPartialWithRelationsSchema),
}).partial())

/////////////////////////////////////////
// USER SCHEMA
/////////////////////////////////////////

export const UserSchema = z.object({
  id: z.string(),
  name: z.string().nullable(),
  email: z.string().nullable(),
  password: z.string().nullable(),
  emailVerified: z.date().nullable(),
  image: z.string().nullable(),
})

export type User = z.infer<typeof UserSchema>

/////////////////////////////////////////
// USER PARTIAL SCHEMA
/////////////////////////////////////////

export const UserPartialSchema = UserSchema.partial()

export type UserPartial = z.infer<typeof UserPartialSchema>

// USER RELATION SCHEMA
//------------------------------------------------------

export type UserRelations = {
  Account?: AccountWithRelations | null;
  Session: SessionWithRelations[];
  UserAttribute?: UserAttributeWithRelations | null;
};

export type UserWithRelations = z.infer<typeof UserSchema> & UserRelations

export const UserWithRelationsSchema: z.ZodType<UserWithRelations> = UserSchema.merge(z.object({
  Account: z.lazy(() => AccountWithRelationsSchema).nullable(),
  Session: z.lazy(() => SessionWithRelationsSchema).array(),
  UserAttribute: z.lazy(() => UserAttributeWithRelationsSchema).nullable(),
}))

// USER PARTIAL RELATION SCHEMA
//------------------------------------------------------

export type UserPartialRelations = {
  Account?: AccountPartialWithRelations | null;
  Session?: SessionPartialWithRelations[];
  UserAttribute?: UserAttributePartialWithRelations | null;
};

export type UserPartialWithRelations = z.infer<typeof UserPartialSchema> & UserPartialRelations

export const UserPartialWithRelationsSchema: z.ZodType<UserPartialWithRelations> = UserPartialSchema.merge(z.object({
  Account: z.lazy(() => AccountPartialWithRelationsSchema).nullable(),
  Session: z.lazy(() => SessionPartialWithRelationsSchema).array(),
  UserAttribute: z.lazy(() => UserAttributePartialWithRelationsSchema).nullable(),
})).partial()

export type UserWithPartialRelations = z.infer<typeof UserSchema> & UserPartialRelations

export const UserWithPartialRelationsSchema: z.ZodType<UserWithPartialRelations> = UserSchema.merge(z.object({
  Account: z.lazy(() => AccountPartialWithRelationsSchema).nullable(),
  Session: z.lazy(() => SessionPartialWithRelationsSchema).array(),
  UserAttribute: z.lazy(() => UserAttributePartialWithRelationsSchema).nullable(),
}).partial())

/////////////////////////////////////////
// USER ATTRIBUTE SCHEMA
/////////////////////////////////////////

export const UserAttributeSchema = z.object({
  UserType: UserAttribute_UserTypeSchema.nullable(),
  Id: z.string(),
  UserId: z.string(),
})

export type UserAttribute = z.infer<typeof UserAttributeSchema>

/////////////////////////////////////////
// USER ATTRIBUTE PARTIAL SCHEMA
/////////////////////////////////////////

export const UserAttributePartialSchema = UserAttributeSchema.partial()

export type UserAttributePartial = z.infer<typeof UserAttributePartialSchema>

// USER ATTRIBUTE RELATION SCHEMA
//------------------------------------------------------

export type UserAttributeRelations = {
  Admin?: AdminWithRelations | null;
  Provider?: ProviderWithRelations | null;
  User: UserWithRelations;
};

export type UserAttributeWithRelations = z.infer<typeof UserAttributeSchema> & UserAttributeRelations

export const UserAttributeWithRelationsSchema: z.ZodType<UserAttributeWithRelations> = UserAttributeSchema.merge(z.object({
  Admin: z.lazy(() => AdminWithRelationsSchema).nullable(),
  Provider: z.lazy(() => ProviderWithRelationsSchema).nullable(),
  User: z.lazy(() => UserWithRelationsSchema),
}))

// USER ATTRIBUTE PARTIAL RELATION SCHEMA
//------------------------------------------------------

export type UserAttributePartialRelations = {
  Admin?: AdminPartialWithRelations | null;
  Provider?: ProviderPartialWithRelations | null;
  User?: UserPartialWithRelations;
};

export type UserAttributePartialWithRelations = z.infer<typeof UserAttributePartialSchema> & UserAttributePartialRelations

export const UserAttributePartialWithRelationsSchema: z.ZodType<UserAttributePartialWithRelations> = UserAttributePartialSchema.merge(z.object({
  Admin: z.lazy(() => AdminPartialWithRelationsSchema).nullable(),
  Provider: z.lazy(() => ProviderPartialWithRelationsSchema).nullable(),
  User: z.lazy(() => UserPartialWithRelationsSchema),
})).partial()

export type UserAttributeWithPartialRelations = z.infer<typeof UserAttributeSchema> & UserAttributePartialRelations

export const UserAttributeWithPartialRelationsSchema: z.ZodType<UserAttributeWithPartialRelations> = UserAttributeSchema.merge(z.object({
  Admin: z.lazy(() => AdminPartialWithRelationsSchema).nullable(),
  Provider: z.lazy(() => ProviderPartialWithRelationsSchema).nullable(),
  User: z.lazy(() => UserPartialWithRelationsSchema),
}).partial())

/////////////////////////////////////////
// VERIFICATION TOKEN SCHEMA
/////////////////////////////////////////

export const VerificationTokenSchema = z.object({
  identifier: z.string(),
  token: z.string(),
  expires: z.date(),
})

export type VerificationToken = z.infer<typeof VerificationTokenSchema>

/////////////////////////////////////////
// VERIFICATION TOKEN PARTIAL SCHEMA
/////////////////////////////////////////

export const VerificationTokenPartialSchema = VerificationTokenSchema.partial()

export type VerificationTokenPartial = z.infer<typeof VerificationTokenPartialSchema>

/////////////////////////////////////////
// SELECT & INCLUDE
/////////////////////////////////////////

// ACCOUNT
//------------------------------------------------------

export const AccountIncludeSchema: z.ZodType<Prisma.AccountInclude> = z.object({
  user: z.union([z.boolean(),z.lazy(() => UserArgsSchema)]).optional(),
}).strict()

export const AccountArgsSchema: z.ZodType<Prisma.AccountDefaultArgs> = z.object({
  select: z.lazy(() => AccountSelectSchema).optional(),
  include: z.lazy(() => AccountIncludeSchema).optional(),
}).strict();

export const AccountSelectSchema: z.ZodType<Prisma.AccountSelect> = z.object({
  id: z.boolean().optional(),
  userId: z.boolean().optional(),
  type: z.boolean().optional(),
  provider: z.boolean().optional(),
  providerAccountId: z.boolean().optional(),
  refresh_token: z.boolean().optional(),
  access_token: z.boolean().optional(),
  expires_at: z.boolean().optional(),
  token_type: z.boolean().optional(),
  scope: z.boolean().optional(),
  state: z.boolean().optional(),
  id_token: z.boolean().optional(),
  session_state: z.boolean().optional(),
  refresh_token_expires_in: z.boolean().optional(),
  epic_dstu2_patient: z.boolean().optional(),
  appointment: z.boolean().optional(),
  dob: z.boolean().optional(),
  encounter: z.boolean().optional(),
  location: z.boolean().optional(),
  loginDepartment: z.boolean().optional(),
  need_patient_banner: z.boolean().optional(),
  patient: z.boolean().optional(),
  smart_style_url: z.boolean().optional(),
  unconfirmed_status: z.boolean().optional(),
  user_email: z.boolean().optional(),
  username: z.boolean().optional(),
  tenant: z.boolean().optional(),
  createdAt: z.boolean().optional(),
  updatedAt: z.boolean().optional(),
  user: z.union([z.boolean(),z.lazy(() => UserArgsSchema)]).optional(),
}).strict()

// ADMIN
//------------------------------------------------------

export const AdminIncludeSchema: z.ZodType<Prisma.AdminInclude> = z.object({
  UserAttribute: z.union([z.boolean(),z.lazy(() => UserAttributeArgsSchema)]).optional(),
}).strict()

export const AdminArgsSchema: z.ZodType<Prisma.AdminDefaultArgs> = z.object({
  select: z.lazy(() => AdminSelectSchema).optional(),
  include: z.lazy(() => AdminIncludeSchema).optional(),
}).strict();

export const AdminSelectSchema: z.ZodType<Prisma.AdminSelect> = z.object({
  Id: z.boolean().optional(),
  Name: z.boolean().optional(),
  Email: z.boolean().optional(),
  UserAttributeId: z.boolean().optional(),
  UserAttribute: z.union([z.boolean(),z.lazy(() => UserAttributeArgsSchema)]).optional(),
}).strict()

// ATTACHMENT
//------------------------------------------------------

export const AttachmentIncludeSchema: z.ZodType<Prisma.AttachmentInclude> = z.object({
  LabOrderAttachment: z.union([z.boolean(),z.lazy(() => LabOrderAttachmentFindManyArgsSchema)]).optional(),
  _count: z.union([z.boolean(),z.lazy(() => AttachmentCountOutputTypeArgsSchema)]).optional(),
}).strict()

export const AttachmentArgsSchema: z.ZodType<Prisma.AttachmentDefaultArgs> = z.object({
  select: z.lazy(() => AttachmentSelectSchema).optional(),
  include: z.lazy(() => AttachmentIncludeSchema).optional(),
}).strict();

export const AttachmentCountOutputTypeArgsSchema: z.ZodType<Prisma.AttachmentCountOutputTypeDefaultArgs> = z.object({
  select: z.lazy(() => AttachmentCountOutputTypeSelectSchema).nullish(),
}).strict();

export const AttachmentCountOutputTypeSelectSchema: z.ZodType<Prisma.AttachmentCountOutputTypeSelect> = z.object({
  LabOrderAttachment: z.boolean().optional(),
}).strict();

export const AttachmentSelectSchema: z.ZodType<Prisma.AttachmentSelect> = z.object({
  Id: z.boolean().optional(),
  AttachmentType: z.boolean().optional(),
  AttachmentUrl: z.boolean().optional(),
  CreatedAt: z.boolean().optional(),
  UpdatedAt: z.boolean().optional(),
  LabOrderAttachment: z.union([z.boolean(),z.lazy(() => LabOrderAttachmentFindManyArgsSchema)]).optional(),
  _count: z.union([z.boolean(),z.lazy(() => AttachmentCountOutputTypeArgsSchema)]).optional(),
}).strict()

// BIOMARKER
//------------------------------------------------------

export const BIOMARKERIncludeSchema: z.ZodType<Prisma.BIOMARKERInclude> = z.object({
  TestBiomarker: z.union([z.boolean(),z.lazy(() => TestBiomarkerFindManyArgsSchema)]).optional(),
  _count: z.union([z.boolean(),z.lazy(() => BIOMARKERCountOutputTypeArgsSchema)]).optional(),
}).strict()

export const BIOMARKERArgsSchema: z.ZodType<Prisma.BIOMARKERDefaultArgs> = z.object({
  select: z.lazy(() => BIOMARKERSelectSchema).optional(),
  include: z.lazy(() => BIOMARKERIncludeSchema).optional(),
}).strict();

export const BIOMARKERCountOutputTypeArgsSchema: z.ZodType<Prisma.BIOMARKERCountOutputTypeDefaultArgs> = z.object({
  select: z.lazy(() => BIOMARKERCountOutputTypeSelectSchema).nullish(),
}).strict();

export const BIOMARKERCountOutputTypeSelectSchema: z.ZodType<Prisma.BIOMARKERCountOutputTypeSelect> = z.object({
  TestBiomarker: z.boolean().optional(),
}).strict();

export const BIOMARKERSelectSchema: z.ZodType<Prisma.BIOMARKERSelect> = z.object({
  HGNCId: z.boolean().optional(),
  HGNCStatus: z.boolean().optional(),
  HGNCApprovedSymbol: z.boolean().optional(),
  HGNCApprovedName: z.boolean().optional(),
  TestBiomarker: z.union([z.boolean(),z.lazy(() => TestBiomarkerFindManyArgsSchema)]).optional(),
  _count: z.union([z.boolean(),z.lazy(() => BIOMARKERCountOutputTypeArgsSchema)]).optional(),
}).strict()

// ICD
//------------------------------------------------------

export const ICDIncludeSchema: z.ZodType<Prisma.ICDInclude> = z.object({
  LabOrderIcd: z.union([z.boolean(),z.lazy(() => LabOrderIcdFindManyArgsSchema)]).optional(),
  _count: z.union([z.boolean(),z.lazy(() => ICDCountOutputTypeArgsSchema)]).optional(),
}).strict()

export const ICDArgsSchema: z.ZodType<Prisma.ICDDefaultArgs> = z.object({
  select: z.lazy(() => ICDSelectSchema).optional(),
  include: z.lazy(() => ICDIncludeSchema).optional(),
}).strict();

export const ICDCountOutputTypeArgsSchema: z.ZodType<Prisma.ICDCountOutputTypeDefaultArgs> = z.object({
  select: z.lazy(() => ICDCountOutputTypeSelectSchema).nullish(),
}).strict();

export const ICDCountOutputTypeSelectSchema: z.ZodType<Prisma.ICDCountOutputTypeSelect> = z.object({
  LabOrderIcd: z.boolean().optional(),
}).strict();

export const ICDSelectSchema: z.ZodType<Prisma.ICDSelect> = z.object({
  Id: z.boolean().optional(),
  Code: z.boolean().optional(),
  ShortDescription: z.boolean().optional(),
  CreatedAt: z.boolean().optional(),
  UpdatedAt: z.boolean().optional(),
  LabOrderIcd: z.union([z.boolean(),z.lazy(() => LabOrderIcdFindManyArgsSchema)]).optional(),
  _count: z.union([z.boolean(),z.lazy(() => ICDCountOutputTypeArgsSchema)]).optional(),
}).strict()

// LOINC
//------------------------------------------------------

export const LOINCIncludeSchema: z.ZodType<Prisma.LOINCInclude> = z.object({
  TestOrderLoinc: z.union([z.boolean(),z.lazy(() => TestOrderLoincFindManyArgsSchema)]).optional(),
  TestResultLoinc: z.union([z.boolean(),z.lazy(() => TestResultLoincFindManyArgsSchema)]).optional(),
  _count: z.union([z.boolean(),z.lazy(() => LOINCCountOutputTypeArgsSchema)]).optional(),
}).strict()

export const LOINCArgsSchema: z.ZodType<Prisma.LOINCDefaultArgs> = z.object({
  select: z.lazy(() => LOINCSelectSchema).optional(),
  include: z.lazy(() => LOINCIncludeSchema).optional(),
}).strict();

export const LOINCCountOutputTypeArgsSchema: z.ZodType<Prisma.LOINCCountOutputTypeDefaultArgs> = z.object({
  select: z.lazy(() => LOINCCountOutputTypeSelectSchema).nullish(),
}).strict();

export const LOINCCountOutputTypeSelectSchema: z.ZodType<Prisma.LOINCCountOutputTypeSelect> = z.object({
  TestOrderLoinc: z.boolean().optional(),
  TestResultLoinc: z.boolean().optional(),
}).strict();

export const LOINCSelectSchema: z.ZodType<Prisma.LOINCSelect> = z.object({
  Loinc_Num: z.boolean().optional(),
  COMPONENT: z.boolean().optional(),
  PROPERTY: z.boolean().optional(),
  TIME_ASPCT: z.boolean().optional(),
  SYSTEM: z.boolean().optional(),
  SCALE_TYP: z.boolean().optional(),
  METHOD_TYP: z.boolean().optional(),
  CLASS: z.boolean().optional(),
  VersionLastChanged: z.boolean().optional(),
  CHNG_TYPE: z.boolean().optional(),
  DefinitionDescription: z.boolean().optional(),
  STATUS: z.boolean().optional(),
  CONSUMER_NAME: z.boolean().optional(),
  CLASSTYPE: z.boolean().optional(),
  FORMULA: z.boolean().optional(),
  EXMPL_ANSWERS: z.boolean().optional(),
  SURVEY_QUEST_TEXT: z.boolean().optional(),
  SURVEY_QUEST_SRC: z.boolean().optional(),
  UNITSREQUIRED: z.boolean().optional(),
  RELATEDNAMES2: z.boolean().optional(),
  SHORTNAME: z.boolean().optional(),
  ORDER_OBS: z.boolean().optional(),
  HL7_FIELD_SUBFIELD_ID: z.boolean().optional(),
  EXTERNAL_COPYRIGHT_NOTICE: z.boolean().optional(),
  EXAMPLE_UNITS: z.boolean().optional(),
  LONG_COMMON_NAME: z.boolean().optional(),
  EXAMPLE_UCUM_UNITS: z.boolean().optional(),
  STATUS_REASON: z.boolean().optional(),
  STATUS_TEXT: z.boolean().optional(),
  CHANGE_REASON_PUBLIC: z.boolean().optional(),
  COMMON_TEST_RANK: z.boolean().optional(),
  COMMON_ORDER_RANK: z.boolean().optional(),
  HL7_ATTACHMENT_STRUCTURE: z.boolean().optional(),
  EXTERNAL_COPYRIGHT_LINK: z.boolean().optional(),
  PanelType: z.boolean().optional(),
  AskAtOrderEntry: z.boolean().optional(),
  AssociatedObservations: z.boolean().optional(),
  VersionFirstReleased: z.boolean().optional(),
  ValidHL7AttachmentRequest: z.boolean().optional(),
  DisplayName: z.boolean().optional(),
  TestOrderLoinc: z.union([z.boolean(),z.lazy(() => TestOrderLoincFindManyArgsSchema)]).optional(),
  TestResultLoinc: z.union([z.boolean(),z.lazy(() => TestResultLoincFindManyArgsSchema)]).optional(),
  _count: z.union([z.boolean(),z.lazy(() => LOINCCountOutputTypeArgsSchema)]).optional(),
}).strict()

// LAB
//------------------------------------------------------

export const LabIncludeSchema: z.ZodType<Prisma.LabInclude> = z.object({
  SponsoredTest: z.union([z.boolean(),z.lazy(() => SponsoredTestFindManyArgsSchema)]).optional(),
  TestCatalog: z.union([z.boolean(),z.lazy(() => TestCatalogFindManyArgsSchema)]).optional(),
  _count: z.union([z.boolean(),z.lazy(() => LabCountOutputTypeArgsSchema)]).optional(),
}).strict()

export const LabArgsSchema: z.ZodType<Prisma.LabDefaultArgs> = z.object({
  select: z.lazy(() => LabSelectSchema).optional(),
  include: z.lazy(() => LabIncludeSchema).optional(),
}).strict();

export const LabCountOutputTypeArgsSchema: z.ZodType<Prisma.LabCountOutputTypeDefaultArgs> = z.object({
  select: z.lazy(() => LabCountOutputTypeSelectSchema).nullish(),
}).strict();

export const LabCountOutputTypeSelectSchema: z.ZodType<Prisma.LabCountOutputTypeSelect> = z.object({
  SponsoredTest: z.boolean().optional(),
  TestCatalog: z.boolean().optional(),
}).strict();

export const LabSelectSchema: z.ZodType<Prisma.LabSelect> = z.object({
  LabId: z.boolean().optional(),
  LabName: z.boolean().optional(),
  LabCode: z.boolean().optional(),
  Address: z.boolean().optional(),
  City: z.boolean().optional(),
  State: z.boolean().optional(),
  Zip: z.boolean().optional(),
  SponsoredTest: z.union([z.boolean(),z.lazy(() => SponsoredTestFindManyArgsSchema)]).optional(),
  TestCatalog: z.union([z.boolean(),z.lazy(() => TestCatalogFindManyArgsSchema)]).optional(),
  _count: z.union([z.boolean(),z.lazy(() => LabCountOutputTypeArgsSchema)]).optional(),
}).strict()

// LAB ORDER
//------------------------------------------------------

export const LabOrderIncludeSchema: z.ZodType<Prisma.LabOrderInclude> = z.object({
  OrderingProvider: z.union([z.boolean(),z.lazy(() => ProviderArgsSchema)]).optional(),
  TreatingProvider: z.union([z.boolean(),z.lazy(() => ProviderArgsSchema)]).optional(),
  Patient: z.union([z.boolean(),z.lazy(() => PatientArgsSchema)]).optional(),
  Organization: z.union([z.boolean(),z.lazy(() => OrganizationArgsSchema)]).optional(),
  LabOrderAttachment: z.union([z.boolean(),z.lazy(() => LabOrderAttachmentFindManyArgsSchema)]).optional(),
  LabOrderBilling: z.union([z.boolean(),z.lazy(() => LabOrderBillingFindManyArgsSchema)]).optional(),
  LabOrderIcd: z.union([z.boolean(),z.lazy(() => LabOrderIcdFindManyArgsSchema)]).optional(),
  LabOrderSpecimen: z.union([z.boolean(),z.lazy(() => LabOrderSpecimenFindManyArgsSchema)]).optional(),
  LabOrderSponsoredTestConsent: z.union([z.boolean(),z.lazy(() => LabOrderSponsoredTestConsentFindManyArgsSchema)]).optional(),
  LabOrderStatus: z.union([z.boolean(),z.lazy(() => LabOrderStatusFindManyArgsSchema)]).optional(),
  LabOrderTest: z.union([z.boolean(),z.lazy(() => LabOrderTestFindManyArgsSchema)]).optional(),
  _count: z.union([z.boolean(),z.lazy(() => LabOrderCountOutputTypeArgsSchema)]).optional(),
}).strict()

export const LabOrderArgsSchema: z.ZodType<Prisma.LabOrderDefaultArgs> = z.object({
  select: z.lazy(() => LabOrderSelectSchema).optional(),
  include: z.lazy(() => LabOrderIncludeSchema).optional(),
}).strict();

export const LabOrderCountOutputTypeArgsSchema: z.ZodType<Prisma.LabOrderCountOutputTypeDefaultArgs> = z.object({
  select: z.lazy(() => LabOrderCountOutputTypeSelectSchema).nullish(),
}).strict();

export const LabOrderCountOutputTypeSelectSchema: z.ZodType<Prisma.LabOrderCountOutputTypeSelect> = z.object({
  LabOrderAttachment: z.boolean().optional(),
  LabOrderBilling: z.boolean().optional(),
  LabOrderIcd: z.boolean().optional(),
  LabOrderSpecimen: z.boolean().optional(),
  LabOrderSponsoredTestConsent: z.boolean().optional(),
  LabOrderStatus: z.boolean().optional(),
  LabOrderTest: z.boolean().optional(),
}).strict();

export const LabOrderSelectSchema: z.ZodType<Prisma.LabOrderSelect> = z.object({
  Id: z.boolean().optional(),
  OrderNumber: z.boolean().optional(),
  AccessionNumber: z.boolean().optional(),
  OrderingProviderId: z.boolean().optional(),
  TreatingProviderId: z.boolean().optional(),
  PatientId: z.boolean().optional(),
  PatientMRN: z.boolean().optional(),
  PatientMobile: z.boolean().optional(),
  PatientEmail: z.boolean().optional(),
  OrganizationId: z.boolean().optional(),
  OrderDate: z.boolean().optional(),
  OrderNotes: z.boolean().optional(),
  CreatedAt: z.boolean().optional(),
  UpdatedAt: z.boolean().optional(),
  OrderingProvider: z.union([z.boolean(),z.lazy(() => ProviderArgsSchema)]).optional(),
  TreatingProvider: z.union([z.boolean(),z.lazy(() => ProviderArgsSchema)]).optional(),
  Patient: z.union([z.boolean(),z.lazy(() => PatientArgsSchema)]).optional(),
  Organization: z.union([z.boolean(),z.lazy(() => OrganizationArgsSchema)]).optional(),
  LabOrderAttachment: z.union([z.boolean(),z.lazy(() => LabOrderAttachmentFindManyArgsSchema)]).optional(),
  LabOrderBilling: z.union([z.boolean(),z.lazy(() => LabOrderBillingFindManyArgsSchema)]).optional(),
  LabOrderIcd: z.union([z.boolean(),z.lazy(() => LabOrderIcdFindManyArgsSchema)]).optional(),
  LabOrderSpecimen: z.union([z.boolean(),z.lazy(() => LabOrderSpecimenFindManyArgsSchema)]).optional(),
  LabOrderSponsoredTestConsent: z.union([z.boolean(),z.lazy(() => LabOrderSponsoredTestConsentFindManyArgsSchema)]).optional(),
  LabOrderStatus: z.union([z.boolean(),z.lazy(() => LabOrderStatusFindManyArgsSchema)]).optional(),
  LabOrderTest: z.union([z.boolean(),z.lazy(() => LabOrderTestFindManyArgsSchema)]).optional(),
  _count: z.union([z.boolean(),z.lazy(() => LabOrderCountOutputTypeArgsSchema)]).optional(),
}).strict()

// LAB ORDER ATTACHMENT
//------------------------------------------------------

export const LabOrderAttachmentIncludeSchema: z.ZodType<Prisma.LabOrderAttachmentInclude> = z.object({
  LabOrder: z.union([z.boolean(),z.lazy(() => LabOrderArgsSchema)]).optional(),
  Attachment: z.union([z.boolean(),z.lazy(() => AttachmentArgsSchema)]).optional(),
}).strict()

export const LabOrderAttachmentArgsSchema: z.ZodType<Prisma.LabOrderAttachmentDefaultArgs> = z.object({
  select: z.lazy(() => LabOrderAttachmentSelectSchema).optional(),
  include: z.lazy(() => LabOrderAttachmentIncludeSchema).optional(),
}).strict();

export const LabOrderAttachmentSelectSchema: z.ZodType<Prisma.LabOrderAttachmentSelect> = z.object({
  Id: z.boolean().optional(),
  LabOrderId: z.boolean().optional(),
  AttachmentId: z.boolean().optional(),
  CreatedAt: z.boolean().optional(),
  UpdatedAt: z.boolean().optional(),
  LabOrder: z.union([z.boolean(),z.lazy(() => LabOrderArgsSchema)]).optional(),
  Attachment: z.union([z.boolean(),z.lazy(() => AttachmentArgsSchema)]).optional(),
}).strict()

// LAB ORDER BILLING
//------------------------------------------------------

export const LabOrderBillingIncludeSchema: z.ZodType<Prisma.LabOrderBillingInclude> = z.object({
  LabOrder: z.union([z.boolean(),z.lazy(() => LabOrderArgsSchema)]).optional(),
}).strict()

export const LabOrderBillingArgsSchema: z.ZodType<Prisma.LabOrderBillingDefaultArgs> = z.object({
  select: z.lazy(() => LabOrderBillingSelectSchema).optional(),
  include: z.lazy(() => LabOrderBillingIncludeSchema).optional(),
}).strict();

export const LabOrderBillingSelectSchema: z.ZodType<Prisma.LabOrderBillingSelect> = z.object({
  Id: z.boolean().optional(),
  LabOrderId: z.boolean().optional(),
  BillToId: z.boolean().optional(),
  HealthPalnId: z.boolean().optional(),
  PatientStatus: z.boolean().optional(),
  SponoseredTestCouponCode: z.boolean().optional(),
  CreatedAt: z.boolean().optional(),
  UpdatedAt: z.boolean().optional(),
  LabOrder: z.union([z.boolean(),z.lazy(() => LabOrderArgsSchema)]).optional(),
}).strict()

// LAB ORDER ICD
//------------------------------------------------------

export const LabOrderIcdIncludeSchema: z.ZodType<Prisma.LabOrderIcdInclude> = z.object({
  LabOrder: z.union([z.boolean(),z.lazy(() => LabOrderArgsSchema)]).optional(),
  ICD: z.union([z.boolean(),z.lazy(() => ICDArgsSchema)]).optional(),
}).strict()

export const LabOrderIcdArgsSchema: z.ZodType<Prisma.LabOrderIcdDefaultArgs> = z.object({
  select: z.lazy(() => LabOrderIcdSelectSchema).optional(),
  include: z.lazy(() => LabOrderIcdIncludeSchema).optional(),
}).strict();

export const LabOrderIcdSelectSchema: z.ZodType<Prisma.LabOrderIcdSelect> = z.object({
  Id: z.boolean().optional(),
  LabOrderId: z.boolean().optional(),
  ICDId: z.boolean().optional(),
  CreatedAt: z.boolean().optional(),
  UpdatedAt: z.boolean().optional(),
  LabOrder: z.union([z.boolean(),z.lazy(() => LabOrderArgsSchema)]).optional(),
  ICD: z.union([z.boolean(),z.lazy(() => ICDArgsSchema)]).optional(),
}).strict()

// LAB ORDER SPECIMEN
//------------------------------------------------------

export const LabOrderSpecimenIncludeSchema: z.ZodType<Prisma.LabOrderSpecimenInclude> = z.object({
  LabOrder: z.union([z.boolean(),z.lazy(() => LabOrderArgsSchema)]).optional(),
}).strict()

export const LabOrderSpecimenArgsSchema: z.ZodType<Prisma.LabOrderSpecimenDefaultArgs> = z.object({
  select: z.lazy(() => LabOrderSpecimenSelectSchema).optional(),
  include: z.lazy(() => LabOrderSpecimenIncludeSchema).optional(),
}).strict();

export const LabOrderSpecimenSelectSchema: z.ZodType<Prisma.LabOrderSpecimenSelect> = z.object({
  Id: z.boolean().optional(),
  LabOrderId: z.boolean().optional(),
  SpecimenType: z.boolean().optional(),
  SpecimenCount: z.boolean().optional(),
  CollectedDate: z.boolean().optional(),
  CollectedTime: z.boolean().optional(),
  SpecimenID: z.boolean().optional(),
  BodySite: z.boolean().optional(),
  TumorType: z.boolean().optional(),
  Fixative: z.boolean().optional(),
  FixativeDuration: z.boolean().optional(),
  ColdIschemicTime: z.boolean().optional(),
  CreatedAt: z.boolean().optional(),
  UpdatedAt: z.boolean().optional(),
  LabOrder: z.union([z.boolean(),z.lazy(() => LabOrderArgsSchema)]).optional(),
}).strict()

// LAB ORDER SPONSORED TEST CONSENT
//------------------------------------------------------

export const LabOrderSponsoredTestConsentIncludeSchema: z.ZodType<Prisma.LabOrderSponsoredTestConsentInclude> = z.object({
  SponsoredTest: z.union([z.boolean(),z.lazy(() => SponsoredTestArgsSchema)]).optional(),
  LabOrder: z.union([z.boolean(),z.lazy(() => LabOrderArgsSchema)]).optional(),
}).strict()

export const LabOrderSponsoredTestConsentArgsSchema: z.ZodType<Prisma.LabOrderSponsoredTestConsentDefaultArgs> = z.object({
  select: z.lazy(() => LabOrderSponsoredTestConsentSelectSchema).optional(),
  include: z.lazy(() => LabOrderSponsoredTestConsentIncludeSchema).optional(),
}).strict();

export const LabOrderSponsoredTestConsentSelectSchema: z.ZodType<Prisma.LabOrderSponsoredTestConsentSelect> = z.object({
  Id: z.boolean().optional(),
  LabOrderId: z.boolean().optional(),
  SponsoredCasandraTestId: z.boolean().optional(),
  ProviderName: z.boolean().optional(),
  ProviderNPI: z.boolean().optional(),
  ConsentAt: z.boolean().optional(),
  CreatedAt: z.boolean().optional(),
  UpdatedAt: z.boolean().optional(),
  SponsoredTest: z.union([z.boolean(),z.lazy(() => SponsoredTestArgsSchema)]).optional(),
  LabOrder: z.union([z.boolean(),z.lazy(() => LabOrderArgsSchema)]).optional(),
}).strict()

// LAB ORDER STATUS
//------------------------------------------------------

export const LabOrderStatusIncludeSchema: z.ZodType<Prisma.LabOrderStatusInclude> = z.object({
  LabOrder: z.union([z.boolean(),z.lazy(() => LabOrderArgsSchema)]).optional(),
}).strict()

export const LabOrderStatusArgsSchema: z.ZodType<Prisma.LabOrderStatusDefaultArgs> = z.object({
  select: z.lazy(() => LabOrderStatusSelectSchema).optional(),
  include: z.lazy(() => LabOrderStatusIncludeSchema).optional(),
}).strict();

export const LabOrderStatusSelectSchema: z.ZodType<Prisma.LabOrderStatusSelect> = z.object({
  Id: z.boolean().optional(),
  LabOrderId: z.boolean().optional(),
  Status: z.boolean().optional(),
  StatusDate: z.boolean().optional(),
  CreatedAt: z.boolean().optional(),
  UpdatedAt: z.boolean().optional(),
  LabOrder: z.union([z.boolean(),z.lazy(() => LabOrderArgsSchema)]).optional(),
}).strict()

// LAB ORDER TEST
//------------------------------------------------------

export const LabOrderTestIncludeSchema: z.ZodType<Prisma.LabOrderTestInclude> = z.object({
  LabOrder: z.union([z.boolean(),z.lazy(() => LabOrderArgsSchema)]).optional(),
  TestCatalog: z.union([z.boolean(),z.lazy(() => TestCatalogArgsSchema)]).optional(),
}).strict()

export const LabOrderTestArgsSchema: z.ZodType<Prisma.LabOrderTestDefaultArgs> = z.object({
  select: z.lazy(() => LabOrderTestSelectSchema).optional(),
  include: z.lazy(() => LabOrderTestIncludeSchema).optional(),
}).strict();

export const LabOrderTestSelectSchema: z.ZodType<Prisma.LabOrderTestSelect> = z.object({
  Id: z.boolean().optional(),
  LabOrderId: z.boolean().optional(),
  TestId: z.boolean().optional(),
  CreatedAt: z.boolean().optional(),
  UpdatedAt: z.boolean().optional(),
  LabOrder: z.union([z.boolean(),z.lazy(() => LabOrderArgsSchema)]).optional(),
  TestCatalog: z.union([z.boolean(),z.lazy(() => TestCatalogArgsSchema)]).optional(),
}).strict()

// LOINC COMPONENT HIERARCHY
//------------------------------------------------------

export const LoincComponentHierarchySelectSchema: z.ZodType<Prisma.LoincComponentHierarchySelect> = z.object({
  Id: z.boolean().optional(),
  ParentId: z.boolean().optional(),
  Level: z.boolean().optional(),
  Code: z.boolean().optional(),
  Sequence: z.boolean().optional(),
  CodeText: z.boolean().optional(),
  Component: z.boolean().optional(),
  Property: z.boolean().optional(),
  Timing: z.boolean().optional(),
  Scale: z.boolean().optional(),
  Method: z.boolean().optional(),
}).strict()

// LOINC PANEL HIERARCHY
//------------------------------------------------------

export const LoincPanelHierarchySelectSchema: z.ZodType<Prisma.LoincPanelHierarchySelect> = z.object({
  Id: z.boolean().optional(),
  ParentId: z.boolean().optional(),
  Level: z.boolean().optional(),
  Code: z.boolean().optional(),
  Sequence: z.boolean().optional(),
  CodeText: z.boolean().optional(),
  Component: z.boolean().optional(),
  Property: z.boolean().optional(),
  Timing: z.boolean().optional(),
  Scale: z.boolean().optional(),
  Method: z.boolean().optional(),
}).strict()

// LOINC UNIVERAL LAB ORDERS
//------------------------------------------------------

export const LoincUniveralLabOrdersSelectSchema: z.ZodType<Prisma.LoincUniveralLabOrdersSelect> = z.object({
  Loinc_Num: z.boolean().optional(),
  Long_Common_Name: z.boolean().optional(),
  ORDER_OBS: z.boolean().optional(),
}).strict()

// ORGANIZATION
//------------------------------------------------------

export const OrganizationIncludeSchema: z.ZodType<Prisma.OrganizationInclude> = z.object({
  LabOrder: z.union([z.boolean(),z.lazy(() => LabOrderFindManyArgsSchema)]).optional(),
  Organization: z.union([z.boolean(),z.lazy(() => OrganizationArgsSchema)]).optional(),
  ChildOrganization: z.union([z.boolean(),z.lazy(() => OrganizationFindManyArgsSchema)]).optional(),
  OrganizationFavoriteTest: z.union([z.boolean(),z.lazy(() => OrganizationFavoriteTestFindManyArgsSchema)]).optional(),
  PatientOrganization: z.union([z.boolean(),z.lazy(() => PatientOrganizationFindManyArgsSchema)]).optional(),
  ProviderOrganization: z.union([z.boolean(),z.lazy(() => ProviderOrganizationFindManyArgsSchema)]).optional(),
  _count: z.union([z.boolean(),z.lazy(() => OrganizationCountOutputTypeArgsSchema)]).optional(),
}).strict()

export const OrganizationArgsSchema: z.ZodType<Prisma.OrganizationDefaultArgs> = z.object({
  select: z.lazy(() => OrganizationSelectSchema).optional(),
  include: z.lazy(() => OrganizationIncludeSchema).optional(),
}).strict();

export const OrganizationCountOutputTypeArgsSchema: z.ZodType<Prisma.OrganizationCountOutputTypeDefaultArgs> = z.object({
  select: z.lazy(() => OrganizationCountOutputTypeSelectSchema).nullish(),
}).strict();

export const OrganizationCountOutputTypeSelectSchema: z.ZodType<Prisma.OrganizationCountOutputTypeSelect> = z.object({
  LabOrder: z.boolean().optional(),
  ChildOrganization: z.boolean().optional(),
  OrganizationFavoriteTest: z.boolean().optional(),
  PatientOrganization: z.boolean().optional(),
  ProviderOrganization: z.boolean().optional(),
}).strict();

export const OrganizationSelectSchema: z.ZodType<Prisma.OrganizationSelect> = z.object({
  Id: z.boolean().optional(),
  href: z.boolean().optional(),
  ParentId: z.boolean().optional(),
  Level: z.boolean().optional(),
  ParentOrgName: z.boolean().optional(),
  OrgName: z.boolean().optional(),
  OrgType: z.boolean().optional(),
  OrgSpecialty: z.boolean().optional(),
  OrgAddress: z.boolean().optional(),
  OrgCity: z.boolean().optional(),
  OrgState: z.boolean().optional(),
  OrgZip: z.boolean().optional(),
  LabOrder: z.union([z.boolean(),z.lazy(() => LabOrderFindManyArgsSchema)]).optional(),
  Organization: z.union([z.boolean(),z.lazy(() => OrganizationArgsSchema)]).optional(),
  ChildOrganization: z.union([z.boolean(),z.lazy(() => OrganizationFindManyArgsSchema)]).optional(),
  OrganizationFavoriteTest: z.union([z.boolean(),z.lazy(() => OrganizationFavoriteTestFindManyArgsSchema)]).optional(),
  PatientOrganization: z.union([z.boolean(),z.lazy(() => PatientOrganizationFindManyArgsSchema)]).optional(),
  ProviderOrganization: z.union([z.boolean(),z.lazy(() => ProviderOrganizationFindManyArgsSchema)]).optional(),
  _count: z.union([z.boolean(),z.lazy(() => OrganizationCountOutputTypeArgsSchema)]).optional(),
}).strict()

// ORGANIZATION ENDPOINT
//------------------------------------------------------

export const OrganizationEndpointSelectSchema: z.ZodType<Prisma.OrganizationEndpointSelect> = z.object({
  Id: z.boolean().optional(),
  OrgName: z.boolean().optional(),
  EHRVendor: z.boolean().optional(),
  FHIRVersion: z.boolean().optional(),
  Endpoint: z.boolean().optional(),
}).strict()

// ORGANIZATION FAVORITE TEST
//------------------------------------------------------

export const OrganizationFavoriteTestIncludeSchema: z.ZodType<Prisma.OrganizationFavoriteTestInclude> = z.object({
  Organization: z.union([z.boolean(),z.lazy(() => OrganizationArgsSchema)]).optional(),
  TestCatalog: z.union([z.boolean(),z.lazy(() => TestCatalogArgsSchema)]).optional(),
}).strict()

export const OrganizationFavoriteTestArgsSchema: z.ZodType<Prisma.OrganizationFavoriteTestDefaultArgs> = z.object({
  select: z.lazy(() => OrganizationFavoriteTestSelectSchema).optional(),
  include: z.lazy(() => OrganizationFavoriteTestIncludeSchema).optional(),
}).strict();

export const OrganizationFavoriteTestSelectSchema: z.ZodType<Prisma.OrganizationFavoriteTestSelect> = z.object({
  Id: z.boolean().optional(),
  OrganizationId: z.boolean().optional(),
  ParentId: z.boolean().optional(),
  ParentName: z.boolean().optional(),
  Level: z.boolean().optional(),
  TestId: z.boolean().optional(),
  CreatedAt: z.boolean().optional(),
  UpdatedAt: z.boolean().optional(),
  Organization: z.union([z.boolean(),z.lazy(() => OrganizationArgsSchema)]).optional(),
  TestCatalog: z.union([z.boolean(),z.lazy(() => TestCatalogArgsSchema)]).optional(),
}).strict()

// PATIENT
//------------------------------------------------------

export const PatientIncludeSchema: z.ZodType<Prisma.PatientInclude> = z.object({
  LabOrder: z.union([z.boolean(),z.lazy(() => LabOrderFindManyArgsSchema)]).optional(),
  PatientOrganization: z.union([z.boolean(),z.lazy(() => PatientOrganizationFindManyArgsSchema)]).optional(),
  _count: z.union([z.boolean(),z.lazy(() => PatientCountOutputTypeArgsSchema)]).optional(),
}).strict()

export const PatientArgsSchema: z.ZodType<Prisma.PatientDefaultArgs> = z.object({
  select: z.lazy(() => PatientSelectSchema).optional(),
  include: z.lazy(() => PatientIncludeSchema).optional(),
}).strict();

export const PatientCountOutputTypeArgsSchema: z.ZodType<Prisma.PatientCountOutputTypeDefaultArgs> = z.object({
  select: z.lazy(() => PatientCountOutputTypeSelectSchema).nullish(),
}).strict();

export const PatientCountOutputTypeSelectSchema: z.ZodType<Prisma.PatientCountOutputTypeSelect> = z.object({
  LabOrder: z.boolean().optional(),
  PatientOrganization: z.boolean().optional(),
}).strict();

export const PatientSelectSchema: z.ZodType<Prisma.PatientSelect> = z.object({
  Id: z.boolean().optional(),
  FirstName: z.boolean().optional(),
  LastName: z.boolean().optional(),
  DateOfBirth: z.boolean().optional(),
  Gender: z.boolean().optional(),
  Email: z.boolean().optional(),
  Mobile: z.boolean().optional(),
  CreatedAt: z.boolean().optional(),
  UpdatedAt: z.boolean().optional(),
  LabOrder: z.union([z.boolean(),z.lazy(() => LabOrderFindManyArgsSchema)]).optional(),
  PatientOrganization: z.union([z.boolean(),z.lazy(() => PatientOrganizationFindManyArgsSchema)]).optional(),
  _count: z.union([z.boolean(),z.lazy(() => PatientCountOutputTypeArgsSchema)]).optional(),
}).strict()

// PATIENT ORGANIZATION
//------------------------------------------------------

export const PatientOrganizationIncludeSchema: z.ZodType<Prisma.PatientOrganizationInclude> = z.object({
  Organization: z.union([z.boolean(),z.lazy(() => OrganizationArgsSchema)]).optional(),
  Patient: z.union([z.boolean(),z.lazy(() => PatientArgsSchema)]).optional(),
}).strict()

export const PatientOrganizationArgsSchema: z.ZodType<Prisma.PatientOrganizationDefaultArgs> = z.object({
  select: z.lazy(() => PatientOrganizationSelectSchema).optional(),
  include: z.lazy(() => PatientOrganizationIncludeSchema).optional(),
}).strict();

export const PatientOrganizationSelectSchema: z.ZodType<Prisma.PatientOrganizationSelect> = z.object({
  Id: z.boolean().optional(),
  PatientId: z.boolean().optional(),
  OrganizationId: z.boolean().optional(),
  MRN: z.boolean().optional(),
  Mobile: z.boolean().optional(),
  Email: z.boolean().optional(),
  Organization: z.union([z.boolean(),z.lazy(() => OrganizationArgsSchema)]).optional(),
  Patient: z.union([z.boolean(),z.lazy(() => PatientArgsSchema)]).optional(),
}).strict()

// POST
//------------------------------------------------------

export const PostSelectSchema: z.ZodType<Prisma.PostSelect> = z.object({
  id: z.boolean().optional(),
  name: z.boolean().optional(),
  createdAt: z.boolean().optional(),
  updatedAt: z.boolean().optional(),
}).strict()

// PROVIDER
//------------------------------------------------------

export const ProviderIncludeSchema: z.ZodType<Prisma.ProviderInclude> = z.object({
  OrderingProviderLabOrder: z.union([z.boolean(),z.lazy(() => LabOrderFindManyArgsSchema)]).optional(),
  TreatingProviderLabOrder: z.union([z.boolean(),z.lazy(() => LabOrderFindManyArgsSchema)]).optional(),
  UserAttribute: z.union([z.boolean(),z.lazy(() => UserAttributeArgsSchema)]).optional(),
  ProviderEducation: z.union([z.boolean(),z.lazy(() => ProviderEducationFindManyArgsSchema)]).optional(),
  ProviderFavoriteTest: z.union([z.boolean(),z.lazy(() => ProviderFavoriteTestFindManyArgsSchema)]).optional(),
  ProviderOrganization: z.union([z.boolean(),z.lazy(() => ProviderOrganizationFindManyArgsSchema)]).optional(),
  _count: z.union([z.boolean(),z.lazy(() => ProviderCountOutputTypeArgsSchema)]).optional(),
}).strict()

export const ProviderArgsSchema: z.ZodType<Prisma.ProviderDefaultArgs> = z.object({
  select: z.lazy(() => ProviderSelectSchema).optional(),
  include: z.lazy(() => ProviderIncludeSchema).optional(),
}).strict();

export const ProviderCountOutputTypeArgsSchema: z.ZodType<Prisma.ProviderCountOutputTypeDefaultArgs> = z.object({
  select: z.lazy(() => ProviderCountOutputTypeSelectSchema).nullish(),
}).strict();

export const ProviderCountOutputTypeSelectSchema: z.ZodType<Prisma.ProviderCountOutputTypeSelect> = z.object({
  OrderingProviderLabOrder: z.boolean().optional(),
  TreatingProviderLabOrder: z.boolean().optional(),
  ProviderEducation: z.boolean().optional(),
  ProviderFavoriteTest: z.boolean().optional(),
  ProviderOrganization: z.boolean().optional(),
}).strict();

export const ProviderSelectSchema: z.ZodType<Prisma.ProviderSelect> = z.object({
  Id: z.boolean().optional(),
  href: z.boolean().optional(),
  NPI: z.boolean().optional(),
  Name: z.boolean().optional(),
  Email: z.boolean().optional(),
  Credentials: z.boolean().optional(),
  Specialty: z.boolean().optional(),
  Aboutme: z.boolean().optional(),
  Gender: z.boolean().optional(),
  ProviderType: z.boolean().optional(),
  Affiliation: z.boolean().optional(),
  ProceduresAndResearch: z.boolean().optional(),
  SpecialInterests: z.boolean().optional(),
  UserAttributeId: z.boolean().optional(),
  OrderingProviderLabOrder: z.union([z.boolean(),z.lazy(() => LabOrderFindManyArgsSchema)]).optional(),
  TreatingProviderLabOrder: z.union([z.boolean(),z.lazy(() => LabOrderFindManyArgsSchema)]).optional(),
  UserAttribute: z.union([z.boolean(),z.lazy(() => UserAttributeArgsSchema)]).optional(),
  ProviderEducation: z.union([z.boolean(),z.lazy(() => ProviderEducationFindManyArgsSchema)]).optional(),
  ProviderFavoriteTest: z.union([z.boolean(),z.lazy(() => ProviderFavoriteTestFindManyArgsSchema)]).optional(),
  ProviderOrganization: z.union([z.boolean(),z.lazy(() => ProviderOrganizationFindManyArgsSchema)]).optional(),
  _count: z.union([z.boolean(),z.lazy(() => ProviderCountOutputTypeArgsSchema)]).optional(),
}).strict()

// PROVIDER EDUCATION
//------------------------------------------------------

export const ProviderEducationIncludeSchema: z.ZodType<Prisma.ProviderEducationInclude> = z.object({
  Provider: z.union([z.boolean(),z.lazy(() => ProviderArgsSchema)]).optional(),
}).strict()

export const ProviderEducationArgsSchema: z.ZodType<Prisma.ProviderEducationDefaultArgs> = z.object({
  select: z.lazy(() => ProviderEducationSelectSchema).optional(),
  include: z.lazy(() => ProviderEducationIncludeSchema).optional(),
}).strict();

export const ProviderEducationSelectSchema: z.ZodType<Prisma.ProviderEducationSelect> = z.object({
  Id: z.boolean().optional(),
  ProviderId: z.boolean().optional(),
  ProviderNPI: z.boolean().optional(),
  Name: z.boolean().optional(),
  EducationType: z.boolean().optional(),
  SchoolName: z.boolean().optional(),
  AreaOfEducation: z.boolean().optional(),
  Provider: z.union([z.boolean(),z.lazy(() => ProviderArgsSchema)]).optional(),
}).strict()

// PROVIDER FAVORITE TEST
//------------------------------------------------------

export const ProviderFavoriteTestIncludeSchema: z.ZodType<Prisma.ProviderFavoriteTestInclude> = z.object({
  Provider: z.union([z.boolean(),z.lazy(() => ProviderArgsSchema)]).optional(),
  TestCatalog: z.union([z.boolean(),z.lazy(() => TestCatalogArgsSchema)]).optional(),
}).strict()

export const ProviderFavoriteTestArgsSchema: z.ZodType<Prisma.ProviderFavoriteTestDefaultArgs> = z.object({
  select: z.lazy(() => ProviderFavoriteTestSelectSchema).optional(),
  include: z.lazy(() => ProviderFavoriteTestIncludeSchema).optional(),
}).strict();

export const ProviderFavoriteTestSelectSchema: z.ZodType<Prisma.ProviderFavoriteTestSelect> = z.object({
  Id: z.boolean().optional(),
  ProviderId: z.boolean().optional(),
  ParentId: z.boolean().optional(),
  ParentName: z.boolean().optional(),
  Level: z.boolean().optional(),
  TestId: z.boolean().optional(),
  CreatedAt: z.boolean().optional(),
  UpdatedAt: z.boolean().optional(),
  Provider: z.union([z.boolean(),z.lazy(() => ProviderArgsSchema)]).optional(),
  TestCatalog: z.union([z.boolean(),z.lazy(() => TestCatalogArgsSchema)]).optional(),
}).strict()

// PROVIDER ORGANIZATION
//------------------------------------------------------

export const ProviderOrganizationIncludeSchema: z.ZodType<Prisma.ProviderOrganizationInclude> = z.object({
  Organization: z.union([z.boolean(),z.lazy(() => OrganizationArgsSchema)]).optional(),
  Provider: z.union([z.boolean(),z.lazy(() => ProviderArgsSchema)]).optional(),
}).strict()

export const ProviderOrganizationArgsSchema: z.ZodType<Prisma.ProviderOrganizationDefaultArgs> = z.object({
  select: z.lazy(() => ProviderOrganizationSelectSchema).optional(),
  include: z.lazy(() => ProviderOrganizationIncludeSchema).optional(),
}).strict();

export const ProviderOrganizationSelectSchema: z.ZodType<Prisma.ProviderOrganizationSelect> = z.object({
  Id: z.boolean().optional(),
  ProviderId: z.boolean().optional(),
  OrganizationId: z.boolean().optional(),
  ProviderNPI: z.boolean().optional(),
  Name: z.boolean().optional(),
  ParentOrgName: z.boolean().optional(),
  OrgName: z.boolean().optional(),
  OrgAddress: z.boolean().optional(),
  OrgCity: z.boolean().optional(),
  OrgState: z.boolean().optional(),
  OrgZip: z.boolean().optional(),
  Organization: z.union([z.boolean(),z.lazy(() => OrganizationArgsSchema)]).optional(),
  Provider: z.union([z.boolean(),z.lazy(() => ProviderArgsSchema)]).optional(),
}).strict()

// SESSION
//------------------------------------------------------

export const SessionIncludeSchema: z.ZodType<Prisma.SessionInclude> = z.object({
  User: z.union([z.boolean(),z.lazy(() => UserArgsSchema)]).optional(),
}).strict()

export const SessionArgsSchema: z.ZodType<Prisma.SessionDefaultArgs> = z.object({
  select: z.lazy(() => SessionSelectSchema).optional(),
  include: z.lazy(() => SessionIncludeSchema).optional(),
}).strict();

export const SessionSelectSchema: z.ZodType<Prisma.SessionSelect> = z.object({
  id: z.boolean().optional(),
  sessionToken: z.boolean().optional(),
  userId: z.boolean().optional(),
  expires: z.boolean().optional(),
  User: z.union([z.boolean(),z.lazy(() => UserArgsSchema)]).optional(),
}).strict()

// SPONSOR
//------------------------------------------------------

export const SponsorIncludeSchema: z.ZodType<Prisma.SponsorInclude> = z.object({
  SponsoredProgram: z.union([z.boolean(),z.lazy(() => SponsoredProgramFindManyArgsSchema)]).optional(),
  _count: z.union([z.boolean(),z.lazy(() => SponsorCountOutputTypeArgsSchema)]).optional(),
}).strict()

export const SponsorArgsSchema: z.ZodType<Prisma.SponsorDefaultArgs> = z.object({
  select: z.lazy(() => SponsorSelectSchema).optional(),
  include: z.lazy(() => SponsorIncludeSchema).optional(),
}).strict();

export const SponsorCountOutputTypeArgsSchema: z.ZodType<Prisma.SponsorCountOutputTypeDefaultArgs> = z.object({
  select: z.lazy(() => SponsorCountOutputTypeSelectSchema).nullish(),
}).strict();

export const SponsorCountOutputTypeSelectSchema: z.ZodType<Prisma.SponsorCountOutputTypeSelect> = z.object({
  SponsoredProgram: z.boolean().optional(),
}).strict();

export const SponsorSelectSchema: z.ZodType<Prisma.SponsorSelect> = z.object({
  SponsorId: z.boolean().optional(),
  SponsorName: z.boolean().optional(),
  SponsorCode: z.boolean().optional(),
  SponsorWebsite: z.boolean().optional(),
  SponsorType: z.boolean().optional(),
  Address: z.boolean().optional(),
  City: z.boolean().optional(),
  State: z.boolean().optional(),
  Zip: z.boolean().optional(),
  SponsoredProgram: z.union([z.boolean(),z.lazy(() => SponsoredProgramFindManyArgsSchema)]).optional(),
  _count: z.union([z.boolean(),z.lazy(() => SponsorCountOutputTypeArgsSchema)]).optional(),
}).strict()

// SPONSORED PROGRAM
//------------------------------------------------------

export const SponsoredProgramIncludeSchema: z.ZodType<Prisma.SponsoredProgramInclude> = z.object({
  Sponsor: z.union([z.boolean(),z.lazy(() => SponsorArgsSchema)]).optional(),
  SponsoredTest: z.union([z.boolean(),z.lazy(() => SponsoredTestFindManyArgsSchema)]).optional(),
  _count: z.union([z.boolean(),z.lazy(() => SponsoredProgramCountOutputTypeArgsSchema)]).optional(),
}).strict()

export const SponsoredProgramArgsSchema: z.ZodType<Prisma.SponsoredProgramDefaultArgs> = z.object({
  select: z.lazy(() => SponsoredProgramSelectSchema).optional(),
  include: z.lazy(() => SponsoredProgramIncludeSchema).optional(),
}).strict();

export const SponsoredProgramCountOutputTypeArgsSchema: z.ZodType<Prisma.SponsoredProgramCountOutputTypeDefaultArgs> = z.object({
  select: z.lazy(() => SponsoredProgramCountOutputTypeSelectSchema).nullish(),
}).strict();

export const SponsoredProgramCountOutputTypeSelectSchema: z.ZodType<Prisma.SponsoredProgramCountOutputTypeSelect> = z.object({
  SponsoredTest: z.boolean().optional(),
}).strict();

export const SponsoredProgramSelectSchema: z.ZodType<Prisma.SponsoredProgramSelect> = z.object({
  ProgramId: z.boolean().optional(),
  SponsorId: z.boolean().optional(),
  TherapeuticArea: z.boolean().optional(),
  ProgramName: z.boolean().optional(),
  ProgramUrl: z.boolean().optional(),
  ProgramLabUrl: z.boolean().optional(),
  SponosoredTestingUrl: z.boolean().optional(),
  ProgramEligibility: z.boolean().optional(),
  CreatedAt: z.boolean().optional(),
  UpdatedAt: z.boolean().optional(),
  Sponsor: z.union([z.boolean(),z.lazy(() => SponsorArgsSchema)]).optional(),
  SponsoredTest: z.union([z.boolean(),z.lazy(() => SponsoredTestFindManyArgsSchema)]).optional(),
  _count: z.union([z.boolean(),z.lazy(() => SponsoredProgramCountOutputTypeArgsSchema)]).optional(),
}).strict()

// SPONSORED TEST
//------------------------------------------------------

export const SponsoredTestIncludeSchema: z.ZodType<Prisma.SponsoredTestInclude> = z.object({
  LabOrderSponsoredTestConsent: z.union([z.boolean(),z.lazy(() => LabOrderSponsoredTestConsentFindManyArgsSchema)]).optional(),
  Lab: z.union([z.boolean(),z.lazy(() => LabArgsSchema)]).optional(),
  SponsoredProgram: z.union([z.boolean(),z.lazy(() => SponsoredProgramArgsSchema)]).optional(),
  TestCatalog: z.union([z.boolean(),z.lazy(() => TestCatalogArgsSchema)]).optional(),
  _count: z.union([z.boolean(),z.lazy(() => SponsoredTestCountOutputTypeArgsSchema)]).optional(),
}).strict()

export const SponsoredTestArgsSchema: z.ZodType<Prisma.SponsoredTestDefaultArgs> = z.object({
  select: z.lazy(() => SponsoredTestSelectSchema).optional(),
  include: z.lazy(() => SponsoredTestIncludeSchema).optional(),
}).strict();

export const SponsoredTestCountOutputTypeArgsSchema: z.ZodType<Prisma.SponsoredTestCountOutputTypeDefaultArgs> = z.object({
  select: z.lazy(() => SponsoredTestCountOutputTypeSelectSchema).nullish(),
}).strict();

export const SponsoredTestCountOutputTypeSelectSchema: z.ZodType<Prisma.SponsoredTestCountOutputTypeSelect> = z.object({
  LabOrderSponsoredTestConsent: z.boolean().optional(),
}).strict();

export const SponsoredTestSelectSchema: z.ZodType<Prisma.SponsoredTestSelect> = z.object({
  Id: z.boolean().optional(),
  TestId: z.boolean().optional(),
  LabTestId: z.boolean().optional(),
  SponsoredProgramId: z.boolean().optional(),
  LabId: z.boolean().optional(),
  CasandraTestId: z.boolean().optional(),
  Category: z.boolean().optional(),
  SubCategory: z.boolean().optional(),
  CreatedAt: z.boolean().optional(),
  UpdatedAt: z.boolean().optional(),
  LabOrderSponsoredTestConsent: z.union([z.boolean(),z.lazy(() => LabOrderSponsoredTestConsentFindManyArgsSchema)]).optional(),
  Lab: z.union([z.boolean(),z.lazy(() => LabArgsSchema)]).optional(),
  SponsoredProgram: z.union([z.boolean(),z.lazy(() => SponsoredProgramArgsSchema)]).optional(),
  TestCatalog: z.union([z.boolean(),z.lazy(() => TestCatalogArgsSchema)]).optional(),
  _count: z.union([z.boolean(),z.lazy(() => SponsoredTestCountOutputTypeArgsSchema)]).optional(),
}).strict()

// TEST BIOMARKER
//------------------------------------------------------

export const TestBiomarkerIncludeSchema: z.ZodType<Prisma.TestBiomarkerInclude> = z.object({
  BIOMARKER: z.union([z.boolean(),z.lazy(() => BIOMARKERArgsSchema)]).optional(),
  TestCatalog: z.union([z.boolean(),z.lazy(() => TestCatalogArgsSchema)]).optional(),
}).strict()

export const TestBiomarkerArgsSchema: z.ZodType<Prisma.TestBiomarkerDefaultArgs> = z.object({
  select: z.lazy(() => TestBiomarkerSelectSchema).optional(),
  include: z.lazy(() => TestBiomarkerIncludeSchema).optional(),
}).strict();

export const TestBiomarkerSelectSchema: z.ZodType<Prisma.TestBiomarkerSelect> = z.object({
  Id: z.boolean().optional(),
  TestId: z.boolean().optional(),
  LabTestId: z.boolean().optional(),
  HGNCId: z.boolean().optional(),
  TranscriptReference: z.boolean().optional(),
  CreatedAt: z.boolean().optional(),
  UpdatedAt: z.boolean().optional(),
  BIOMARKER: z.union([z.boolean(),z.lazy(() => BIOMARKERArgsSchema)]).optional(),
  TestCatalog: z.union([z.boolean(),z.lazy(() => TestCatalogArgsSchema)]).optional(),
}).strict()

// TEST CATALOG
//------------------------------------------------------

export const TestCatalogIncludeSchema: z.ZodType<Prisma.TestCatalogInclude> = z.object({
  LabOrderTest: z.union([z.boolean(),z.lazy(() => LabOrderTestFindManyArgsSchema)]).optional(),
  OrganizationFavoriteTest: z.union([z.boolean(),z.lazy(() => OrganizationFavoriteTestFindManyArgsSchema)]).optional(),
  ProviderFavoriteTest: z.union([z.boolean(),z.lazy(() => ProviderFavoriteTestFindManyArgsSchema)]).optional(),
  SponsoredTest: z.union([z.boolean(),z.lazy(() => SponsoredTestFindManyArgsSchema)]).optional(),
  TestBiomarker: z.union([z.boolean(),z.lazy(() => TestBiomarkerFindManyArgsSchema)]).optional(),
  Lab: z.union([z.boolean(),z.lazy(() => LabArgsSchema)]).optional(),
  TestCptCode: z.union([z.boolean(),z.lazy(() => TestCptCodeFindManyArgsSchema)]).optional(),
  TestGene: z.union([z.boolean(),z.lazy(() => TestGeneFindManyArgsSchema)]).optional(),
  TestOrderLoinc: z.union([z.boolean(),z.lazy(() => TestOrderLoincFindManyArgsSchema)]).optional(),
  TestResultLoinc: z.union([z.boolean(),z.lazy(() => TestResultLoincFindManyArgsSchema)]).optional(),
  _count: z.union([z.boolean(),z.lazy(() => TestCatalogCountOutputTypeArgsSchema)]).optional(),
}).strict()

export const TestCatalogArgsSchema: z.ZodType<Prisma.TestCatalogDefaultArgs> = z.object({
  select: z.lazy(() => TestCatalogSelectSchema).optional(),
  include: z.lazy(() => TestCatalogIncludeSchema).optional(),
}).strict();

export const TestCatalogCountOutputTypeArgsSchema: z.ZodType<Prisma.TestCatalogCountOutputTypeDefaultArgs> = z.object({
  select: z.lazy(() => TestCatalogCountOutputTypeSelectSchema).nullish(),
}).strict();

export const TestCatalogCountOutputTypeSelectSchema: z.ZodType<Prisma.TestCatalogCountOutputTypeSelect> = z.object({
  LabOrderTest: z.boolean().optional(),
  OrganizationFavoriteTest: z.boolean().optional(),
  ProviderFavoriteTest: z.boolean().optional(),
  SponsoredTest: z.boolean().optional(),
  TestBiomarker: z.boolean().optional(),
  TestCptCode: z.boolean().optional(),
  TestGene: z.boolean().optional(),
  TestOrderLoinc: z.boolean().optional(),
  TestResultLoinc: z.boolean().optional(),
}).strict();

export const TestCatalogSelectSchema: z.ZodType<Prisma.TestCatalogSelect> = z.object({
  TestId: z.boolean().optional(),
  LabId: z.boolean().optional(),
  href: z.boolean().optional(),
  CasandraTestId: z.boolean().optional(),
  LabTestId: z.boolean().optional(),
  TestName: z.boolean().optional(),
  AlternativeName: z.boolean().optional(),
  AlternativeName1: z.boolean().optional(),
  AlternativeName2: z.boolean().optional(),
  AlternativeName3: z.boolean().optional(),
  AlternativeName4: z.boolean().optional(),
  AlternativeName5: z.boolean().optional(),
  TestIncludes: z.boolean().optional(),
  SpecimenType: z.boolean().optional(),
  SpecialInstructions: z.boolean().optional(),
  Methodology: z.boolean().optional(),
  TestDescription: z.boolean().optional(),
  Diseases: z.boolean().optional(),
  Probes: z.boolean().optional(),
  ClinicalSignificance: z.boolean().optional(),
  SpecimenRequirements: z.boolean().optional(),
  Volume: z.boolean().optional(),
  MinimumVolume: z.boolean().optional(),
  Container: z.boolean().optional(),
  Collection: z.boolean().optional(),
  StabilityRequirements: z.boolean().optional(),
  StorageTransportation: z.boolean().optional(),
  PatientPreparation: z.boolean().optional(),
  CausesForRejection: z.boolean().optional(),
  TestUsage: z.boolean().optional(),
  TestLimitations: z.boolean().optional(),
  CPTCodes: z.boolean().optional(),
  NewYorkApproved: z.boolean().optional(),
  LevelOfService: z.boolean().optional(),
  TurnAroundTime: z.boolean().optional(),
  AssayCategory: z.boolean().optional(),
  ReferenceRanges: z.boolean().optional(),
  SetupSchedule: z.boolean().optional(),
  AlternativeSpecimen: z.boolean().optional(),
  LoincCodesText: z.boolean().optional(),
  LoincCodesHTML: z.boolean().optional(),
  TestCategory: z.boolean().optional(),
  TestSubCategory: z.boolean().optional(),
  CreatedAt: z.boolean().optional(),
  UpdatedAt: z.boolean().optional(),
  LabOrderTest: z.union([z.boolean(),z.lazy(() => LabOrderTestFindManyArgsSchema)]).optional(),
  OrganizationFavoriteTest: z.union([z.boolean(),z.lazy(() => OrganizationFavoriteTestFindManyArgsSchema)]).optional(),
  ProviderFavoriteTest: z.union([z.boolean(),z.lazy(() => ProviderFavoriteTestFindManyArgsSchema)]).optional(),
  SponsoredTest: z.union([z.boolean(),z.lazy(() => SponsoredTestFindManyArgsSchema)]).optional(),
  TestBiomarker: z.union([z.boolean(),z.lazy(() => TestBiomarkerFindManyArgsSchema)]).optional(),
  Lab: z.union([z.boolean(),z.lazy(() => LabArgsSchema)]).optional(),
  TestCptCode: z.union([z.boolean(),z.lazy(() => TestCptCodeFindManyArgsSchema)]).optional(),
  TestGene: z.union([z.boolean(),z.lazy(() => TestGeneFindManyArgsSchema)]).optional(),
  TestOrderLoinc: z.union([z.boolean(),z.lazy(() => TestOrderLoincFindManyArgsSchema)]).optional(),
  TestResultLoinc: z.union([z.boolean(),z.lazy(() => TestResultLoincFindManyArgsSchema)]).optional(),
  _count: z.union([z.boolean(),z.lazy(() => TestCatalogCountOutputTypeArgsSchema)]).optional(),
}).strict()

// TEST CPT CODE
//------------------------------------------------------

export const TestCptCodeIncludeSchema: z.ZodType<Prisma.TestCptCodeInclude> = z.object({
  TestCatalog: z.union([z.boolean(),z.lazy(() => TestCatalogArgsSchema)]).optional(),
}).strict()

export const TestCptCodeArgsSchema: z.ZodType<Prisma.TestCptCodeDefaultArgs> = z.object({
  select: z.lazy(() => TestCptCodeSelectSchema).optional(),
  include: z.lazy(() => TestCptCodeIncludeSchema).optional(),
}).strict();

export const TestCptCodeSelectSchema: z.ZodType<Prisma.TestCptCodeSelect> = z.object({
  Id: z.boolean().optional(),
  TestId: z.boolean().optional(),
  LabTestId: z.boolean().optional(),
  CptCode: z.boolean().optional(),
  Modifier: z.boolean().optional(),
  Comments: z.boolean().optional(),
  CreatedAt: z.boolean().optional(),
  UpdatedAt: z.boolean().optional(),
  TestCatalog: z.union([z.boolean(),z.lazy(() => TestCatalogArgsSchema)]).optional(),
}).strict()

// TEST GENE
//------------------------------------------------------

export const TestGeneIncludeSchema: z.ZodType<Prisma.TestGeneInclude> = z.object({
  TestCatalog: z.union([z.boolean(),z.lazy(() => TestCatalogArgsSchema)]).optional(),
}).strict()

export const TestGeneArgsSchema: z.ZodType<Prisma.TestGeneDefaultArgs> = z.object({
  select: z.lazy(() => TestGeneSelectSchema).optional(),
  include: z.lazy(() => TestGeneIncludeSchema).optional(),
}).strict();

export const TestGeneSelectSchema: z.ZodType<Prisma.TestGeneSelect> = z.object({
  Id: z.boolean().optional(),
  TestId: z.boolean().optional(),
  LabTestId: z.boolean().optional(),
  Gene: z.boolean().optional(),
  TranscriptReference: z.boolean().optional(),
  CreatedAt: z.boolean().optional(),
  UpdatedAt: z.boolean().optional(),
  TestCatalog: z.union([z.boolean(),z.lazy(() => TestCatalogArgsSchema)]).optional(),
}).strict()

// TEST ORDER LOINC
//------------------------------------------------------

export const TestOrderLoincIncludeSchema: z.ZodType<Prisma.TestOrderLoincInclude> = z.object({
  LOINC: z.union([z.boolean(),z.lazy(() => LOINCArgsSchema)]).optional(),
  TestCatalog: z.union([z.boolean(),z.lazy(() => TestCatalogArgsSchema)]).optional(),
}).strict()

export const TestOrderLoincArgsSchema: z.ZodType<Prisma.TestOrderLoincDefaultArgs> = z.object({
  select: z.lazy(() => TestOrderLoincSelectSchema).optional(),
  include: z.lazy(() => TestOrderLoincIncludeSchema).optional(),
}).strict();

export const TestOrderLoincSelectSchema: z.ZodType<Prisma.TestOrderLoincSelect> = z.object({
  Id: z.boolean().optional(),
  TestId: z.boolean().optional(),
  LabTestId: z.boolean().optional(),
  OrderLoinc: z.boolean().optional(),
  CreatedAt: z.boolean().optional(),
  UpdatedAt: z.boolean().optional(),
  LOINC: z.union([z.boolean(),z.lazy(() => LOINCArgsSchema)]).optional(),
  TestCatalog: z.union([z.boolean(),z.lazy(() => TestCatalogArgsSchema)]).optional(),
}).strict()

// TEST RESULT LOINC
//------------------------------------------------------

export const TestResultLoincIncludeSchema: z.ZodType<Prisma.TestResultLoincInclude> = z.object({
  LOINC: z.union([z.boolean(),z.lazy(() => LOINCArgsSchema)]).optional(),
  TestCatalog: z.union([z.boolean(),z.lazy(() => TestCatalogArgsSchema)]).optional(),
}).strict()

export const TestResultLoincArgsSchema: z.ZodType<Prisma.TestResultLoincDefaultArgs> = z.object({
  select: z.lazy(() => TestResultLoincSelectSchema).optional(),
  include: z.lazy(() => TestResultLoincIncludeSchema).optional(),
}).strict();

export const TestResultLoincSelectSchema: z.ZodType<Prisma.TestResultLoincSelect> = z.object({
  Id: z.boolean().optional(),
  TestId: z.boolean().optional(),
  LabTestId: z.boolean().optional(),
  ResultCode: z.boolean().optional(),
  ResultCodeName: z.boolean().optional(),
  UofM: z.boolean().optional(),
  ResultLoinc: z.boolean().optional(),
  CreatedAt: z.boolean().optional(),
  UpdatedAt: z.boolean().optional(),
  LOINC: z.union([z.boolean(),z.lazy(() => LOINCArgsSchema)]).optional(),
  TestCatalog: z.union([z.boolean(),z.lazy(() => TestCatalogArgsSchema)]).optional(),
}).strict()

// USER
//------------------------------------------------------

export const UserIncludeSchema: z.ZodType<Prisma.UserInclude> = z.object({
  Account: z.union([z.boolean(),z.lazy(() => AccountArgsSchema)]).optional(),
  Session: z.union([z.boolean(),z.lazy(() => SessionFindManyArgsSchema)]).optional(),
  UserAttribute: z.union([z.boolean(),z.lazy(() => UserAttributeArgsSchema)]).optional(),
  _count: z.union([z.boolean(),z.lazy(() => UserCountOutputTypeArgsSchema)]).optional(),
}).strict()

export const UserArgsSchema: z.ZodType<Prisma.UserDefaultArgs> = z.object({
  select: z.lazy(() => UserSelectSchema).optional(),
  include: z.lazy(() => UserIncludeSchema).optional(),
}).strict();

export const UserCountOutputTypeArgsSchema: z.ZodType<Prisma.UserCountOutputTypeDefaultArgs> = z.object({
  select: z.lazy(() => UserCountOutputTypeSelectSchema).nullish(),
}).strict();

export const UserCountOutputTypeSelectSchema: z.ZodType<Prisma.UserCountOutputTypeSelect> = z.object({
  Session: z.boolean().optional(),
}).strict();

export const UserSelectSchema: z.ZodType<Prisma.UserSelect> = z.object({
  id: z.boolean().optional(),
  name: z.boolean().optional(),
  email: z.boolean().optional(),
  password: z.boolean().optional(),
  emailVerified: z.boolean().optional(),
  image: z.boolean().optional(),
  Account: z.union([z.boolean(),z.lazy(() => AccountArgsSchema)]).optional(),
  Session: z.union([z.boolean(),z.lazy(() => SessionFindManyArgsSchema)]).optional(),
  UserAttribute: z.union([z.boolean(),z.lazy(() => UserAttributeArgsSchema)]).optional(),
  _count: z.union([z.boolean(),z.lazy(() => UserCountOutputTypeArgsSchema)]).optional(),
}).strict()

// USER ATTRIBUTE
//------------------------------------------------------

export const UserAttributeIncludeSchema: z.ZodType<Prisma.UserAttributeInclude> = z.object({
  Admin: z.union([z.boolean(),z.lazy(() => AdminArgsSchema)]).optional(),
  Provider: z.union([z.boolean(),z.lazy(() => ProviderArgsSchema)]).optional(),
  User: z.union([z.boolean(),z.lazy(() => UserArgsSchema)]).optional(),
}).strict()

export const UserAttributeArgsSchema: z.ZodType<Prisma.UserAttributeDefaultArgs> = z.object({
  select: z.lazy(() => UserAttributeSelectSchema).optional(),
  include: z.lazy(() => UserAttributeIncludeSchema).optional(),
}).strict();

export const UserAttributeSelectSchema: z.ZodType<Prisma.UserAttributeSelect> = z.object({
  Id: z.boolean().optional(),
  UserId: z.boolean().optional(),
  UserType: z.boolean().optional(),
  Admin: z.union([z.boolean(),z.lazy(() => AdminArgsSchema)]).optional(),
  Provider: z.union([z.boolean(),z.lazy(() => ProviderArgsSchema)]).optional(),
  User: z.union([z.boolean(),z.lazy(() => UserArgsSchema)]).optional(),
}).strict()

// VERIFICATION TOKEN
//------------------------------------------------------

export const VerificationTokenSelectSchema: z.ZodType<Prisma.VerificationTokenSelect> = z.object({
  identifier: z.boolean().optional(),
  token: z.boolean().optional(),
  expires: z.boolean().optional(),
}).strict()


/////////////////////////////////////////
// INPUT TYPES
/////////////////////////////////////////

export const AccountWhereInputSchema: z.ZodType<Prisma.AccountWhereInput> = z.object({
  AND: z.union([ z.lazy(() => AccountWhereInputSchema),z.lazy(() => AccountWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => AccountWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => AccountWhereInputSchema),z.lazy(() => AccountWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  userId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  type: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  provider: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  providerAccountId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  refresh_token: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  access_token: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  expires_at: z.union([ z.lazy(() => IntNullableFilterSchema),z.number() ]).optional().nullable(),
  token_type: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  scope: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  state: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  id_token: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  session_state: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  refresh_token_expires_in: z.union([ z.lazy(() => IntNullableFilterSchema),z.number() ]).optional().nullable(),
  epic_dstu2_patient: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  appointment: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  dob: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  encounter: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  location: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  loginDepartment: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  need_patient_banner: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  patient: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  smart_style_url: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  unconfirmed_status: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  user_email: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  username: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  tenant: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  createdAt: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.date() ]).optional().nullable(),
  updatedAt: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.date() ]).optional().nullable(),
  user: z.union([ z.lazy(() => UserRelationFilterSchema),z.lazy(() => UserWhereInputSchema) ]).optional(),
}).strict();

export const AccountOrderByWithRelationInputSchema: z.ZodType<Prisma.AccountOrderByWithRelationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  userId: z.lazy(() => SortOrderSchema).optional(),
  type: z.lazy(() => SortOrderSchema).optional(),
  provider: z.lazy(() => SortOrderSchema).optional(),
  providerAccountId: z.lazy(() => SortOrderSchema).optional(),
  refresh_token: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  access_token: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  expires_at: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  token_type: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  scope: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  state: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  id_token: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  session_state: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  refresh_token_expires_in: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  epic_dstu2_patient: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  appointment: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  dob: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  encounter: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  location: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  loginDepartment: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  need_patient_banner: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  patient: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  smart_style_url: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  unconfirmed_status: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  user_email: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  username: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  tenant: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  createdAt: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  updatedAt: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  user: z.lazy(() => UserOrderByWithRelationInputSchema).optional(),
  _relevance: z.lazy(() => AccountOrderByRelevanceInputSchema).optional()
}).strict();

export const AccountWhereUniqueInputSchema: z.ZodType<Prisma.AccountWhereUniqueInput> = z.union([
  z.object({
    id: z.string(),
    userId: z.string(),
    provider_providerAccountId: z.lazy(() => AccountProviderProviderAccountIdCompoundUniqueInputSchema)
  }),
  z.object({
    id: z.string(),
    userId: z.string(),
  }),
  z.object({
    id: z.string(),
    provider_providerAccountId: z.lazy(() => AccountProviderProviderAccountIdCompoundUniqueInputSchema),
  }),
  z.object({
    id: z.string(),
  }),
  z.object({
    userId: z.string(),
    provider_providerAccountId: z.lazy(() => AccountProviderProviderAccountIdCompoundUniqueInputSchema),
  }),
  z.object({
    userId: z.string(),
  }),
  z.object({
    provider_providerAccountId: z.lazy(() => AccountProviderProviderAccountIdCompoundUniqueInputSchema),
  }),
])
.and(z.object({
  id: z.string().optional(),
  userId: z.string().optional(),
  provider_providerAccountId: z.lazy(() => AccountProviderProviderAccountIdCompoundUniqueInputSchema).optional(),
  AND: z.union([ z.lazy(() => AccountWhereInputSchema),z.lazy(() => AccountWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => AccountWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => AccountWhereInputSchema),z.lazy(() => AccountWhereInputSchema).array() ]).optional(),
  type: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  provider: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  providerAccountId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  refresh_token: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  access_token: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  expires_at: z.union([ z.lazy(() => IntNullableFilterSchema),z.number() ]).optional().nullable(),
  token_type: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  scope: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  state: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  id_token: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  session_state: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  refresh_token_expires_in: z.union([ z.lazy(() => IntNullableFilterSchema),z.number() ]).optional().nullable(),
  epic_dstu2_patient: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  appointment: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  dob: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  encounter: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  location: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  loginDepartment: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  need_patient_banner: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  patient: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  smart_style_url: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  unconfirmed_status: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  user_email: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  username: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  tenant: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  createdAt: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.date() ]).optional().nullable(),
  updatedAt: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.date() ]).optional().nullable(),
  user: z.union([ z.lazy(() => UserRelationFilterSchema),z.lazy(() => UserWhereInputSchema) ]).optional(),
}).strict());

export const AccountOrderByWithAggregationInputSchema: z.ZodType<Prisma.AccountOrderByWithAggregationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  userId: z.lazy(() => SortOrderSchema).optional(),
  type: z.lazy(() => SortOrderSchema).optional(),
  provider: z.lazy(() => SortOrderSchema).optional(),
  providerAccountId: z.lazy(() => SortOrderSchema).optional(),
  refresh_token: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  access_token: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  expires_at: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  token_type: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  scope: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  state: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  id_token: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  session_state: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  refresh_token_expires_in: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  epic_dstu2_patient: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  appointment: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  dob: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  encounter: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  location: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  loginDepartment: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  need_patient_banner: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  patient: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  smart_style_url: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  unconfirmed_status: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  user_email: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  username: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  tenant: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  createdAt: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  updatedAt: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  _count: z.lazy(() => AccountCountOrderByAggregateInputSchema).optional(),
  _avg: z.lazy(() => AccountAvgOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => AccountMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => AccountMinOrderByAggregateInputSchema).optional(),
  _sum: z.lazy(() => AccountSumOrderByAggregateInputSchema).optional()
}).strict();

export const AccountScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.AccountScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => AccountScalarWhereWithAggregatesInputSchema),z.lazy(() => AccountScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => AccountScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => AccountScalarWhereWithAggregatesInputSchema),z.lazy(() => AccountScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  userId: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  type: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  provider: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  providerAccountId: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  refresh_token: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  access_token: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  expires_at: z.union([ z.lazy(() => IntNullableWithAggregatesFilterSchema),z.number() ]).optional().nullable(),
  token_type: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  scope: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  state: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  id_token: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  session_state: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  refresh_token_expires_in: z.union([ z.lazy(() => IntNullableWithAggregatesFilterSchema),z.number() ]).optional().nullable(),
  epic_dstu2_patient: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  appointment: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  dob: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  encounter: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  location: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  loginDepartment: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  need_patient_banner: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  patient: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  smart_style_url: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  unconfirmed_status: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  user_email: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  username: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  tenant: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  createdAt: z.union([ z.lazy(() => DateTimeNullableWithAggregatesFilterSchema),z.date() ]).optional().nullable(),
  updatedAt: z.union([ z.lazy(() => DateTimeNullableWithAggregatesFilterSchema),z.date() ]).optional().nullable(),
}).strict();

export const AdminWhereInputSchema: z.ZodType<Prisma.AdminWhereInput> = z.object({
  AND: z.union([ z.lazy(() => AdminWhereInputSchema),z.lazy(() => AdminWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => AdminWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => AdminWhereInputSchema),z.lazy(() => AdminWhereInputSchema).array() ]).optional(),
  Id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  Name: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  Email: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  UserAttributeId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  UserAttribute: z.union([ z.lazy(() => UserAttributeRelationFilterSchema),z.lazy(() => UserAttributeWhereInputSchema) ]).optional(),
}).strict();

export const AdminOrderByWithRelationInputSchema: z.ZodType<Prisma.AdminOrderByWithRelationInput> = z.object({
  Id: z.lazy(() => SortOrderSchema).optional(),
  Name: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  Email: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  UserAttributeId: z.lazy(() => SortOrderSchema).optional(),
  UserAttribute: z.lazy(() => UserAttributeOrderByWithRelationInputSchema).optional(),
  _relevance: z.lazy(() => AdminOrderByRelevanceInputSchema).optional()
}).strict();

export const AdminWhereUniqueInputSchema: z.ZodType<Prisma.AdminWhereUniqueInput> = z.union([
  z.object({
    Id: z.string(),
    UserAttributeId: z.string()
  }),
  z.object({
    Id: z.string(),
  }),
  z.object({
    UserAttributeId: z.string(),
  }),
])
.and(z.object({
  Id: z.string().optional(),
  UserAttributeId: z.string().optional(),
  AND: z.union([ z.lazy(() => AdminWhereInputSchema),z.lazy(() => AdminWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => AdminWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => AdminWhereInputSchema),z.lazy(() => AdminWhereInputSchema).array() ]).optional(),
  Name: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  Email: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  UserAttribute: z.union([ z.lazy(() => UserAttributeRelationFilterSchema),z.lazy(() => UserAttributeWhereInputSchema) ]).optional(),
}).strict());

export const AdminOrderByWithAggregationInputSchema: z.ZodType<Prisma.AdminOrderByWithAggregationInput> = z.object({
  Id: z.lazy(() => SortOrderSchema).optional(),
  Name: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  Email: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  UserAttributeId: z.lazy(() => SortOrderSchema).optional(),
  _count: z.lazy(() => AdminCountOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => AdminMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => AdminMinOrderByAggregateInputSchema).optional()
}).strict();

export const AdminScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.AdminScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => AdminScalarWhereWithAggregatesInputSchema),z.lazy(() => AdminScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => AdminScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => AdminScalarWhereWithAggregatesInputSchema),z.lazy(() => AdminScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  Id: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  Name: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  Email: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  UserAttributeId: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
}).strict();

export const AttachmentWhereInputSchema: z.ZodType<Prisma.AttachmentWhereInput> = z.object({
  AND: z.union([ z.lazy(() => AttachmentWhereInputSchema),z.lazy(() => AttachmentWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => AttachmentWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => AttachmentWhereInputSchema),z.lazy(() => AttachmentWhereInputSchema).array() ]).optional(),
  Id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  AttachmentType: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  AttachmentUrl: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  CreatedAt: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.date() ]).optional().nullable(),
  UpdatedAt: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.date() ]).optional().nullable(),
  LabOrderAttachment: z.lazy(() => LabOrderAttachmentListRelationFilterSchema).optional()
}).strict();

export const AttachmentOrderByWithRelationInputSchema: z.ZodType<Prisma.AttachmentOrderByWithRelationInput> = z.object({
  Id: z.lazy(() => SortOrderSchema).optional(),
  AttachmentType: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  AttachmentUrl: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  CreatedAt: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  UpdatedAt: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  LabOrderAttachment: z.lazy(() => LabOrderAttachmentOrderByRelationAggregateInputSchema).optional(),
  _relevance: z.lazy(() => AttachmentOrderByRelevanceInputSchema).optional()
}).strict();

export const AttachmentWhereUniqueInputSchema: z.ZodType<Prisma.AttachmentWhereUniqueInput> = z.object({
  Id: z.string()
})
.and(z.object({
  Id: z.string().optional(),
  AND: z.union([ z.lazy(() => AttachmentWhereInputSchema),z.lazy(() => AttachmentWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => AttachmentWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => AttachmentWhereInputSchema),z.lazy(() => AttachmentWhereInputSchema).array() ]).optional(),
  AttachmentType: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  AttachmentUrl: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  CreatedAt: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.date() ]).optional().nullable(),
  UpdatedAt: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.date() ]).optional().nullable(),
  LabOrderAttachment: z.lazy(() => LabOrderAttachmentListRelationFilterSchema).optional()
}).strict());

export const AttachmentOrderByWithAggregationInputSchema: z.ZodType<Prisma.AttachmentOrderByWithAggregationInput> = z.object({
  Id: z.lazy(() => SortOrderSchema).optional(),
  AttachmentType: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  AttachmentUrl: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  CreatedAt: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  UpdatedAt: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  _count: z.lazy(() => AttachmentCountOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => AttachmentMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => AttachmentMinOrderByAggregateInputSchema).optional()
}).strict();

export const AttachmentScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.AttachmentScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => AttachmentScalarWhereWithAggregatesInputSchema),z.lazy(() => AttachmentScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => AttachmentScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => AttachmentScalarWhereWithAggregatesInputSchema),z.lazy(() => AttachmentScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  Id: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  AttachmentType: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  AttachmentUrl: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  CreatedAt: z.union([ z.lazy(() => DateTimeNullableWithAggregatesFilterSchema),z.date() ]).optional().nullable(),
  UpdatedAt: z.union([ z.lazy(() => DateTimeNullableWithAggregatesFilterSchema),z.date() ]).optional().nullable(),
}).strict();

export const BIOMARKERWhereInputSchema: z.ZodType<Prisma.BIOMARKERWhereInput> = z.object({
  AND: z.union([ z.lazy(() => BIOMARKERWhereInputSchema),z.lazy(() => BIOMARKERWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => BIOMARKERWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => BIOMARKERWhereInputSchema),z.lazy(() => BIOMARKERWhereInputSchema).array() ]).optional(),
  HGNCId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  HGNCStatus: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  HGNCApprovedSymbol: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  HGNCApprovedName: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  TestBiomarker: z.lazy(() => TestBiomarkerListRelationFilterSchema).optional()
}).strict();

export const BIOMARKEROrderByWithRelationInputSchema: z.ZodType<Prisma.BIOMARKEROrderByWithRelationInput> = z.object({
  HGNCId: z.lazy(() => SortOrderSchema).optional(),
  HGNCStatus: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  HGNCApprovedSymbol: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  HGNCApprovedName: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  TestBiomarker: z.lazy(() => TestBiomarkerOrderByRelationAggregateInputSchema).optional(),
  _relevance: z.lazy(() => BIOMARKEROrderByRelevanceInputSchema).optional()
}).strict();

export const BIOMARKERWhereUniqueInputSchema: z.ZodType<Prisma.BIOMARKERWhereUniqueInput> = z.union([
  z.object({
    HGNCId: z.string(),
    HGNCApprovedSymbol: z.string()
  }),
  z.object({
    HGNCId: z.string(),
  }),
  z.object({
    HGNCApprovedSymbol: z.string(),
  }),
])
.and(z.object({
  HGNCId: z.string().optional(),
  HGNCApprovedSymbol: z.string().optional(),
  AND: z.union([ z.lazy(() => BIOMARKERWhereInputSchema),z.lazy(() => BIOMARKERWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => BIOMARKERWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => BIOMARKERWhereInputSchema),z.lazy(() => BIOMARKERWhereInputSchema).array() ]).optional(),
  HGNCStatus: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  HGNCApprovedName: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  TestBiomarker: z.lazy(() => TestBiomarkerListRelationFilterSchema).optional()
}).strict());

export const BIOMARKEROrderByWithAggregationInputSchema: z.ZodType<Prisma.BIOMARKEROrderByWithAggregationInput> = z.object({
  HGNCId: z.lazy(() => SortOrderSchema).optional(),
  HGNCStatus: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  HGNCApprovedSymbol: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  HGNCApprovedName: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  _count: z.lazy(() => BIOMARKERCountOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => BIOMARKERMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => BIOMARKERMinOrderByAggregateInputSchema).optional()
}).strict();

export const BIOMARKERScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.BIOMARKERScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => BIOMARKERScalarWhereWithAggregatesInputSchema),z.lazy(() => BIOMARKERScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => BIOMARKERScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => BIOMARKERScalarWhereWithAggregatesInputSchema),z.lazy(() => BIOMARKERScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  HGNCId: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  HGNCStatus: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  HGNCApprovedSymbol: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  HGNCApprovedName: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
}).strict();

export const ICDWhereInputSchema: z.ZodType<Prisma.ICDWhereInput> = z.object({
  AND: z.union([ z.lazy(() => ICDWhereInputSchema),z.lazy(() => ICDWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => ICDWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => ICDWhereInputSchema),z.lazy(() => ICDWhereInputSchema).array() ]).optional(),
  Id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  Code: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  ShortDescription: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  CreatedAt: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.date() ]).optional().nullable(),
  UpdatedAt: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.date() ]).optional().nullable(),
  LabOrderIcd: z.lazy(() => LabOrderIcdListRelationFilterSchema).optional()
}).strict();

export const ICDOrderByWithRelationInputSchema: z.ZodType<Prisma.ICDOrderByWithRelationInput> = z.object({
  Id: z.lazy(() => SortOrderSchema).optional(),
  Code: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  ShortDescription: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  CreatedAt: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  UpdatedAt: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  LabOrderIcd: z.lazy(() => LabOrderIcdOrderByRelationAggregateInputSchema).optional(),
  _relevance: z.lazy(() => ICDOrderByRelevanceInputSchema).optional()
}).strict();

export const ICDWhereUniqueInputSchema: z.ZodType<Prisma.ICDWhereUniqueInput> = z.object({
  Id: z.string()
})
.and(z.object({
  Id: z.string().optional(),
  AND: z.union([ z.lazy(() => ICDWhereInputSchema),z.lazy(() => ICDWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => ICDWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => ICDWhereInputSchema),z.lazy(() => ICDWhereInputSchema).array() ]).optional(),
  Code: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  ShortDescription: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  CreatedAt: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.date() ]).optional().nullable(),
  UpdatedAt: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.date() ]).optional().nullable(),
  LabOrderIcd: z.lazy(() => LabOrderIcdListRelationFilterSchema).optional()
}).strict());

export const ICDOrderByWithAggregationInputSchema: z.ZodType<Prisma.ICDOrderByWithAggregationInput> = z.object({
  Id: z.lazy(() => SortOrderSchema).optional(),
  Code: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  ShortDescription: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  CreatedAt: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  UpdatedAt: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  _count: z.lazy(() => ICDCountOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => ICDMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => ICDMinOrderByAggregateInputSchema).optional()
}).strict();

export const ICDScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.ICDScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => ICDScalarWhereWithAggregatesInputSchema),z.lazy(() => ICDScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => ICDScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => ICDScalarWhereWithAggregatesInputSchema),z.lazy(() => ICDScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  Id: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  Code: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  ShortDescription: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  CreatedAt: z.union([ z.lazy(() => DateTimeNullableWithAggregatesFilterSchema),z.date() ]).optional().nullable(),
  UpdatedAt: z.union([ z.lazy(() => DateTimeNullableWithAggregatesFilterSchema),z.date() ]).optional().nullable(),
}).strict();

export const LOINCWhereInputSchema: z.ZodType<Prisma.LOINCWhereInput> = z.object({
  AND: z.union([ z.lazy(() => LOINCWhereInputSchema),z.lazy(() => LOINCWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => LOINCWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => LOINCWhereInputSchema),z.lazy(() => LOINCWhereInputSchema).array() ]).optional(),
  Loinc_Num: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  COMPONENT: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  PROPERTY: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  TIME_ASPCT: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  SYSTEM: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  SCALE_TYP: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  METHOD_TYP: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  CLASS: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  VersionLastChanged: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  CHNG_TYPE: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  DefinitionDescription: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  STATUS: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  CONSUMER_NAME: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  CLASSTYPE: z.union([ z.lazy(() => IntNullableFilterSchema),z.number() ]).optional().nullable(),
  FORMULA: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  EXMPL_ANSWERS: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  SURVEY_QUEST_TEXT: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  SURVEY_QUEST_SRC: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  UNITSREQUIRED: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  RELATEDNAMES2: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  SHORTNAME: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  ORDER_OBS: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  HL7_FIELD_SUBFIELD_ID: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  EXTERNAL_COPYRIGHT_NOTICE: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  EXAMPLE_UNITS: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  LONG_COMMON_NAME: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  EXAMPLE_UCUM_UNITS: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  STATUS_REASON: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  STATUS_TEXT: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  CHANGE_REASON_PUBLIC: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  COMMON_TEST_RANK: z.union([ z.lazy(() => IntNullableFilterSchema),z.number() ]).optional().nullable(),
  COMMON_ORDER_RANK: z.union([ z.lazy(() => IntNullableFilterSchema),z.number() ]).optional().nullable(),
  HL7_ATTACHMENT_STRUCTURE: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  EXTERNAL_COPYRIGHT_LINK: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  PanelType: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  AskAtOrderEntry: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  AssociatedObservations: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  VersionFirstReleased: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  ValidHL7AttachmentRequest: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  DisplayName: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  TestOrderLoinc: z.lazy(() => TestOrderLoincListRelationFilterSchema).optional(),
  TestResultLoinc: z.lazy(() => TestResultLoincListRelationFilterSchema).optional()
}).strict();

export const LOINCOrderByWithRelationInputSchema: z.ZodType<Prisma.LOINCOrderByWithRelationInput> = z.object({
  Loinc_Num: z.lazy(() => SortOrderSchema).optional(),
  COMPONENT: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  PROPERTY: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  TIME_ASPCT: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  SYSTEM: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  SCALE_TYP: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  METHOD_TYP: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  CLASS: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  VersionLastChanged: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  CHNG_TYPE: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  DefinitionDescription: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  STATUS: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  CONSUMER_NAME: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  CLASSTYPE: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  FORMULA: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  EXMPL_ANSWERS: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  SURVEY_QUEST_TEXT: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  SURVEY_QUEST_SRC: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  UNITSREQUIRED: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  RELATEDNAMES2: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  SHORTNAME: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  ORDER_OBS: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  HL7_FIELD_SUBFIELD_ID: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  EXTERNAL_COPYRIGHT_NOTICE: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  EXAMPLE_UNITS: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  LONG_COMMON_NAME: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  EXAMPLE_UCUM_UNITS: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  STATUS_REASON: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  STATUS_TEXT: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  CHANGE_REASON_PUBLIC: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  COMMON_TEST_RANK: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  COMMON_ORDER_RANK: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  HL7_ATTACHMENT_STRUCTURE: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  EXTERNAL_COPYRIGHT_LINK: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  PanelType: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  AskAtOrderEntry: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  AssociatedObservations: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  VersionFirstReleased: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  ValidHL7AttachmentRequest: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  DisplayName: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  TestOrderLoinc: z.lazy(() => TestOrderLoincOrderByRelationAggregateInputSchema).optional(),
  TestResultLoinc: z.lazy(() => TestResultLoincOrderByRelationAggregateInputSchema).optional(),
  _relevance: z.lazy(() => LOINCOrderByRelevanceInputSchema).optional()
}).strict();

export const LOINCWhereUniqueInputSchema: z.ZodType<Prisma.LOINCWhereUniqueInput> = z.object({
  Loinc_Num: z.string()
})
.and(z.object({
  Loinc_Num: z.string().optional(),
  AND: z.union([ z.lazy(() => LOINCWhereInputSchema),z.lazy(() => LOINCWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => LOINCWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => LOINCWhereInputSchema),z.lazy(() => LOINCWhereInputSchema).array() ]).optional(),
  COMPONENT: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  PROPERTY: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  TIME_ASPCT: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  SYSTEM: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  SCALE_TYP: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  METHOD_TYP: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  CLASS: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  VersionLastChanged: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  CHNG_TYPE: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  DefinitionDescription: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  STATUS: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  CONSUMER_NAME: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  CLASSTYPE: z.union([ z.lazy(() => IntNullableFilterSchema),z.number() ]).optional().nullable(),
  FORMULA: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  EXMPL_ANSWERS: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  SURVEY_QUEST_TEXT: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  SURVEY_QUEST_SRC: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  UNITSREQUIRED: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  RELATEDNAMES2: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  SHORTNAME: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  ORDER_OBS: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  HL7_FIELD_SUBFIELD_ID: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  EXTERNAL_COPYRIGHT_NOTICE: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  EXAMPLE_UNITS: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  LONG_COMMON_NAME: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  EXAMPLE_UCUM_UNITS: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  STATUS_REASON: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  STATUS_TEXT: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  CHANGE_REASON_PUBLIC: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  COMMON_TEST_RANK: z.union([ z.lazy(() => IntNullableFilterSchema),z.number() ]).optional().nullable(),
  COMMON_ORDER_RANK: z.union([ z.lazy(() => IntNullableFilterSchema),z.number() ]).optional().nullable(),
  HL7_ATTACHMENT_STRUCTURE: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  EXTERNAL_COPYRIGHT_LINK: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  PanelType: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  AskAtOrderEntry: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  AssociatedObservations: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  VersionFirstReleased: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  ValidHL7AttachmentRequest: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  DisplayName: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  TestOrderLoinc: z.lazy(() => TestOrderLoincListRelationFilterSchema).optional(),
  TestResultLoinc: z.lazy(() => TestResultLoincListRelationFilterSchema).optional()
}).strict());

export const LOINCOrderByWithAggregationInputSchema: z.ZodType<Prisma.LOINCOrderByWithAggregationInput> = z.object({
  Loinc_Num: z.lazy(() => SortOrderSchema).optional(),
  COMPONENT: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  PROPERTY: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  TIME_ASPCT: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  SYSTEM: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  SCALE_TYP: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  METHOD_TYP: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  CLASS: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  VersionLastChanged: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  CHNG_TYPE: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  DefinitionDescription: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  STATUS: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  CONSUMER_NAME: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  CLASSTYPE: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  FORMULA: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  EXMPL_ANSWERS: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  SURVEY_QUEST_TEXT: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  SURVEY_QUEST_SRC: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  UNITSREQUIRED: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  RELATEDNAMES2: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  SHORTNAME: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  ORDER_OBS: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  HL7_FIELD_SUBFIELD_ID: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  EXTERNAL_COPYRIGHT_NOTICE: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  EXAMPLE_UNITS: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  LONG_COMMON_NAME: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  EXAMPLE_UCUM_UNITS: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  STATUS_REASON: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  STATUS_TEXT: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  CHANGE_REASON_PUBLIC: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  COMMON_TEST_RANK: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  COMMON_ORDER_RANK: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  HL7_ATTACHMENT_STRUCTURE: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  EXTERNAL_COPYRIGHT_LINK: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  PanelType: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  AskAtOrderEntry: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  AssociatedObservations: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  VersionFirstReleased: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  ValidHL7AttachmentRequest: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  DisplayName: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  _count: z.lazy(() => LOINCCountOrderByAggregateInputSchema).optional(),
  _avg: z.lazy(() => LOINCAvgOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => LOINCMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => LOINCMinOrderByAggregateInputSchema).optional(),
  _sum: z.lazy(() => LOINCSumOrderByAggregateInputSchema).optional()
}).strict();

export const LOINCScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.LOINCScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => LOINCScalarWhereWithAggregatesInputSchema),z.lazy(() => LOINCScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => LOINCScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => LOINCScalarWhereWithAggregatesInputSchema),z.lazy(() => LOINCScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  Loinc_Num: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  COMPONENT: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  PROPERTY: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  TIME_ASPCT: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  SYSTEM: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  SCALE_TYP: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  METHOD_TYP: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  CLASS: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  VersionLastChanged: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  CHNG_TYPE: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  DefinitionDescription: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  STATUS: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  CONSUMER_NAME: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  CLASSTYPE: z.union([ z.lazy(() => IntNullableWithAggregatesFilterSchema),z.number() ]).optional().nullable(),
  FORMULA: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  EXMPL_ANSWERS: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  SURVEY_QUEST_TEXT: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  SURVEY_QUEST_SRC: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  UNITSREQUIRED: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  RELATEDNAMES2: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  SHORTNAME: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  ORDER_OBS: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  HL7_FIELD_SUBFIELD_ID: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  EXTERNAL_COPYRIGHT_NOTICE: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  EXAMPLE_UNITS: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  LONG_COMMON_NAME: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  EXAMPLE_UCUM_UNITS: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  STATUS_REASON: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  STATUS_TEXT: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  CHANGE_REASON_PUBLIC: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  COMMON_TEST_RANK: z.union([ z.lazy(() => IntNullableWithAggregatesFilterSchema),z.number() ]).optional().nullable(),
  COMMON_ORDER_RANK: z.union([ z.lazy(() => IntNullableWithAggregatesFilterSchema),z.number() ]).optional().nullable(),
  HL7_ATTACHMENT_STRUCTURE: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  EXTERNAL_COPYRIGHT_LINK: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  PanelType: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  AskAtOrderEntry: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  AssociatedObservations: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  VersionFirstReleased: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  ValidHL7AttachmentRequest: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  DisplayName: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
}).strict();

export const LabWhereInputSchema: z.ZodType<Prisma.LabWhereInput> = z.object({
  AND: z.union([ z.lazy(() => LabWhereInputSchema),z.lazy(() => LabWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => LabWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => LabWhereInputSchema),z.lazy(() => LabWhereInputSchema).array() ]).optional(),
  LabId: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  LabName: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  LabCode: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  Address: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  City: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  State: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  Zip: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  SponsoredTest: z.lazy(() => SponsoredTestListRelationFilterSchema).optional(),
  TestCatalog: z.lazy(() => TestCatalogListRelationFilterSchema).optional()
}).strict();

export const LabOrderByWithRelationInputSchema: z.ZodType<Prisma.LabOrderByWithRelationInput> = z.object({
  LabId: z.lazy(() => SortOrderSchema).optional(),
  LabName: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  LabCode: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  Address: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  City: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  State: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  Zip: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  SponsoredTest: z.lazy(() => SponsoredTestOrderByRelationAggregateInputSchema).optional(),
  TestCatalog: z.lazy(() => TestCatalogOrderByRelationAggregateInputSchema).optional(),
  _relevance: z.lazy(() => LabOrderByRelevanceInputSchema).optional()
}).strict();

export const LabWhereUniqueInputSchema: z.ZodType<Prisma.LabWhereUniqueInput> = z.object({
  LabId: z.number()
})
.and(z.object({
  LabId: z.number().optional(),
  AND: z.union([ z.lazy(() => LabWhereInputSchema),z.lazy(() => LabWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => LabWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => LabWhereInputSchema),z.lazy(() => LabWhereInputSchema).array() ]).optional(),
  LabName: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  LabCode: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  Address: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  City: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  State: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  Zip: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  SponsoredTest: z.lazy(() => SponsoredTestListRelationFilterSchema).optional(),
  TestCatalog: z.lazy(() => TestCatalogListRelationFilterSchema).optional()
}).strict());

export const LabOrderByWithAggregationInputSchema: z.ZodType<Prisma.LabOrderByWithAggregationInput> = z.object({
  LabId: z.lazy(() => SortOrderSchema).optional(),
  LabName: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  LabCode: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  Address: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  City: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  State: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  Zip: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  _count: z.lazy(() => LabCountOrderByAggregateInputSchema).optional(),
  _avg: z.lazy(() => LabAvgOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => LabMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => LabMinOrderByAggregateInputSchema).optional(),
  _sum: z.lazy(() => LabSumOrderByAggregateInputSchema).optional()
}).strict();

export const LabScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.LabScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => LabScalarWhereWithAggregatesInputSchema),z.lazy(() => LabScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => LabScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => LabScalarWhereWithAggregatesInputSchema),z.lazy(() => LabScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  LabId: z.union([ z.lazy(() => IntWithAggregatesFilterSchema),z.number() ]).optional(),
  LabName: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  LabCode: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  Address: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  City: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  State: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  Zip: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
}).strict();

export const LabOrderWhereInputSchema: z.ZodType<Prisma.LabOrderWhereInput> = z.object({
  AND: z.union([ z.lazy(() => LabOrderWhereInputSchema),z.lazy(() => LabOrderWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => LabOrderWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => LabOrderWhereInputSchema),z.lazy(() => LabOrderWhereInputSchema).array() ]).optional(),
  Id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  OrderNumber: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  AccessionNumber: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  OrderingProviderId: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  TreatingProviderId: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  PatientId: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  PatientMRN: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  PatientMobile: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  PatientEmail: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  OrganizationId: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  OrderDate: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.date() ]).optional().nullable(),
  OrderNotes: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  CreatedAt: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.date() ]).optional().nullable(),
  UpdatedAt: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.date() ]).optional().nullable(),
  OrderingProvider: z.union([ z.lazy(() => ProviderNullableRelationFilterSchema),z.lazy(() => ProviderWhereInputSchema) ]).optional().nullable(),
  TreatingProvider: z.union([ z.lazy(() => ProviderNullableRelationFilterSchema),z.lazy(() => ProviderWhereInputSchema) ]).optional().nullable(),
  Patient: z.union([ z.lazy(() => PatientNullableRelationFilterSchema),z.lazy(() => PatientWhereInputSchema) ]).optional().nullable(),
  Organization: z.union([ z.lazy(() => OrganizationNullableRelationFilterSchema),z.lazy(() => OrganizationWhereInputSchema) ]).optional().nullable(),
  LabOrderAttachment: z.lazy(() => LabOrderAttachmentListRelationFilterSchema).optional(),
  LabOrderBilling: z.lazy(() => LabOrderBillingListRelationFilterSchema).optional(),
  LabOrderIcd: z.lazy(() => LabOrderIcdListRelationFilterSchema).optional(),
  LabOrderSpecimen: z.lazy(() => LabOrderSpecimenListRelationFilterSchema).optional(),
  LabOrderSponsoredTestConsent: z.lazy(() => LabOrderSponsoredTestConsentListRelationFilterSchema).optional(),
  LabOrderStatus: z.lazy(() => LabOrderStatusListRelationFilterSchema).optional(),
  LabOrderTest: z.lazy(() => LabOrderTestListRelationFilterSchema).optional()
}).strict();

export const LabOrderOrderByWithRelationInputSchema: z.ZodType<Prisma.LabOrderOrderByWithRelationInput> = z.object({
  Id: z.lazy(() => SortOrderSchema).optional(),
  OrderNumber: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  AccessionNumber: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  OrderingProviderId: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  TreatingProviderId: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  PatientId: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  PatientMRN: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  PatientMobile: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  PatientEmail: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  OrganizationId: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  OrderDate: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  OrderNotes: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  CreatedAt: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  UpdatedAt: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  OrderingProvider: z.lazy(() => ProviderOrderByWithRelationInputSchema).optional(),
  TreatingProvider: z.lazy(() => ProviderOrderByWithRelationInputSchema).optional(),
  Patient: z.lazy(() => PatientOrderByWithRelationInputSchema).optional(),
  Organization: z.lazy(() => OrganizationOrderByWithRelationInputSchema).optional(),
  LabOrderAttachment: z.lazy(() => LabOrderAttachmentOrderByRelationAggregateInputSchema).optional(),
  LabOrderBilling: z.lazy(() => LabOrderBillingOrderByRelationAggregateInputSchema).optional(),
  LabOrderIcd: z.lazy(() => LabOrderIcdOrderByRelationAggregateInputSchema).optional(),
  LabOrderSpecimen: z.lazy(() => LabOrderSpecimenOrderByRelationAggregateInputSchema).optional(),
  LabOrderSponsoredTestConsent: z.lazy(() => LabOrderSponsoredTestConsentOrderByRelationAggregateInputSchema).optional(),
  LabOrderStatus: z.lazy(() => LabOrderStatusOrderByRelationAggregateInputSchema).optional(),
  LabOrderTest: z.lazy(() => LabOrderTestOrderByRelationAggregateInputSchema).optional(),
  _relevance: z.lazy(() => LabOrderOrderByRelevanceInputSchema).optional()
}).strict();

export const LabOrderWhereUniqueInputSchema: z.ZodType<Prisma.LabOrderWhereUniqueInput> = z.object({
  Id: z.string()
})
.and(z.object({
  Id: z.string().optional(),
  AND: z.union([ z.lazy(() => LabOrderWhereInputSchema),z.lazy(() => LabOrderWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => LabOrderWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => LabOrderWhereInputSchema),z.lazy(() => LabOrderWhereInputSchema).array() ]).optional(),
  OrderNumber: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  AccessionNumber: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  OrderingProviderId: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  TreatingProviderId: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  PatientId: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  PatientMRN: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  PatientMobile: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  PatientEmail: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  OrganizationId: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  OrderDate: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.date() ]).optional().nullable(),
  OrderNotes: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  CreatedAt: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.date() ]).optional().nullable(),
  UpdatedAt: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.date() ]).optional().nullable(),
  OrderingProvider: z.union([ z.lazy(() => ProviderNullableRelationFilterSchema),z.lazy(() => ProviderWhereInputSchema) ]).optional().nullable(),
  TreatingProvider: z.union([ z.lazy(() => ProviderNullableRelationFilterSchema),z.lazy(() => ProviderWhereInputSchema) ]).optional().nullable(),
  Patient: z.union([ z.lazy(() => PatientNullableRelationFilterSchema),z.lazy(() => PatientWhereInputSchema) ]).optional().nullable(),
  Organization: z.union([ z.lazy(() => OrganizationNullableRelationFilterSchema),z.lazy(() => OrganizationWhereInputSchema) ]).optional().nullable(),
  LabOrderAttachment: z.lazy(() => LabOrderAttachmentListRelationFilterSchema).optional(),
  LabOrderBilling: z.lazy(() => LabOrderBillingListRelationFilterSchema).optional(),
  LabOrderIcd: z.lazy(() => LabOrderIcdListRelationFilterSchema).optional(),
  LabOrderSpecimen: z.lazy(() => LabOrderSpecimenListRelationFilterSchema).optional(),
  LabOrderSponsoredTestConsent: z.lazy(() => LabOrderSponsoredTestConsentListRelationFilterSchema).optional(),
  LabOrderStatus: z.lazy(() => LabOrderStatusListRelationFilterSchema).optional(),
  LabOrderTest: z.lazy(() => LabOrderTestListRelationFilterSchema).optional()
}).strict());

export const LabOrderOrderByWithAggregationInputSchema: z.ZodType<Prisma.LabOrderOrderByWithAggregationInput> = z.object({
  Id: z.lazy(() => SortOrderSchema).optional(),
  OrderNumber: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  AccessionNumber: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  OrderingProviderId: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  TreatingProviderId: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  PatientId: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  PatientMRN: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  PatientMobile: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  PatientEmail: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  OrganizationId: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  OrderDate: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  OrderNotes: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  CreatedAt: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  UpdatedAt: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  _count: z.lazy(() => LabOrderCountOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => LabOrderMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => LabOrderMinOrderByAggregateInputSchema).optional()
}).strict();

export const LabOrderScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.LabOrderScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => LabOrderScalarWhereWithAggregatesInputSchema),z.lazy(() => LabOrderScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => LabOrderScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => LabOrderScalarWhereWithAggregatesInputSchema),z.lazy(() => LabOrderScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  Id: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  OrderNumber: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  AccessionNumber: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  OrderingProviderId: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  TreatingProviderId: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  PatientId: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  PatientMRN: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  PatientMobile: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  PatientEmail: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  OrganizationId: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  OrderDate: z.union([ z.lazy(() => DateTimeNullableWithAggregatesFilterSchema),z.date() ]).optional().nullable(),
  OrderNotes: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  CreatedAt: z.union([ z.lazy(() => DateTimeNullableWithAggregatesFilterSchema),z.date() ]).optional().nullable(),
  UpdatedAt: z.union([ z.lazy(() => DateTimeNullableWithAggregatesFilterSchema),z.date() ]).optional().nullable(),
}).strict();

export const LabOrderAttachmentWhereInputSchema: z.ZodType<Prisma.LabOrderAttachmentWhereInput> = z.object({
  AND: z.union([ z.lazy(() => LabOrderAttachmentWhereInputSchema),z.lazy(() => LabOrderAttachmentWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => LabOrderAttachmentWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => LabOrderAttachmentWhereInputSchema),z.lazy(() => LabOrderAttachmentWhereInputSchema).array() ]).optional(),
  Id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  LabOrderId: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  AttachmentId: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  CreatedAt: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.date() ]).optional().nullable(),
  UpdatedAt: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.date() ]).optional().nullable(),
  LabOrder: z.union([ z.lazy(() => LabOrderNullableRelationFilterSchema),z.lazy(() => LabOrderWhereInputSchema) ]).optional().nullable(),
  Attachment: z.union([ z.lazy(() => AttachmentNullableRelationFilterSchema),z.lazy(() => AttachmentWhereInputSchema) ]).optional().nullable(),
}).strict();

export const LabOrderAttachmentOrderByWithRelationInputSchema: z.ZodType<Prisma.LabOrderAttachmentOrderByWithRelationInput> = z.object({
  Id: z.lazy(() => SortOrderSchema).optional(),
  LabOrderId: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  AttachmentId: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  CreatedAt: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  UpdatedAt: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  LabOrder: z.lazy(() => LabOrderOrderByWithRelationInputSchema).optional(),
  Attachment: z.lazy(() => AttachmentOrderByWithRelationInputSchema).optional(),
  _relevance: z.lazy(() => LabOrderAttachmentOrderByRelevanceInputSchema).optional()
}).strict();

export const LabOrderAttachmentWhereUniqueInputSchema: z.ZodType<Prisma.LabOrderAttachmentWhereUniqueInput> = z.object({
  Id: z.string()
})
.and(z.object({
  Id: z.string().optional(),
  AND: z.union([ z.lazy(() => LabOrderAttachmentWhereInputSchema),z.lazy(() => LabOrderAttachmentWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => LabOrderAttachmentWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => LabOrderAttachmentWhereInputSchema),z.lazy(() => LabOrderAttachmentWhereInputSchema).array() ]).optional(),
  LabOrderId: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  AttachmentId: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  CreatedAt: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.date() ]).optional().nullable(),
  UpdatedAt: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.date() ]).optional().nullable(),
  LabOrder: z.union([ z.lazy(() => LabOrderNullableRelationFilterSchema),z.lazy(() => LabOrderWhereInputSchema) ]).optional().nullable(),
  Attachment: z.union([ z.lazy(() => AttachmentNullableRelationFilterSchema),z.lazy(() => AttachmentWhereInputSchema) ]).optional().nullable(),
}).strict());

export const LabOrderAttachmentOrderByWithAggregationInputSchema: z.ZodType<Prisma.LabOrderAttachmentOrderByWithAggregationInput> = z.object({
  Id: z.lazy(() => SortOrderSchema).optional(),
  LabOrderId: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  AttachmentId: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  CreatedAt: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  UpdatedAt: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  _count: z.lazy(() => LabOrderAttachmentCountOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => LabOrderAttachmentMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => LabOrderAttachmentMinOrderByAggregateInputSchema).optional()
}).strict();

export const LabOrderAttachmentScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.LabOrderAttachmentScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => LabOrderAttachmentScalarWhereWithAggregatesInputSchema),z.lazy(() => LabOrderAttachmentScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => LabOrderAttachmentScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => LabOrderAttachmentScalarWhereWithAggregatesInputSchema),z.lazy(() => LabOrderAttachmentScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  Id: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  LabOrderId: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  AttachmentId: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  CreatedAt: z.union([ z.lazy(() => DateTimeNullableWithAggregatesFilterSchema),z.date() ]).optional().nullable(),
  UpdatedAt: z.union([ z.lazy(() => DateTimeNullableWithAggregatesFilterSchema),z.date() ]).optional().nullable(),
}).strict();

export const LabOrderBillingWhereInputSchema: z.ZodType<Prisma.LabOrderBillingWhereInput> = z.object({
  AND: z.union([ z.lazy(() => LabOrderBillingWhereInputSchema),z.lazy(() => LabOrderBillingWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => LabOrderBillingWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => LabOrderBillingWhereInputSchema),z.lazy(() => LabOrderBillingWhereInputSchema).array() ]).optional(),
  Id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  LabOrderId: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  BillToId: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  HealthPalnId: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  PatientStatus: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  SponoseredTestCouponCode: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  CreatedAt: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.date() ]).optional().nullable(),
  UpdatedAt: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.date() ]).optional().nullable(),
  LabOrder: z.union([ z.lazy(() => LabOrderNullableRelationFilterSchema),z.lazy(() => LabOrderWhereInputSchema) ]).optional().nullable(),
}).strict();

export const LabOrderBillingOrderByWithRelationInputSchema: z.ZodType<Prisma.LabOrderBillingOrderByWithRelationInput> = z.object({
  Id: z.lazy(() => SortOrderSchema).optional(),
  LabOrderId: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  BillToId: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  HealthPalnId: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  PatientStatus: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  SponoseredTestCouponCode: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  CreatedAt: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  UpdatedAt: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  LabOrder: z.lazy(() => LabOrderOrderByWithRelationInputSchema).optional(),
  _relevance: z.lazy(() => LabOrderBillingOrderByRelevanceInputSchema).optional()
}).strict();

export const LabOrderBillingWhereUniqueInputSchema: z.ZodType<Prisma.LabOrderBillingWhereUniqueInput> = z.object({
  Id: z.string()
})
.and(z.object({
  Id: z.string().optional(),
  AND: z.union([ z.lazy(() => LabOrderBillingWhereInputSchema),z.lazy(() => LabOrderBillingWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => LabOrderBillingWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => LabOrderBillingWhereInputSchema),z.lazy(() => LabOrderBillingWhereInputSchema).array() ]).optional(),
  LabOrderId: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  BillToId: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  HealthPalnId: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  PatientStatus: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  SponoseredTestCouponCode: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  CreatedAt: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.date() ]).optional().nullable(),
  UpdatedAt: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.date() ]).optional().nullable(),
  LabOrder: z.union([ z.lazy(() => LabOrderNullableRelationFilterSchema),z.lazy(() => LabOrderWhereInputSchema) ]).optional().nullable(),
}).strict());

export const LabOrderBillingOrderByWithAggregationInputSchema: z.ZodType<Prisma.LabOrderBillingOrderByWithAggregationInput> = z.object({
  Id: z.lazy(() => SortOrderSchema).optional(),
  LabOrderId: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  BillToId: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  HealthPalnId: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  PatientStatus: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  SponoseredTestCouponCode: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  CreatedAt: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  UpdatedAt: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  _count: z.lazy(() => LabOrderBillingCountOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => LabOrderBillingMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => LabOrderBillingMinOrderByAggregateInputSchema).optional()
}).strict();

export const LabOrderBillingScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.LabOrderBillingScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => LabOrderBillingScalarWhereWithAggregatesInputSchema),z.lazy(() => LabOrderBillingScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => LabOrderBillingScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => LabOrderBillingScalarWhereWithAggregatesInputSchema),z.lazy(() => LabOrderBillingScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  Id: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  LabOrderId: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  BillToId: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  HealthPalnId: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  PatientStatus: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  SponoseredTestCouponCode: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  CreatedAt: z.union([ z.lazy(() => DateTimeNullableWithAggregatesFilterSchema),z.date() ]).optional().nullable(),
  UpdatedAt: z.union([ z.lazy(() => DateTimeNullableWithAggregatesFilterSchema),z.date() ]).optional().nullable(),
}).strict();

export const LabOrderIcdWhereInputSchema: z.ZodType<Prisma.LabOrderIcdWhereInput> = z.object({
  AND: z.union([ z.lazy(() => LabOrderIcdWhereInputSchema),z.lazy(() => LabOrderIcdWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => LabOrderIcdWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => LabOrderIcdWhereInputSchema),z.lazy(() => LabOrderIcdWhereInputSchema).array() ]).optional(),
  Id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  LabOrderId: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  ICDId: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  CreatedAt: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.date() ]).optional().nullable(),
  UpdatedAt: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.date() ]).optional().nullable(),
  LabOrder: z.union([ z.lazy(() => LabOrderNullableRelationFilterSchema),z.lazy(() => LabOrderWhereInputSchema) ]).optional().nullable(),
  ICD: z.union([ z.lazy(() => ICDNullableRelationFilterSchema),z.lazy(() => ICDWhereInputSchema) ]).optional().nullable(),
}).strict();

export const LabOrderIcdOrderByWithRelationInputSchema: z.ZodType<Prisma.LabOrderIcdOrderByWithRelationInput> = z.object({
  Id: z.lazy(() => SortOrderSchema).optional(),
  LabOrderId: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  ICDId: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  CreatedAt: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  UpdatedAt: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  LabOrder: z.lazy(() => LabOrderOrderByWithRelationInputSchema).optional(),
  ICD: z.lazy(() => ICDOrderByWithRelationInputSchema).optional(),
  _relevance: z.lazy(() => LabOrderIcdOrderByRelevanceInputSchema).optional()
}).strict();

export const LabOrderIcdWhereUniqueInputSchema: z.ZodType<Prisma.LabOrderIcdWhereUniqueInput> = z.object({
  Id: z.string()
})
.and(z.object({
  Id: z.string().optional(),
  AND: z.union([ z.lazy(() => LabOrderIcdWhereInputSchema),z.lazy(() => LabOrderIcdWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => LabOrderIcdWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => LabOrderIcdWhereInputSchema),z.lazy(() => LabOrderIcdWhereInputSchema).array() ]).optional(),
  LabOrderId: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  ICDId: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  CreatedAt: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.date() ]).optional().nullable(),
  UpdatedAt: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.date() ]).optional().nullable(),
  LabOrder: z.union([ z.lazy(() => LabOrderNullableRelationFilterSchema),z.lazy(() => LabOrderWhereInputSchema) ]).optional().nullable(),
  ICD: z.union([ z.lazy(() => ICDNullableRelationFilterSchema),z.lazy(() => ICDWhereInputSchema) ]).optional().nullable(),
}).strict());

export const LabOrderIcdOrderByWithAggregationInputSchema: z.ZodType<Prisma.LabOrderIcdOrderByWithAggregationInput> = z.object({
  Id: z.lazy(() => SortOrderSchema).optional(),
  LabOrderId: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  ICDId: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  CreatedAt: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  UpdatedAt: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  _count: z.lazy(() => LabOrderIcdCountOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => LabOrderIcdMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => LabOrderIcdMinOrderByAggregateInputSchema).optional()
}).strict();

export const LabOrderIcdScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.LabOrderIcdScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => LabOrderIcdScalarWhereWithAggregatesInputSchema),z.lazy(() => LabOrderIcdScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => LabOrderIcdScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => LabOrderIcdScalarWhereWithAggregatesInputSchema),z.lazy(() => LabOrderIcdScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  Id: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  LabOrderId: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  ICDId: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  CreatedAt: z.union([ z.lazy(() => DateTimeNullableWithAggregatesFilterSchema),z.date() ]).optional().nullable(),
  UpdatedAt: z.union([ z.lazy(() => DateTimeNullableWithAggregatesFilterSchema),z.date() ]).optional().nullable(),
}).strict();

export const LabOrderSpecimenWhereInputSchema: z.ZodType<Prisma.LabOrderSpecimenWhereInput> = z.object({
  AND: z.union([ z.lazy(() => LabOrderSpecimenWhereInputSchema),z.lazy(() => LabOrderSpecimenWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => LabOrderSpecimenWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => LabOrderSpecimenWhereInputSchema),z.lazy(() => LabOrderSpecimenWhereInputSchema).array() ]).optional(),
  Id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  LabOrderId: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  SpecimenType: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  SpecimenCount: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  CollectedDate: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.date() ]).optional().nullable(),
  CollectedTime: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  SpecimenID: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  BodySite: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  TumorType: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  Fixative: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  FixativeDuration: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  ColdIschemicTime: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  CreatedAt: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.date() ]).optional().nullable(),
  UpdatedAt: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.date() ]).optional().nullable(),
  LabOrder: z.union([ z.lazy(() => LabOrderNullableRelationFilterSchema),z.lazy(() => LabOrderWhereInputSchema) ]).optional().nullable(),
}).strict();

export const LabOrderSpecimenOrderByWithRelationInputSchema: z.ZodType<Prisma.LabOrderSpecimenOrderByWithRelationInput> = z.object({
  Id: z.lazy(() => SortOrderSchema).optional(),
  LabOrderId: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  SpecimenType: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  SpecimenCount: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  CollectedDate: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  CollectedTime: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  SpecimenID: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  BodySite: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  TumorType: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  Fixative: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  FixativeDuration: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  ColdIschemicTime: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  CreatedAt: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  UpdatedAt: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  LabOrder: z.lazy(() => LabOrderOrderByWithRelationInputSchema).optional(),
  _relevance: z.lazy(() => LabOrderSpecimenOrderByRelevanceInputSchema).optional()
}).strict();

export const LabOrderSpecimenWhereUniqueInputSchema: z.ZodType<Prisma.LabOrderSpecimenWhereUniqueInput> = z.object({
  Id: z.string()
})
.and(z.object({
  Id: z.string().optional(),
  AND: z.union([ z.lazy(() => LabOrderSpecimenWhereInputSchema),z.lazy(() => LabOrderSpecimenWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => LabOrderSpecimenWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => LabOrderSpecimenWhereInputSchema),z.lazy(() => LabOrderSpecimenWhereInputSchema).array() ]).optional(),
  LabOrderId: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  SpecimenType: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  SpecimenCount: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  CollectedDate: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.date() ]).optional().nullable(),
  CollectedTime: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  SpecimenID: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  BodySite: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  TumorType: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  Fixative: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  FixativeDuration: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  ColdIschemicTime: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  CreatedAt: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.date() ]).optional().nullable(),
  UpdatedAt: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.date() ]).optional().nullable(),
  LabOrder: z.union([ z.lazy(() => LabOrderNullableRelationFilterSchema),z.lazy(() => LabOrderWhereInputSchema) ]).optional().nullable(),
}).strict());

export const LabOrderSpecimenOrderByWithAggregationInputSchema: z.ZodType<Prisma.LabOrderSpecimenOrderByWithAggregationInput> = z.object({
  Id: z.lazy(() => SortOrderSchema).optional(),
  LabOrderId: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  SpecimenType: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  SpecimenCount: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  CollectedDate: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  CollectedTime: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  SpecimenID: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  BodySite: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  TumorType: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  Fixative: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  FixativeDuration: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  ColdIschemicTime: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  CreatedAt: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  UpdatedAt: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  _count: z.lazy(() => LabOrderSpecimenCountOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => LabOrderSpecimenMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => LabOrderSpecimenMinOrderByAggregateInputSchema).optional()
}).strict();

export const LabOrderSpecimenScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.LabOrderSpecimenScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => LabOrderSpecimenScalarWhereWithAggregatesInputSchema),z.lazy(() => LabOrderSpecimenScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => LabOrderSpecimenScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => LabOrderSpecimenScalarWhereWithAggregatesInputSchema),z.lazy(() => LabOrderSpecimenScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  Id: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  LabOrderId: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  SpecimenType: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  SpecimenCount: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  CollectedDate: z.union([ z.lazy(() => DateTimeNullableWithAggregatesFilterSchema),z.date() ]).optional().nullable(),
  CollectedTime: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  SpecimenID: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  BodySite: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  TumorType: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  Fixative: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  FixativeDuration: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  ColdIschemicTime: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  CreatedAt: z.union([ z.lazy(() => DateTimeNullableWithAggregatesFilterSchema),z.date() ]).optional().nullable(),
  UpdatedAt: z.union([ z.lazy(() => DateTimeNullableWithAggregatesFilterSchema),z.date() ]).optional().nullable(),
}).strict();

export const LabOrderSponsoredTestConsentWhereInputSchema: z.ZodType<Prisma.LabOrderSponsoredTestConsentWhereInput> = z.object({
  AND: z.union([ z.lazy(() => LabOrderSponsoredTestConsentWhereInputSchema),z.lazy(() => LabOrderSponsoredTestConsentWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => LabOrderSponsoredTestConsentWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => LabOrderSponsoredTestConsentWhereInputSchema),z.lazy(() => LabOrderSponsoredTestConsentWhereInputSchema).array() ]).optional(),
  Id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  LabOrderId: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  SponsoredCasandraTestId: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  ProviderName: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  ProviderNPI: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  ConsentAt: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.date() ]).optional().nullable(),
  CreatedAt: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.date() ]).optional().nullable(),
  UpdatedAt: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.date() ]).optional().nullable(),
  SponsoredTest: z.union([ z.lazy(() => SponsoredTestNullableRelationFilterSchema),z.lazy(() => SponsoredTestWhereInputSchema) ]).optional().nullable(),
  LabOrder: z.union([ z.lazy(() => LabOrderNullableRelationFilterSchema),z.lazy(() => LabOrderWhereInputSchema) ]).optional().nullable(),
}).strict();

export const LabOrderSponsoredTestConsentOrderByWithRelationInputSchema: z.ZodType<Prisma.LabOrderSponsoredTestConsentOrderByWithRelationInput> = z.object({
  Id: z.lazy(() => SortOrderSchema).optional(),
  LabOrderId: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  SponsoredCasandraTestId: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  ProviderName: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  ProviderNPI: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  ConsentAt: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  CreatedAt: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  UpdatedAt: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  SponsoredTest: z.lazy(() => SponsoredTestOrderByWithRelationInputSchema).optional(),
  LabOrder: z.lazy(() => LabOrderOrderByWithRelationInputSchema).optional(),
  _relevance: z.lazy(() => LabOrderSponsoredTestConsentOrderByRelevanceInputSchema).optional()
}).strict();

export const LabOrderSponsoredTestConsentWhereUniqueInputSchema: z.ZodType<Prisma.LabOrderSponsoredTestConsentWhereUniqueInput> = z.object({
  Id: z.string()
})
.and(z.object({
  Id: z.string().optional(),
  AND: z.union([ z.lazy(() => LabOrderSponsoredTestConsentWhereInputSchema),z.lazy(() => LabOrderSponsoredTestConsentWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => LabOrderSponsoredTestConsentWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => LabOrderSponsoredTestConsentWhereInputSchema),z.lazy(() => LabOrderSponsoredTestConsentWhereInputSchema).array() ]).optional(),
  LabOrderId: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  SponsoredCasandraTestId: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  ProviderName: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  ProviderNPI: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  ConsentAt: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.date() ]).optional().nullable(),
  CreatedAt: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.date() ]).optional().nullable(),
  UpdatedAt: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.date() ]).optional().nullable(),
  SponsoredTest: z.union([ z.lazy(() => SponsoredTestNullableRelationFilterSchema),z.lazy(() => SponsoredTestWhereInputSchema) ]).optional().nullable(),
  LabOrder: z.union([ z.lazy(() => LabOrderNullableRelationFilterSchema),z.lazy(() => LabOrderWhereInputSchema) ]).optional().nullable(),
}).strict());

export const LabOrderSponsoredTestConsentOrderByWithAggregationInputSchema: z.ZodType<Prisma.LabOrderSponsoredTestConsentOrderByWithAggregationInput> = z.object({
  Id: z.lazy(() => SortOrderSchema).optional(),
  LabOrderId: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  SponsoredCasandraTestId: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  ProviderName: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  ProviderNPI: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  ConsentAt: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  CreatedAt: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  UpdatedAt: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  _count: z.lazy(() => LabOrderSponsoredTestConsentCountOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => LabOrderSponsoredTestConsentMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => LabOrderSponsoredTestConsentMinOrderByAggregateInputSchema).optional()
}).strict();

export const LabOrderSponsoredTestConsentScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.LabOrderSponsoredTestConsentScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => LabOrderSponsoredTestConsentScalarWhereWithAggregatesInputSchema),z.lazy(() => LabOrderSponsoredTestConsentScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => LabOrderSponsoredTestConsentScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => LabOrderSponsoredTestConsentScalarWhereWithAggregatesInputSchema),z.lazy(() => LabOrderSponsoredTestConsentScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  Id: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  LabOrderId: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  SponsoredCasandraTestId: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  ProviderName: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  ProviderNPI: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  ConsentAt: z.union([ z.lazy(() => DateTimeNullableWithAggregatesFilterSchema),z.date() ]).optional().nullable(),
  CreatedAt: z.union([ z.lazy(() => DateTimeNullableWithAggregatesFilterSchema),z.date() ]).optional().nullable(),
  UpdatedAt: z.union([ z.lazy(() => DateTimeNullableWithAggregatesFilterSchema),z.date() ]).optional().nullable(),
}).strict();

export const LabOrderStatusWhereInputSchema: z.ZodType<Prisma.LabOrderStatusWhereInput> = z.object({
  AND: z.union([ z.lazy(() => LabOrderStatusWhereInputSchema),z.lazy(() => LabOrderStatusWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => LabOrderStatusWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => LabOrderStatusWhereInputSchema),z.lazy(() => LabOrderStatusWhereInputSchema).array() ]).optional(),
  Id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  LabOrderId: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  Status: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  StatusDate: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.date() ]).optional().nullable(),
  CreatedAt: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.date() ]).optional().nullable(),
  UpdatedAt: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.date() ]).optional().nullable(),
  LabOrder: z.union([ z.lazy(() => LabOrderNullableRelationFilterSchema),z.lazy(() => LabOrderWhereInputSchema) ]).optional().nullable(),
}).strict();

export const LabOrderStatusOrderByWithRelationInputSchema: z.ZodType<Prisma.LabOrderStatusOrderByWithRelationInput> = z.object({
  Id: z.lazy(() => SortOrderSchema).optional(),
  LabOrderId: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  Status: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  StatusDate: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  CreatedAt: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  UpdatedAt: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  LabOrder: z.lazy(() => LabOrderOrderByWithRelationInputSchema).optional(),
  _relevance: z.lazy(() => LabOrderStatusOrderByRelevanceInputSchema).optional()
}).strict();

export const LabOrderStatusWhereUniqueInputSchema: z.ZodType<Prisma.LabOrderStatusWhereUniqueInput> = z.object({
  Id: z.string()
})
.and(z.object({
  Id: z.string().optional(),
  AND: z.union([ z.lazy(() => LabOrderStatusWhereInputSchema),z.lazy(() => LabOrderStatusWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => LabOrderStatusWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => LabOrderStatusWhereInputSchema),z.lazy(() => LabOrderStatusWhereInputSchema).array() ]).optional(),
  LabOrderId: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  Status: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  StatusDate: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.date() ]).optional().nullable(),
  CreatedAt: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.date() ]).optional().nullable(),
  UpdatedAt: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.date() ]).optional().nullable(),
  LabOrder: z.union([ z.lazy(() => LabOrderNullableRelationFilterSchema),z.lazy(() => LabOrderWhereInputSchema) ]).optional().nullable(),
}).strict());

export const LabOrderStatusOrderByWithAggregationInputSchema: z.ZodType<Prisma.LabOrderStatusOrderByWithAggregationInput> = z.object({
  Id: z.lazy(() => SortOrderSchema).optional(),
  LabOrderId: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  Status: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  StatusDate: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  CreatedAt: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  UpdatedAt: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  _count: z.lazy(() => LabOrderStatusCountOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => LabOrderStatusMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => LabOrderStatusMinOrderByAggregateInputSchema).optional()
}).strict();

export const LabOrderStatusScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.LabOrderStatusScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => LabOrderStatusScalarWhereWithAggregatesInputSchema),z.lazy(() => LabOrderStatusScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => LabOrderStatusScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => LabOrderStatusScalarWhereWithAggregatesInputSchema),z.lazy(() => LabOrderStatusScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  Id: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  LabOrderId: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  Status: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  StatusDate: z.union([ z.lazy(() => DateTimeNullableWithAggregatesFilterSchema),z.date() ]).optional().nullable(),
  CreatedAt: z.union([ z.lazy(() => DateTimeNullableWithAggregatesFilterSchema),z.date() ]).optional().nullable(),
  UpdatedAt: z.union([ z.lazy(() => DateTimeNullableWithAggregatesFilterSchema),z.date() ]).optional().nullable(),
}).strict();

export const LabOrderTestWhereInputSchema: z.ZodType<Prisma.LabOrderTestWhereInput> = z.object({
  AND: z.union([ z.lazy(() => LabOrderTestWhereInputSchema),z.lazy(() => LabOrderTestWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => LabOrderTestWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => LabOrderTestWhereInputSchema),z.lazy(() => LabOrderTestWhereInputSchema).array() ]).optional(),
  Id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  LabOrderId: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  TestId: z.union([ z.lazy(() => IntNullableFilterSchema),z.number() ]).optional().nullable(),
  CreatedAt: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.date() ]).optional().nullable(),
  UpdatedAt: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.date() ]).optional().nullable(),
  LabOrder: z.union([ z.lazy(() => LabOrderNullableRelationFilterSchema),z.lazy(() => LabOrderWhereInputSchema) ]).optional().nullable(),
  TestCatalog: z.union([ z.lazy(() => TestCatalogNullableRelationFilterSchema),z.lazy(() => TestCatalogWhereInputSchema) ]).optional().nullable(),
}).strict();

export const LabOrderTestOrderByWithRelationInputSchema: z.ZodType<Prisma.LabOrderTestOrderByWithRelationInput> = z.object({
  Id: z.lazy(() => SortOrderSchema).optional(),
  LabOrderId: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  TestId: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  CreatedAt: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  UpdatedAt: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  LabOrder: z.lazy(() => LabOrderOrderByWithRelationInputSchema).optional(),
  TestCatalog: z.lazy(() => TestCatalogOrderByWithRelationInputSchema).optional(),
  _relevance: z.lazy(() => LabOrderTestOrderByRelevanceInputSchema).optional()
}).strict();

export const LabOrderTestWhereUniqueInputSchema: z.ZodType<Prisma.LabOrderTestWhereUniqueInput> = z.object({
  Id: z.string()
})
.and(z.object({
  Id: z.string().optional(),
  AND: z.union([ z.lazy(() => LabOrderTestWhereInputSchema),z.lazy(() => LabOrderTestWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => LabOrderTestWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => LabOrderTestWhereInputSchema),z.lazy(() => LabOrderTestWhereInputSchema).array() ]).optional(),
  LabOrderId: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  TestId: z.union([ z.lazy(() => IntNullableFilterSchema),z.number() ]).optional().nullable(),
  CreatedAt: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.date() ]).optional().nullable(),
  UpdatedAt: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.date() ]).optional().nullable(),
  LabOrder: z.union([ z.lazy(() => LabOrderNullableRelationFilterSchema),z.lazy(() => LabOrderWhereInputSchema) ]).optional().nullable(),
  TestCatalog: z.union([ z.lazy(() => TestCatalogNullableRelationFilterSchema),z.lazy(() => TestCatalogWhereInputSchema) ]).optional().nullable(),
}).strict());

export const LabOrderTestOrderByWithAggregationInputSchema: z.ZodType<Prisma.LabOrderTestOrderByWithAggregationInput> = z.object({
  Id: z.lazy(() => SortOrderSchema).optional(),
  LabOrderId: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  TestId: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  CreatedAt: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  UpdatedAt: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  _count: z.lazy(() => LabOrderTestCountOrderByAggregateInputSchema).optional(),
  _avg: z.lazy(() => LabOrderTestAvgOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => LabOrderTestMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => LabOrderTestMinOrderByAggregateInputSchema).optional(),
  _sum: z.lazy(() => LabOrderTestSumOrderByAggregateInputSchema).optional()
}).strict();

export const LabOrderTestScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.LabOrderTestScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => LabOrderTestScalarWhereWithAggregatesInputSchema),z.lazy(() => LabOrderTestScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => LabOrderTestScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => LabOrderTestScalarWhereWithAggregatesInputSchema),z.lazy(() => LabOrderTestScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  Id: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  LabOrderId: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  TestId: z.union([ z.lazy(() => IntNullableWithAggregatesFilterSchema),z.number() ]).optional().nullable(),
  CreatedAt: z.union([ z.lazy(() => DateTimeNullableWithAggregatesFilterSchema),z.date() ]).optional().nullable(),
  UpdatedAt: z.union([ z.lazy(() => DateTimeNullableWithAggregatesFilterSchema),z.date() ]).optional().nullable(),
}).strict();

export const LoincComponentHierarchyWhereInputSchema: z.ZodType<Prisma.LoincComponentHierarchyWhereInput> = z.object({
  AND: z.union([ z.lazy(() => LoincComponentHierarchyWhereInputSchema),z.lazy(() => LoincComponentHierarchyWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => LoincComponentHierarchyWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => LoincComponentHierarchyWhereInputSchema),z.lazy(() => LoincComponentHierarchyWhereInputSchema).array() ]).optional(),
  Id: z.union([ z.lazy(() => BigIntFilterSchema),z.bigint() ]).optional(),
  ParentId: z.union([ z.lazy(() => BigIntFilterSchema),z.bigint() ]).optional(),
  Level: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  Code: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  Sequence: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  CodeText: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  Component: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  Property: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  Timing: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  Scale: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  Method: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
}).strict();

export const LoincComponentHierarchyOrderByWithRelationInputSchema: z.ZodType<Prisma.LoincComponentHierarchyOrderByWithRelationInput> = z.object({
  Id: z.lazy(() => SortOrderSchema).optional(),
  ParentId: z.lazy(() => SortOrderSchema).optional(),
  Level: z.lazy(() => SortOrderSchema).optional(),
  Code: z.lazy(() => SortOrderSchema).optional(),
  Sequence: z.lazy(() => SortOrderSchema).optional(),
  CodeText: z.lazy(() => SortOrderSchema).optional(),
  Component: z.lazy(() => SortOrderSchema).optional(),
  Property: z.lazy(() => SortOrderSchema).optional(),
  Timing: z.lazy(() => SortOrderSchema).optional(),
  Scale: z.lazy(() => SortOrderSchema).optional(),
  Method: z.lazy(() => SortOrderSchema).optional(),
  _relevance: z.lazy(() => LoincComponentHierarchyOrderByRelevanceInputSchema).optional()
}).strict();

export const LoincComponentHierarchyWhereUniqueInputSchema: z.ZodType<Prisma.LoincComponentHierarchyWhereUniqueInput> = z.object({
  Id: z.bigint()
})
.and(z.object({
  Id: z.bigint().optional(),
  AND: z.union([ z.lazy(() => LoincComponentHierarchyWhereInputSchema),z.lazy(() => LoincComponentHierarchyWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => LoincComponentHierarchyWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => LoincComponentHierarchyWhereInputSchema),z.lazy(() => LoincComponentHierarchyWhereInputSchema).array() ]).optional(),
  ParentId: z.union([ z.lazy(() => BigIntFilterSchema),z.bigint() ]).optional(),
  Level: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  Code: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  Sequence: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  CodeText: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  Component: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  Property: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  Timing: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  Scale: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  Method: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
}).strict());

export const LoincComponentHierarchyOrderByWithAggregationInputSchema: z.ZodType<Prisma.LoincComponentHierarchyOrderByWithAggregationInput> = z.object({
  Id: z.lazy(() => SortOrderSchema).optional(),
  ParentId: z.lazy(() => SortOrderSchema).optional(),
  Level: z.lazy(() => SortOrderSchema).optional(),
  Code: z.lazy(() => SortOrderSchema).optional(),
  Sequence: z.lazy(() => SortOrderSchema).optional(),
  CodeText: z.lazy(() => SortOrderSchema).optional(),
  Component: z.lazy(() => SortOrderSchema).optional(),
  Property: z.lazy(() => SortOrderSchema).optional(),
  Timing: z.lazy(() => SortOrderSchema).optional(),
  Scale: z.lazy(() => SortOrderSchema).optional(),
  Method: z.lazy(() => SortOrderSchema).optional(),
  _count: z.lazy(() => LoincComponentHierarchyCountOrderByAggregateInputSchema).optional(),
  _avg: z.lazy(() => LoincComponentHierarchyAvgOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => LoincComponentHierarchyMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => LoincComponentHierarchyMinOrderByAggregateInputSchema).optional(),
  _sum: z.lazy(() => LoincComponentHierarchySumOrderByAggregateInputSchema).optional()
}).strict();

export const LoincComponentHierarchyScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.LoincComponentHierarchyScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => LoincComponentHierarchyScalarWhereWithAggregatesInputSchema),z.lazy(() => LoincComponentHierarchyScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => LoincComponentHierarchyScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => LoincComponentHierarchyScalarWhereWithAggregatesInputSchema),z.lazy(() => LoincComponentHierarchyScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  Id: z.union([ z.lazy(() => BigIntWithAggregatesFilterSchema),z.bigint() ]).optional(),
  ParentId: z.union([ z.lazy(() => BigIntWithAggregatesFilterSchema),z.bigint() ]).optional(),
  Level: z.union([ z.lazy(() => IntWithAggregatesFilterSchema),z.number() ]).optional(),
  Code: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  Sequence: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  CodeText: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  Component: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  Property: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  Timing: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  Scale: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  Method: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
}).strict();

export const LoincPanelHierarchyWhereInputSchema: z.ZodType<Prisma.LoincPanelHierarchyWhereInput> = z.object({
  AND: z.union([ z.lazy(() => LoincPanelHierarchyWhereInputSchema),z.lazy(() => LoincPanelHierarchyWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => LoincPanelHierarchyWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => LoincPanelHierarchyWhereInputSchema),z.lazy(() => LoincPanelHierarchyWhereInputSchema).array() ]).optional(),
  Id: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  ParentId: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  Level: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  Code: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  Sequence: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  CodeText: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  Component: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  Property: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  Timing: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  Scale: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  Method: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
}).strict();

export const LoincPanelHierarchyOrderByWithRelationInputSchema: z.ZodType<Prisma.LoincPanelHierarchyOrderByWithRelationInput> = z.object({
  Id: z.lazy(() => SortOrderSchema).optional(),
  ParentId: z.lazy(() => SortOrderSchema).optional(),
  Level: z.lazy(() => SortOrderSchema).optional(),
  Code: z.lazy(() => SortOrderSchema).optional(),
  Sequence: z.lazy(() => SortOrderSchema).optional(),
  CodeText: z.lazy(() => SortOrderSchema).optional(),
  Component: z.lazy(() => SortOrderSchema).optional(),
  Property: z.lazy(() => SortOrderSchema).optional(),
  Timing: z.lazy(() => SortOrderSchema).optional(),
  Scale: z.lazy(() => SortOrderSchema).optional(),
  Method: z.lazy(() => SortOrderSchema).optional(),
  _relevance: z.lazy(() => LoincPanelHierarchyOrderByRelevanceInputSchema).optional()
}).strict();

export const LoincPanelHierarchyWhereUniqueInputSchema: z.ZodType<Prisma.LoincPanelHierarchyWhereUniqueInput> = z.object({
  Id: z.number()
})
.and(z.object({
  Id: z.number().optional(),
  AND: z.union([ z.lazy(() => LoincPanelHierarchyWhereInputSchema),z.lazy(() => LoincPanelHierarchyWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => LoincPanelHierarchyWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => LoincPanelHierarchyWhereInputSchema),z.lazy(() => LoincPanelHierarchyWhereInputSchema).array() ]).optional(),
  ParentId: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  Level: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  Code: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  Sequence: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  CodeText: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  Component: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  Property: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  Timing: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  Scale: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  Method: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
}).strict());

export const LoincPanelHierarchyOrderByWithAggregationInputSchema: z.ZodType<Prisma.LoincPanelHierarchyOrderByWithAggregationInput> = z.object({
  Id: z.lazy(() => SortOrderSchema).optional(),
  ParentId: z.lazy(() => SortOrderSchema).optional(),
  Level: z.lazy(() => SortOrderSchema).optional(),
  Code: z.lazy(() => SortOrderSchema).optional(),
  Sequence: z.lazy(() => SortOrderSchema).optional(),
  CodeText: z.lazy(() => SortOrderSchema).optional(),
  Component: z.lazy(() => SortOrderSchema).optional(),
  Property: z.lazy(() => SortOrderSchema).optional(),
  Timing: z.lazy(() => SortOrderSchema).optional(),
  Scale: z.lazy(() => SortOrderSchema).optional(),
  Method: z.lazy(() => SortOrderSchema).optional(),
  _count: z.lazy(() => LoincPanelHierarchyCountOrderByAggregateInputSchema).optional(),
  _avg: z.lazy(() => LoincPanelHierarchyAvgOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => LoincPanelHierarchyMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => LoincPanelHierarchyMinOrderByAggregateInputSchema).optional(),
  _sum: z.lazy(() => LoincPanelHierarchySumOrderByAggregateInputSchema).optional()
}).strict();

export const LoincPanelHierarchyScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.LoincPanelHierarchyScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => LoincPanelHierarchyScalarWhereWithAggregatesInputSchema),z.lazy(() => LoincPanelHierarchyScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => LoincPanelHierarchyScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => LoincPanelHierarchyScalarWhereWithAggregatesInputSchema),z.lazy(() => LoincPanelHierarchyScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  Id: z.union([ z.lazy(() => IntWithAggregatesFilterSchema),z.number() ]).optional(),
  ParentId: z.union([ z.lazy(() => IntWithAggregatesFilterSchema),z.number() ]).optional(),
  Level: z.union([ z.lazy(() => IntWithAggregatesFilterSchema),z.number() ]).optional(),
  Code: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  Sequence: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  CodeText: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  Component: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  Property: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  Timing: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  Scale: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  Method: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
}).strict();

export const LoincUniveralLabOrdersWhereInputSchema: z.ZodType<Prisma.LoincUniveralLabOrdersWhereInput> = z.object({
  AND: z.union([ z.lazy(() => LoincUniveralLabOrdersWhereInputSchema),z.lazy(() => LoincUniveralLabOrdersWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => LoincUniveralLabOrdersWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => LoincUniveralLabOrdersWhereInputSchema),z.lazy(() => LoincUniveralLabOrdersWhereInputSchema).array() ]).optional(),
  Loinc_Num: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  Long_Common_Name: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  ORDER_OBS: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
}).strict();

export const LoincUniveralLabOrdersOrderByWithRelationInputSchema: z.ZodType<Prisma.LoincUniveralLabOrdersOrderByWithRelationInput> = z.object({
  Loinc_Num: z.lazy(() => SortOrderSchema).optional(),
  Long_Common_Name: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  ORDER_OBS: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  _relevance: z.lazy(() => LoincUniveralLabOrdersOrderByRelevanceInputSchema).optional()
}).strict();

export const LoincUniveralLabOrdersWhereUniqueInputSchema: z.ZodType<Prisma.LoincUniveralLabOrdersWhereUniqueInput> = z.object({
  Loinc_Num: z.string()
})
.and(z.object({
  Loinc_Num: z.string().optional(),
  AND: z.union([ z.lazy(() => LoincUniveralLabOrdersWhereInputSchema),z.lazy(() => LoincUniveralLabOrdersWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => LoincUniveralLabOrdersWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => LoincUniveralLabOrdersWhereInputSchema),z.lazy(() => LoincUniveralLabOrdersWhereInputSchema).array() ]).optional(),
  Long_Common_Name: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  ORDER_OBS: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
}).strict());

export const LoincUniveralLabOrdersOrderByWithAggregationInputSchema: z.ZodType<Prisma.LoincUniveralLabOrdersOrderByWithAggregationInput> = z.object({
  Loinc_Num: z.lazy(() => SortOrderSchema).optional(),
  Long_Common_Name: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  ORDER_OBS: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  _count: z.lazy(() => LoincUniveralLabOrdersCountOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => LoincUniveralLabOrdersMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => LoincUniveralLabOrdersMinOrderByAggregateInputSchema).optional()
}).strict();

export const LoincUniveralLabOrdersScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.LoincUniveralLabOrdersScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => LoincUniveralLabOrdersScalarWhereWithAggregatesInputSchema),z.lazy(() => LoincUniveralLabOrdersScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => LoincUniveralLabOrdersScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => LoincUniveralLabOrdersScalarWhereWithAggregatesInputSchema),z.lazy(() => LoincUniveralLabOrdersScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  Loinc_Num: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  Long_Common_Name: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  ORDER_OBS: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
}).strict();

export const OrganizationWhereInputSchema: z.ZodType<Prisma.OrganizationWhereInput> = z.object({
  AND: z.union([ z.lazy(() => OrganizationWhereInputSchema),z.lazy(() => OrganizationWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => OrganizationWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => OrganizationWhereInputSchema),z.lazy(() => OrganizationWhereInputSchema).array() ]).optional(),
  Id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  href: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  ParentId: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  Level: z.union([ z.lazy(() => IntNullableFilterSchema),z.number() ]).optional().nullable(),
  ParentOrgName: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  OrgName: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  OrgType: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  OrgSpecialty: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  OrgAddress: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  OrgCity: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  OrgState: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  OrgZip: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  LabOrder: z.lazy(() => LabOrderListRelationFilterSchema).optional(),
  Organization: z.union([ z.lazy(() => OrganizationNullableRelationFilterSchema),z.lazy(() => OrganizationWhereInputSchema) ]).optional().nullable(),
  ChildOrganization: z.lazy(() => OrganizationListRelationFilterSchema).optional(),
  OrganizationFavoriteTest: z.lazy(() => OrganizationFavoriteTestListRelationFilterSchema).optional(),
  PatientOrganization: z.lazy(() => PatientOrganizationListRelationFilterSchema).optional(),
  ProviderOrganization: z.lazy(() => ProviderOrganizationListRelationFilterSchema).optional()
}).strict();

export const OrganizationOrderByWithRelationInputSchema: z.ZodType<Prisma.OrganizationOrderByWithRelationInput> = z.object({
  Id: z.lazy(() => SortOrderSchema).optional(),
  href: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  ParentId: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  Level: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  ParentOrgName: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  OrgName: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  OrgType: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  OrgSpecialty: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  OrgAddress: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  OrgCity: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  OrgState: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  OrgZip: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  LabOrder: z.lazy(() => LabOrderOrderByRelationAggregateInputSchema).optional(),
  Organization: z.lazy(() => OrganizationOrderByWithRelationInputSchema).optional(),
  ChildOrganization: z.lazy(() => OrganizationOrderByRelationAggregateInputSchema).optional(),
  OrganizationFavoriteTest: z.lazy(() => OrganizationFavoriteTestOrderByRelationAggregateInputSchema).optional(),
  PatientOrganization: z.lazy(() => PatientOrganizationOrderByRelationAggregateInputSchema).optional(),
  ProviderOrganization: z.lazy(() => ProviderOrganizationOrderByRelationAggregateInputSchema).optional(),
  _relevance: z.lazy(() => OrganizationOrderByRelevanceInputSchema).optional()
}).strict();

export const OrganizationWhereUniqueInputSchema: z.ZodType<Prisma.OrganizationWhereUniqueInput> = z.object({
  Id: z.string()
})
.and(z.object({
  Id: z.string().optional(),
  AND: z.union([ z.lazy(() => OrganizationWhereInputSchema),z.lazy(() => OrganizationWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => OrganizationWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => OrganizationWhereInputSchema),z.lazy(() => OrganizationWhereInputSchema).array() ]).optional(),
  href: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  ParentId: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  Level: z.union([ z.lazy(() => IntNullableFilterSchema),z.number() ]).optional().nullable(),
  ParentOrgName: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  OrgName: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  OrgType: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  OrgSpecialty: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  OrgAddress: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  OrgCity: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  OrgState: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  OrgZip: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  LabOrder: z.lazy(() => LabOrderListRelationFilterSchema).optional(),
  Organization: z.union([ z.lazy(() => OrganizationNullableRelationFilterSchema),z.lazy(() => OrganizationWhereInputSchema) ]).optional().nullable(),
  ChildOrganization: z.lazy(() => OrganizationListRelationFilterSchema).optional(),
  OrganizationFavoriteTest: z.lazy(() => OrganizationFavoriteTestListRelationFilterSchema).optional(),
  PatientOrganization: z.lazy(() => PatientOrganizationListRelationFilterSchema).optional(),
  ProviderOrganization: z.lazy(() => ProviderOrganizationListRelationFilterSchema).optional()
}).strict());

export const OrganizationOrderByWithAggregationInputSchema: z.ZodType<Prisma.OrganizationOrderByWithAggregationInput> = z.object({
  Id: z.lazy(() => SortOrderSchema).optional(),
  href: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  ParentId: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  Level: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  ParentOrgName: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  OrgName: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  OrgType: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  OrgSpecialty: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  OrgAddress: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  OrgCity: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  OrgState: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  OrgZip: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  _count: z.lazy(() => OrganizationCountOrderByAggregateInputSchema).optional(),
  _avg: z.lazy(() => OrganizationAvgOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => OrganizationMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => OrganizationMinOrderByAggregateInputSchema).optional(),
  _sum: z.lazy(() => OrganizationSumOrderByAggregateInputSchema).optional()
}).strict();

export const OrganizationScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.OrganizationScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => OrganizationScalarWhereWithAggregatesInputSchema),z.lazy(() => OrganizationScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => OrganizationScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => OrganizationScalarWhereWithAggregatesInputSchema),z.lazy(() => OrganizationScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  Id: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  href: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  ParentId: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  Level: z.union([ z.lazy(() => IntNullableWithAggregatesFilterSchema),z.number() ]).optional().nullable(),
  ParentOrgName: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  OrgName: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  OrgType: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  OrgSpecialty: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  OrgAddress: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  OrgCity: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  OrgState: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  OrgZip: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
}).strict();

export const OrganizationEndpointWhereInputSchema: z.ZodType<Prisma.OrganizationEndpointWhereInput> = z.object({
  AND: z.union([ z.lazy(() => OrganizationEndpointWhereInputSchema),z.lazy(() => OrganizationEndpointWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => OrganizationEndpointWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => OrganizationEndpointWhereInputSchema),z.lazy(() => OrganizationEndpointWhereInputSchema).array() ]).optional(),
  Id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  OrgName: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  EHRVendor: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  FHIRVersion: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  Endpoint: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
}).strict();

export const OrganizationEndpointOrderByWithRelationInputSchema: z.ZodType<Prisma.OrganizationEndpointOrderByWithRelationInput> = z.object({
  Id: z.lazy(() => SortOrderSchema).optional(),
  OrgName: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  EHRVendor: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  FHIRVersion: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  Endpoint: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  _relevance: z.lazy(() => OrganizationEndpointOrderByRelevanceInputSchema).optional()
}).strict();

export const OrganizationEndpointWhereUniqueInputSchema: z.ZodType<Prisma.OrganizationEndpointWhereUniqueInput> = z.object({
  Id: z.string()
})
.and(z.object({
  Id: z.string().optional(),
  AND: z.union([ z.lazy(() => OrganizationEndpointWhereInputSchema),z.lazy(() => OrganizationEndpointWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => OrganizationEndpointWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => OrganizationEndpointWhereInputSchema),z.lazy(() => OrganizationEndpointWhereInputSchema).array() ]).optional(),
  OrgName: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  EHRVendor: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  FHIRVersion: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  Endpoint: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
}).strict());

export const OrganizationEndpointOrderByWithAggregationInputSchema: z.ZodType<Prisma.OrganizationEndpointOrderByWithAggregationInput> = z.object({
  Id: z.lazy(() => SortOrderSchema).optional(),
  OrgName: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  EHRVendor: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  FHIRVersion: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  Endpoint: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  _count: z.lazy(() => OrganizationEndpointCountOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => OrganizationEndpointMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => OrganizationEndpointMinOrderByAggregateInputSchema).optional()
}).strict();

export const OrganizationEndpointScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.OrganizationEndpointScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => OrganizationEndpointScalarWhereWithAggregatesInputSchema),z.lazy(() => OrganizationEndpointScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => OrganizationEndpointScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => OrganizationEndpointScalarWhereWithAggregatesInputSchema),z.lazy(() => OrganizationEndpointScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  Id: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  OrgName: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  EHRVendor: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  FHIRVersion: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  Endpoint: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
}).strict();

export const OrganizationFavoriteTestWhereInputSchema: z.ZodType<Prisma.OrganizationFavoriteTestWhereInput> = z.object({
  AND: z.union([ z.lazy(() => OrganizationFavoriteTestWhereInputSchema),z.lazy(() => OrganizationFavoriteTestWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => OrganizationFavoriteTestWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => OrganizationFavoriteTestWhereInputSchema),z.lazy(() => OrganizationFavoriteTestWhereInputSchema).array() ]).optional(),
  Id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  OrganizationId: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  ParentId: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  ParentName: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  Level: z.union([ z.lazy(() => IntNullableFilterSchema),z.number() ]).optional().nullable(),
  TestId: z.union([ z.lazy(() => IntNullableFilterSchema),z.number() ]).optional().nullable(),
  CreatedAt: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.date() ]).optional().nullable(),
  UpdatedAt: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.date() ]).optional().nullable(),
  Organization: z.union([ z.lazy(() => OrganizationNullableRelationFilterSchema),z.lazy(() => OrganizationWhereInputSchema) ]).optional().nullable(),
  TestCatalog: z.union([ z.lazy(() => TestCatalogNullableRelationFilterSchema),z.lazy(() => TestCatalogWhereInputSchema) ]).optional().nullable(),
}).strict();

export const OrganizationFavoriteTestOrderByWithRelationInputSchema: z.ZodType<Prisma.OrganizationFavoriteTestOrderByWithRelationInput> = z.object({
  Id: z.lazy(() => SortOrderSchema).optional(),
  OrganizationId: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  ParentId: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  ParentName: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  Level: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  TestId: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  CreatedAt: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  UpdatedAt: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  Organization: z.lazy(() => OrganizationOrderByWithRelationInputSchema).optional(),
  TestCatalog: z.lazy(() => TestCatalogOrderByWithRelationInputSchema).optional(),
  _relevance: z.lazy(() => OrganizationFavoriteTestOrderByRelevanceInputSchema).optional()
}).strict();

export const OrganizationFavoriteTestWhereUniqueInputSchema: z.ZodType<Prisma.OrganizationFavoriteTestWhereUniqueInput> = z.object({
  Id: z.string()
})
.and(z.object({
  Id: z.string().optional(),
  AND: z.union([ z.lazy(() => OrganizationFavoriteTestWhereInputSchema),z.lazy(() => OrganizationFavoriteTestWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => OrganizationFavoriteTestWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => OrganizationFavoriteTestWhereInputSchema),z.lazy(() => OrganizationFavoriteTestWhereInputSchema).array() ]).optional(),
  OrganizationId: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  ParentId: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  ParentName: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  Level: z.union([ z.lazy(() => IntNullableFilterSchema),z.number() ]).optional().nullable(),
  TestId: z.union([ z.lazy(() => IntNullableFilterSchema),z.number() ]).optional().nullable(),
  CreatedAt: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.date() ]).optional().nullable(),
  UpdatedAt: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.date() ]).optional().nullable(),
  Organization: z.union([ z.lazy(() => OrganizationNullableRelationFilterSchema),z.lazy(() => OrganizationWhereInputSchema) ]).optional().nullable(),
  TestCatalog: z.union([ z.lazy(() => TestCatalogNullableRelationFilterSchema),z.lazy(() => TestCatalogWhereInputSchema) ]).optional().nullable(),
}).strict());

export const OrganizationFavoriteTestOrderByWithAggregationInputSchema: z.ZodType<Prisma.OrganizationFavoriteTestOrderByWithAggregationInput> = z.object({
  Id: z.lazy(() => SortOrderSchema).optional(),
  OrganizationId: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  ParentId: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  ParentName: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  Level: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  TestId: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  CreatedAt: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  UpdatedAt: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  _count: z.lazy(() => OrganizationFavoriteTestCountOrderByAggregateInputSchema).optional(),
  _avg: z.lazy(() => OrganizationFavoriteTestAvgOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => OrganizationFavoriteTestMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => OrganizationFavoriteTestMinOrderByAggregateInputSchema).optional(),
  _sum: z.lazy(() => OrganizationFavoriteTestSumOrderByAggregateInputSchema).optional()
}).strict();

export const OrganizationFavoriteTestScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.OrganizationFavoriteTestScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => OrganizationFavoriteTestScalarWhereWithAggregatesInputSchema),z.lazy(() => OrganizationFavoriteTestScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => OrganizationFavoriteTestScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => OrganizationFavoriteTestScalarWhereWithAggregatesInputSchema),z.lazy(() => OrganizationFavoriteTestScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  Id: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  OrganizationId: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  ParentId: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  ParentName: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  Level: z.union([ z.lazy(() => IntNullableWithAggregatesFilterSchema),z.number() ]).optional().nullable(),
  TestId: z.union([ z.lazy(() => IntNullableWithAggregatesFilterSchema),z.number() ]).optional().nullable(),
  CreatedAt: z.union([ z.lazy(() => DateTimeNullableWithAggregatesFilterSchema),z.date() ]).optional().nullable(),
  UpdatedAt: z.union([ z.lazy(() => DateTimeNullableWithAggregatesFilterSchema),z.date() ]).optional().nullable(),
}).strict();

export const PatientWhereInputSchema: z.ZodType<Prisma.PatientWhereInput> = z.object({
  AND: z.union([ z.lazy(() => PatientWhereInputSchema),z.lazy(() => PatientWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => PatientWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => PatientWhereInputSchema),z.lazy(() => PatientWhereInputSchema).array() ]).optional(),
  Id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  FirstName: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  LastName: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  DateOfBirth: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.date() ]).optional().nullable(),
  Gender: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  Email: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  Mobile: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  CreatedAt: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.date() ]).optional().nullable(),
  UpdatedAt: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.date() ]).optional().nullable(),
  LabOrder: z.lazy(() => LabOrderListRelationFilterSchema).optional(),
  PatientOrganization: z.lazy(() => PatientOrganizationListRelationFilterSchema).optional()
}).strict();

export const PatientOrderByWithRelationInputSchema: z.ZodType<Prisma.PatientOrderByWithRelationInput> = z.object({
  Id: z.lazy(() => SortOrderSchema).optional(),
  FirstName: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  LastName: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  DateOfBirth: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  Gender: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  Email: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  Mobile: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  CreatedAt: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  UpdatedAt: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  LabOrder: z.lazy(() => LabOrderOrderByRelationAggregateInputSchema).optional(),
  PatientOrganization: z.lazy(() => PatientOrganizationOrderByRelationAggregateInputSchema).optional(),
  _relevance: z.lazy(() => PatientOrderByRelevanceInputSchema).optional()
}).strict();

export const PatientWhereUniqueInputSchema: z.ZodType<Prisma.PatientWhereUniqueInput> = z.object({
  Id: z.string()
})
.and(z.object({
  Id: z.string().optional(),
  AND: z.union([ z.lazy(() => PatientWhereInputSchema),z.lazy(() => PatientWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => PatientWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => PatientWhereInputSchema),z.lazy(() => PatientWhereInputSchema).array() ]).optional(),
  FirstName: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  LastName: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  DateOfBirth: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.date() ]).optional().nullable(),
  Gender: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  Email: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  Mobile: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  CreatedAt: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.date() ]).optional().nullable(),
  UpdatedAt: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.date() ]).optional().nullable(),
  LabOrder: z.lazy(() => LabOrderListRelationFilterSchema).optional(),
  PatientOrganization: z.lazy(() => PatientOrganizationListRelationFilterSchema).optional()
}).strict());

export const PatientOrderByWithAggregationInputSchema: z.ZodType<Prisma.PatientOrderByWithAggregationInput> = z.object({
  Id: z.lazy(() => SortOrderSchema).optional(),
  FirstName: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  LastName: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  DateOfBirth: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  Gender: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  Email: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  Mobile: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  CreatedAt: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  UpdatedAt: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  _count: z.lazy(() => PatientCountOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => PatientMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => PatientMinOrderByAggregateInputSchema).optional()
}).strict();

export const PatientScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.PatientScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => PatientScalarWhereWithAggregatesInputSchema),z.lazy(() => PatientScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => PatientScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => PatientScalarWhereWithAggregatesInputSchema),z.lazy(() => PatientScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  Id: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  FirstName: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  LastName: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  DateOfBirth: z.union([ z.lazy(() => DateTimeNullableWithAggregatesFilterSchema),z.date() ]).optional().nullable(),
  Gender: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  Email: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  Mobile: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  CreatedAt: z.union([ z.lazy(() => DateTimeNullableWithAggregatesFilterSchema),z.date() ]).optional().nullable(),
  UpdatedAt: z.union([ z.lazy(() => DateTimeNullableWithAggregatesFilterSchema),z.date() ]).optional().nullable(),
}).strict();

export const PatientOrganizationWhereInputSchema: z.ZodType<Prisma.PatientOrganizationWhereInput> = z.object({
  AND: z.union([ z.lazy(() => PatientOrganizationWhereInputSchema),z.lazy(() => PatientOrganizationWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => PatientOrganizationWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => PatientOrganizationWhereInputSchema),z.lazy(() => PatientOrganizationWhereInputSchema).array() ]).optional(),
  Id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  PatientId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  OrganizationId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  MRN: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  Mobile: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  Email: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  Organization: z.union([ z.lazy(() => OrganizationRelationFilterSchema),z.lazy(() => OrganizationWhereInputSchema) ]).optional(),
  Patient: z.union([ z.lazy(() => PatientRelationFilterSchema),z.lazy(() => PatientWhereInputSchema) ]).optional(),
}).strict();

export const PatientOrganizationOrderByWithRelationInputSchema: z.ZodType<Prisma.PatientOrganizationOrderByWithRelationInput> = z.object({
  Id: z.lazy(() => SortOrderSchema).optional(),
  PatientId: z.lazy(() => SortOrderSchema).optional(),
  OrganizationId: z.lazy(() => SortOrderSchema).optional(),
  MRN: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  Mobile: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  Email: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  Organization: z.lazy(() => OrganizationOrderByWithRelationInputSchema).optional(),
  Patient: z.lazy(() => PatientOrderByWithRelationInputSchema).optional(),
  _relevance: z.lazy(() => PatientOrganizationOrderByRelevanceInputSchema).optional()
}).strict();

export const PatientOrganizationWhereUniqueInputSchema: z.ZodType<Prisma.PatientOrganizationWhereUniqueInput> = z.object({
  Id: z.string()
})
.and(z.object({
  Id: z.string().optional(),
  AND: z.union([ z.lazy(() => PatientOrganizationWhereInputSchema),z.lazy(() => PatientOrganizationWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => PatientOrganizationWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => PatientOrganizationWhereInputSchema),z.lazy(() => PatientOrganizationWhereInputSchema).array() ]).optional(),
  PatientId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  OrganizationId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  MRN: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  Mobile: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  Email: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  Organization: z.union([ z.lazy(() => OrganizationRelationFilterSchema),z.lazy(() => OrganizationWhereInputSchema) ]).optional(),
  Patient: z.union([ z.lazy(() => PatientRelationFilterSchema),z.lazy(() => PatientWhereInputSchema) ]).optional(),
}).strict());

export const PatientOrganizationOrderByWithAggregationInputSchema: z.ZodType<Prisma.PatientOrganizationOrderByWithAggregationInput> = z.object({
  Id: z.lazy(() => SortOrderSchema).optional(),
  PatientId: z.lazy(() => SortOrderSchema).optional(),
  OrganizationId: z.lazy(() => SortOrderSchema).optional(),
  MRN: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  Mobile: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  Email: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  _count: z.lazy(() => PatientOrganizationCountOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => PatientOrganizationMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => PatientOrganizationMinOrderByAggregateInputSchema).optional()
}).strict();

export const PatientOrganizationScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.PatientOrganizationScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => PatientOrganizationScalarWhereWithAggregatesInputSchema),z.lazy(() => PatientOrganizationScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => PatientOrganizationScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => PatientOrganizationScalarWhereWithAggregatesInputSchema),z.lazy(() => PatientOrganizationScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  Id: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  PatientId: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  OrganizationId: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  MRN: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  Mobile: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  Email: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
}).strict();

export const PostWhereInputSchema: z.ZodType<Prisma.PostWhereInput> = z.object({
  AND: z.union([ z.lazy(() => PostWhereInputSchema),z.lazy(() => PostWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => PostWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => PostWhereInputSchema),z.lazy(() => PostWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  name: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.date() ]).optional(),
}).strict();

export const PostOrderByWithRelationInputSchema: z.ZodType<Prisma.PostOrderByWithRelationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  _relevance: z.lazy(() => PostOrderByRelevanceInputSchema).optional()
}).strict();

export const PostWhereUniqueInputSchema: z.ZodType<Prisma.PostWhereUniqueInput> = z.object({
  id: z.number()
})
.and(z.object({
  id: z.number().optional(),
  AND: z.union([ z.lazy(() => PostWhereInputSchema),z.lazy(() => PostWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => PostWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => PostWhereInputSchema),z.lazy(() => PostWhereInputSchema).array() ]).optional(),
  name: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.date() ]).optional(),
}).strict());

export const PostOrderByWithAggregationInputSchema: z.ZodType<Prisma.PostOrderByWithAggregationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  _count: z.lazy(() => PostCountOrderByAggregateInputSchema).optional(),
  _avg: z.lazy(() => PostAvgOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => PostMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => PostMinOrderByAggregateInputSchema).optional(),
  _sum: z.lazy(() => PostSumOrderByAggregateInputSchema).optional()
}).strict();

export const PostScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.PostScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => PostScalarWhereWithAggregatesInputSchema),z.lazy(() => PostScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => PostScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => PostScalarWhereWithAggregatesInputSchema),z.lazy(() => PostScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => IntWithAggregatesFilterSchema),z.number() ]).optional(),
  name: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.date() ]).optional(),
}).strict();

export const ProviderWhereInputSchema: z.ZodType<Prisma.ProviderWhereInput> = z.object({
  AND: z.union([ z.lazy(() => ProviderWhereInputSchema),z.lazy(() => ProviderWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => ProviderWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => ProviderWhereInputSchema),z.lazy(() => ProviderWhereInputSchema).array() ]).optional(),
  Id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  href: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  NPI: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  Name: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  Email: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  Credentials: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  Specialty: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  Aboutme: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  Gender: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  ProviderType: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  Affiliation: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  ProceduresAndResearch: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  SpecialInterests: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  UserAttributeId: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  OrderingProviderLabOrder: z.lazy(() => LabOrderListRelationFilterSchema).optional(),
  TreatingProviderLabOrder: z.lazy(() => LabOrderListRelationFilterSchema).optional(),
  UserAttribute: z.union([ z.lazy(() => UserAttributeNullableRelationFilterSchema),z.lazy(() => UserAttributeWhereInputSchema) ]).optional().nullable(),
  ProviderEducation: z.lazy(() => ProviderEducationListRelationFilterSchema).optional(),
  ProviderFavoriteTest: z.lazy(() => ProviderFavoriteTestListRelationFilterSchema).optional(),
  ProviderOrganization: z.lazy(() => ProviderOrganizationListRelationFilterSchema).optional()
}).strict();

export const ProviderOrderByWithRelationInputSchema: z.ZodType<Prisma.ProviderOrderByWithRelationInput> = z.object({
  Id: z.lazy(() => SortOrderSchema).optional(),
  href: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  NPI: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  Name: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  Email: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  Credentials: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  Specialty: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  Aboutme: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  Gender: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  ProviderType: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  Affiliation: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  ProceduresAndResearch: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  SpecialInterests: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  UserAttributeId: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  OrderingProviderLabOrder: z.lazy(() => LabOrderOrderByRelationAggregateInputSchema).optional(),
  TreatingProviderLabOrder: z.lazy(() => LabOrderOrderByRelationAggregateInputSchema).optional(),
  UserAttribute: z.lazy(() => UserAttributeOrderByWithRelationInputSchema).optional(),
  ProviderEducation: z.lazy(() => ProviderEducationOrderByRelationAggregateInputSchema).optional(),
  ProviderFavoriteTest: z.lazy(() => ProviderFavoriteTestOrderByRelationAggregateInputSchema).optional(),
  ProviderOrganization: z.lazy(() => ProviderOrganizationOrderByRelationAggregateInputSchema).optional(),
  _relevance: z.lazy(() => ProviderOrderByRelevanceInputSchema).optional()
}).strict();

export const ProviderWhereUniqueInputSchema: z.ZodType<Prisma.ProviderWhereUniqueInput> = z.union([
  z.object({
    Id: z.string(),
    UserAttributeId: z.string()
  }),
  z.object({
    Id: z.string(),
  }),
  z.object({
    UserAttributeId: z.string(),
  }),
])
.and(z.object({
  Id: z.string().optional(),
  UserAttributeId: z.string().optional(),
  AND: z.union([ z.lazy(() => ProviderWhereInputSchema),z.lazy(() => ProviderWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => ProviderWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => ProviderWhereInputSchema),z.lazy(() => ProviderWhereInputSchema).array() ]).optional(),
  href: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  NPI: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  Name: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  Email: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  Credentials: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  Specialty: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  Aboutme: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  Gender: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  ProviderType: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  Affiliation: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  ProceduresAndResearch: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  SpecialInterests: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  OrderingProviderLabOrder: z.lazy(() => LabOrderListRelationFilterSchema).optional(),
  TreatingProviderLabOrder: z.lazy(() => LabOrderListRelationFilterSchema).optional(),
  UserAttribute: z.union([ z.lazy(() => UserAttributeNullableRelationFilterSchema),z.lazy(() => UserAttributeWhereInputSchema) ]).optional().nullable(),
  ProviderEducation: z.lazy(() => ProviderEducationListRelationFilterSchema).optional(),
  ProviderFavoriteTest: z.lazy(() => ProviderFavoriteTestListRelationFilterSchema).optional(),
  ProviderOrganization: z.lazy(() => ProviderOrganizationListRelationFilterSchema).optional()
}).strict());

export const ProviderOrderByWithAggregationInputSchema: z.ZodType<Prisma.ProviderOrderByWithAggregationInput> = z.object({
  Id: z.lazy(() => SortOrderSchema).optional(),
  href: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  NPI: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  Name: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  Email: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  Credentials: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  Specialty: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  Aboutme: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  Gender: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  ProviderType: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  Affiliation: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  ProceduresAndResearch: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  SpecialInterests: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  UserAttributeId: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  _count: z.lazy(() => ProviderCountOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => ProviderMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => ProviderMinOrderByAggregateInputSchema).optional()
}).strict();

export const ProviderScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.ProviderScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => ProviderScalarWhereWithAggregatesInputSchema),z.lazy(() => ProviderScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => ProviderScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => ProviderScalarWhereWithAggregatesInputSchema),z.lazy(() => ProviderScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  Id: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  href: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  NPI: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  Name: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  Email: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  Credentials: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  Specialty: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  Aboutme: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  Gender: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  ProviderType: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  Affiliation: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  ProceduresAndResearch: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  SpecialInterests: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  UserAttributeId: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
}).strict();

export const ProviderEducationWhereInputSchema: z.ZodType<Prisma.ProviderEducationWhereInput> = z.object({
  AND: z.union([ z.lazy(() => ProviderEducationWhereInputSchema),z.lazy(() => ProviderEducationWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => ProviderEducationWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => ProviderEducationWhereInputSchema),z.lazy(() => ProviderEducationWhereInputSchema).array() ]).optional(),
  Id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  ProviderId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  ProviderNPI: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  Name: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  EducationType: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  SchoolName: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  AreaOfEducation: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  Provider: z.union([ z.lazy(() => ProviderRelationFilterSchema),z.lazy(() => ProviderWhereInputSchema) ]).optional(),
}).strict();

export const ProviderEducationOrderByWithRelationInputSchema: z.ZodType<Prisma.ProviderEducationOrderByWithRelationInput> = z.object({
  Id: z.lazy(() => SortOrderSchema).optional(),
  ProviderId: z.lazy(() => SortOrderSchema).optional(),
  ProviderNPI: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  Name: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  EducationType: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  SchoolName: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  AreaOfEducation: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  Provider: z.lazy(() => ProviderOrderByWithRelationInputSchema).optional(),
  _relevance: z.lazy(() => ProviderEducationOrderByRelevanceInputSchema).optional()
}).strict();

export const ProviderEducationWhereUniqueInputSchema: z.ZodType<Prisma.ProviderEducationWhereUniqueInput> = z.object({
  Id: z.string()
})
.and(z.object({
  Id: z.string().optional(),
  AND: z.union([ z.lazy(() => ProviderEducationWhereInputSchema),z.lazy(() => ProviderEducationWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => ProviderEducationWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => ProviderEducationWhereInputSchema),z.lazy(() => ProviderEducationWhereInputSchema).array() ]).optional(),
  ProviderId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  ProviderNPI: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  Name: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  EducationType: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  SchoolName: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  AreaOfEducation: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  Provider: z.union([ z.lazy(() => ProviderRelationFilterSchema),z.lazy(() => ProviderWhereInputSchema) ]).optional(),
}).strict());

export const ProviderEducationOrderByWithAggregationInputSchema: z.ZodType<Prisma.ProviderEducationOrderByWithAggregationInput> = z.object({
  Id: z.lazy(() => SortOrderSchema).optional(),
  ProviderId: z.lazy(() => SortOrderSchema).optional(),
  ProviderNPI: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  Name: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  EducationType: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  SchoolName: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  AreaOfEducation: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  _count: z.lazy(() => ProviderEducationCountOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => ProviderEducationMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => ProviderEducationMinOrderByAggregateInputSchema).optional()
}).strict();

export const ProviderEducationScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.ProviderEducationScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => ProviderEducationScalarWhereWithAggregatesInputSchema),z.lazy(() => ProviderEducationScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => ProviderEducationScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => ProviderEducationScalarWhereWithAggregatesInputSchema),z.lazy(() => ProviderEducationScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  Id: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  ProviderId: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  ProviderNPI: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  Name: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  EducationType: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  SchoolName: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  AreaOfEducation: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
}).strict();

export const ProviderFavoriteTestWhereInputSchema: z.ZodType<Prisma.ProviderFavoriteTestWhereInput> = z.object({
  AND: z.union([ z.lazy(() => ProviderFavoriteTestWhereInputSchema),z.lazy(() => ProviderFavoriteTestWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => ProviderFavoriteTestWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => ProviderFavoriteTestWhereInputSchema),z.lazy(() => ProviderFavoriteTestWhereInputSchema).array() ]).optional(),
  Id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  ProviderId: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  ParentId: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  ParentName: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  Level: z.union([ z.lazy(() => IntNullableFilterSchema),z.number() ]).optional().nullable(),
  TestId: z.union([ z.lazy(() => IntNullableFilterSchema),z.number() ]).optional().nullable(),
  CreatedAt: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.date() ]).optional().nullable(),
  UpdatedAt: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.date() ]).optional().nullable(),
  Provider: z.union([ z.lazy(() => ProviderNullableRelationFilterSchema),z.lazy(() => ProviderWhereInputSchema) ]).optional().nullable(),
  TestCatalog: z.union([ z.lazy(() => TestCatalogNullableRelationFilterSchema),z.lazy(() => TestCatalogWhereInputSchema) ]).optional().nullable(),
}).strict();

export const ProviderFavoriteTestOrderByWithRelationInputSchema: z.ZodType<Prisma.ProviderFavoriteTestOrderByWithRelationInput> = z.object({
  Id: z.lazy(() => SortOrderSchema).optional(),
  ProviderId: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  ParentId: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  ParentName: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  Level: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  TestId: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  CreatedAt: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  UpdatedAt: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  Provider: z.lazy(() => ProviderOrderByWithRelationInputSchema).optional(),
  TestCatalog: z.lazy(() => TestCatalogOrderByWithRelationInputSchema).optional(),
  _relevance: z.lazy(() => ProviderFavoriteTestOrderByRelevanceInputSchema).optional()
}).strict();

export const ProviderFavoriteTestWhereUniqueInputSchema: z.ZodType<Prisma.ProviderFavoriteTestWhereUniqueInput> = z.object({
  Id: z.string()
})
.and(z.object({
  Id: z.string().optional(),
  AND: z.union([ z.lazy(() => ProviderFavoriteTestWhereInputSchema),z.lazy(() => ProviderFavoriteTestWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => ProviderFavoriteTestWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => ProviderFavoriteTestWhereInputSchema),z.lazy(() => ProviderFavoriteTestWhereInputSchema).array() ]).optional(),
  ProviderId: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  ParentId: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  ParentName: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  Level: z.union([ z.lazy(() => IntNullableFilterSchema),z.number() ]).optional().nullable(),
  TestId: z.union([ z.lazy(() => IntNullableFilterSchema),z.number() ]).optional().nullable(),
  CreatedAt: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.date() ]).optional().nullable(),
  UpdatedAt: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.date() ]).optional().nullable(),
  Provider: z.union([ z.lazy(() => ProviderNullableRelationFilterSchema),z.lazy(() => ProviderWhereInputSchema) ]).optional().nullable(),
  TestCatalog: z.union([ z.lazy(() => TestCatalogNullableRelationFilterSchema),z.lazy(() => TestCatalogWhereInputSchema) ]).optional().nullable(),
}).strict());

export const ProviderFavoriteTestOrderByWithAggregationInputSchema: z.ZodType<Prisma.ProviderFavoriteTestOrderByWithAggregationInput> = z.object({
  Id: z.lazy(() => SortOrderSchema).optional(),
  ProviderId: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  ParentId: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  ParentName: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  Level: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  TestId: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  CreatedAt: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  UpdatedAt: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  _count: z.lazy(() => ProviderFavoriteTestCountOrderByAggregateInputSchema).optional(),
  _avg: z.lazy(() => ProviderFavoriteTestAvgOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => ProviderFavoriteTestMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => ProviderFavoriteTestMinOrderByAggregateInputSchema).optional(),
  _sum: z.lazy(() => ProviderFavoriteTestSumOrderByAggregateInputSchema).optional()
}).strict();

export const ProviderFavoriteTestScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.ProviderFavoriteTestScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => ProviderFavoriteTestScalarWhereWithAggregatesInputSchema),z.lazy(() => ProviderFavoriteTestScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => ProviderFavoriteTestScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => ProviderFavoriteTestScalarWhereWithAggregatesInputSchema),z.lazy(() => ProviderFavoriteTestScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  Id: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  ProviderId: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  ParentId: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  ParentName: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  Level: z.union([ z.lazy(() => IntNullableWithAggregatesFilterSchema),z.number() ]).optional().nullable(),
  TestId: z.union([ z.lazy(() => IntNullableWithAggregatesFilterSchema),z.number() ]).optional().nullable(),
  CreatedAt: z.union([ z.lazy(() => DateTimeNullableWithAggregatesFilterSchema),z.date() ]).optional().nullable(),
  UpdatedAt: z.union([ z.lazy(() => DateTimeNullableWithAggregatesFilterSchema),z.date() ]).optional().nullable(),
}).strict();

export const ProviderOrganizationWhereInputSchema: z.ZodType<Prisma.ProviderOrganizationWhereInput> = z.object({
  AND: z.union([ z.lazy(() => ProviderOrganizationWhereInputSchema),z.lazy(() => ProviderOrganizationWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => ProviderOrganizationWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => ProviderOrganizationWhereInputSchema),z.lazy(() => ProviderOrganizationWhereInputSchema).array() ]).optional(),
  Id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  ProviderId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  OrganizationId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  ProviderNPI: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  Name: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  ParentOrgName: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  OrgName: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  OrgAddress: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  OrgCity: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  OrgState: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  OrgZip: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  Organization: z.union([ z.lazy(() => OrganizationRelationFilterSchema),z.lazy(() => OrganizationWhereInputSchema) ]).optional(),
  Provider: z.union([ z.lazy(() => ProviderRelationFilterSchema),z.lazy(() => ProviderWhereInputSchema) ]).optional(),
}).strict();

export const ProviderOrganizationOrderByWithRelationInputSchema: z.ZodType<Prisma.ProviderOrganizationOrderByWithRelationInput> = z.object({
  Id: z.lazy(() => SortOrderSchema).optional(),
  ProviderId: z.lazy(() => SortOrderSchema).optional(),
  OrganizationId: z.lazy(() => SortOrderSchema).optional(),
  ProviderNPI: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  Name: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  ParentOrgName: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  OrgName: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  OrgAddress: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  OrgCity: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  OrgState: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  OrgZip: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  Organization: z.lazy(() => OrganizationOrderByWithRelationInputSchema).optional(),
  Provider: z.lazy(() => ProviderOrderByWithRelationInputSchema).optional(),
  _relevance: z.lazy(() => ProviderOrganizationOrderByRelevanceInputSchema).optional()
}).strict();

export const ProviderOrganizationWhereUniqueInputSchema: z.ZodType<Prisma.ProviderOrganizationWhereUniqueInput> = z.object({
  Id: z.string()
})
.and(z.object({
  Id: z.string().optional(),
  AND: z.union([ z.lazy(() => ProviderOrganizationWhereInputSchema),z.lazy(() => ProviderOrganizationWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => ProviderOrganizationWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => ProviderOrganizationWhereInputSchema),z.lazy(() => ProviderOrganizationWhereInputSchema).array() ]).optional(),
  ProviderId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  OrganizationId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  ProviderNPI: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  Name: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  ParentOrgName: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  OrgName: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  OrgAddress: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  OrgCity: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  OrgState: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  OrgZip: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  Organization: z.union([ z.lazy(() => OrganizationRelationFilterSchema),z.lazy(() => OrganizationWhereInputSchema) ]).optional(),
  Provider: z.union([ z.lazy(() => ProviderRelationFilterSchema),z.lazy(() => ProviderWhereInputSchema) ]).optional(),
}).strict());

export const ProviderOrganizationOrderByWithAggregationInputSchema: z.ZodType<Prisma.ProviderOrganizationOrderByWithAggregationInput> = z.object({
  Id: z.lazy(() => SortOrderSchema).optional(),
  ProviderId: z.lazy(() => SortOrderSchema).optional(),
  OrganizationId: z.lazy(() => SortOrderSchema).optional(),
  ProviderNPI: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  Name: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  ParentOrgName: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  OrgName: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  OrgAddress: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  OrgCity: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  OrgState: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  OrgZip: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  _count: z.lazy(() => ProviderOrganizationCountOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => ProviderOrganizationMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => ProviderOrganizationMinOrderByAggregateInputSchema).optional()
}).strict();

export const ProviderOrganizationScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.ProviderOrganizationScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => ProviderOrganizationScalarWhereWithAggregatesInputSchema),z.lazy(() => ProviderOrganizationScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => ProviderOrganizationScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => ProviderOrganizationScalarWhereWithAggregatesInputSchema),z.lazy(() => ProviderOrganizationScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  Id: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  ProviderId: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  OrganizationId: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  ProviderNPI: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  Name: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  ParentOrgName: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  OrgName: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  OrgAddress: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  OrgCity: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  OrgState: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  OrgZip: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
}).strict();

export const SessionWhereInputSchema: z.ZodType<Prisma.SessionWhereInput> = z.object({
  AND: z.union([ z.lazy(() => SessionWhereInputSchema),z.lazy(() => SessionWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => SessionWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => SessionWhereInputSchema),z.lazy(() => SessionWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  sessionToken: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  userId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  expires: z.union([ z.lazy(() => DateTimeFilterSchema),z.date() ]).optional(),
  User: z.union([ z.lazy(() => UserRelationFilterSchema),z.lazy(() => UserWhereInputSchema) ]).optional(),
}).strict();

export const SessionOrderByWithRelationInputSchema: z.ZodType<Prisma.SessionOrderByWithRelationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  sessionToken: z.lazy(() => SortOrderSchema).optional(),
  userId: z.lazy(() => SortOrderSchema).optional(),
  expires: z.lazy(() => SortOrderSchema).optional(),
  User: z.lazy(() => UserOrderByWithRelationInputSchema).optional(),
  _relevance: z.lazy(() => SessionOrderByRelevanceInputSchema).optional()
}).strict();

export const SessionWhereUniqueInputSchema: z.ZodType<Prisma.SessionWhereUniqueInput> = z.union([
  z.object({
    id: z.string(),
    sessionToken: z.string()
  }),
  z.object({
    id: z.string(),
  }),
  z.object({
    sessionToken: z.string(),
  }),
])
.and(z.object({
  id: z.string().optional(),
  sessionToken: z.string().optional(),
  AND: z.union([ z.lazy(() => SessionWhereInputSchema),z.lazy(() => SessionWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => SessionWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => SessionWhereInputSchema),z.lazy(() => SessionWhereInputSchema).array() ]).optional(),
  userId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  expires: z.union([ z.lazy(() => DateTimeFilterSchema),z.date() ]).optional(),
  User: z.union([ z.lazy(() => UserRelationFilterSchema),z.lazy(() => UserWhereInputSchema) ]).optional(),
}).strict());

export const SessionOrderByWithAggregationInputSchema: z.ZodType<Prisma.SessionOrderByWithAggregationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  sessionToken: z.lazy(() => SortOrderSchema).optional(),
  userId: z.lazy(() => SortOrderSchema).optional(),
  expires: z.lazy(() => SortOrderSchema).optional(),
  _count: z.lazy(() => SessionCountOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => SessionMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => SessionMinOrderByAggregateInputSchema).optional()
}).strict();

export const SessionScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.SessionScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => SessionScalarWhereWithAggregatesInputSchema),z.lazy(() => SessionScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => SessionScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => SessionScalarWhereWithAggregatesInputSchema),z.lazy(() => SessionScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  sessionToken: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  userId: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  expires: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.date() ]).optional(),
}).strict();

export const SponsorWhereInputSchema: z.ZodType<Prisma.SponsorWhereInput> = z.object({
  AND: z.union([ z.lazy(() => SponsorWhereInputSchema),z.lazy(() => SponsorWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => SponsorWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => SponsorWhereInputSchema),z.lazy(() => SponsorWhereInputSchema).array() ]).optional(),
  SponsorId: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  SponsorName: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  SponsorCode: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  SponsorWebsite: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  SponsorType: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  Address: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  City: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  State: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  Zip: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  SponsoredProgram: z.lazy(() => SponsoredProgramListRelationFilterSchema).optional()
}).strict();

export const SponsorOrderByWithRelationInputSchema: z.ZodType<Prisma.SponsorOrderByWithRelationInput> = z.object({
  SponsorId: z.lazy(() => SortOrderSchema).optional(),
  SponsorName: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  SponsorCode: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  SponsorWebsite: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  SponsorType: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  Address: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  City: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  State: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  Zip: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  SponsoredProgram: z.lazy(() => SponsoredProgramOrderByRelationAggregateInputSchema).optional(),
  _relevance: z.lazy(() => SponsorOrderByRelevanceInputSchema).optional()
}).strict();

export const SponsorWhereUniqueInputSchema: z.ZodType<Prisma.SponsorWhereUniqueInput> = z.object({
  SponsorId: z.number()
})
.and(z.object({
  SponsorId: z.number().optional(),
  AND: z.union([ z.lazy(() => SponsorWhereInputSchema),z.lazy(() => SponsorWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => SponsorWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => SponsorWhereInputSchema),z.lazy(() => SponsorWhereInputSchema).array() ]).optional(),
  SponsorName: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  SponsorCode: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  SponsorWebsite: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  SponsorType: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  Address: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  City: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  State: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  Zip: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  SponsoredProgram: z.lazy(() => SponsoredProgramListRelationFilterSchema).optional()
}).strict());

export const SponsorOrderByWithAggregationInputSchema: z.ZodType<Prisma.SponsorOrderByWithAggregationInput> = z.object({
  SponsorId: z.lazy(() => SortOrderSchema).optional(),
  SponsorName: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  SponsorCode: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  SponsorWebsite: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  SponsorType: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  Address: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  City: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  State: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  Zip: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  _count: z.lazy(() => SponsorCountOrderByAggregateInputSchema).optional(),
  _avg: z.lazy(() => SponsorAvgOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => SponsorMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => SponsorMinOrderByAggregateInputSchema).optional(),
  _sum: z.lazy(() => SponsorSumOrderByAggregateInputSchema).optional()
}).strict();

export const SponsorScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.SponsorScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => SponsorScalarWhereWithAggregatesInputSchema),z.lazy(() => SponsorScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => SponsorScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => SponsorScalarWhereWithAggregatesInputSchema),z.lazy(() => SponsorScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  SponsorId: z.union([ z.lazy(() => IntWithAggregatesFilterSchema),z.number() ]).optional(),
  SponsorName: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  SponsorCode: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  SponsorWebsite: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  SponsorType: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  Address: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  City: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  State: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  Zip: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
}).strict();

export const SponsoredProgramWhereInputSchema: z.ZodType<Prisma.SponsoredProgramWhereInput> = z.object({
  AND: z.union([ z.lazy(() => SponsoredProgramWhereInputSchema),z.lazy(() => SponsoredProgramWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => SponsoredProgramWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => SponsoredProgramWhereInputSchema),z.lazy(() => SponsoredProgramWhereInputSchema).array() ]).optional(),
  ProgramId: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  SponsorId: z.union([ z.lazy(() => IntNullableFilterSchema),z.number() ]).optional().nullable(),
  TherapeuticArea: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  ProgramName: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  ProgramUrl: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  ProgramLabUrl: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  SponosoredTestingUrl: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  ProgramEligibility: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  CreatedAt: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.date() ]).optional().nullable(),
  UpdatedAt: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.date() ]).optional().nullable(),
  Sponsor: z.union([ z.lazy(() => SponsorNullableRelationFilterSchema),z.lazy(() => SponsorWhereInputSchema) ]).optional().nullable(),
  SponsoredTest: z.lazy(() => SponsoredTestListRelationFilterSchema).optional()
}).strict();

export const SponsoredProgramOrderByWithRelationInputSchema: z.ZodType<Prisma.SponsoredProgramOrderByWithRelationInput> = z.object({
  ProgramId: z.lazy(() => SortOrderSchema).optional(),
  SponsorId: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  TherapeuticArea: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  ProgramName: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  ProgramUrl: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  ProgramLabUrl: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  SponosoredTestingUrl: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  ProgramEligibility: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  CreatedAt: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  UpdatedAt: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  Sponsor: z.lazy(() => SponsorOrderByWithRelationInputSchema).optional(),
  SponsoredTest: z.lazy(() => SponsoredTestOrderByRelationAggregateInputSchema).optional(),
  _relevance: z.lazy(() => SponsoredProgramOrderByRelevanceInputSchema).optional()
}).strict();

export const SponsoredProgramWhereUniqueInputSchema: z.ZodType<Prisma.SponsoredProgramWhereUniqueInput> = z.object({
  ProgramId: z.number()
})
.and(z.object({
  ProgramId: z.number().optional(),
  AND: z.union([ z.lazy(() => SponsoredProgramWhereInputSchema),z.lazy(() => SponsoredProgramWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => SponsoredProgramWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => SponsoredProgramWhereInputSchema),z.lazy(() => SponsoredProgramWhereInputSchema).array() ]).optional(),
  SponsorId: z.union([ z.lazy(() => IntNullableFilterSchema),z.number() ]).optional().nullable(),
  TherapeuticArea: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  ProgramName: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  ProgramUrl: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  ProgramLabUrl: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  SponosoredTestingUrl: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  ProgramEligibility: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  CreatedAt: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.date() ]).optional().nullable(),
  UpdatedAt: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.date() ]).optional().nullable(),
  Sponsor: z.union([ z.lazy(() => SponsorNullableRelationFilterSchema),z.lazy(() => SponsorWhereInputSchema) ]).optional().nullable(),
  SponsoredTest: z.lazy(() => SponsoredTestListRelationFilterSchema).optional()
}).strict());

export const SponsoredProgramOrderByWithAggregationInputSchema: z.ZodType<Prisma.SponsoredProgramOrderByWithAggregationInput> = z.object({
  ProgramId: z.lazy(() => SortOrderSchema).optional(),
  SponsorId: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  TherapeuticArea: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  ProgramName: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  ProgramUrl: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  ProgramLabUrl: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  SponosoredTestingUrl: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  ProgramEligibility: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  CreatedAt: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  UpdatedAt: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  _count: z.lazy(() => SponsoredProgramCountOrderByAggregateInputSchema).optional(),
  _avg: z.lazy(() => SponsoredProgramAvgOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => SponsoredProgramMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => SponsoredProgramMinOrderByAggregateInputSchema).optional(),
  _sum: z.lazy(() => SponsoredProgramSumOrderByAggregateInputSchema).optional()
}).strict();

export const SponsoredProgramScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.SponsoredProgramScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => SponsoredProgramScalarWhereWithAggregatesInputSchema),z.lazy(() => SponsoredProgramScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => SponsoredProgramScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => SponsoredProgramScalarWhereWithAggregatesInputSchema),z.lazy(() => SponsoredProgramScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  ProgramId: z.union([ z.lazy(() => IntWithAggregatesFilterSchema),z.number() ]).optional(),
  SponsorId: z.union([ z.lazy(() => IntNullableWithAggregatesFilterSchema),z.number() ]).optional().nullable(),
  TherapeuticArea: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  ProgramName: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  ProgramUrl: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  ProgramLabUrl: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  SponosoredTestingUrl: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  ProgramEligibility: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  CreatedAt: z.union([ z.lazy(() => DateTimeNullableWithAggregatesFilterSchema),z.date() ]).optional().nullable(),
  UpdatedAt: z.union([ z.lazy(() => DateTimeNullableWithAggregatesFilterSchema),z.date() ]).optional().nullable(),
}).strict();

export const SponsoredTestWhereInputSchema: z.ZodType<Prisma.SponsoredTestWhereInput> = z.object({
  AND: z.union([ z.lazy(() => SponsoredTestWhereInputSchema),z.lazy(() => SponsoredTestWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => SponsoredTestWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => SponsoredTestWhereInputSchema),z.lazy(() => SponsoredTestWhereInputSchema).array() ]).optional(),
  Id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  TestId: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  LabTestId: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  SponsoredProgramId: z.union([ z.lazy(() => IntNullableFilterSchema),z.number() ]).optional().nullable(),
  LabId: z.union([ z.lazy(() => IntNullableFilterSchema),z.number() ]).optional().nullable(),
  CasandraTestId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  Category: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  SubCategory: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  CreatedAt: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.date() ]).optional().nullable(),
  UpdatedAt: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.date() ]).optional().nullable(),
  LabOrderSponsoredTestConsent: z.lazy(() => LabOrderSponsoredTestConsentListRelationFilterSchema).optional(),
  Lab: z.union([ z.lazy(() => LabNullableRelationFilterSchema),z.lazy(() => LabWhereInputSchema) ]).optional().nullable(),
  SponsoredProgram: z.union([ z.lazy(() => SponsoredProgramNullableRelationFilterSchema),z.lazy(() => SponsoredProgramWhereInputSchema) ]).optional().nullable(),
  TestCatalog: z.union([ z.lazy(() => TestCatalogRelationFilterSchema),z.lazy(() => TestCatalogWhereInputSchema) ]).optional(),
}).strict();

export const SponsoredTestOrderByWithRelationInputSchema: z.ZodType<Prisma.SponsoredTestOrderByWithRelationInput> = z.object({
  Id: z.lazy(() => SortOrderSchema).optional(),
  TestId: z.lazy(() => SortOrderSchema).optional(),
  LabTestId: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  SponsoredProgramId: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  LabId: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  CasandraTestId: z.lazy(() => SortOrderSchema).optional(),
  Category: z.lazy(() => SortOrderSchema).optional(),
  SubCategory: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  CreatedAt: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  UpdatedAt: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  LabOrderSponsoredTestConsent: z.lazy(() => LabOrderSponsoredTestConsentOrderByRelationAggregateInputSchema).optional(),
  Lab: z.lazy(() => LabOrderByWithRelationInputSchema).optional(),
  SponsoredProgram: z.lazy(() => SponsoredProgramOrderByWithRelationInputSchema).optional(),
  TestCatalog: z.lazy(() => TestCatalogOrderByWithRelationInputSchema).optional(),
  _relevance: z.lazy(() => SponsoredTestOrderByRelevanceInputSchema).optional()
}).strict();

export const SponsoredTestWhereUniqueInputSchema: z.ZodType<Prisma.SponsoredTestWhereUniqueInput> = z.union([
  z.object({
    Id: z.string(),
    CasandraTestId: z.string()
  }),
  z.object({
    Id: z.string(),
  }),
  z.object({
    CasandraTestId: z.string(),
  }),
])
.and(z.object({
  Id: z.string().optional(),
  CasandraTestId: z.string().optional(),
  AND: z.union([ z.lazy(() => SponsoredTestWhereInputSchema),z.lazy(() => SponsoredTestWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => SponsoredTestWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => SponsoredTestWhereInputSchema),z.lazy(() => SponsoredTestWhereInputSchema).array() ]).optional(),
  TestId: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  LabTestId: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  SponsoredProgramId: z.union([ z.lazy(() => IntNullableFilterSchema),z.number() ]).optional().nullable(),
  LabId: z.union([ z.lazy(() => IntNullableFilterSchema),z.number() ]).optional().nullable(),
  Category: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  SubCategory: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  CreatedAt: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.date() ]).optional().nullable(),
  UpdatedAt: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.date() ]).optional().nullable(),
  LabOrderSponsoredTestConsent: z.lazy(() => LabOrderSponsoredTestConsentListRelationFilterSchema).optional(),
  Lab: z.union([ z.lazy(() => LabNullableRelationFilterSchema),z.lazy(() => LabWhereInputSchema) ]).optional().nullable(),
  SponsoredProgram: z.union([ z.lazy(() => SponsoredProgramNullableRelationFilterSchema),z.lazy(() => SponsoredProgramWhereInputSchema) ]).optional().nullable(),
  TestCatalog: z.union([ z.lazy(() => TestCatalogRelationFilterSchema),z.lazy(() => TestCatalogWhereInputSchema) ]).optional(),
}).strict());

export const SponsoredTestOrderByWithAggregationInputSchema: z.ZodType<Prisma.SponsoredTestOrderByWithAggregationInput> = z.object({
  Id: z.lazy(() => SortOrderSchema).optional(),
  TestId: z.lazy(() => SortOrderSchema).optional(),
  LabTestId: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  SponsoredProgramId: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  LabId: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  CasandraTestId: z.lazy(() => SortOrderSchema).optional(),
  Category: z.lazy(() => SortOrderSchema).optional(),
  SubCategory: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  CreatedAt: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  UpdatedAt: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  _count: z.lazy(() => SponsoredTestCountOrderByAggregateInputSchema).optional(),
  _avg: z.lazy(() => SponsoredTestAvgOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => SponsoredTestMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => SponsoredTestMinOrderByAggregateInputSchema).optional(),
  _sum: z.lazy(() => SponsoredTestSumOrderByAggregateInputSchema).optional()
}).strict();

export const SponsoredTestScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.SponsoredTestScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => SponsoredTestScalarWhereWithAggregatesInputSchema),z.lazy(() => SponsoredTestScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => SponsoredTestScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => SponsoredTestScalarWhereWithAggregatesInputSchema),z.lazy(() => SponsoredTestScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  Id: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  TestId: z.union([ z.lazy(() => IntWithAggregatesFilterSchema),z.number() ]).optional(),
  LabTestId: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  SponsoredProgramId: z.union([ z.lazy(() => IntNullableWithAggregatesFilterSchema),z.number() ]).optional().nullable(),
  LabId: z.union([ z.lazy(() => IntNullableWithAggregatesFilterSchema),z.number() ]).optional().nullable(),
  CasandraTestId: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  Category: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  SubCategory: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  CreatedAt: z.union([ z.lazy(() => DateTimeNullableWithAggregatesFilterSchema),z.date() ]).optional().nullable(),
  UpdatedAt: z.union([ z.lazy(() => DateTimeNullableWithAggregatesFilterSchema),z.date() ]).optional().nullable(),
}).strict();

export const TestBiomarkerWhereInputSchema: z.ZodType<Prisma.TestBiomarkerWhereInput> = z.object({
  AND: z.union([ z.lazy(() => TestBiomarkerWhereInputSchema),z.lazy(() => TestBiomarkerWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => TestBiomarkerWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => TestBiomarkerWhereInputSchema),z.lazy(() => TestBiomarkerWhereInputSchema).array() ]).optional(),
  Id: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  TestId: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  LabTestId: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  HGNCId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  TranscriptReference: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  CreatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.date() ]).optional(),
  UpdatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.date() ]).optional(),
  BIOMARKER: z.union([ z.lazy(() => BIOMARKERRelationFilterSchema),z.lazy(() => BIOMARKERWhereInputSchema) ]).optional(),
  TestCatalog: z.union([ z.lazy(() => TestCatalogRelationFilterSchema),z.lazy(() => TestCatalogWhereInputSchema) ]).optional(),
}).strict();

export const TestBiomarkerOrderByWithRelationInputSchema: z.ZodType<Prisma.TestBiomarkerOrderByWithRelationInput> = z.object({
  Id: z.lazy(() => SortOrderSchema).optional(),
  TestId: z.lazy(() => SortOrderSchema).optional(),
  LabTestId: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  HGNCId: z.lazy(() => SortOrderSchema).optional(),
  TranscriptReference: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  CreatedAt: z.lazy(() => SortOrderSchema).optional(),
  UpdatedAt: z.lazy(() => SortOrderSchema).optional(),
  BIOMARKER: z.lazy(() => BIOMARKEROrderByWithRelationInputSchema).optional(),
  TestCatalog: z.lazy(() => TestCatalogOrderByWithRelationInputSchema).optional(),
  _relevance: z.lazy(() => TestBiomarkerOrderByRelevanceInputSchema).optional()
}).strict();

export const TestBiomarkerWhereUniqueInputSchema: z.ZodType<Prisma.TestBiomarkerWhereUniqueInput> = z.union([
  z.object({
    Id: z.number(),
    TestId_HGNCId: z.lazy(() => TestBiomarkerTestIdHGNCIdCompoundUniqueInputSchema)
  }),
  z.object({
    Id: z.number(),
  }),
  z.object({
    TestId_HGNCId: z.lazy(() => TestBiomarkerTestIdHGNCIdCompoundUniqueInputSchema),
  }),
])
.and(z.object({
  Id: z.number().optional(),
  TestId_HGNCId: z.lazy(() => TestBiomarkerTestIdHGNCIdCompoundUniqueInputSchema).optional(),
  AND: z.union([ z.lazy(() => TestBiomarkerWhereInputSchema),z.lazy(() => TestBiomarkerWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => TestBiomarkerWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => TestBiomarkerWhereInputSchema),z.lazy(() => TestBiomarkerWhereInputSchema).array() ]).optional(),
  TestId: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  LabTestId: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  HGNCId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  TranscriptReference: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  CreatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.date() ]).optional(),
  UpdatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.date() ]).optional(),
  BIOMARKER: z.union([ z.lazy(() => BIOMARKERRelationFilterSchema),z.lazy(() => BIOMARKERWhereInputSchema) ]).optional(),
  TestCatalog: z.union([ z.lazy(() => TestCatalogRelationFilterSchema),z.lazy(() => TestCatalogWhereInputSchema) ]).optional(),
}).strict());

export const TestBiomarkerOrderByWithAggregationInputSchema: z.ZodType<Prisma.TestBiomarkerOrderByWithAggregationInput> = z.object({
  Id: z.lazy(() => SortOrderSchema).optional(),
  TestId: z.lazy(() => SortOrderSchema).optional(),
  LabTestId: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  HGNCId: z.lazy(() => SortOrderSchema).optional(),
  TranscriptReference: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  CreatedAt: z.lazy(() => SortOrderSchema).optional(),
  UpdatedAt: z.lazy(() => SortOrderSchema).optional(),
  _count: z.lazy(() => TestBiomarkerCountOrderByAggregateInputSchema).optional(),
  _avg: z.lazy(() => TestBiomarkerAvgOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => TestBiomarkerMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => TestBiomarkerMinOrderByAggregateInputSchema).optional(),
  _sum: z.lazy(() => TestBiomarkerSumOrderByAggregateInputSchema).optional()
}).strict();

export const TestBiomarkerScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.TestBiomarkerScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => TestBiomarkerScalarWhereWithAggregatesInputSchema),z.lazy(() => TestBiomarkerScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => TestBiomarkerScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => TestBiomarkerScalarWhereWithAggregatesInputSchema),z.lazy(() => TestBiomarkerScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  Id: z.union([ z.lazy(() => IntWithAggregatesFilterSchema),z.number() ]).optional(),
  TestId: z.union([ z.lazy(() => IntWithAggregatesFilterSchema),z.number() ]).optional(),
  LabTestId: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  HGNCId: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  TranscriptReference: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  CreatedAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.date() ]).optional(),
  UpdatedAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.date() ]).optional(),
}).strict();

export const TestCatalogWhereInputSchema: z.ZodType<Prisma.TestCatalogWhereInput> = z.object({
  AND: z.union([ z.lazy(() => TestCatalogWhereInputSchema),z.lazy(() => TestCatalogWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => TestCatalogWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => TestCatalogWhereInputSchema),z.lazy(() => TestCatalogWhereInputSchema).array() ]).optional(),
  TestId: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  LabId: z.union([ z.lazy(() => IntNullableFilterSchema),z.number() ]).optional().nullable(),
  href: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  CasandraTestId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  LabTestId: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  TestName: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  AlternativeName: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  AlternativeName1: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  AlternativeName2: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  AlternativeName3: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  AlternativeName4: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  AlternativeName5: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  TestIncludes: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  SpecimenType: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  SpecialInstructions: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  Methodology: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  TestDescription: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  Diseases: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  Probes: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  ClinicalSignificance: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  SpecimenRequirements: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  Volume: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  MinimumVolume: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  Container: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  Collection: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  StabilityRequirements: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  StorageTransportation: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  PatientPreparation: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  CausesForRejection: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  TestUsage: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  TestLimitations: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  CPTCodes: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  NewYorkApproved: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  LevelOfService: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  TurnAroundTime: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  AssayCategory: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  ReferenceRanges: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  SetupSchedule: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  AlternativeSpecimen: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  LoincCodesText: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  LoincCodesHTML: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  TestCategory: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  TestSubCategory: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  CreatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.date() ]).optional(),
  UpdatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.date() ]).optional(),
  LabOrderTest: z.lazy(() => LabOrderTestListRelationFilterSchema).optional(),
  OrganizationFavoriteTest: z.lazy(() => OrganizationFavoriteTestListRelationFilterSchema).optional(),
  ProviderFavoriteTest: z.lazy(() => ProviderFavoriteTestListRelationFilterSchema).optional(),
  SponsoredTest: z.lazy(() => SponsoredTestListRelationFilterSchema).optional(),
  TestBiomarker: z.lazy(() => TestBiomarkerListRelationFilterSchema).optional(),
  Lab: z.union([ z.lazy(() => LabNullableRelationFilterSchema),z.lazy(() => LabWhereInputSchema) ]).optional().nullable(),
  TestCptCode: z.lazy(() => TestCptCodeListRelationFilterSchema).optional(),
  TestGene: z.lazy(() => TestGeneListRelationFilterSchema).optional(),
  TestOrderLoinc: z.lazy(() => TestOrderLoincListRelationFilterSchema).optional(),
  TestResultLoinc: z.lazy(() => TestResultLoincListRelationFilterSchema).optional()
}).strict();

export const TestCatalogOrderByWithRelationInputSchema: z.ZodType<Prisma.TestCatalogOrderByWithRelationInput> = z.object({
  TestId: z.lazy(() => SortOrderSchema).optional(),
  LabId: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  href: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  CasandraTestId: z.lazy(() => SortOrderSchema).optional(),
  LabTestId: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  TestName: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  AlternativeName: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  AlternativeName1: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  AlternativeName2: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  AlternativeName3: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  AlternativeName4: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  AlternativeName5: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  TestIncludes: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  SpecimenType: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  SpecialInstructions: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  Methodology: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  TestDescription: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  Diseases: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  Probes: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  ClinicalSignificance: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  SpecimenRequirements: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  Volume: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  MinimumVolume: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  Container: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  Collection: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  StabilityRequirements: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  StorageTransportation: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  PatientPreparation: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  CausesForRejection: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  TestUsage: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  TestLimitations: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  CPTCodes: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  NewYorkApproved: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  LevelOfService: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  TurnAroundTime: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  AssayCategory: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  ReferenceRanges: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  SetupSchedule: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  AlternativeSpecimen: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  LoincCodesText: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  LoincCodesHTML: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  TestCategory: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  TestSubCategory: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  CreatedAt: z.lazy(() => SortOrderSchema).optional(),
  UpdatedAt: z.lazy(() => SortOrderSchema).optional(),
  LabOrderTest: z.lazy(() => LabOrderTestOrderByRelationAggregateInputSchema).optional(),
  OrganizationFavoriteTest: z.lazy(() => OrganizationFavoriteTestOrderByRelationAggregateInputSchema).optional(),
  ProviderFavoriteTest: z.lazy(() => ProviderFavoriteTestOrderByRelationAggregateInputSchema).optional(),
  SponsoredTest: z.lazy(() => SponsoredTestOrderByRelationAggregateInputSchema).optional(),
  TestBiomarker: z.lazy(() => TestBiomarkerOrderByRelationAggregateInputSchema).optional(),
  Lab: z.lazy(() => LabOrderByWithRelationInputSchema).optional(),
  TestCptCode: z.lazy(() => TestCptCodeOrderByRelationAggregateInputSchema).optional(),
  TestGene: z.lazy(() => TestGeneOrderByRelationAggregateInputSchema).optional(),
  TestOrderLoinc: z.lazy(() => TestOrderLoincOrderByRelationAggregateInputSchema).optional(),
  TestResultLoinc: z.lazy(() => TestResultLoincOrderByRelationAggregateInputSchema).optional(),
  _relevance: z.lazy(() => TestCatalogOrderByRelevanceInputSchema).optional()
}).strict();

export const TestCatalogWhereUniqueInputSchema: z.ZodType<Prisma.TestCatalogWhereUniqueInput> = z.union([
  z.object({
    TestId: z.number(),
    LabId_LabTestId: z.lazy(() => TestCatalogLabIdLabTestIdCompoundUniqueInputSchema)
  }),
  z.object({
    TestId: z.number(),
  }),
  z.object({
    LabId_LabTestId: z.lazy(() => TestCatalogLabIdLabTestIdCompoundUniqueInputSchema),
  }),
])
.and(z.object({
  TestId: z.number().optional(),
  LabId_LabTestId: z.lazy(() => TestCatalogLabIdLabTestIdCompoundUniqueInputSchema).optional(),
  AND: z.union([ z.lazy(() => TestCatalogWhereInputSchema),z.lazy(() => TestCatalogWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => TestCatalogWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => TestCatalogWhereInputSchema),z.lazy(() => TestCatalogWhereInputSchema).array() ]).optional(),
  LabId: z.union([ z.lazy(() => IntNullableFilterSchema),z.number() ]).optional().nullable(),
  href: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  CasandraTestId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  LabTestId: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  TestName: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  AlternativeName: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  AlternativeName1: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  AlternativeName2: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  AlternativeName3: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  AlternativeName4: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  AlternativeName5: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  TestIncludes: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  SpecimenType: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  SpecialInstructions: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  Methodology: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  TestDescription: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  Diseases: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  Probes: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  ClinicalSignificance: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  SpecimenRequirements: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  Volume: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  MinimumVolume: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  Container: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  Collection: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  StabilityRequirements: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  StorageTransportation: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  PatientPreparation: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  CausesForRejection: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  TestUsage: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  TestLimitations: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  CPTCodes: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  NewYorkApproved: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  LevelOfService: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  TurnAroundTime: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  AssayCategory: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  ReferenceRanges: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  SetupSchedule: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  AlternativeSpecimen: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  LoincCodesText: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  LoincCodesHTML: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  TestCategory: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  TestSubCategory: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  CreatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.date() ]).optional(),
  UpdatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.date() ]).optional(),
  LabOrderTest: z.lazy(() => LabOrderTestListRelationFilterSchema).optional(),
  OrganizationFavoriteTest: z.lazy(() => OrganizationFavoriteTestListRelationFilterSchema).optional(),
  ProviderFavoriteTest: z.lazy(() => ProviderFavoriteTestListRelationFilterSchema).optional(),
  SponsoredTest: z.lazy(() => SponsoredTestListRelationFilterSchema).optional(),
  TestBiomarker: z.lazy(() => TestBiomarkerListRelationFilterSchema).optional(),
  Lab: z.union([ z.lazy(() => LabNullableRelationFilterSchema),z.lazy(() => LabWhereInputSchema) ]).optional().nullable(),
  TestCptCode: z.lazy(() => TestCptCodeListRelationFilterSchema).optional(),
  TestGene: z.lazy(() => TestGeneListRelationFilterSchema).optional(),
  TestOrderLoinc: z.lazy(() => TestOrderLoincListRelationFilterSchema).optional(),
  TestResultLoinc: z.lazy(() => TestResultLoincListRelationFilterSchema).optional()
}).strict());

export const TestCatalogOrderByWithAggregationInputSchema: z.ZodType<Prisma.TestCatalogOrderByWithAggregationInput> = z.object({
  TestId: z.lazy(() => SortOrderSchema).optional(),
  LabId: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  href: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  CasandraTestId: z.lazy(() => SortOrderSchema).optional(),
  LabTestId: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  TestName: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  AlternativeName: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  AlternativeName1: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  AlternativeName2: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  AlternativeName3: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  AlternativeName4: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  AlternativeName5: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  TestIncludes: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  SpecimenType: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  SpecialInstructions: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  Methodology: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  TestDescription: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  Diseases: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  Probes: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  ClinicalSignificance: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  SpecimenRequirements: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  Volume: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  MinimumVolume: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  Container: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  Collection: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  StabilityRequirements: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  StorageTransportation: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  PatientPreparation: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  CausesForRejection: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  TestUsage: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  TestLimitations: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  CPTCodes: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  NewYorkApproved: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  LevelOfService: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  TurnAroundTime: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  AssayCategory: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  ReferenceRanges: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  SetupSchedule: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  AlternativeSpecimen: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  LoincCodesText: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  LoincCodesHTML: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  TestCategory: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  TestSubCategory: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  CreatedAt: z.lazy(() => SortOrderSchema).optional(),
  UpdatedAt: z.lazy(() => SortOrderSchema).optional(),
  _count: z.lazy(() => TestCatalogCountOrderByAggregateInputSchema).optional(),
  _avg: z.lazy(() => TestCatalogAvgOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => TestCatalogMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => TestCatalogMinOrderByAggregateInputSchema).optional(),
  _sum: z.lazy(() => TestCatalogSumOrderByAggregateInputSchema).optional()
}).strict();

export const TestCatalogScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.TestCatalogScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => TestCatalogScalarWhereWithAggregatesInputSchema),z.lazy(() => TestCatalogScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => TestCatalogScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => TestCatalogScalarWhereWithAggregatesInputSchema),z.lazy(() => TestCatalogScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  TestId: z.union([ z.lazy(() => IntWithAggregatesFilterSchema),z.number() ]).optional(),
  LabId: z.union([ z.lazy(() => IntNullableWithAggregatesFilterSchema),z.number() ]).optional().nullable(),
  href: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  CasandraTestId: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  LabTestId: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  TestName: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  AlternativeName: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  AlternativeName1: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  AlternativeName2: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  AlternativeName3: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  AlternativeName4: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  AlternativeName5: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  TestIncludes: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  SpecimenType: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  SpecialInstructions: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  Methodology: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  TestDescription: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  Diseases: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  Probes: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  ClinicalSignificance: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  SpecimenRequirements: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  Volume: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  MinimumVolume: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  Container: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  Collection: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  StabilityRequirements: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  StorageTransportation: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  PatientPreparation: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  CausesForRejection: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  TestUsage: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  TestLimitations: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  CPTCodes: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  NewYorkApproved: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  LevelOfService: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  TurnAroundTime: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  AssayCategory: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  ReferenceRanges: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  SetupSchedule: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  AlternativeSpecimen: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  LoincCodesText: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  LoincCodesHTML: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  TestCategory: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  TestSubCategory: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  CreatedAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.date() ]).optional(),
  UpdatedAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.date() ]).optional(),
}).strict();

export const TestCptCodeWhereInputSchema: z.ZodType<Prisma.TestCptCodeWhereInput> = z.object({
  AND: z.union([ z.lazy(() => TestCptCodeWhereInputSchema),z.lazy(() => TestCptCodeWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => TestCptCodeWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => TestCptCodeWhereInputSchema),z.lazy(() => TestCptCodeWhereInputSchema).array() ]).optional(),
  Id: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  TestId: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  LabTestId: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  CptCode: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  Modifier: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  Comments: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  CreatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.date() ]).optional(),
  UpdatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.date() ]).optional(),
  TestCatalog: z.union([ z.lazy(() => TestCatalogRelationFilterSchema),z.lazy(() => TestCatalogWhereInputSchema) ]).optional(),
}).strict();

export const TestCptCodeOrderByWithRelationInputSchema: z.ZodType<Prisma.TestCptCodeOrderByWithRelationInput> = z.object({
  Id: z.lazy(() => SortOrderSchema).optional(),
  TestId: z.lazy(() => SortOrderSchema).optional(),
  LabTestId: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  CptCode: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  Modifier: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  Comments: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  CreatedAt: z.lazy(() => SortOrderSchema).optional(),
  UpdatedAt: z.lazy(() => SortOrderSchema).optional(),
  TestCatalog: z.lazy(() => TestCatalogOrderByWithRelationInputSchema).optional(),
  _relevance: z.lazy(() => TestCptCodeOrderByRelevanceInputSchema).optional()
}).strict();

export const TestCptCodeWhereUniqueInputSchema: z.ZodType<Prisma.TestCptCodeWhereUniqueInput> = z.object({
  Id: z.number()
})
.and(z.object({
  Id: z.number().optional(),
  AND: z.union([ z.lazy(() => TestCptCodeWhereInputSchema),z.lazy(() => TestCptCodeWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => TestCptCodeWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => TestCptCodeWhereInputSchema),z.lazy(() => TestCptCodeWhereInputSchema).array() ]).optional(),
  TestId: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  LabTestId: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  CptCode: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  Modifier: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  Comments: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  CreatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.date() ]).optional(),
  UpdatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.date() ]).optional(),
  TestCatalog: z.union([ z.lazy(() => TestCatalogRelationFilterSchema),z.lazy(() => TestCatalogWhereInputSchema) ]).optional(),
}).strict());

export const TestCptCodeOrderByWithAggregationInputSchema: z.ZodType<Prisma.TestCptCodeOrderByWithAggregationInput> = z.object({
  Id: z.lazy(() => SortOrderSchema).optional(),
  TestId: z.lazy(() => SortOrderSchema).optional(),
  LabTestId: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  CptCode: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  Modifier: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  Comments: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  CreatedAt: z.lazy(() => SortOrderSchema).optional(),
  UpdatedAt: z.lazy(() => SortOrderSchema).optional(),
  _count: z.lazy(() => TestCptCodeCountOrderByAggregateInputSchema).optional(),
  _avg: z.lazy(() => TestCptCodeAvgOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => TestCptCodeMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => TestCptCodeMinOrderByAggregateInputSchema).optional(),
  _sum: z.lazy(() => TestCptCodeSumOrderByAggregateInputSchema).optional()
}).strict();

export const TestCptCodeScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.TestCptCodeScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => TestCptCodeScalarWhereWithAggregatesInputSchema),z.lazy(() => TestCptCodeScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => TestCptCodeScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => TestCptCodeScalarWhereWithAggregatesInputSchema),z.lazy(() => TestCptCodeScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  Id: z.union([ z.lazy(() => IntWithAggregatesFilterSchema),z.number() ]).optional(),
  TestId: z.union([ z.lazy(() => IntWithAggregatesFilterSchema),z.number() ]).optional(),
  LabTestId: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  CptCode: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  Modifier: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  Comments: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  CreatedAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.date() ]).optional(),
  UpdatedAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.date() ]).optional(),
}).strict();

export const TestGeneWhereInputSchema: z.ZodType<Prisma.TestGeneWhereInput> = z.object({
  AND: z.union([ z.lazy(() => TestGeneWhereInputSchema),z.lazy(() => TestGeneWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => TestGeneWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => TestGeneWhereInputSchema),z.lazy(() => TestGeneWhereInputSchema).array() ]).optional(),
  Id: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  TestId: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  LabTestId: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  Gene: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  TranscriptReference: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  CreatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.date() ]).optional(),
  UpdatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.date() ]).optional(),
  TestCatalog: z.union([ z.lazy(() => TestCatalogRelationFilterSchema),z.lazy(() => TestCatalogWhereInputSchema) ]).optional(),
}).strict();

export const TestGeneOrderByWithRelationInputSchema: z.ZodType<Prisma.TestGeneOrderByWithRelationInput> = z.object({
  Id: z.lazy(() => SortOrderSchema).optional(),
  TestId: z.lazy(() => SortOrderSchema).optional(),
  LabTestId: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  Gene: z.lazy(() => SortOrderSchema).optional(),
  TranscriptReference: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  CreatedAt: z.lazy(() => SortOrderSchema).optional(),
  UpdatedAt: z.lazy(() => SortOrderSchema).optional(),
  TestCatalog: z.lazy(() => TestCatalogOrderByWithRelationInputSchema).optional(),
  _relevance: z.lazy(() => TestGeneOrderByRelevanceInputSchema).optional()
}).strict();

export const TestGeneWhereUniqueInputSchema: z.ZodType<Prisma.TestGeneWhereUniqueInput> = z.union([
  z.object({
    Id: z.number(),
    TestId_Gene: z.lazy(() => TestGeneTestIdGeneCompoundUniqueInputSchema)
  }),
  z.object({
    Id: z.number(),
  }),
  z.object({
    TestId_Gene: z.lazy(() => TestGeneTestIdGeneCompoundUniqueInputSchema),
  }),
])
.and(z.object({
  Id: z.number().optional(),
  TestId_Gene: z.lazy(() => TestGeneTestIdGeneCompoundUniqueInputSchema).optional(),
  AND: z.union([ z.lazy(() => TestGeneWhereInputSchema),z.lazy(() => TestGeneWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => TestGeneWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => TestGeneWhereInputSchema),z.lazy(() => TestGeneWhereInputSchema).array() ]).optional(),
  TestId: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  LabTestId: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  Gene: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  TranscriptReference: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  CreatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.date() ]).optional(),
  UpdatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.date() ]).optional(),
  TestCatalog: z.union([ z.lazy(() => TestCatalogRelationFilterSchema),z.lazy(() => TestCatalogWhereInputSchema) ]).optional(),
}).strict());

export const TestGeneOrderByWithAggregationInputSchema: z.ZodType<Prisma.TestGeneOrderByWithAggregationInput> = z.object({
  Id: z.lazy(() => SortOrderSchema).optional(),
  TestId: z.lazy(() => SortOrderSchema).optional(),
  LabTestId: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  Gene: z.lazy(() => SortOrderSchema).optional(),
  TranscriptReference: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  CreatedAt: z.lazy(() => SortOrderSchema).optional(),
  UpdatedAt: z.lazy(() => SortOrderSchema).optional(),
  _count: z.lazy(() => TestGeneCountOrderByAggregateInputSchema).optional(),
  _avg: z.lazy(() => TestGeneAvgOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => TestGeneMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => TestGeneMinOrderByAggregateInputSchema).optional(),
  _sum: z.lazy(() => TestGeneSumOrderByAggregateInputSchema).optional()
}).strict();

export const TestGeneScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.TestGeneScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => TestGeneScalarWhereWithAggregatesInputSchema),z.lazy(() => TestGeneScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => TestGeneScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => TestGeneScalarWhereWithAggregatesInputSchema),z.lazy(() => TestGeneScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  Id: z.union([ z.lazy(() => IntWithAggregatesFilterSchema),z.number() ]).optional(),
  TestId: z.union([ z.lazy(() => IntWithAggregatesFilterSchema),z.number() ]).optional(),
  LabTestId: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  Gene: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  TranscriptReference: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  CreatedAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.date() ]).optional(),
  UpdatedAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.date() ]).optional(),
}).strict();

export const TestOrderLoincWhereInputSchema: z.ZodType<Prisma.TestOrderLoincWhereInput> = z.object({
  AND: z.union([ z.lazy(() => TestOrderLoincWhereInputSchema),z.lazy(() => TestOrderLoincWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => TestOrderLoincWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => TestOrderLoincWhereInputSchema),z.lazy(() => TestOrderLoincWhereInputSchema).array() ]).optional(),
  Id: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  TestId: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  LabTestId: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  OrderLoinc: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  CreatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.date() ]).optional(),
  UpdatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.date() ]).optional(),
  LOINC: z.union([ z.lazy(() => LOINCNullableRelationFilterSchema),z.lazy(() => LOINCWhereInputSchema) ]).optional().nullable(),
  TestCatalog: z.union([ z.lazy(() => TestCatalogRelationFilterSchema),z.lazy(() => TestCatalogWhereInputSchema) ]).optional(),
}).strict();

export const TestOrderLoincOrderByWithRelationInputSchema: z.ZodType<Prisma.TestOrderLoincOrderByWithRelationInput> = z.object({
  Id: z.lazy(() => SortOrderSchema).optional(),
  TestId: z.lazy(() => SortOrderSchema).optional(),
  LabTestId: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  OrderLoinc: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  CreatedAt: z.lazy(() => SortOrderSchema).optional(),
  UpdatedAt: z.lazy(() => SortOrderSchema).optional(),
  LOINC: z.lazy(() => LOINCOrderByWithRelationInputSchema).optional(),
  TestCatalog: z.lazy(() => TestCatalogOrderByWithRelationInputSchema).optional(),
  _relevance: z.lazy(() => TestOrderLoincOrderByRelevanceInputSchema).optional()
}).strict();

export const TestOrderLoincWhereUniqueInputSchema: z.ZodType<Prisma.TestOrderLoincWhereUniqueInput> = z.union([
  z.object({
    Id: z.number(),
    TestId_OrderLoinc: z.lazy(() => TestOrderLoincTestIdOrderLoincCompoundUniqueInputSchema)
  }),
  z.object({
    Id: z.number(),
  }),
  z.object({
    TestId_OrderLoinc: z.lazy(() => TestOrderLoincTestIdOrderLoincCompoundUniqueInputSchema),
  }),
])
.and(z.object({
  Id: z.number().optional(),
  TestId_OrderLoinc: z.lazy(() => TestOrderLoincTestIdOrderLoincCompoundUniqueInputSchema).optional(),
  AND: z.union([ z.lazy(() => TestOrderLoincWhereInputSchema),z.lazy(() => TestOrderLoincWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => TestOrderLoincWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => TestOrderLoincWhereInputSchema),z.lazy(() => TestOrderLoincWhereInputSchema).array() ]).optional(),
  TestId: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  LabTestId: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  OrderLoinc: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  CreatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.date() ]).optional(),
  UpdatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.date() ]).optional(),
  LOINC: z.union([ z.lazy(() => LOINCNullableRelationFilterSchema),z.lazy(() => LOINCWhereInputSchema) ]).optional().nullable(),
  TestCatalog: z.union([ z.lazy(() => TestCatalogRelationFilterSchema),z.lazy(() => TestCatalogWhereInputSchema) ]).optional(),
}).strict());

export const TestOrderLoincOrderByWithAggregationInputSchema: z.ZodType<Prisma.TestOrderLoincOrderByWithAggregationInput> = z.object({
  Id: z.lazy(() => SortOrderSchema).optional(),
  TestId: z.lazy(() => SortOrderSchema).optional(),
  LabTestId: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  OrderLoinc: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  CreatedAt: z.lazy(() => SortOrderSchema).optional(),
  UpdatedAt: z.lazy(() => SortOrderSchema).optional(),
  _count: z.lazy(() => TestOrderLoincCountOrderByAggregateInputSchema).optional(),
  _avg: z.lazy(() => TestOrderLoincAvgOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => TestOrderLoincMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => TestOrderLoincMinOrderByAggregateInputSchema).optional(),
  _sum: z.lazy(() => TestOrderLoincSumOrderByAggregateInputSchema).optional()
}).strict();

export const TestOrderLoincScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.TestOrderLoincScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => TestOrderLoincScalarWhereWithAggregatesInputSchema),z.lazy(() => TestOrderLoincScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => TestOrderLoincScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => TestOrderLoincScalarWhereWithAggregatesInputSchema),z.lazy(() => TestOrderLoincScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  Id: z.union([ z.lazy(() => IntWithAggregatesFilterSchema),z.number() ]).optional(),
  TestId: z.union([ z.lazy(() => IntWithAggregatesFilterSchema),z.number() ]).optional(),
  LabTestId: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  OrderLoinc: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  CreatedAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.date() ]).optional(),
  UpdatedAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.date() ]).optional(),
}).strict();

export const TestResultLoincWhereInputSchema: z.ZodType<Prisma.TestResultLoincWhereInput> = z.object({
  AND: z.union([ z.lazy(() => TestResultLoincWhereInputSchema),z.lazy(() => TestResultLoincWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => TestResultLoincWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => TestResultLoincWhereInputSchema),z.lazy(() => TestResultLoincWhereInputSchema).array() ]).optional(),
  Id: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  TestId: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  LabTestId: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  ResultCode: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  ResultCodeName: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  UofM: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  ResultLoinc: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  CreatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.date() ]).optional(),
  UpdatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.date() ]).optional(),
  LOINC: z.union([ z.lazy(() => LOINCNullableRelationFilterSchema),z.lazy(() => LOINCWhereInputSchema) ]).optional().nullable(),
  TestCatalog: z.union([ z.lazy(() => TestCatalogRelationFilterSchema),z.lazy(() => TestCatalogWhereInputSchema) ]).optional(),
}).strict();

export const TestResultLoincOrderByWithRelationInputSchema: z.ZodType<Prisma.TestResultLoincOrderByWithRelationInput> = z.object({
  Id: z.lazy(() => SortOrderSchema).optional(),
  TestId: z.lazy(() => SortOrderSchema).optional(),
  LabTestId: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  ResultCode: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  ResultCodeName: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  UofM: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  ResultLoinc: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  CreatedAt: z.lazy(() => SortOrderSchema).optional(),
  UpdatedAt: z.lazy(() => SortOrderSchema).optional(),
  LOINC: z.lazy(() => LOINCOrderByWithRelationInputSchema).optional(),
  TestCatalog: z.lazy(() => TestCatalogOrderByWithRelationInputSchema).optional(),
  _relevance: z.lazy(() => TestResultLoincOrderByRelevanceInputSchema).optional()
}).strict();

export const TestResultLoincWhereUniqueInputSchema: z.ZodType<Prisma.TestResultLoincWhereUniqueInput> = z.object({
  Id: z.number()
})
.and(z.object({
  Id: z.number().optional(),
  AND: z.union([ z.lazy(() => TestResultLoincWhereInputSchema),z.lazy(() => TestResultLoincWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => TestResultLoincWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => TestResultLoincWhereInputSchema),z.lazy(() => TestResultLoincWhereInputSchema).array() ]).optional(),
  TestId: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  LabTestId: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  ResultCode: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  ResultCodeName: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  UofM: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  ResultLoinc: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  CreatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.date() ]).optional(),
  UpdatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.date() ]).optional(),
  LOINC: z.union([ z.lazy(() => LOINCNullableRelationFilterSchema),z.lazy(() => LOINCWhereInputSchema) ]).optional().nullable(),
  TestCatalog: z.union([ z.lazy(() => TestCatalogRelationFilterSchema),z.lazy(() => TestCatalogWhereInputSchema) ]).optional(),
}).strict());

export const TestResultLoincOrderByWithAggregationInputSchema: z.ZodType<Prisma.TestResultLoincOrderByWithAggregationInput> = z.object({
  Id: z.lazy(() => SortOrderSchema).optional(),
  TestId: z.lazy(() => SortOrderSchema).optional(),
  LabTestId: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  ResultCode: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  ResultCodeName: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  UofM: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  ResultLoinc: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  CreatedAt: z.lazy(() => SortOrderSchema).optional(),
  UpdatedAt: z.lazy(() => SortOrderSchema).optional(),
  _count: z.lazy(() => TestResultLoincCountOrderByAggregateInputSchema).optional(),
  _avg: z.lazy(() => TestResultLoincAvgOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => TestResultLoincMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => TestResultLoincMinOrderByAggregateInputSchema).optional(),
  _sum: z.lazy(() => TestResultLoincSumOrderByAggregateInputSchema).optional()
}).strict();

export const TestResultLoincScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.TestResultLoincScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => TestResultLoincScalarWhereWithAggregatesInputSchema),z.lazy(() => TestResultLoincScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => TestResultLoincScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => TestResultLoincScalarWhereWithAggregatesInputSchema),z.lazy(() => TestResultLoincScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  Id: z.union([ z.lazy(() => IntWithAggregatesFilterSchema),z.number() ]).optional(),
  TestId: z.union([ z.lazy(() => IntWithAggregatesFilterSchema),z.number() ]).optional(),
  LabTestId: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  ResultCode: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  ResultCodeName: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  UofM: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  ResultLoinc: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  CreatedAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.date() ]).optional(),
  UpdatedAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.date() ]).optional(),
}).strict();

export const UserWhereInputSchema: z.ZodType<Prisma.UserWhereInput> = z.object({
  AND: z.union([ z.lazy(() => UserWhereInputSchema),z.lazy(() => UserWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => UserWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => UserWhereInputSchema),z.lazy(() => UserWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  name: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  email: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  password: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  emailVerified: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.date() ]).optional().nullable(),
  image: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  Account: z.union([ z.lazy(() => AccountNullableRelationFilterSchema),z.lazy(() => AccountWhereInputSchema) ]).optional().nullable(),
  Session: z.lazy(() => SessionListRelationFilterSchema).optional(),
  UserAttribute: z.union([ z.lazy(() => UserAttributeNullableRelationFilterSchema),z.lazy(() => UserAttributeWhereInputSchema) ]).optional().nullable(),
}).strict();

export const UserOrderByWithRelationInputSchema: z.ZodType<Prisma.UserOrderByWithRelationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  email: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  password: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  emailVerified: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  image: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  Account: z.lazy(() => AccountOrderByWithRelationInputSchema).optional(),
  Session: z.lazy(() => SessionOrderByRelationAggregateInputSchema).optional(),
  UserAttribute: z.lazy(() => UserAttributeOrderByWithRelationInputSchema).optional(),
  _relevance: z.lazy(() => UserOrderByRelevanceInputSchema).optional()
}).strict();

export const UserWhereUniqueInputSchema: z.ZodType<Prisma.UserWhereUniqueInput> = z.union([
  z.object({
    id: z.string(),
    email: z.string()
  }),
  z.object({
    id: z.string(),
  }),
  z.object({
    email: z.string(),
  }),
])
.and(z.object({
  id: z.string().optional(),
  email: z.string().optional(),
  AND: z.union([ z.lazy(() => UserWhereInputSchema),z.lazy(() => UserWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => UserWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => UserWhereInputSchema),z.lazy(() => UserWhereInputSchema).array() ]).optional(),
  name: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  password: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  emailVerified: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.date() ]).optional().nullable(),
  image: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  Account: z.union([ z.lazy(() => AccountNullableRelationFilterSchema),z.lazy(() => AccountWhereInputSchema) ]).optional().nullable(),
  Session: z.lazy(() => SessionListRelationFilterSchema).optional(),
  UserAttribute: z.union([ z.lazy(() => UserAttributeNullableRelationFilterSchema),z.lazy(() => UserAttributeWhereInputSchema) ]).optional().nullable(),
}).strict());

export const UserOrderByWithAggregationInputSchema: z.ZodType<Prisma.UserOrderByWithAggregationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  email: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  password: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  emailVerified: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  image: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  _count: z.lazy(() => UserCountOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => UserMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => UserMinOrderByAggregateInputSchema).optional()
}).strict();

export const UserScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.UserScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => UserScalarWhereWithAggregatesInputSchema),z.lazy(() => UserScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => UserScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => UserScalarWhereWithAggregatesInputSchema),z.lazy(() => UserScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  name: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  email: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  password: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  emailVerified: z.union([ z.lazy(() => DateTimeNullableWithAggregatesFilterSchema),z.date() ]).optional().nullable(),
  image: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
}).strict();

export const UserAttributeWhereInputSchema: z.ZodType<Prisma.UserAttributeWhereInput> = z.object({
  AND: z.union([ z.lazy(() => UserAttributeWhereInputSchema),z.lazy(() => UserAttributeWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => UserAttributeWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => UserAttributeWhereInputSchema),z.lazy(() => UserAttributeWhereInputSchema).array() ]).optional(),
  Id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  UserId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  UserType: z.union([ z.lazy(() => EnumUserAttribute_UserTypeNullableFilterSchema),z.lazy(() => UserAttribute_UserTypeSchema) ]).optional().nullable(),
  Admin: z.union([ z.lazy(() => AdminNullableRelationFilterSchema),z.lazy(() => AdminWhereInputSchema) ]).optional().nullable(),
  Provider: z.union([ z.lazy(() => ProviderNullableRelationFilterSchema),z.lazy(() => ProviderWhereInputSchema) ]).optional().nullable(),
  User: z.union([ z.lazy(() => UserRelationFilterSchema),z.lazy(() => UserWhereInputSchema) ]).optional(),
}).strict();

export const UserAttributeOrderByWithRelationInputSchema: z.ZodType<Prisma.UserAttributeOrderByWithRelationInput> = z.object({
  Id: z.lazy(() => SortOrderSchema).optional(),
  UserId: z.lazy(() => SortOrderSchema).optional(),
  UserType: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  Admin: z.lazy(() => AdminOrderByWithRelationInputSchema).optional(),
  Provider: z.lazy(() => ProviderOrderByWithRelationInputSchema).optional(),
  User: z.lazy(() => UserOrderByWithRelationInputSchema).optional(),
  _relevance: z.lazy(() => UserAttributeOrderByRelevanceInputSchema).optional()
}).strict();

export const UserAttributeWhereUniqueInputSchema: z.ZodType<Prisma.UserAttributeWhereUniqueInput> = z.union([
  z.object({
    Id: z.string(),
    UserId: z.string()
  }),
  z.object({
    Id: z.string(),
  }),
  z.object({
    UserId: z.string(),
  }),
])
.and(z.object({
  Id: z.string().optional(),
  UserId: z.string().optional(),
  AND: z.union([ z.lazy(() => UserAttributeWhereInputSchema),z.lazy(() => UserAttributeWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => UserAttributeWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => UserAttributeWhereInputSchema),z.lazy(() => UserAttributeWhereInputSchema).array() ]).optional(),
  UserType: z.union([ z.lazy(() => EnumUserAttribute_UserTypeNullableFilterSchema),z.lazy(() => UserAttribute_UserTypeSchema) ]).optional().nullable(),
  Admin: z.union([ z.lazy(() => AdminNullableRelationFilterSchema),z.lazy(() => AdminWhereInputSchema) ]).optional().nullable(),
  Provider: z.union([ z.lazy(() => ProviderNullableRelationFilterSchema),z.lazy(() => ProviderWhereInputSchema) ]).optional().nullable(),
  User: z.union([ z.lazy(() => UserRelationFilterSchema),z.lazy(() => UserWhereInputSchema) ]).optional(),
}).strict());

export const UserAttributeOrderByWithAggregationInputSchema: z.ZodType<Prisma.UserAttributeOrderByWithAggregationInput> = z.object({
  Id: z.lazy(() => SortOrderSchema).optional(),
  UserId: z.lazy(() => SortOrderSchema).optional(),
  UserType: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  _count: z.lazy(() => UserAttributeCountOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => UserAttributeMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => UserAttributeMinOrderByAggregateInputSchema).optional()
}).strict();

export const UserAttributeScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.UserAttributeScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => UserAttributeScalarWhereWithAggregatesInputSchema),z.lazy(() => UserAttributeScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => UserAttributeScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => UserAttributeScalarWhereWithAggregatesInputSchema),z.lazy(() => UserAttributeScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  Id: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  UserId: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  UserType: z.union([ z.lazy(() => EnumUserAttribute_UserTypeNullableWithAggregatesFilterSchema),z.lazy(() => UserAttribute_UserTypeSchema) ]).optional().nullable(),
}).strict();

export const VerificationTokenWhereInputSchema: z.ZodType<Prisma.VerificationTokenWhereInput> = z.object({
  AND: z.union([ z.lazy(() => VerificationTokenWhereInputSchema),z.lazy(() => VerificationTokenWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => VerificationTokenWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => VerificationTokenWhereInputSchema),z.lazy(() => VerificationTokenWhereInputSchema).array() ]).optional(),
  identifier: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  token: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  expires: z.union([ z.lazy(() => DateTimeFilterSchema),z.date() ]).optional(),
}).strict();

export const VerificationTokenOrderByWithRelationInputSchema: z.ZodType<Prisma.VerificationTokenOrderByWithRelationInput> = z.object({
  identifier: z.lazy(() => SortOrderSchema).optional(),
  token: z.lazy(() => SortOrderSchema).optional(),
  expires: z.lazy(() => SortOrderSchema).optional(),
  _relevance: z.lazy(() => VerificationTokenOrderByRelevanceInputSchema).optional()
}).strict();

export const VerificationTokenWhereUniqueInputSchema: z.ZodType<Prisma.VerificationTokenWhereUniqueInput> = z.union([
  z.object({
    token: z.string(),
    identifier_token: z.lazy(() => VerificationTokenIdentifierTokenCompoundUniqueInputSchema)
  }),
  z.object({
    token: z.string(),
  }),
  z.object({
    identifier_token: z.lazy(() => VerificationTokenIdentifierTokenCompoundUniqueInputSchema),
  }),
])
.and(z.object({
  token: z.string().optional(),
  identifier_token: z.lazy(() => VerificationTokenIdentifierTokenCompoundUniqueInputSchema).optional(),
  AND: z.union([ z.lazy(() => VerificationTokenWhereInputSchema),z.lazy(() => VerificationTokenWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => VerificationTokenWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => VerificationTokenWhereInputSchema),z.lazy(() => VerificationTokenWhereInputSchema).array() ]).optional(),
  identifier: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  expires: z.union([ z.lazy(() => DateTimeFilterSchema),z.date() ]).optional(),
}).strict());

export const VerificationTokenOrderByWithAggregationInputSchema: z.ZodType<Prisma.VerificationTokenOrderByWithAggregationInput> = z.object({
  identifier: z.lazy(() => SortOrderSchema).optional(),
  token: z.lazy(() => SortOrderSchema).optional(),
  expires: z.lazy(() => SortOrderSchema).optional(),
  _count: z.lazy(() => VerificationTokenCountOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => VerificationTokenMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => VerificationTokenMinOrderByAggregateInputSchema).optional()
}).strict();

export const VerificationTokenScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.VerificationTokenScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => VerificationTokenScalarWhereWithAggregatesInputSchema),z.lazy(() => VerificationTokenScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => VerificationTokenScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => VerificationTokenScalarWhereWithAggregatesInputSchema),z.lazy(() => VerificationTokenScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  identifier: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  token: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  expires: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.date() ]).optional(),
}).strict();

export const AccountCreateInputSchema: z.ZodType<Prisma.AccountCreateInput> = z.object({
  id: z.string().optional(),
  type: z.string(),
  provider: z.string(),
  providerAccountId: z.string(),
  refresh_token: z.string().optional().nullable(),
  access_token: z.string().optional().nullable(),
  expires_at: z.number().optional().nullable(),
  token_type: z.string().optional().nullable(),
  scope: z.string().optional().nullable(),
  state: z.string().optional().nullable(),
  id_token: z.string().optional().nullable(),
  session_state: z.string().optional().nullable(),
  refresh_token_expires_in: z.number().optional().nullable(),
  epic_dstu2_patient: z.string().optional().nullable(),
  appointment: z.string().optional().nullable(),
  dob: z.string().optional().nullable(),
  encounter: z.string().optional().nullable(),
  location: z.string().optional().nullable(),
  loginDepartment: z.string().optional().nullable(),
  need_patient_banner: z.string().optional().nullable(),
  patient: z.string().optional().nullable(),
  smart_style_url: z.string().optional().nullable(),
  unconfirmed_status: z.string().optional().nullable(),
  user_email: z.string().optional().nullable(),
  username: z.string().optional().nullable(),
  tenant: z.string().optional().nullable(),
  createdAt: z.date().optional().nullable(),
  updatedAt: z.date().optional().nullable(),
  user: z.lazy(() => UserCreateNestedOneWithoutAccountInputSchema)
}).strict();

export const AccountUncheckedCreateInputSchema: z.ZodType<Prisma.AccountUncheckedCreateInput> = z.object({
  id: z.string().optional(),
  userId: z.string(),
  type: z.string(),
  provider: z.string(),
  providerAccountId: z.string(),
  refresh_token: z.string().optional().nullable(),
  access_token: z.string().optional().nullable(),
  expires_at: z.number().optional().nullable(),
  token_type: z.string().optional().nullable(),
  scope: z.string().optional().nullable(),
  state: z.string().optional().nullable(),
  id_token: z.string().optional().nullable(),
  session_state: z.string().optional().nullable(),
  refresh_token_expires_in: z.number().optional().nullable(),
  epic_dstu2_patient: z.string().optional().nullable(),
  appointment: z.string().optional().nullable(),
  dob: z.string().optional().nullable(),
  encounter: z.string().optional().nullable(),
  location: z.string().optional().nullable(),
  loginDepartment: z.string().optional().nullable(),
  need_patient_banner: z.string().optional().nullable(),
  patient: z.string().optional().nullable(),
  smart_style_url: z.string().optional().nullable(),
  unconfirmed_status: z.string().optional().nullable(),
  user_email: z.string().optional().nullable(),
  username: z.string().optional().nullable(),
  tenant: z.string().optional().nullable(),
  createdAt: z.date().optional().nullable(),
  updatedAt: z.date().optional().nullable()
}).strict();

export const AccountUpdateInputSchema: z.ZodType<Prisma.AccountUpdateInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  provider: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  providerAccountId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  refresh_token: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  access_token: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  expires_at: z.union([ z.number(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  token_type: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  scope: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  state: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  id_token: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  session_state: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  refresh_token_expires_in: z.union([ z.number(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  epic_dstu2_patient: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  appointment: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  dob: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  encounter: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  location: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  loginDepartment: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  need_patient_banner: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  patient: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  smart_style_url: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  unconfirmed_status: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  user_email: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  username: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  tenant: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updatedAt: z.union([ z.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  user: z.lazy(() => UserUpdateOneRequiredWithoutAccountNestedInputSchema).optional()
}).strict();

export const AccountUncheckedUpdateInputSchema: z.ZodType<Prisma.AccountUncheckedUpdateInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  userId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  provider: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  providerAccountId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  refresh_token: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  access_token: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  expires_at: z.union([ z.number(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  token_type: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  scope: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  state: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  id_token: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  session_state: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  refresh_token_expires_in: z.union([ z.number(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  epic_dstu2_patient: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  appointment: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  dob: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  encounter: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  location: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  loginDepartment: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  need_patient_banner: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  patient: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  smart_style_url: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  unconfirmed_status: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  user_email: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  username: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  tenant: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updatedAt: z.union([ z.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const AccountCreateManyInputSchema: z.ZodType<Prisma.AccountCreateManyInput> = z.object({
  id: z.string().optional(),
  userId: z.string(),
  type: z.string(),
  provider: z.string(),
  providerAccountId: z.string(),
  refresh_token: z.string().optional().nullable(),
  access_token: z.string().optional().nullable(),
  expires_at: z.number().optional().nullable(),
  token_type: z.string().optional().nullable(),
  scope: z.string().optional().nullable(),
  state: z.string().optional().nullable(),
  id_token: z.string().optional().nullable(),
  session_state: z.string().optional().nullable(),
  refresh_token_expires_in: z.number().optional().nullable(),
  epic_dstu2_patient: z.string().optional().nullable(),
  appointment: z.string().optional().nullable(),
  dob: z.string().optional().nullable(),
  encounter: z.string().optional().nullable(),
  location: z.string().optional().nullable(),
  loginDepartment: z.string().optional().nullable(),
  need_patient_banner: z.string().optional().nullable(),
  patient: z.string().optional().nullable(),
  smart_style_url: z.string().optional().nullable(),
  unconfirmed_status: z.string().optional().nullable(),
  user_email: z.string().optional().nullable(),
  username: z.string().optional().nullable(),
  tenant: z.string().optional().nullable(),
  createdAt: z.date().optional().nullable(),
  updatedAt: z.date().optional().nullable()
}).strict();

export const AccountUpdateManyMutationInputSchema: z.ZodType<Prisma.AccountUpdateManyMutationInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  provider: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  providerAccountId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  refresh_token: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  access_token: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  expires_at: z.union([ z.number(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  token_type: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  scope: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  state: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  id_token: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  session_state: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  refresh_token_expires_in: z.union([ z.number(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  epic_dstu2_patient: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  appointment: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  dob: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  encounter: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  location: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  loginDepartment: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  need_patient_banner: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  patient: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  smart_style_url: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  unconfirmed_status: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  user_email: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  username: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  tenant: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updatedAt: z.union([ z.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const AccountUncheckedUpdateManyInputSchema: z.ZodType<Prisma.AccountUncheckedUpdateManyInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  userId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  provider: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  providerAccountId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  refresh_token: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  access_token: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  expires_at: z.union([ z.number(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  token_type: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  scope: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  state: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  id_token: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  session_state: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  refresh_token_expires_in: z.union([ z.number(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  epic_dstu2_patient: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  appointment: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  dob: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  encounter: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  location: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  loginDepartment: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  need_patient_banner: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  patient: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  smart_style_url: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  unconfirmed_status: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  user_email: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  username: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  tenant: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updatedAt: z.union([ z.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const AdminCreateInputSchema: z.ZodType<Prisma.AdminCreateInput> = z.object({
  Id: z.string().optional(),
  Name: z.string().optional().nullable(),
  Email: z.string().optional().nullable(),
  UserAttribute: z.lazy(() => UserAttributeCreateNestedOneWithoutAdminInputSchema)
}).strict();

export const AdminUncheckedCreateInputSchema: z.ZodType<Prisma.AdminUncheckedCreateInput> = z.object({
  Id: z.string().optional(),
  Name: z.string().optional().nullable(),
  Email: z.string().optional().nullable(),
  UserAttributeId: z.string()
}).strict();

export const AdminUpdateInputSchema: z.ZodType<Prisma.AdminUpdateInput> = z.object({
  Id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  Name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Email: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  UserAttribute: z.lazy(() => UserAttributeUpdateOneRequiredWithoutAdminNestedInputSchema).optional()
}).strict();

export const AdminUncheckedUpdateInputSchema: z.ZodType<Prisma.AdminUncheckedUpdateInput> = z.object({
  Id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  Name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Email: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  UserAttributeId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const AdminCreateManyInputSchema: z.ZodType<Prisma.AdminCreateManyInput> = z.object({
  Id: z.string().optional(),
  Name: z.string().optional().nullable(),
  Email: z.string().optional().nullable(),
  UserAttributeId: z.string()
}).strict();

export const AdminUpdateManyMutationInputSchema: z.ZodType<Prisma.AdminUpdateManyMutationInput> = z.object({
  Id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  Name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Email: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const AdminUncheckedUpdateManyInputSchema: z.ZodType<Prisma.AdminUncheckedUpdateManyInput> = z.object({
  Id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  Name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Email: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  UserAttributeId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const AttachmentCreateInputSchema: z.ZodType<Prisma.AttachmentCreateInput> = z.object({
  Id: z.string().optional(),
  AttachmentType: z.string().optional().nullable(),
  AttachmentUrl: z.string().optional().nullable(),
  CreatedAt: z.date().optional().nullable(),
  UpdatedAt: z.date().optional().nullable(),
  LabOrderAttachment: z.lazy(() => LabOrderAttachmentCreateNestedManyWithoutAttachmentInputSchema).optional()
}).strict();

export const AttachmentUncheckedCreateInputSchema: z.ZodType<Prisma.AttachmentUncheckedCreateInput> = z.object({
  Id: z.string().optional(),
  AttachmentType: z.string().optional().nullable(),
  AttachmentUrl: z.string().optional().nullable(),
  CreatedAt: z.date().optional().nullable(),
  UpdatedAt: z.date().optional().nullable(),
  LabOrderAttachment: z.lazy(() => LabOrderAttachmentUncheckedCreateNestedManyWithoutAttachmentInputSchema).optional()
}).strict();

export const AttachmentUpdateInputSchema: z.ZodType<Prisma.AttachmentUpdateInput> = z.object({
  Id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  AttachmentType: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  AttachmentUrl: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  CreatedAt: z.union([ z.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  UpdatedAt: z.union([ z.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  LabOrderAttachment: z.lazy(() => LabOrderAttachmentUpdateManyWithoutAttachmentNestedInputSchema).optional()
}).strict();

export const AttachmentUncheckedUpdateInputSchema: z.ZodType<Prisma.AttachmentUncheckedUpdateInput> = z.object({
  Id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  AttachmentType: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  AttachmentUrl: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  CreatedAt: z.union([ z.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  UpdatedAt: z.union([ z.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  LabOrderAttachment: z.lazy(() => LabOrderAttachmentUncheckedUpdateManyWithoutAttachmentNestedInputSchema).optional()
}).strict();

export const AttachmentCreateManyInputSchema: z.ZodType<Prisma.AttachmentCreateManyInput> = z.object({
  Id: z.string().optional(),
  AttachmentType: z.string().optional().nullable(),
  AttachmentUrl: z.string().optional().nullable(),
  CreatedAt: z.date().optional().nullable(),
  UpdatedAt: z.date().optional().nullable()
}).strict();

export const AttachmentUpdateManyMutationInputSchema: z.ZodType<Prisma.AttachmentUpdateManyMutationInput> = z.object({
  Id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  AttachmentType: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  AttachmentUrl: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  CreatedAt: z.union([ z.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  UpdatedAt: z.union([ z.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const AttachmentUncheckedUpdateManyInputSchema: z.ZodType<Prisma.AttachmentUncheckedUpdateManyInput> = z.object({
  Id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  AttachmentType: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  AttachmentUrl: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  CreatedAt: z.union([ z.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  UpdatedAt: z.union([ z.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const BIOMARKERCreateInputSchema: z.ZodType<Prisma.BIOMARKERCreateInput> = z.object({
  HGNCId: z.string(),
  HGNCStatus: z.string().optional().nullable(),
  HGNCApprovedSymbol: z.string().optional().nullable(),
  HGNCApprovedName: z.string().optional().nullable(),
  TestBiomarker: z.lazy(() => TestBiomarkerCreateNestedManyWithoutBIOMARKERInputSchema).optional()
}).strict();

export const BIOMARKERUncheckedCreateInputSchema: z.ZodType<Prisma.BIOMARKERUncheckedCreateInput> = z.object({
  HGNCId: z.string(),
  HGNCStatus: z.string().optional().nullable(),
  HGNCApprovedSymbol: z.string().optional().nullable(),
  HGNCApprovedName: z.string().optional().nullable(),
  TestBiomarker: z.lazy(() => TestBiomarkerUncheckedCreateNestedManyWithoutBIOMARKERInputSchema).optional()
}).strict();

export const BIOMARKERUpdateInputSchema: z.ZodType<Prisma.BIOMARKERUpdateInput> = z.object({
  HGNCId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  HGNCStatus: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  HGNCApprovedSymbol: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  HGNCApprovedName: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  TestBiomarker: z.lazy(() => TestBiomarkerUpdateManyWithoutBIOMARKERNestedInputSchema).optional()
}).strict();

export const BIOMARKERUncheckedUpdateInputSchema: z.ZodType<Prisma.BIOMARKERUncheckedUpdateInput> = z.object({
  HGNCId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  HGNCStatus: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  HGNCApprovedSymbol: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  HGNCApprovedName: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  TestBiomarker: z.lazy(() => TestBiomarkerUncheckedUpdateManyWithoutBIOMARKERNestedInputSchema).optional()
}).strict();

export const BIOMARKERCreateManyInputSchema: z.ZodType<Prisma.BIOMARKERCreateManyInput> = z.object({
  HGNCId: z.string(),
  HGNCStatus: z.string().optional().nullable(),
  HGNCApprovedSymbol: z.string().optional().nullable(),
  HGNCApprovedName: z.string().optional().nullable()
}).strict();

export const BIOMARKERUpdateManyMutationInputSchema: z.ZodType<Prisma.BIOMARKERUpdateManyMutationInput> = z.object({
  HGNCId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  HGNCStatus: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  HGNCApprovedSymbol: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  HGNCApprovedName: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const BIOMARKERUncheckedUpdateManyInputSchema: z.ZodType<Prisma.BIOMARKERUncheckedUpdateManyInput> = z.object({
  HGNCId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  HGNCStatus: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  HGNCApprovedSymbol: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  HGNCApprovedName: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const ICDCreateInputSchema: z.ZodType<Prisma.ICDCreateInput> = z.object({
  Id: z.string().optional(),
  Code: z.string().optional().nullable(),
  ShortDescription: z.string().optional().nullable(),
  CreatedAt: z.date().optional().nullable(),
  UpdatedAt: z.date().optional().nullable(),
  LabOrderIcd: z.lazy(() => LabOrderIcdCreateNestedManyWithoutICDInputSchema).optional()
}).strict();

export const ICDUncheckedCreateInputSchema: z.ZodType<Prisma.ICDUncheckedCreateInput> = z.object({
  Id: z.string().optional(),
  Code: z.string().optional().nullable(),
  ShortDescription: z.string().optional().nullable(),
  CreatedAt: z.date().optional().nullable(),
  UpdatedAt: z.date().optional().nullable(),
  LabOrderIcd: z.lazy(() => LabOrderIcdUncheckedCreateNestedManyWithoutICDInputSchema).optional()
}).strict();

export const ICDUpdateInputSchema: z.ZodType<Prisma.ICDUpdateInput> = z.object({
  Id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  Code: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  ShortDescription: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  CreatedAt: z.union([ z.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  UpdatedAt: z.union([ z.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  LabOrderIcd: z.lazy(() => LabOrderIcdUpdateManyWithoutICDNestedInputSchema).optional()
}).strict();

export const ICDUncheckedUpdateInputSchema: z.ZodType<Prisma.ICDUncheckedUpdateInput> = z.object({
  Id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  Code: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  ShortDescription: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  CreatedAt: z.union([ z.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  UpdatedAt: z.union([ z.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  LabOrderIcd: z.lazy(() => LabOrderIcdUncheckedUpdateManyWithoutICDNestedInputSchema).optional()
}).strict();

export const ICDCreateManyInputSchema: z.ZodType<Prisma.ICDCreateManyInput> = z.object({
  Id: z.string().optional(),
  Code: z.string().optional().nullable(),
  ShortDescription: z.string().optional().nullable(),
  CreatedAt: z.date().optional().nullable(),
  UpdatedAt: z.date().optional().nullable()
}).strict();

export const ICDUpdateManyMutationInputSchema: z.ZodType<Prisma.ICDUpdateManyMutationInput> = z.object({
  Id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  Code: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  ShortDescription: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  CreatedAt: z.union([ z.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  UpdatedAt: z.union([ z.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const ICDUncheckedUpdateManyInputSchema: z.ZodType<Prisma.ICDUncheckedUpdateManyInput> = z.object({
  Id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  Code: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  ShortDescription: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  CreatedAt: z.union([ z.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  UpdatedAt: z.union([ z.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const LOINCCreateInputSchema: z.ZodType<Prisma.LOINCCreateInput> = z.object({
  Loinc_Num: z.string(),
  COMPONENT: z.string().optional().nullable(),
  PROPERTY: z.string().optional().nullable(),
  TIME_ASPCT: z.string().optional().nullable(),
  SYSTEM: z.string().optional().nullable(),
  SCALE_TYP: z.string().optional().nullable(),
  METHOD_TYP: z.string().optional().nullable(),
  CLASS: z.string().optional().nullable(),
  VersionLastChanged: z.string().optional().nullable(),
  CHNG_TYPE: z.string().optional().nullable(),
  DefinitionDescription: z.string().optional().nullable(),
  STATUS: z.string().optional().nullable(),
  CONSUMER_NAME: z.string().optional().nullable(),
  CLASSTYPE: z.number().optional().nullable(),
  FORMULA: z.string().optional().nullable(),
  EXMPL_ANSWERS: z.string().optional().nullable(),
  SURVEY_QUEST_TEXT: z.string().optional().nullable(),
  SURVEY_QUEST_SRC: z.string().optional().nullable(),
  UNITSREQUIRED: z.string().optional().nullable(),
  RELATEDNAMES2: z.string().optional().nullable(),
  SHORTNAME: z.string().optional().nullable(),
  ORDER_OBS: z.string().optional().nullable(),
  HL7_FIELD_SUBFIELD_ID: z.string().optional().nullable(),
  EXTERNAL_COPYRIGHT_NOTICE: z.string().optional().nullable(),
  EXAMPLE_UNITS: z.string().optional().nullable(),
  LONG_COMMON_NAME: z.string().optional().nullable(),
  EXAMPLE_UCUM_UNITS: z.string().optional().nullable(),
  STATUS_REASON: z.string().optional().nullable(),
  STATUS_TEXT: z.string().optional().nullable(),
  CHANGE_REASON_PUBLIC: z.string().optional().nullable(),
  COMMON_TEST_RANK: z.number().optional().nullable(),
  COMMON_ORDER_RANK: z.number().optional().nullable(),
  HL7_ATTACHMENT_STRUCTURE: z.string().optional().nullable(),
  EXTERNAL_COPYRIGHT_LINK: z.string().optional().nullable(),
  PanelType: z.string().optional().nullable(),
  AskAtOrderEntry: z.string().optional().nullable(),
  AssociatedObservations: z.string().optional().nullable(),
  VersionFirstReleased: z.string().optional().nullable(),
  ValidHL7AttachmentRequest: z.string().optional().nullable(),
  DisplayName: z.string().optional().nullable(),
  TestOrderLoinc: z.lazy(() => TestOrderLoincCreateNestedManyWithoutLOINCInputSchema).optional(),
  TestResultLoinc: z.lazy(() => TestResultLoincCreateNestedManyWithoutLOINCInputSchema).optional()
}).strict();

export const LOINCUncheckedCreateInputSchema: z.ZodType<Prisma.LOINCUncheckedCreateInput> = z.object({
  Loinc_Num: z.string(),
  COMPONENT: z.string().optional().nullable(),
  PROPERTY: z.string().optional().nullable(),
  TIME_ASPCT: z.string().optional().nullable(),
  SYSTEM: z.string().optional().nullable(),
  SCALE_TYP: z.string().optional().nullable(),
  METHOD_TYP: z.string().optional().nullable(),
  CLASS: z.string().optional().nullable(),
  VersionLastChanged: z.string().optional().nullable(),
  CHNG_TYPE: z.string().optional().nullable(),
  DefinitionDescription: z.string().optional().nullable(),
  STATUS: z.string().optional().nullable(),
  CONSUMER_NAME: z.string().optional().nullable(),
  CLASSTYPE: z.number().optional().nullable(),
  FORMULA: z.string().optional().nullable(),
  EXMPL_ANSWERS: z.string().optional().nullable(),
  SURVEY_QUEST_TEXT: z.string().optional().nullable(),
  SURVEY_QUEST_SRC: z.string().optional().nullable(),
  UNITSREQUIRED: z.string().optional().nullable(),
  RELATEDNAMES2: z.string().optional().nullable(),
  SHORTNAME: z.string().optional().nullable(),
  ORDER_OBS: z.string().optional().nullable(),
  HL7_FIELD_SUBFIELD_ID: z.string().optional().nullable(),
  EXTERNAL_COPYRIGHT_NOTICE: z.string().optional().nullable(),
  EXAMPLE_UNITS: z.string().optional().nullable(),
  LONG_COMMON_NAME: z.string().optional().nullable(),
  EXAMPLE_UCUM_UNITS: z.string().optional().nullable(),
  STATUS_REASON: z.string().optional().nullable(),
  STATUS_TEXT: z.string().optional().nullable(),
  CHANGE_REASON_PUBLIC: z.string().optional().nullable(),
  COMMON_TEST_RANK: z.number().optional().nullable(),
  COMMON_ORDER_RANK: z.number().optional().nullable(),
  HL7_ATTACHMENT_STRUCTURE: z.string().optional().nullable(),
  EXTERNAL_COPYRIGHT_LINK: z.string().optional().nullable(),
  PanelType: z.string().optional().nullable(),
  AskAtOrderEntry: z.string().optional().nullable(),
  AssociatedObservations: z.string().optional().nullable(),
  VersionFirstReleased: z.string().optional().nullable(),
  ValidHL7AttachmentRequest: z.string().optional().nullable(),
  DisplayName: z.string().optional().nullable(),
  TestOrderLoinc: z.lazy(() => TestOrderLoincUncheckedCreateNestedManyWithoutLOINCInputSchema).optional(),
  TestResultLoinc: z.lazy(() => TestResultLoincUncheckedCreateNestedManyWithoutLOINCInputSchema).optional()
}).strict();

export const LOINCUpdateInputSchema: z.ZodType<Prisma.LOINCUpdateInput> = z.object({
  Loinc_Num: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  COMPONENT: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  PROPERTY: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  TIME_ASPCT: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  SYSTEM: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  SCALE_TYP: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  METHOD_TYP: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  CLASS: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  VersionLastChanged: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  CHNG_TYPE: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  DefinitionDescription: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  STATUS: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  CONSUMER_NAME: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  CLASSTYPE: z.union([ z.number(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  FORMULA: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  EXMPL_ANSWERS: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  SURVEY_QUEST_TEXT: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  SURVEY_QUEST_SRC: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  UNITSREQUIRED: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  RELATEDNAMES2: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  SHORTNAME: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  ORDER_OBS: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  HL7_FIELD_SUBFIELD_ID: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  EXTERNAL_COPYRIGHT_NOTICE: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  EXAMPLE_UNITS: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  LONG_COMMON_NAME: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  EXAMPLE_UCUM_UNITS: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  STATUS_REASON: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  STATUS_TEXT: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  CHANGE_REASON_PUBLIC: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  COMMON_TEST_RANK: z.union([ z.number(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  COMMON_ORDER_RANK: z.union([ z.number(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  HL7_ATTACHMENT_STRUCTURE: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  EXTERNAL_COPYRIGHT_LINK: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  PanelType: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  AskAtOrderEntry: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  AssociatedObservations: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  VersionFirstReleased: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  ValidHL7AttachmentRequest: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  DisplayName: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  TestOrderLoinc: z.lazy(() => TestOrderLoincUpdateManyWithoutLOINCNestedInputSchema).optional(),
  TestResultLoinc: z.lazy(() => TestResultLoincUpdateManyWithoutLOINCNestedInputSchema).optional()
}).strict();

export const LOINCUncheckedUpdateInputSchema: z.ZodType<Prisma.LOINCUncheckedUpdateInput> = z.object({
  Loinc_Num: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  COMPONENT: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  PROPERTY: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  TIME_ASPCT: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  SYSTEM: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  SCALE_TYP: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  METHOD_TYP: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  CLASS: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  VersionLastChanged: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  CHNG_TYPE: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  DefinitionDescription: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  STATUS: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  CONSUMER_NAME: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  CLASSTYPE: z.union([ z.number(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  FORMULA: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  EXMPL_ANSWERS: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  SURVEY_QUEST_TEXT: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  SURVEY_QUEST_SRC: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  UNITSREQUIRED: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  RELATEDNAMES2: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  SHORTNAME: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  ORDER_OBS: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  HL7_FIELD_SUBFIELD_ID: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  EXTERNAL_COPYRIGHT_NOTICE: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  EXAMPLE_UNITS: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  LONG_COMMON_NAME: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  EXAMPLE_UCUM_UNITS: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  STATUS_REASON: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  STATUS_TEXT: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  CHANGE_REASON_PUBLIC: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  COMMON_TEST_RANK: z.union([ z.number(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  COMMON_ORDER_RANK: z.union([ z.number(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  HL7_ATTACHMENT_STRUCTURE: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  EXTERNAL_COPYRIGHT_LINK: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  PanelType: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  AskAtOrderEntry: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  AssociatedObservations: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  VersionFirstReleased: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  ValidHL7AttachmentRequest: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  DisplayName: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  TestOrderLoinc: z.lazy(() => TestOrderLoincUncheckedUpdateManyWithoutLOINCNestedInputSchema).optional(),
  TestResultLoinc: z.lazy(() => TestResultLoincUncheckedUpdateManyWithoutLOINCNestedInputSchema).optional()
}).strict();

export const LOINCCreateManyInputSchema: z.ZodType<Prisma.LOINCCreateManyInput> = z.object({
  Loinc_Num: z.string(),
  COMPONENT: z.string().optional().nullable(),
  PROPERTY: z.string().optional().nullable(),
  TIME_ASPCT: z.string().optional().nullable(),
  SYSTEM: z.string().optional().nullable(),
  SCALE_TYP: z.string().optional().nullable(),
  METHOD_TYP: z.string().optional().nullable(),
  CLASS: z.string().optional().nullable(),
  VersionLastChanged: z.string().optional().nullable(),
  CHNG_TYPE: z.string().optional().nullable(),
  DefinitionDescription: z.string().optional().nullable(),
  STATUS: z.string().optional().nullable(),
  CONSUMER_NAME: z.string().optional().nullable(),
  CLASSTYPE: z.number().optional().nullable(),
  FORMULA: z.string().optional().nullable(),
  EXMPL_ANSWERS: z.string().optional().nullable(),
  SURVEY_QUEST_TEXT: z.string().optional().nullable(),
  SURVEY_QUEST_SRC: z.string().optional().nullable(),
  UNITSREQUIRED: z.string().optional().nullable(),
  RELATEDNAMES2: z.string().optional().nullable(),
  SHORTNAME: z.string().optional().nullable(),
  ORDER_OBS: z.string().optional().nullable(),
  HL7_FIELD_SUBFIELD_ID: z.string().optional().nullable(),
  EXTERNAL_COPYRIGHT_NOTICE: z.string().optional().nullable(),
  EXAMPLE_UNITS: z.string().optional().nullable(),
  LONG_COMMON_NAME: z.string().optional().nullable(),
  EXAMPLE_UCUM_UNITS: z.string().optional().nullable(),
  STATUS_REASON: z.string().optional().nullable(),
  STATUS_TEXT: z.string().optional().nullable(),
  CHANGE_REASON_PUBLIC: z.string().optional().nullable(),
  COMMON_TEST_RANK: z.number().optional().nullable(),
  COMMON_ORDER_RANK: z.number().optional().nullable(),
  HL7_ATTACHMENT_STRUCTURE: z.string().optional().nullable(),
  EXTERNAL_COPYRIGHT_LINK: z.string().optional().nullable(),
  PanelType: z.string().optional().nullable(),
  AskAtOrderEntry: z.string().optional().nullable(),
  AssociatedObservations: z.string().optional().nullable(),
  VersionFirstReleased: z.string().optional().nullable(),
  ValidHL7AttachmentRequest: z.string().optional().nullable(),
  DisplayName: z.string().optional().nullable()
}).strict();

export const LOINCUpdateManyMutationInputSchema: z.ZodType<Prisma.LOINCUpdateManyMutationInput> = z.object({
  Loinc_Num: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  COMPONENT: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  PROPERTY: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  TIME_ASPCT: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  SYSTEM: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  SCALE_TYP: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  METHOD_TYP: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  CLASS: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  VersionLastChanged: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  CHNG_TYPE: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  DefinitionDescription: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  STATUS: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  CONSUMER_NAME: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  CLASSTYPE: z.union([ z.number(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  FORMULA: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  EXMPL_ANSWERS: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  SURVEY_QUEST_TEXT: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  SURVEY_QUEST_SRC: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  UNITSREQUIRED: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  RELATEDNAMES2: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  SHORTNAME: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  ORDER_OBS: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  HL7_FIELD_SUBFIELD_ID: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  EXTERNAL_COPYRIGHT_NOTICE: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  EXAMPLE_UNITS: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  LONG_COMMON_NAME: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  EXAMPLE_UCUM_UNITS: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  STATUS_REASON: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  STATUS_TEXT: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  CHANGE_REASON_PUBLIC: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  COMMON_TEST_RANK: z.union([ z.number(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  COMMON_ORDER_RANK: z.union([ z.number(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  HL7_ATTACHMENT_STRUCTURE: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  EXTERNAL_COPYRIGHT_LINK: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  PanelType: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  AskAtOrderEntry: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  AssociatedObservations: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  VersionFirstReleased: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  ValidHL7AttachmentRequest: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  DisplayName: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const LOINCUncheckedUpdateManyInputSchema: z.ZodType<Prisma.LOINCUncheckedUpdateManyInput> = z.object({
  Loinc_Num: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  COMPONENT: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  PROPERTY: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  TIME_ASPCT: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  SYSTEM: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  SCALE_TYP: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  METHOD_TYP: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  CLASS: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  VersionLastChanged: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  CHNG_TYPE: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  DefinitionDescription: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  STATUS: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  CONSUMER_NAME: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  CLASSTYPE: z.union([ z.number(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  FORMULA: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  EXMPL_ANSWERS: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  SURVEY_QUEST_TEXT: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  SURVEY_QUEST_SRC: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  UNITSREQUIRED: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  RELATEDNAMES2: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  SHORTNAME: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  ORDER_OBS: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  HL7_FIELD_SUBFIELD_ID: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  EXTERNAL_COPYRIGHT_NOTICE: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  EXAMPLE_UNITS: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  LONG_COMMON_NAME: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  EXAMPLE_UCUM_UNITS: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  STATUS_REASON: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  STATUS_TEXT: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  CHANGE_REASON_PUBLIC: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  COMMON_TEST_RANK: z.union([ z.number(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  COMMON_ORDER_RANK: z.union([ z.number(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  HL7_ATTACHMENT_STRUCTURE: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  EXTERNAL_COPYRIGHT_LINK: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  PanelType: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  AskAtOrderEntry: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  AssociatedObservations: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  VersionFirstReleased: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  ValidHL7AttachmentRequest: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  DisplayName: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const LabCreateInputSchema: z.ZodType<Prisma.LabCreateInput> = z.object({
  LabName: z.string().optional().nullable(),
  LabCode: z.string().optional().nullable(),
  Address: z.string().optional().nullable(),
  City: z.string().optional().nullable(),
  State: z.string().optional().nullable(),
  Zip: z.string().optional().nullable(),
  SponsoredTest: z.lazy(() => SponsoredTestCreateNestedManyWithoutLabInputSchema).optional(),
  TestCatalog: z.lazy(() => TestCatalogCreateNestedManyWithoutLabInputSchema).optional()
}).strict();

export const LabUncheckedCreateInputSchema: z.ZodType<Prisma.LabUncheckedCreateInput> = z.object({
  LabId: z.number().optional(),
  LabName: z.string().optional().nullable(),
  LabCode: z.string().optional().nullable(),
  Address: z.string().optional().nullable(),
  City: z.string().optional().nullable(),
  State: z.string().optional().nullable(),
  Zip: z.string().optional().nullable(),
  SponsoredTest: z.lazy(() => SponsoredTestUncheckedCreateNestedManyWithoutLabInputSchema).optional(),
  TestCatalog: z.lazy(() => TestCatalogUncheckedCreateNestedManyWithoutLabInputSchema).optional()
}).strict();

export const LabUpdateInputSchema: z.ZodType<Prisma.LabUpdateInput> = z.object({
  LabName: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  LabCode: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Address: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  City: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  State: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Zip: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  SponsoredTest: z.lazy(() => SponsoredTestUpdateManyWithoutLabNestedInputSchema).optional(),
  TestCatalog: z.lazy(() => TestCatalogUpdateManyWithoutLabNestedInputSchema).optional()
}).strict();

export const LabUncheckedUpdateInputSchema: z.ZodType<Prisma.LabUncheckedUpdateInput> = z.object({
  LabId: z.union([ z.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  LabName: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  LabCode: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Address: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  City: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  State: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Zip: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  SponsoredTest: z.lazy(() => SponsoredTestUncheckedUpdateManyWithoutLabNestedInputSchema).optional(),
  TestCatalog: z.lazy(() => TestCatalogUncheckedUpdateManyWithoutLabNestedInputSchema).optional()
}).strict();

export const LabCreateManyInputSchema: z.ZodType<Prisma.LabCreateManyInput> = z.object({
  LabId: z.number().optional(),
  LabName: z.string().optional().nullable(),
  LabCode: z.string().optional().nullable(),
  Address: z.string().optional().nullable(),
  City: z.string().optional().nullable(),
  State: z.string().optional().nullable(),
  Zip: z.string().optional().nullable()
}).strict();

export const LabUpdateManyMutationInputSchema: z.ZodType<Prisma.LabUpdateManyMutationInput> = z.object({
  LabName: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  LabCode: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Address: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  City: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  State: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Zip: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const LabUncheckedUpdateManyInputSchema: z.ZodType<Prisma.LabUncheckedUpdateManyInput> = z.object({
  LabId: z.union([ z.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  LabName: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  LabCode: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Address: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  City: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  State: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Zip: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const LabOrderCreateInputSchema: z.ZodType<Prisma.LabOrderCreateInput> = z.object({
  Id: z.string().optional(),
  OrderNumber: z.string().optional().nullable(),
  AccessionNumber: z.string().optional().nullable(),
  PatientMRN: z.string().optional().nullable(),
  PatientMobile: z.string().optional().nullable(),
  PatientEmail: z.string().optional().nullable(),
  OrderDate: z.date().optional().nullable(),
  OrderNotes: z.string().optional().nullable(),
  CreatedAt: z.date().optional().nullable(),
  UpdatedAt: z.date().optional().nullable(),
  OrderingProvider: z.lazy(() => ProviderCreateNestedOneWithoutOrderingProviderLabOrderInputSchema).optional(),
  TreatingProvider: z.lazy(() => ProviderCreateNestedOneWithoutTreatingProviderLabOrderInputSchema).optional(),
  Patient: z.lazy(() => PatientCreateNestedOneWithoutLabOrderInputSchema).optional(),
  Organization: z.lazy(() => OrganizationCreateNestedOneWithoutLabOrderInputSchema).optional(),
  LabOrderAttachment: z.lazy(() => LabOrderAttachmentCreateNestedManyWithoutLabOrderInputSchema).optional(),
  LabOrderBilling: z.lazy(() => LabOrderBillingCreateNestedManyWithoutLabOrderInputSchema).optional(),
  LabOrderIcd: z.lazy(() => LabOrderIcdCreateNestedManyWithoutLabOrderInputSchema).optional(),
  LabOrderSpecimen: z.lazy(() => LabOrderSpecimenCreateNestedManyWithoutLabOrderInputSchema).optional(),
  LabOrderSponsoredTestConsent: z.lazy(() => LabOrderSponsoredTestConsentCreateNestedManyWithoutLabOrderInputSchema).optional(),
  LabOrderStatus: z.lazy(() => LabOrderStatusCreateNestedManyWithoutLabOrderInputSchema).optional(),
  LabOrderTest: z.lazy(() => LabOrderTestCreateNestedManyWithoutLabOrderInputSchema).optional()
}).strict();

export const LabOrderUncheckedCreateInputSchema: z.ZodType<Prisma.LabOrderUncheckedCreateInput> = z.object({
  Id: z.string().optional(),
  OrderNumber: z.string().optional().nullable(),
  AccessionNumber: z.string().optional().nullable(),
  OrderingProviderId: z.string().optional().nullable(),
  TreatingProviderId: z.string().optional().nullable(),
  PatientId: z.string().optional().nullable(),
  PatientMRN: z.string().optional().nullable(),
  PatientMobile: z.string().optional().nullable(),
  PatientEmail: z.string().optional().nullable(),
  OrganizationId: z.string().optional().nullable(),
  OrderDate: z.date().optional().nullable(),
  OrderNotes: z.string().optional().nullable(),
  CreatedAt: z.date().optional().nullable(),
  UpdatedAt: z.date().optional().nullable(),
  LabOrderAttachment: z.lazy(() => LabOrderAttachmentUncheckedCreateNestedManyWithoutLabOrderInputSchema).optional(),
  LabOrderBilling: z.lazy(() => LabOrderBillingUncheckedCreateNestedManyWithoutLabOrderInputSchema).optional(),
  LabOrderIcd: z.lazy(() => LabOrderIcdUncheckedCreateNestedManyWithoutLabOrderInputSchema).optional(),
  LabOrderSpecimen: z.lazy(() => LabOrderSpecimenUncheckedCreateNestedManyWithoutLabOrderInputSchema).optional(),
  LabOrderSponsoredTestConsent: z.lazy(() => LabOrderSponsoredTestConsentUncheckedCreateNestedManyWithoutLabOrderInputSchema).optional(),
  LabOrderStatus: z.lazy(() => LabOrderStatusUncheckedCreateNestedManyWithoutLabOrderInputSchema).optional(),
  LabOrderTest: z.lazy(() => LabOrderTestUncheckedCreateNestedManyWithoutLabOrderInputSchema).optional()
}).strict();

export const LabOrderUpdateInputSchema: z.ZodType<Prisma.LabOrderUpdateInput> = z.object({
  Id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  OrderNumber: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  AccessionNumber: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  PatientMRN: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  PatientMobile: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  PatientEmail: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  OrderDate: z.union([ z.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  OrderNotes: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  CreatedAt: z.union([ z.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  UpdatedAt: z.union([ z.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  OrderingProvider: z.lazy(() => ProviderUpdateOneWithoutOrderingProviderLabOrderNestedInputSchema).optional(),
  TreatingProvider: z.lazy(() => ProviderUpdateOneWithoutTreatingProviderLabOrderNestedInputSchema).optional(),
  Patient: z.lazy(() => PatientUpdateOneWithoutLabOrderNestedInputSchema).optional(),
  Organization: z.lazy(() => OrganizationUpdateOneWithoutLabOrderNestedInputSchema).optional(),
  LabOrderAttachment: z.lazy(() => LabOrderAttachmentUpdateManyWithoutLabOrderNestedInputSchema).optional(),
  LabOrderBilling: z.lazy(() => LabOrderBillingUpdateManyWithoutLabOrderNestedInputSchema).optional(),
  LabOrderIcd: z.lazy(() => LabOrderIcdUpdateManyWithoutLabOrderNestedInputSchema).optional(),
  LabOrderSpecimen: z.lazy(() => LabOrderSpecimenUpdateManyWithoutLabOrderNestedInputSchema).optional(),
  LabOrderSponsoredTestConsent: z.lazy(() => LabOrderSponsoredTestConsentUpdateManyWithoutLabOrderNestedInputSchema).optional(),
  LabOrderStatus: z.lazy(() => LabOrderStatusUpdateManyWithoutLabOrderNestedInputSchema).optional(),
  LabOrderTest: z.lazy(() => LabOrderTestUpdateManyWithoutLabOrderNestedInputSchema).optional()
}).strict();

export const LabOrderUncheckedUpdateInputSchema: z.ZodType<Prisma.LabOrderUncheckedUpdateInput> = z.object({
  Id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  OrderNumber: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  AccessionNumber: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  OrderingProviderId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  TreatingProviderId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  PatientId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  PatientMRN: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  PatientMobile: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  PatientEmail: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  OrganizationId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  OrderDate: z.union([ z.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  OrderNotes: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  CreatedAt: z.union([ z.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  UpdatedAt: z.union([ z.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  LabOrderAttachment: z.lazy(() => LabOrderAttachmentUncheckedUpdateManyWithoutLabOrderNestedInputSchema).optional(),
  LabOrderBilling: z.lazy(() => LabOrderBillingUncheckedUpdateManyWithoutLabOrderNestedInputSchema).optional(),
  LabOrderIcd: z.lazy(() => LabOrderIcdUncheckedUpdateManyWithoutLabOrderNestedInputSchema).optional(),
  LabOrderSpecimen: z.lazy(() => LabOrderSpecimenUncheckedUpdateManyWithoutLabOrderNestedInputSchema).optional(),
  LabOrderSponsoredTestConsent: z.lazy(() => LabOrderSponsoredTestConsentUncheckedUpdateManyWithoutLabOrderNestedInputSchema).optional(),
  LabOrderStatus: z.lazy(() => LabOrderStatusUncheckedUpdateManyWithoutLabOrderNestedInputSchema).optional(),
  LabOrderTest: z.lazy(() => LabOrderTestUncheckedUpdateManyWithoutLabOrderNestedInputSchema).optional()
}).strict();

export const LabOrderCreateManyInputSchema: z.ZodType<Prisma.LabOrderCreateManyInput> = z.object({
  Id: z.string().optional(),
  OrderNumber: z.string().optional().nullable(),
  AccessionNumber: z.string().optional().nullable(),
  OrderingProviderId: z.string().optional().nullable(),
  TreatingProviderId: z.string().optional().nullable(),
  PatientId: z.string().optional().nullable(),
  PatientMRN: z.string().optional().nullable(),
  PatientMobile: z.string().optional().nullable(),
  PatientEmail: z.string().optional().nullable(),
  OrganizationId: z.string().optional().nullable(),
  OrderDate: z.date().optional().nullable(),
  OrderNotes: z.string().optional().nullable(),
  CreatedAt: z.date().optional().nullable(),
  UpdatedAt: z.date().optional().nullable()
}).strict();

export const LabOrderUpdateManyMutationInputSchema: z.ZodType<Prisma.LabOrderUpdateManyMutationInput> = z.object({
  Id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  OrderNumber: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  AccessionNumber: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  PatientMRN: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  PatientMobile: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  PatientEmail: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  OrderDate: z.union([ z.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  OrderNotes: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  CreatedAt: z.union([ z.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  UpdatedAt: z.union([ z.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const LabOrderUncheckedUpdateManyInputSchema: z.ZodType<Prisma.LabOrderUncheckedUpdateManyInput> = z.object({
  Id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  OrderNumber: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  AccessionNumber: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  OrderingProviderId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  TreatingProviderId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  PatientId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  PatientMRN: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  PatientMobile: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  PatientEmail: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  OrganizationId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  OrderDate: z.union([ z.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  OrderNotes: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  CreatedAt: z.union([ z.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  UpdatedAt: z.union([ z.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const LabOrderAttachmentCreateInputSchema: z.ZodType<Prisma.LabOrderAttachmentCreateInput> = z.object({
  Id: z.string().optional(),
  CreatedAt: z.date().optional().nullable(),
  UpdatedAt: z.date().optional().nullable(),
  LabOrder: z.lazy(() => LabOrderCreateNestedOneWithoutLabOrderAttachmentInputSchema).optional(),
  Attachment: z.lazy(() => AttachmentCreateNestedOneWithoutLabOrderAttachmentInputSchema).optional()
}).strict();

export const LabOrderAttachmentUncheckedCreateInputSchema: z.ZodType<Prisma.LabOrderAttachmentUncheckedCreateInput> = z.object({
  Id: z.string().optional(),
  LabOrderId: z.string().optional().nullable(),
  AttachmentId: z.string().optional().nullable(),
  CreatedAt: z.date().optional().nullable(),
  UpdatedAt: z.date().optional().nullable()
}).strict();

export const LabOrderAttachmentUpdateInputSchema: z.ZodType<Prisma.LabOrderAttachmentUpdateInput> = z.object({
  Id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  CreatedAt: z.union([ z.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  UpdatedAt: z.union([ z.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  LabOrder: z.lazy(() => LabOrderUpdateOneWithoutLabOrderAttachmentNestedInputSchema).optional(),
  Attachment: z.lazy(() => AttachmentUpdateOneWithoutLabOrderAttachmentNestedInputSchema).optional()
}).strict();

export const LabOrderAttachmentUncheckedUpdateInputSchema: z.ZodType<Prisma.LabOrderAttachmentUncheckedUpdateInput> = z.object({
  Id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  LabOrderId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  AttachmentId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  CreatedAt: z.union([ z.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  UpdatedAt: z.union([ z.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const LabOrderAttachmentCreateManyInputSchema: z.ZodType<Prisma.LabOrderAttachmentCreateManyInput> = z.object({
  Id: z.string().optional(),
  LabOrderId: z.string().optional().nullable(),
  AttachmentId: z.string().optional().nullable(),
  CreatedAt: z.date().optional().nullable(),
  UpdatedAt: z.date().optional().nullable()
}).strict();

export const LabOrderAttachmentUpdateManyMutationInputSchema: z.ZodType<Prisma.LabOrderAttachmentUpdateManyMutationInput> = z.object({
  Id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  CreatedAt: z.union([ z.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  UpdatedAt: z.union([ z.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const LabOrderAttachmentUncheckedUpdateManyInputSchema: z.ZodType<Prisma.LabOrderAttachmentUncheckedUpdateManyInput> = z.object({
  Id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  LabOrderId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  AttachmentId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  CreatedAt: z.union([ z.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  UpdatedAt: z.union([ z.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const LabOrderBillingCreateInputSchema: z.ZodType<Prisma.LabOrderBillingCreateInput> = z.object({
  Id: z.string().optional(),
  BillToId: z.string().optional().nullable(),
  HealthPalnId: z.string().optional().nullable(),
  PatientStatus: z.string().optional().nullable(),
  SponoseredTestCouponCode: z.string().optional().nullable(),
  CreatedAt: z.date().optional().nullable(),
  UpdatedAt: z.date().optional().nullable(),
  LabOrder: z.lazy(() => LabOrderCreateNestedOneWithoutLabOrderBillingInputSchema).optional()
}).strict();

export const LabOrderBillingUncheckedCreateInputSchema: z.ZodType<Prisma.LabOrderBillingUncheckedCreateInput> = z.object({
  Id: z.string().optional(),
  LabOrderId: z.string().optional().nullable(),
  BillToId: z.string().optional().nullable(),
  HealthPalnId: z.string().optional().nullable(),
  PatientStatus: z.string().optional().nullable(),
  SponoseredTestCouponCode: z.string().optional().nullable(),
  CreatedAt: z.date().optional().nullable(),
  UpdatedAt: z.date().optional().nullable()
}).strict();

export const LabOrderBillingUpdateInputSchema: z.ZodType<Prisma.LabOrderBillingUpdateInput> = z.object({
  Id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  BillToId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  HealthPalnId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  PatientStatus: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  SponoseredTestCouponCode: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  CreatedAt: z.union([ z.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  UpdatedAt: z.union([ z.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  LabOrder: z.lazy(() => LabOrderUpdateOneWithoutLabOrderBillingNestedInputSchema).optional()
}).strict();

export const LabOrderBillingUncheckedUpdateInputSchema: z.ZodType<Prisma.LabOrderBillingUncheckedUpdateInput> = z.object({
  Id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  LabOrderId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  BillToId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  HealthPalnId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  PatientStatus: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  SponoseredTestCouponCode: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  CreatedAt: z.union([ z.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  UpdatedAt: z.union([ z.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const LabOrderBillingCreateManyInputSchema: z.ZodType<Prisma.LabOrderBillingCreateManyInput> = z.object({
  Id: z.string().optional(),
  LabOrderId: z.string().optional().nullable(),
  BillToId: z.string().optional().nullable(),
  HealthPalnId: z.string().optional().nullable(),
  PatientStatus: z.string().optional().nullable(),
  SponoseredTestCouponCode: z.string().optional().nullable(),
  CreatedAt: z.date().optional().nullable(),
  UpdatedAt: z.date().optional().nullable()
}).strict();

export const LabOrderBillingUpdateManyMutationInputSchema: z.ZodType<Prisma.LabOrderBillingUpdateManyMutationInput> = z.object({
  Id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  BillToId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  HealthPalnId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  PatientStatus: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  SponoseredTestCouponCode: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  CreatedAt: z.union([ z.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  UpdatedAt: z.union([ z.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const LabOrderBillingUncheckedUpdateManyInputSchema: z.ZodType<Prisma.LabOrderBillingUncheckedUpdateManyInput> = z.object({
  Id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  LabOrderId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  BillToId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  HealthPalnId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  PatientStatus: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  SponoseredTestCouponCode: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  CreatedAt: z.union([ z.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  UpdatedAt: z.union([ z.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const LabOrderIcdCreateInputSchema: z.ZodType<Prisma.LabOrderIcdCreateInput> = z.object({
  Id: z.string().optional(),
  CreatedAt: z.date().optional().nullable(),
  UpdatedAt: z.date().optional().nullable(),
  LabOrder: z.lazy(() => LabOrderCreateNestedOneWithoutLabOrderIcdInputSchema).optional(),
  ICD: z.lazy(() => ICDCreateNestedOneWithoutLabOrderIcdInputSchema).optional()
}).strict();

export const LabOrderIcdUncheckedCreateInputSchema: z.ZodType<Prisma.LabOrderIcdUncheckedCreateInput> = z.object({
  Id: z.string().optional(),
  LabOrderId: z.string().optional().nullable(),
  ICDId: z.string().optional().nullable(),
  CreatedAt: z.date().optional().nullable(),
  UpdatedAt: z.date().optional().nullable()
}).strict();

export const LabOrderIcdUpdateInputSchema: z.ZodType<Prisma.LabOrderIcdUpdateInput> = z.object({
  Id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  CreatedAt: z.union([ z.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  UpdatedAt: z.union([ z.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  LabOrder: z.lazy(() => LabOrderUpdateOneWithoutLabOrderIcdNestedInputSchema).optional(),
  ICD: z.lazy(() => ICDUpdateOneWithoutLabOrderIcdNestedInputSchema).optional()
}).strict();

export const LabOrderIcdUncheckedUpdateInputSchema: z.ZodType<Prisma.LabOrderIcdUncheckedUpdateInput> = z.object({
  Id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  LabOrderId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  ICDId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  CreatedAt: z.union([ z.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  UpdatedAt: z.union([ z.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const LabOrderIcdCreateManyInputSchema: z.ZodType<Prisma.LabOrderIcdCreateManyInput> = z.object({
  Id: z.string().optional(),
  LabOrderId: z.string().optional().nullable(),
  ICDId: z.string().optional().nullable(),
  CreatedAt: z.date().optional().nullable(),
  UpdatedAt: z.date().optional().nullable()
}).strict();

export const LabOrderIcdUpdateManyMutationInputSchema: z.ZodType<Prisma.LabOrderIcdUpdateManyMutationInput> = z.object({
  Id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  CreatedAt: z.union([ z.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  UpdatedAt: z.union([ z.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const LabOrderIcdUncheckedUpdateManyInputSchema: z.ZodType<Prisma.LabOrderIcdUncheckedUpdateManyInput> = z.object({
  Id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  LabOrderId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  ICDId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  CreatedAt: z.union([ z.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  UpdatedAt: z.union([ z.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const LabOrderSpecimenCreateInputSchema: z.ZodType<Prisma.LabOrderSpecimenCreateInput> = z.object({
  Id: z.string().optional(),
  SpecimenType: z.string().optional().nullable(),
  SpecimenCount: z.string().optional().nullable(),
  CollectedDate: z.date().optional().nullable(),
  CollectedTime: z.string().optional().nullable(),
  SpecimenID: z.string().optional().nullable(),
  BodySite: z.string().optional().nullable(),
  TumorType: z.string().optional().nullable(),
  Fixative: z.string().optional().nullable(),
  FixativeDuration: z.string().optional().nullable(),
  ColdIschemicTime: z.string().optional().nullable(),
  CreatedAt: z.date().optional().nullable(),
  UpdatedAt: z.date().optional().nullable(),
  LabOrder: z.lazy(() => LabOrderCreateNestedOneWithoutLabOrderSpecimenInputSchema).optional()
}).strict();

export const LabOrderSpecimenUncheckedCreateInputSchema: z.ZodType<Prisma.LabOrderSpecimenUncheckedCreateInput> = z.object({
  Id: z.string().optional(),
  LabOrderId: z.string().optional().nullable(),
  SpecimenType: z.string().optional().nullable(),
  SpecimenCount: z.string().optional().nullable(),
  CollectedDate: z.date().optional().nullable(),
  CollectedTime: z.string().optional().nullable(),
  SpecimenID: z.string().optional().nullable(),
  BodySite: z.string().optional().nullable(),
  TumorType: z.string().optional().nullable(),
  Fixative: z.string().optional().nullable(),
  FixativeDuration: z.string().optional().nullable(),
  ColdIschemicTime: z.string().optional().nullable(),
  CreatedAt: z.date().optional().nullable(),
  UpdatedAt: z.date().optional().nullable()
}).strict();

export const LabOrderSpecimenUpdateInputSchema: z.ZodType<Prisma.LabOrderSpecimenUpdateInput> = z.object({
  Id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  SpecimenType: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  SpecimenCount: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  CollectedDate: z.union([ z.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  CollectedTime: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  SpecimenID: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  BodySite: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  TumorType: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Fixative: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  FixativeDuration: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  ColdIschemicTime: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  CreatedAt: z.union([ z.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  UpdatedAt: z.union([ z.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  LabOrder: z.lazy(() => LabOrderUpdateOneWithoutLabOrderSpecimenNestedInputSchema).optional()
}).strict();

export const LabOrderSpecimenUncheckedUpdateInputSchema: z.ZodType<Prisma.LabOrderSpecimenUncheckedUpdateInput> = z.object({
  Id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  LabOrderId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  SpecimenType: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  SpecimenCount: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  CollectedDate: z.union([ z.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  CollectedTime: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  SpecimenID: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  BodySite: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  TumorType: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Fixative: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  FixativeDuration: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  ColdIschemicTime: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  CreatedAt: z.union([ z.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  UpdatedAt: z.union([ z.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const LabOrderSpecimenCreateManyInputSchema: z.ZodType<Prisma.LabOrderSpecimenCreateManyInput> = z.object({
  Id: z.string().optional(),
  LabOrderId: z.string().optional().nullable(),
  SpecimenType: z.string().optional().nullable(),
  SpecimenCount: z.string().optional().nullable(),
  CollectedDate: z.date().optional().nullable(),
  CollectedTime: z.string().optional().nullable(),
  SpecimenID: z.string().optional().nullable(),
  BodySite: z.string().optional().nullable(),
  TumorType: z.string().optional().nullable(),
  Fixative: z.string().optional().nullable(),
  FixativeDuration: z.string().optional().nullable(),
  ColdIschemicTime: z.string().optional().nullable(),
  CreatedAt: z.date().optional().nullable(),
  UpdatedAt: z.date().optional().nullable()
}).strict();

export const LabOrderSpecimenUpdateManyMutationInputSchema: z.ZodType<Prisma.LabOrderSpecimenUpdateManyMutationInput> = z.object({
  Id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  SpecimenType: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  SpecimenCount: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  CollectedDate: z.union([ z.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  CollectedTime: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  SpecimenID: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  BodySite: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  TumorType: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Fixative: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  FixativeDuration: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  ColdIschemicTime: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  CreatedAt: z.union([ z.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  UpdatedAt: z.union([ z.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const LabOrderSpecimenUncheckedUpdateManyInputSchema: z.ZodType<Prisma.LabOrderSpecimenUncheckedUpdateManyInput> = z.object({
  Id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  LabOrderId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  SpecimenType: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  SpecimenCount: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  CollectedDate: z.union([ z.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  CollectedTime: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  SpecimenID: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  BodySite: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  TumorType: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Fixative: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  FixativeDuration: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  ColdIschemicTime: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  CreatedAt: z.union([ z.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  UpdatedAt: z.union([ z.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const LabOrderSponsoredTestConsentCreateInputSchema: z.ZodType<Prisma.LabOrderSponsoredTestConsentCreateInput> = z.object({
  Id: z.string().optional(),
  ProviderName: z.string().optional().nullable(),
  ProviderNPI: z.string().optional().nullable(),
  ConsentAt: z.date().optional().nullable(),
  CreatedAt: z.date().optional().nullable(),
  UpdatedAt: z.date().optional().nullable(),
  SponsoredTest: z.lazy(() => SponsoredTestCreateNestedOneWithoutLabOrderSponsoredTestConsentInputSchema).optional(),
  LabOrder: z.lazy(() => LabOrderCreateNestedOneWithoutLabOrderSponsoredTestConsentInputSchema).optional()
}).strict();

export const LabOrderSponsoredTestConsentUncheckedCreateInputSchema: z.ZodType<Prisma.LabOrderSponsoredTestConsentUncheckedCreateInput> = z.object({
  Id: z.string().optional(),
  LabOrderId: z.string().optional().nullable(),
  SponsoredCasandraTestId: z.string().optional().nullable(),
  ProviderName: z.string().optional().nullable(),
  ProviderNPI: z.string().optional().nullable(),
  ConsentAt: z.date().optional().nullable(),
  CreatedAt: z.date().optional().nullable(),
  UpdatedAt: z.date().optional().nullable()
}).strict();

export const LabOrderSponsoredTestConsentUpdateInputSchema: z.ZodType<Prisma.LabOrderSponsoredTestConsentUpdateInput> = z.object({
  Id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  ProviderName: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  ProviderNPI: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  ConsentAt: z.union([ z.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  CreatedAt: z.union([ z.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  UpdatedAt: z.union([ z.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  SponsoredTest: z.lazy(() => SponsoredTestUpdateOneWithoutLabOrderSponsoredTestConsentNestedInputSchema).optional(),
  LabOrder: z.lazy(() => LabOrderUpdateOneWithoutLabOrderSponsoredTestConsentNestedInputSchema).optional()
}).strict();

export const LabOrderSponsoredTestConsentUncheckedUpdateInputSchema: z.ZodType<Prisma.LabOrderSponsoredTestConsentUncheckedUpdateInput> = z.object({
  Id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  LabOrderId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  SponsoredCasandraTestId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  ProviderName: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  ProviderNPI: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  ConsentAt: z.union([ z.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  CreatedAt: z.union([ z.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  UpdatedAt: z.union([ z.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const LabOrderSponsoredTestConsentCreateManyInputSchema: z.ZodType<Prisma.LabOrderSponsoredTestConsentCreateManyInput> = z.object({
  Id: z.string().optional(),
  LabOrderId: z.string().optional().nullable(),
  SponsoredCasandraTestId: z.string().optional().nullable(),
  ProviderName: z.string().optional().nullable(),
  ProviderNPI: z.string().optional().nullable(),
  ConsentAt: z.date().optional().nullable(),
  CreatedAt: z.date().optional().nullable(),
  UpdatedAt: z.date().optional().nullable()
}).strict();

export const LabOrderSponsoredTestConsentUpdateManyMutationInputSchema: z.ZodType<Prisma.LabOrderSponsoredTestConsentUpdateManyMutationInput> = z.object({
  Id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  ProviderName: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  ProviderNPI: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  ConsentAt: z.union([ z.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  CreatedAt: z.union([ z.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  UpdatedAt: z.union([ z.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const LabOrderSponsoredTestConsentUncheckedUpdateManyInputSchema: z.ZodType<Prisma.LabOrderSponsoredTestConsentUncheckedUpdateManyInput> = z.object({
  Id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  LabOrderId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  SponsoredCasandraTestId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  ProviderName: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  ProviderNPI: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  ConsentAt: z.union([ z.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  CreatedAt: z.union([ z.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  UpdatedAt: z.union([ z.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const LabOrderStatusCreateInputSchema: z.ZodType<Prisma.LabOrderStatusCreateInput> = z.object({
  Id: z.string().optional(),
  Status: z.string().optional().nullable(),
  StatusDate: z.date().optional().nullable(),
  CreatedAt: z.date().optional().nullable(),
  UpdatedAt: z.date().optional().nullable(),
  LabOrder: z.lazy(() => LabOrderCreateNestedOneWithoutLabOrderStatusInputSchema).optional()
}).strict();

export const LabOrderStatusUncheckedCreateInputSchema: z.ZodType<Prisma.LabOrderStatusUncheckedCreateInput> = z.object({
  Id: z.string().optional(),
  LabOrderId: z.string().optional().nullable(),
  Status: z.string().optional().nullable(),
  StatusDate: z.date().optional().nullable(),
  CreatedAt: z.date().optional().nullable(),
  UpdatedAt: z.date().optional().nullable()
}).strict();

export const LabOrderStatusUpdateInputSchema: z.ZodType<Prisma.LabOrderStatusUpdateInput> = z.object({
  Id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  Status: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  StatusDate: z.union([ z.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  CreatedAt: z.union([ z.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  UpdatedAt: z.union([ z.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  LabOrder: z.lazy(() => LabOrderUpdateOneWithoutLabOrderStatusNestedInputSchema).optional()
}).strict();

export const LabOrderStatusUncheckedUpdateInputSchema: z.ZodType<Prisma.LabOrderStatusUncheckedUpdateInput> = z.object({
  Id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  LabOrderId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Status: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  StatusDate: z.union([ z.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  CreatedAt: z.union([ z.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  UpdatedAt: z.union([ z.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const LabOrderStatusCreateManyInputSchema: z.ZodType<Prisma.LabOrderStatusCreateManyInput> = z.object({
  Id: z.string().optional(),
  LabOrderId: z.string().optional().nullable(),
  Status: z.string().optional().nullable(),
  StatusDate: z.date().optional().nullable(),
  CreatedAt: z.date().optional().nullable(),
  UpdatedAt: z.date().optional().nullable()
}).strict();

export const LabOrderStatusUpdateManyMutationInputSchema: z.ZodType<Prisma.LabOrderStatusUpdateManyMutationInput> = z.object({
  Id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  Status: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  StatusDate: z.union([ z.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  CreatedAt: z.union([ z.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  UpdatedAt: z.union([ z.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const LabOrderStatusUncheckedUpdateManyInputSchema: z.ZodType<Prisma.LabOrderStatusUncheckedUpdateManyInput> = z.object({
  Id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  LabOrderId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Status: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  StatusDate: z.union([ z.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  CreatedAt: z.union([ z.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  UpdatedAt: z.union([ z.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const LabOrderTestCreateInputSchema: z.ZodType<Prisma.LabOrderTestCreateInput> = z.object({
  Id: z.string().optional(),
  CreatedAt: z.date().optional().nullable(),
  UpdatedAt: z.date().optional().nullable(),
  LabOrder: z.lazy(() => LabOrderCreateNestedOneWithoutLabOrderTestInputSchema).optional(),
  TestCatalog: z.lazy(() => TestCatalogCreateNestedOneWithoutLabOrderTestInputSchema).optional()
}).strict();

export const LabOrderTestUncheckedCreateInputSchema: z.ZodType<Prisma.LabOrderTestUncheckedCreateInput> = z.object({
  Id: z.string().optional(),
  LabOrderId: z.string().optional().nullable(),
  TestId: z.number().optional().nullable(),
  CreatedAt: z.date().optional().nullable(),
  UpdatedAt: z.date().optional().nullable()
}).strict();

export const LabOrderTestUpdateInputSchema: z.ZodType<Prisma.LabOrderTestUpdateInput> = z.object({
  Id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  CreatedAt: z.union([ z.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  UpdatedAt: z.union([ z.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  LabOrder: z.lazy(() => LabOrderUpdateOneWithoutLabOrderTestNestedInputSchema).optional(),
  TestCatalog: z.lazy(() => TestCatalogUpdateOneWithoutLabOrderTestNestedInputSchema).optional()
}).strict();

export const LabOrderTestUncheckedUpdateInputSchema: z.ZodType<Prisma.LabOrderTestUncheckedUpdateInput> = z.object({
  Id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  LabOrderId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  TestId: z.union([ z.number(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  CreatedAt: z.union([ z.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  UpdatedAt: z.union([ z.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const LabOrderTestCreateManyInputSchema: z.ZodType<Prisma.LabOrderTestCreateManyInput> = z.object({
  Id: z.string().optional(),
  LabOrderId: z.string().optional().nullable(),
  TestId: z.number().optional().nullable(),
  CreatedAt: z.date().optional().nullable(),
  UpdatedAt: z.date().optional().nullable()
}).strict();

export const LabOrderTestUpdateManyMutationInputSchema: z.ZodType<Prisma.LabOrderTestUpdateManyMutationInput> = z.object({
  Id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  CreatedAt: z.union([ z.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  UpdatedAt: z.union([ z.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const LabOrderTestUncheckedUpdateManyInputSchema: z.ZodType<Prisma.LabOrderTestUncheckedUpdateManyInput> = z.object({
  Id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  LabOrderId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  TestId: z.union([ z.number(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  CreatedAt: z.union([ z.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  UpdatedAt: z.union([ z.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const LoincComponentHierarchyCreateInputSchema: z.ZodType<Prisma.LoincComponentHierarchyCreateInput> = z.object({
  Id: z.bigint(),
  ParentId: z.bigint(),
  Level: z.number(),
  Code: z.string(),
  Sequence: z.string(),
  CodeText: z.string(),
  Component: z.string(),
  Property: z.string(),
  Timing: z.string(),
  Scale: z.string(),
  Method: z.string()
}).strict();

export const LoincComponentHierarchyUncheckedCreateInputSchema: z.ZodType<Prisma.LoincComponentHierarchyUncheckedCreateInput> = z.object({
  Id: z.bigint(),
  ParentId: z.bigint(),
  Level: z.number(),
  Code: z.string(),
  Sequence: z.string(),
  CodeText: z.string(),
  Component: z.string(),
  Property: z.string(),
  Timing: z.string(),
  Scale: z.string(),
  Method: z.string()
}).strict();

export const LoincComponentHierarchyUpdateInputSchema: z.ZodType<Prisma.LoincComponentHierarchyUpdateInput> = z.object({
  Id: z.union([ z.bigint(),z.lazy(() => BigIntFieldUpdateOperationsInputSchema) ]).optional(),
  ParentId: z.union([ z.bigint(),z.lazy(() => BigIntFieldUpdateOperationsInputSchema) ]).optional(),
  Level: z.union([ z.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  Code: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  Sequence: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  CodeText: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  Component: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  Property: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  Timing: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  Scale: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  Method: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const LoincComponentHierarchyUncheckedUpdateInputSchema: z.ZodType<Prisma.LoincComponentHierarchyUncheckedUpdateInput> = z.object({
  Id: z.union([ z.bigint(),z.lazy(() => BigIntFieldUpdateOperationsInputSchema) ]).optional(),
  ParentId: z.union([ z.bigint(),z.lazy(() => BigIntFieldUpdateOperationsInputSchema) ]).optional(),
  Level: z.union([ z.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  Code: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  Sequence: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  CodeText: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  Component: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  Property: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  Timing: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  Scale: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  Method: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const LoincComponentHierarchyCreateManyInputSchema: z.ZodType<Prisma.LoincComponentHierarchyCreateManyInput> = z.object({
  Id: z.bigint(),
  ParentId: z.bigint(),
  Level: z.number(),
  Code: z.string(),
  Sequence: z.string(),
  CodeText: z.string(),
  Component: z.string(),
  Property: z.string(),
  Timing: z.string(),
  Scale: z.string(),
  Method: z.string()
}).strict();

export const LoincComponentHierarchyUpdateManyMutationInputSchema: z.ZodType<Prisma.LoincComponentHierarchyUpdateManyMutationInput> = z.object({
  Id: z.union([ z.bigint(),z.lazy(() => BigIntFieldUpdateOperationsInputSchema) ]).optional(),
  ParentId: z.union([ z.bigint(),z.lazy(() => BigIntFieldUpdateOperationsInputSchema) ]).optional(),
  Level: z.union([ z.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  Code: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  Sequence: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  CodeText: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  Component: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  Property: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  Timing: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  Scale: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  Method: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const LoincComponentHierarchyUncheckedUpdateManyInputSchema: z.ZodType<Prisma.LoincComponentHierarchyUncheckedUpdateManyInput> = z.object({
  Id: z.union([ z.bigint(),z.lazy(() => BigIntFieldUpdateOperationsInputSchema) ]).optional(),
  ParentId: z.union([ z.bigint(),z.lazy(() => BigIntFieldUpdateOperationsInputSchema) ]).optional(),
  Level: z.union([ z.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  Code: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  Sequence: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  CodeText: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  Component: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  Property: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  Timing: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  Scale: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  Method: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const LoincPanelHierarchyCreateInputSchema: z.ZodType<Prisma.LoincPanelHierarchyCreateInput> = z.object({
  Id: z.number(),
  ParentId: z.number(),
  Level: z.number(),
  Code: z.string(),
  Sequence: z.string(),
  CodeText: z.string(),
  Component: z.string(),
  Property: z.string(),
  Timing: z.string(),
  Scale: z.string(),
  Method: z.string()
}).strict();

export const LoincPanelHierarchyUncheckedCreateInputSchema: z.ZodType<Prisma.LoincPanelHierarchyUncheckedCreateInput> = z.object({
  Id: z.number(),
  ParentId: z.number(),
  Level: z.number(),
  Code: z.string(),
  Sequence: z.string(),
  CodeText: z.string(),
  Component: z.string(),
  Property: z.string(),
  Timing: z.string(),
  Scale: z.string(),
  Method: z.string()
}).strict();

export const LoincPanelHierarchyUpdateInputSchema: z.ZodType<Prisma.LoincPanelHierarchyUpdateInput> = z.object({
  Id: z.union([ z.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  ParentId: z.union([ z.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  Level: z.union([ z.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  Code: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  Sequence: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  CodeText: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  Component: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  Property: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  Timing: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  Scale: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  Method: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const LoincPanelHierarchyUncheckedUpdateInputSchema: z.ZodType<Prisma.LoincPanelHierarchyUncheckedUpdateInput> = z.object({
  Id: z.union([ z.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  ParentId: z.union([ z.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  Level: z.union([ z.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  Code: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  Sequence: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  CodeText: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  Component: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  Property: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  Timing: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  Scale: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  Method: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const LoincPanelHierarchyCreateManyInputSchema: z.ZodType<Prisma.LoincPanelHierarchyCreateManyInput> = z.object({
  Id: z.number(),
  ParentId: z.number(),
  Level: z.number(),
  Code: z.string(),
  Sequence: z.string(),
  CodeText: z.string(),
  Component: z.string(),
  Property: z.string(),
  Timing: z.string(),
  Scale: z.string(),
  Method: z.string()
}).strict();

export const LoincPanelHierarchyUpdateManyMutationInputSchema: z.ZodType<Prisma.LoincPanelHierarchyUpdateManyMutationInput> = z.object({
  Id: z.union([ z.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  ParentId: z.union([ z.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  Level: z.union([ z.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  Code: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  Sequence: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  CodeText: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  Component: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  Property: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  Timing: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  Scale: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  Method: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const LoincPanelHierarchyUncheckedUpdateManyInputSchema: z.ZodType<Prisma.LoincPanelHierarchyUncheckedUpdateManyInput> = z.object({
  Id: z.union([ z.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  ParentId: z.union([ z.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  Level: z.union([ z.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  Code: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  Sequence: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  CodeText: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  Component: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  Property: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  Timing: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  Scale: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  Method: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const LoincUniveralLabOrdersCreateInputSchema: z.ZodType<Prisma.LoincUniveralLabOrdersCreateInput> = z.object({
  Loinc_Num: z.string(),
  Long_Common_Name: z.string().optional().nullable(),
  ORDER_OBS: z.string().optional().nullable()
}).strict();

export const LoincUniveralLabOrdersUncheckedCreateInputSchema: z.ZodType<Prisma.LoincUniveralLabOrdersUncheckedCreateInput> = z.object({
  Loinc_Num: z.string(),
  Long_Common_Name: z.string().optional().nullable(),
  ORDER_OBS: z.string().optional().nullable()
}).strict();

export const LoincUniveralLabOrdersUpdateInputSchema: z.ZodType<Prisma.LoincUniveralLabOrdersUpdateInput> = z.object({
  Loinc_Num: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  Long_Common_Name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  ORDER_OBS: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const LoincUniveralLabOrdersUncheckedUpdateInputSchema: z.ZodType<Prisma.LoincUniveralLabOrdersUncheckedUpdateInput> = z.object({
  Loinc_Num: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  Long_Common_Name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  ORDER_OBS: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const LoincUniveralLabOrdersCreateManyInputSchema: z.ZodType<Prisma.LoincUniveralLabOrdersCreateManyInput> = z.object({
  Loinc_Num: z.string(),
  Long_Common_Name: z.string().optional().nullable(),
  ORDER_OBS: z.string().optional().nullable()
}).strict();

export const LoincUniveralLabOrdersUpdateManyMutationInputSchema: z.ZodType<Prisma.LoincUniveralLabOrdersUpdateManyMutationInput> = z.object({
  Loinc_Num: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  Long_Common_Name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  ORDER_OBS: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const LoincUniveralLabOrdersUncheckedUpdateManyInputSchema: z.ZodType<Prisma.LoincUniveralLabOrdersUncheckedUpdateManyInput> = z.object({
  Loinc_Num: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  Long_Common_Name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  ORDER_OBS: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const OrganizationCreateInputSchema: z.ZodType<Prisma.OrganizationCreateInput> = z.object({
  Id: z.string(),
  href: z.string().optional().nullable(),
  Level: z.number().optional().nullable(),
  ParentOrgName: z.string().optional().nullable(),
  OrgName: z.string().optional().nullable(),
  OrgType: z.string().optional().nullable(),
  OrgSpecialty: z.string().optional().nullable(),
  OrgAddress: z.string().optional().nullable(),
  OrgCity: z.string().optional().nullable(),
  OrgState: z.string().optional().nullable(),
  OrgZip: z.string().optional().nullable(),
  LabOrder: z.lazy(() => LabOrderCreateNestedManyWithoutOrganizationInputSchema).optional(),
  Organization: z.lazy(() => OrganizationCreateNestedOneWithoutChildOrganizationInputSchema).optional(),
  ChildOrganization: z.lazy(() => OrganizationCreateNestedManyWithoutOrganizationInputSchema).optional(),
  OrganizationFavoriteTest: z.lazy(() => OrganizationFavoriteTestCreateNestedManyWithoutOrganizationInputSchema).optional(),
  PatientOrganization: z.lazy(() => PatientOrganizationCreateNestedManyWithoutOrganizationInputSchema).optional(),
  ProviderOrganization: z.lazy(() => ProviderOrganizationCreateNestedManyWithoutOrganizationInputSchema).optional()
}).strict();

export const OrganizationUncheckedCreateInputSchema: z.ZodType<Prisma.OrganizationUncheckedCreateInput> = z.object({
  Id: z.string(),
  href: z.string().optional().nullable(),
  ParentId: z.string().optional().nullable(),
  Level: z.number().optional().nullable(),
  ParentOrgName: z.string().optional().nullable(),
  OrgName: z.string().optional().nullable(),
  OrgType: z.string().optional().nullable(),
  OrgSpecialty: z.string().optional().nullable(),
  OrgAddress: z.string().optional().nullable(),
  OrgCity: z.string().optional().nullable(),
  OrgState: z.string().optional().nullable(),
  OrgZip: z.string().optional().nullable(),
  LabOrder: z.lazy(() => LabOrderUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  ChildOrganization: z.lazy(() => OrganizationUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  OrganizationFavoriteTest: z.lazy(() => OrganizationFavoriteTestUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  PatientOrganization: z.lazy(() => PatientOrganizationUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  ProviderOrganization: z.lazy(() => ProviderOrganizationUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional()
}).strict();

export const OrganizationUpdateInputSchema: z.ZodType<Prisma.OrganizationUpdateInput> = z.object({
  Id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  href: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Level: z.union([ z.number(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  ParentOrgName: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  OrgName: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  OrgType: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  OrgSpecialty: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  OrgAddress: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  OrgCity: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  OrgState: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  OrgZip: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  LabOrder: z.lazy(() => LabOrderUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  Organization: z.lazy(() => OrganizationUpdateOneWithoutChildOrganizationNestedInputSchema).optional(),
  ChildOrganization: z.lazy(() => OrganizationUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  OrganizationFavoriteTest: z.lazy(() => OrganizationFavoriteTestUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  PatientOrganization: z.lazy(() => PatientOrganizationUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  ProviderOrganization: z.lazy(() => ProviderOrganizationUpdateManyWithoutOrganizationNestedInputSchema).optional()
}).strict();

export const OrganizationUncheckedUpdateInputSchema: z.ZodType<Prisma.OrganizationUncheckedUpdateInput> = z.object({
  Id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  href: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  ParentId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Level: z.union([ z.number(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  ParentOrgName: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  OrgName: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  OrgType: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  OrgSpecialty: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  OrgAddress: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  OrgCity: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  OrgState: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  OrgZip: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  LabOrder: z.lazy(() => LabOrderUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  ChildOrganization: z.lazy(() => OrganizationUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  OrganizationFavoriteTest: z.lazy(() => OrganizationFavoriteTestUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  PatientOrganization: z.lazy(() => PatientOrganizationUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  ProviderOrganization: z.lazy(() => ProviderOrganizationUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional()
}).strict();

export const OrganizationCreateManyInputSchema: z.ZodType<Prisma.OrganizationCreateManyInput> = z.object({
  Id: z.string(),
  href: z.string().optional().nullable(),
  ParentId: z.string().optional().nullable(),
  Level: z.number().optional().nullable(),
  ParentOrgName: z.string().optional().nullable(),
  OrgName: z.string().optional().nullable(),
  OrgType: z.string().optional().nullable(),
  OrgSpecialty: z.string().optional().nullable(),
  OrgAddress: z.string().optional().nullable(),
  OrgCity: z.string().optional().nullable(),
  OrgState: z.string().optional().nullable(),
  OrgZip: z.string().optional().nullable()
}).strict();

export const OrganizationUpdateManyMutationInputSchema: z.ZodType<Prisma.OrganizationUpdateManyMutationInput> = z.object({
  Id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  href: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Level: z.union([ z.number(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  ParentOrgName: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  OrgName: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  OrgType: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  OrgSpecialty: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  OrgAddress: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  OrgCity: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  OrgState: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  OrgZip: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const OrganizationUncheckedUpdateManyInputSchema: z.ZodType<Prisma.OrganizationUncheckedUpdateManyInput> = z.object({
  Id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  href: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  ParentId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Level: z.union([ z.number(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  ParentOrgName: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  OrgName: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  OrgType: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  OrgSpecialty: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  OrgAddress: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  OrgCity: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  OrgState: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  OrgZip: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const OrganizationEndpointCreateInputSchema: z.ZodType<Prisma.OrganizationEndpointCreateInput> = z.object({
  Id: z.string().optional(),
  OrgName: z.string().optional().nullable(),
  EHRVendor: z.string().optional().nullable(),
  FHIRVersion: z.string().optional().nullable(),
  Endpoint: z.string().optional().nullable()
}).strict();

export const OrganizationEndpointUncheckedCreateInputSchema: z.ZodType<Prisma.OrganizationEndpointUncheckedCreateInput> = z.object({
  Id: z.string().optional(),
  OrgName: z.string().optional().nullable(),
  EHRVendor: z.string().optional().nullable(),
  FHIRVersion: z.string().optional().nullable(),
  Endpoint: z.string().optional().nullable()
}).strict();

export const OrganizationEndpointUpdateInputSchema: z.ZodType<Prisma.OrganizationEndpointUpdateInput> = z.object({
  Id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  OrgName: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  EHRVendor: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  FHIRVersion: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Endpoint: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const OrganizationEndpointUncheckedUpdateInputSchema: z.ZodType<Prisma.OrganizationEndpointUncheckedUpdateInput> = z.object({
  Id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  OrgName: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  EHRVendor: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  FHIRVersion: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Endpoint: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const OrganizationEndpointCreateManyInputSchema: z.ZodType<Prisma.OrganizationEndpointCreateManyInput> = z.object({
  Id: z.string().optional(),
  OrgName: z.string().optional().nullable(),
  EHRVendor: z.string().optional().nullable(),
  FHIRVersion: z.string().optional().nullable(),
  Endpoint: z.string().optional().nullable()
}).strict();

export const OrganizationEndpointUpdateManyMutationInputSchema: z.ZodType<Prisma.OrganizationEndpointUpdateManyMutationInput> = z.object({
  Id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  OrgName: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  EHRVendor: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  FHIRVersion: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Endpoint: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const OrganizationEndpointUncheckedUpdateManyInputSchema: z.ZodType<Prisma.OrganizationEndpointUncheckedUpdateManyInput> = z.object({
  Id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  OrgName: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  EHRVendor: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  FHIRVersion: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Endpoint: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const OrganizationFavoriteTestCreateInputSchema: z.ZodType<Prisma.OrganizationFavoriteTestCreateInput> = z.object({
  Id: z.string().optional(),
  ParentId: z.string().optional().nullable(),
  ParentName: z.string().optional().nullable(),
  Level: z.number().optional().nullable(),
  CreatedAt: z.date().optional().nullable(),
  UpdatedAt: z.date().optional().nullable(),
  Organization: z.lazy(() => OrganizationCreateNestedOneWithoutOrganizationFavoriteTestInputSchema).optional(),
  TestCatalog: z.lazy(() => TestCatalogCreateNestedOneWithoutOrganizationFavoriteTestInputSchema).optional()
}).strict();

export const OrganizationFavoriteTestUncheckedCreateInputSchema: z.ZodType<Prisma.OrganizationFavoriteTestUncheckedCreateInput> = z.object({
  Id: z.string().optional(),
  OrganizationId: z.string().optional().nullable(),
  ParentId: z.string().optional().nullable(),
  ParentName: z.string().optional().nullable(),
  Level: z.number().optional().nullable(),
  TestId: z.number().optional().nullable(),
  CreatedAt: z.date().optional().nullable(),
  UpdatedAt: z.date().optional().nullable()
}).strict();

export const OrganizationFavoriteTestUpdateInputSchema: z.ZodType<Prisma.OrganizationFavoriteTestUpdateInput> = z.object({
  Id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  ParentId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  ParentName: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Level: z.union([ z.number(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  CreatedAt: z.union([ z.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  UpdatedAt: z.union([ z.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Organization: z.lazy(() => OrganizationUpdateOneWithoutOrganizationFavoriteTestNestedInputSchema).optional(),
  TestCatalog: z.lazy(() => TestCatalogUpdateOneWithoutOrganizationFavoriteTestNestedInputSchema).optional()
}).strict();

export const OrganizationFavoriteTestUncheckedUpdateInputSchema: z.ZodType<Prisma.OrganizationFavoriteTestUncheckedUpdateInput> = z.object({
  Id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  OrganizationId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  ParentId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  ParentName: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Level: z.union([ z.number(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  TestId: z.union([ z.number(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  CreatedAt: z.union([ z.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  UpdatedAt: z.union([ z.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const OrganizationFavoriteTestCreateManyInputSchema: z.ZodType<Prisma.OrganizationFavoriteTestCreateManyInput> = z.object({
  Id: z.string().optional(),
  OrganizationId: z.string().optional().nullable(),
  ParentId: z.string().optional().nullable(),
  ParentName: z.string().optional().nullable(),
  Level: z.number().optional().nullable(),
  TestId: z.number().optional().nullable(),
  CreatedAt: z.date().optional().nullable(),
  UpdatedAt: z.date().optional().nullable()
}).strict();

export const OrganizationFavoriteTestUpdateManyMutationInputSchema: z.ZodType<Prisma.OrganizationFavoriteTestUpdateManyMutationInput> = z.object({
  Id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  ParentId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  ParentName: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Level: z.union([ z.number(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  CreatedAt: z.union([ z.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  UpdatedAt: z.union([ z.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const OrganizationFavoriteTestUncheckedUpdateManyInputSchema: z.ZodType<Prisma.OrganizationFavoriteTestUncheckedUpdateManyInput> = z.object({
  Id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  OrganizationId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  ParentId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  ParentName: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Level: z.union([ z.number(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  TestId: z.union([ z.number(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  CreatedAt: z.union([ z.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  UpdatedAt: z.union([ z.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const PatientCreateInputSchema: z.ZodType<Prisma.PatientCreateInput> = z.object({
  Id: z.string().optional(),
  FirstName: z.string().optional().nullable(),
  LastName: z.string().optional().nullable(),
  DateOfBirth: z.date().optional().nullable(),
  Gender: z.string().optional().nullable(),
  Email: z.string().optional().nullable(),
  Mobile: z.string().optional().nullable(),
  CreatedAt: z.date().optional().nullable(),
  UpdatedAt: z.date().optional().nullable(),
  LabOrder: z.lazy(() => LabOrderCreateNestedManyWithoutPatientInputSchema).optional(),
  PatientOrganization: z.lazy(() => PatientOrganizationCreateNestedManyWithoutPatientInputSchema).optional()
}).strict();

export const PatientUncheckedCreateInputSchema: z.ZodType<Prisma.PatientUncheckedCreateInput> = z.object({
  Id: z.string().optional(),
  FirstName: z.string().optional().nullable(),
  LastName: z.string().optional().nullable(),
  DateOfBirth: z.date().optional().nullable(),
  Gender: z.string().optional().nullable(),
  Email: z.string().optional().nullable(),
  Mobile: z.string().optional().nullable(),
  CreatedAt: z.date().optional().nullable(),
  UpdatedAt: z.date().optional().nullable(),
  LabOrder: z.lazy(() => LabOrderUncheckedCreateNestedManyWithoutPatientInputSchema).optional(),
  PatientOrganization: z.lazy(() => PatientOrganizationUncheckedCreateNestedManyWithoutPatientInputSchema).optional()
}).strict();

export const PatientUpdateInputSchema: z.ZodType<Prisma.PatientUpdateInput> = z.object({
  Id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  FirstName: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  LastName: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  DateOfBirth: z.union([ z.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Gender: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Email: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Mobile: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  CreatedAt: z.union([ z.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  UpdatedAt: z.union([ z.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  LabOrder: z.lazy(() => LabOrderUpdateManyWithoutPatientNestedInputSchema).optional(),
  PatientOrganization: z.lazy(() => PatientOrganizationUpdateManyWithoutPatientNestedInputSchema).optional()
}).strict();

export const PatientUncheckedUpdateInputSchema: z.ZodType<Prisma.PatientUncheckedUpdateInput> = z.object({
  Id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  FirstName: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  LastName: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  DateOfBirth: z.union([ z.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Gender: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Email: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Mobile: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  CreatedAt: z.union([ z.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  UpdatedAt: z.union([ z.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  LabOrder: z.lazy(() => LabOrderUncheckedUpdateManyWithoutPatientNestedInputSchema).optional(),
  PatientOrganization: z.lazy(() => PatientOrganizationUncheckedUpdateManyWithoutPatientNestedInputSchema).optional()
}).strict();

export const PatientCreateManyInputSchema: z.ZodType<Prisma.PatientCreateManyInput> = z.object({
  Id: z.string().optional(),
  FirstName: z.string().optional().nullable(),
  LastName: z.string().optional().nullable(),
  DateOfBirth: z.date().optional().nullable(),
  Gender: z.string().optional().nullable(),
  Email: z.string().optional().nullable(),
  Mobile: z.string().optional().nullable(),
  CreatedAt: z.date().optional().nullable(),
  UpdatedAt: z.date().optional().nullable()
}).strict();

export const PatientUpdateManyMutationInputSchema: z.ZodType<Prisma.PatientUpdateManyMutationInput> = z.object({
  Id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  FirstName: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  LastName: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  DateOfBirth: z.union([ z.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Gender: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Email: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Mobile: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  CreatedAt: z.union([ z.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  UpdatedAt: z.union([ z.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const PatientUncheckedUpdateManyInputSchema: z.ZodType<Prisma.PatientUncheckedUpdateManyInput> = z.object({
  Id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  FirstName: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  LastName: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  DateOfBirth: z.union([ z.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Gender: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Email: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Mobile: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  CreatedAt: z.union([ z.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  UpdatedAt: z.union([ z.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const PatientOrganizationCreateInputSchema: z.ZodType<Prisma.PatientOrganizationCreateInput> = z.object({
  Id: z.string().optional(),
  MRN: z.string().optional().nullable(),
  Mobile: z.string().optional().nullable(),
  Email: z.string().optional().nullable(),
  Organization: z.lazy(() => OrganizationCreateNestedOneWithoutPatientOrganizationInputSchema),
  Patient: z.lazy(() => PatientCreateNestedOneWithoutPatientOrganizationInputSchema)
}).strict();

export const PatientOrganizationUncheckedCreateInputSchema: z.ZodType<Prisma.PatientOrganizationUncheckedCreateInput> = z.object({
  Id: z.string().optional(),
  PatientId: z.string(),
  OrganizationId: z.string(),
  MRN: z.string().optional().nullable(),
  Mobile: z.string().optional().nullable(),
  Email: z.string().optional().nullable()
}).strict();

export const PatientOrganizationUpdateInputSchema: z.ZodType<Prisma.PatientOrganizationUpdateInput> = z.object({
  Id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  MRN: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Mobile: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Email: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Organization: z.lazy(() => OrganizationUpdateOneRequiredWithoutPatientOrganizationNestedInputSchema).optional(),
  Patient: z.lazy(() => PatientUpdateOneRequiredWithoutPatientOrganizationNestedInputSchema).optional()
}).strict();

export const PatientOrganizationUncheckedUpdateInputSchema: z.ZodType<Prisma.PatientOrganizationUncheckedUpdateInput> = z.object({
  Id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  PatientId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  OrganizationId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  MRN: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Mobile: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Email: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const PatientOrganizationCreateManyInputSchema: z.ZodType<Prisma.PatientOrganizationCreateManyInput> = z.object({
  Id: z.string().optional(),
  PatientId: z.string(),
  OrganizationId: z.string(),
  MRN: z.string().optional().nullable(),
  Mobile: z.string().optional().nullable(),
  Email: z.string().optional().nullable()
}).strict();

export const PatientOrganizationUpdateManyMutationInputSchema: z.ZodType<Prisma.PatientOrganizationUpdateManyMutationInput> = z.object({
  Id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  MRN: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Mobile: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Email: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const PatientOrganizationUncheckedUpdateManyInputSchema: z.ZodType<Prisma.PatientOrganizationUncheckedUpdateManyInput> = z.object({
  Id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  PatientId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  OrganizationId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  MRN: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Mobile: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Email: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const PostCreateInputSchema: z.ZodType<Prisma.PostCreateInput> = z.object({
  name: z.string(),
  createdAt: z.date().optional(),
  updatedAt: z.date()
}).strict();

export const PostUncheckedCreateInputSchema: z.ZodType<Prisma.PostUncheckedCreateInput> = z.object({
  id: z.number().optional(),
  name: z.string(),
  createdAt: z.date().optional(),
  updatedAt: z.date()
}).strict();

export const PostUpdateInputSchema: z.ZodType<Prisma.PostUpdateInput> = z.object({
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const PostUncheckedUpdateInputSchema: z.ZodType<Prisma.PostUncheckedUpdateInput> = z.object({
  id: z.union([ z.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const PostCreateManyInputSchema: z.ZodType<Prisma.PostCreateManyInput> = z.object({
  id: z.number().optional(),
  name: z.string(),
  createdAt: z.date().optional(),
  updatedAt: z.date()
}).strict();

export const PostUpdateManyMutationInputSchema: z.ZodType<Prisma.PostUpdateManyMutationInput> = z.object({
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const PostUncheckedUpdateManyInputSchema: z.ZodType<Prisma.PostUncheckedUpdateManyInput> = z.object({
  id: z.union([ z.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const ProviderCreateInputSchema: z.ZodType<Prisma.ProviderCreateInput> = z.object({
  Id: z.string().optional(),
  href: z.string().optional().nullable(),
  NPI: z.string().optional().nullable(),
  Name: z.string().optional().nullable(),
  Email: z.string().optional().nullable(),
  Credentials: z.string().optional().nullable(),
  Specialty: z.string().optional().nullable(),
  Aboutme: z.string().optional().nullable(),
  Gender: z.string().optional().nullable(),
  ProviderType: z.string().optional().nullable(),
  Affiliation: z.string().optional().nullable(),
  ProceduresAndResearch: z.string().optional().nullable(),
  SpecialInterests: z.string().optional().nullable(),
  OrderingProviderLabOrder: z.lazy(() => LabOrderCreateNestedManyWithoutOrderingProviderInputSchema).optional(),
  TreatingProviderLabOrder: z.lazy(() => LabOrderCreateNestedManyWithoutTreatingProviderInputSchema).optional(),
  UserAttribute: z.lazy(() => UserAttributeCreateNestedOneWithoutProviderInputSchema).optional(),
  ProviderEducation: z.lazy(() => ProviderEducationCreateNestedManyWithoutProviderInputSchema).optional(),
  ProviderFavoriteTest: z.lazy(() => ProviderFavoriteTestCreateNestedManyWithoutProviderInputSchema).optional(),
  ProviderOrganization: z.lazy(() => ProviderOrganizationCreateNestedManyWithoutProviderInputSchema).optional()
}).strict();

export const ProviderUncheckedCreateInputSchema: z.ZodType<Prisma.ProviderUncheckedCreateInput> = z.object({
  Id: z.string().optional(),
  href: z.string().optional().nullable(),
  NPI: z.string().optional().nullable(),
  Name: z.string().optional().nullable(),
  Email: z.string().optional().nullable(),
  Credentials: z.string().optional().nullable(),
  Specialty: z.string().optional().nullable(),
  Aboutme: z.string().optional().nullable(),
  Gender: z.string().optional().nullable(),
  ProviderType: z.string().optional().nullable(),
  Affiliation: z.string().optional().nullable(),
  ProceduresAndResearch: z.string().optional().nullable(),
  SpecialInterests: z.string().optional().nullable(),
  UserAttributeId: z.string().optional().nullable(),
  OrderingProviderLabOrder: z.lazy(() => LabOrderUncheckedCreateNestedManyWithoutOrderingProviderInputSchema).optional(),
  TreatingProviderLabOrder: z.lazy(() => LabOrderUncheckedCreateNestedManyWithoutTreatingProviderInputSchema).optional(),
  ProviderEducation: z.lazy(() => ProviderEducationUncheckedCreateNestedManyWithoutProviderInputSchema).optional(),
  ProviderFavoriteTest: z.lazy(() => ProviderFavoriteTestUncheckedCreateNestedManyWithoutProviderInputSchema).optional(),
  ProviderOrganization: z.lazy(() => ProviderOrganizationUncheckedCreateNestedManyWithoutProviderInputSchema).optional()
}).strict();

export const ProviderUpdateInputSchema: z.ZodType<Prisma.ProviderUpdateInput> = z.object({
  Id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  href: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  NPI: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Email: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Credentials: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Specialty: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Aboutme: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Gender: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  ProviderType: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Affiliation: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  ProceduresAndResearch: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  SpecialInterests: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  OrderingProviderLabOrder: z.lazy(() => LabOrderUpdateManyWithoutOrderingProviderNestedInputSchema).optional(),
  TreatingProviderLabOrder: z.lazy(() => LabOrderUpdateManyWithoutTreatingProviderNestedInputSchema).optional(),
  UserAttribute: z.lazy(() => UserAttributeUpdateOneWithoutProviderNestedInputSchema).optional(),
  ProviderEducation: z.lazy(() => ProviderEducationUpdateManyWithoutProviderNestedInputSchema).optional(),
  ProviderFavoriteTest: z.lazy(() => ProviderFavoriteTestUpdateManyWithoutProviderNestedInputSchema).optional(),
  ProviderOrganization: z.lazy(() => ProviderOrganizationUpdateManyWithoutProviderNestedInputSchema).optional()
}).strict();

export const ProviderUncheckedUpdateInputSchema: z.ZodType<Prisma.ProviderUncheckedUpdateInput> = z.object({
  Id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  href: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  NPI: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Email: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Credentials: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Specialty: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Aboutme: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Gender: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  ProviderType: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Affiliation: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  ProceduresAndResearch: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  SpecialInterests: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  UserAttributeId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  OrderingProviderLabOrder: z.lazy(() => LabOrderUncheckedUpdateManyWithoutOrderingProviderNestedInputSchema).optional(),
  TreatingProviderLabOrder: z.lazy(() => LabOrderUncheckedUpdateManyWithoutTreatingProviderNestedInputSchema).optional(),
  ProviderEducation: z.lazy(() => ProviderEducationUncheckedUpdateManyWithoutProviderNestedInputSchema).optional(),
  ProviderFavoriteTest: z.lazy(() => ProviderFavoriteTestUncheckedUpdateManyWithoutProviderNestedInputSchema).optional(),
  ProviderOrganization: z.lazy(() => ProviderOrganizationUncheckedUpdateManyWithoutProviderNestedInputSchema).optional()
}).strict();

export const ProviderCreateManyInputSchema: z.ZodType<Prisma.ProviderCreateManyInput> = z.object({
  Id: z.string().optional(),
  href: z.string().optional().nullable(),
  NPI: z.string().optional().nullable(),
  Name: z.string().optional().nullable(),
  Email: z.string().optional().nullable(),
  Credentials: z.string().optional().nullable(),
  Specialty: z.string().optional().nullable(),
  Aboutme: z.string().optional().nullable(),
  Gender: z.string().optional().nullable(),
  ProviderType: z.string().optional().nullable(),
  Affiliation: z.string().optional().nullable(),
  ProceduresAndResearch: z.string().optional().nullable(),
  SpecialInterests: z.string().optional().nullable(),
  UserAttributeId: z.string().optional().nullable()
}).strict();

export const ProviderUpdateManyMutationInputSchema: z.ZodType<Prisma.ProviderUpdateManyMutationInput> = z.object({
  Id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  href: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  NPI: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Email: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Credentials: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Specialty: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Aboutme: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Gender: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  ProviderType: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Affiliation: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  ProceduresAndResearch: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  SpecialInterests: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const ProviderUncheckedUpdateManyInputSchema: z.ZodType<Prisma.ProviderUncheckedUpdateManyInput> = z.object({
  Id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  href: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  NPI: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Email: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Credentials: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Specialty: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Aboutme: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Gender: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  ProviderType: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Affiliation: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  ProceduresAndResearch: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  SpecialInterests: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  UserAttributeId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const ProviderEducationCreateInputSchema: z.ZodType<Prisma.ProviderEducationCreateInput> = z.object({
  Id: z.string().optional(),
  ProviderNPI: z.string().optional().nullable(),
  Name: z.string().optional().nullable(),
  EducationType: z.string().optional().nullable(),
  SchoolName: z.string().optional().nullable(),
  AreaOfEducation: z.string().optional().nullable(),
  Provider: z.lazy(() => ProviderCreateNestedOneWithoutProviderEducationInputSchema)
}).strict();

export const ProviderEducationUncheckedCreateInputSchema: z.ZodType<Prisma.ProviderEducationUncheckedCreateInput> = z.object({
  Id: z.string().optional(),
  ProviderId: z.string(),
  ProviderNPI: z.string().optional().nullable(),
  Name: z.string().optional().nullable(),
  EducationType: z.string().optional().nullable(),
  SchoolName: z.string().optional().nullable(),
  AreaOfEducation: z.string().optional().nullable()
}).strict();

export const ProviderEducationUpdateInputSchema: z.ZodType<Prisma.ProviderEducationUpdateInput> = z.object({
  Id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  ProviderNPI: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  EducationType: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  SchoolName: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  AreaOfEducation: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Provider: z.lazy(() => ProviderUpdateOneRequiredWithoutProviderEducationNestedInputSchema).optional()
}).strict();

export const ProviderEducationUncheckedUpdateInputSchema: z.ZodType<Prisma.ProviderEducationUncheckedUpdateInput> = z.object({
  Id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  ProviderId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  ProviderNPI: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  EducationType: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  SchoolName: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  AreaOfEducation: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const ProviderEducationCreateManyInputSchema: z.ZodType<Prisma.ProviderEducationCreateManyInput> = z.object({
  Id: z.string().optional(),
  ProviderId: z.string(),
  ProviderNPI: z.string().optional().nullable(),
  Name: z.string().optional().nullable(),
  EducationType: z.string().optional().nullable(),
  SchoolName: z.string().optional().nullable(),
  AreaOfEducation: z.string().optional().nullable()
}).strict();

export const ProviderEducationUpdateManyMutationInputSchema: z.ZodType<Prisma.ProviderEducationUpdateManyMutationInput> = z.object({
  Id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  ProviderNPI: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  EducationType: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  SchoolName: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  AreaOfEducation: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const ProviderEducationUncheckedUpdateManyInputSchema: z.ZodType<Prisma.ProviderEducationUncheckedUpdateManyInput> = z.object({
  Id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  ProviderId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  ProviderNPI: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  EducationType: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  SchoolName: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  AreaOfEducation: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const ProviderFavoriteTestCreateInputSchema: z.ZodType<Prisma.ProviderFavoriteTestCreateInput> = z.object({
  Id: z.string().optional(),
  ParentId: z.string().optional().nullable(),
  ParentName: z.string().optional().nullable(),
  Level: z.number().optional().nullable(),
  CreatedAt: z.date().optional().nullable(),
  UpdatedAt: z.date().optional().nullable(),
  Provider: z.lazy(() => ProviderCreateNestedOneWithoutProviderFavoriteTestInputSchema).optional(),
  TestCatalog: z.lazy(() => TestCatalogCreateNestedOneWithoutProviderFavoriteTestInputSchema).optional()
}).strict();

export const ProviderFavoriteTestUncheckedCreateInputSchema: z.ZodType<Prisma.ProviderFavoriteTestUncheckedCreateInput> = z.object({
  Id: z.string().optional(),
  ProviderId: z.string().optional().nullable(),
  ParentId: z.string().optional().nullable(),
  ParentName: z.string().optional().nullable(),
  Level: z.number().optional().nullable(),
  TestId: z.number().optional().nullable(),
  CreatedAt: z.date().optional().nullable(),
  UpdatedAt: z.date().optional().nullable()
}).strict();

export const ProviderFavoriteTestUpdateInputSchema: z.ZodType<Prisma.ProviderFavoriteTestUpdateInput> = z.object({
  Id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  ParentId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  ParentName: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Level: z.union([ z.number(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  CreatedAt: z.union([ z.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  UpdatedAt: z.union([ z.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Provider: z.lazy(() => ProviderUpdateOneWithoutProviderFavoriteTestNestedInputSchema).optional(),
  TestCatalog: z.lazy(() => TestCatalogUpdateOneWithoutProviderFavoriteTestNestedInputSchema).optional()
}).strict();

export const ProviderFavoriteTestUncheckedUpdateInputSchema: z.ZodType<Prisma.ProviderFavoriteTestUncheckedUpdateInput> = z.object({
  Id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  ProviderId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  ParentId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  ParentName: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Level: z.union([ z.number(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  TestId: z.union([ z.number(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  CreatedAt: z.union([ z.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  UpdatedAt: z.union([ z.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const ProviderFavoriteTestCreateManyInputSchema: z.ZodType<Prisma.ProviderFavoriteTestCreateManyInput> = z.object({
  Id: z.string().optional(),
  ProviderId: z.string().optional().nullable(),
  ParentId: z.string().optional().nullable(),
  ParentName: z.string().optional().nullable(),
  Level: z.number().optional().nullable(),
  TestId: z.number().optional().nullable(),
  CreatedAt: z.date().optional().nullable(),
  UpdatedAt: z.date().optional().nullable()
}).strict();

export const ProviderFavoriteTestUpdateManyMutationInputSchema: z.ZodType<Prisma.ProviderFavoriteTestUpdateManyMutationInput> = z.object({
  Id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  ParentId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  ParentName: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Level: z.union([ z.number(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  CreatedAt: z.union([ z.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  UpdatedAt: z.union([ z.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const ProviderFavoriteTestUncheckedUpdateManyInputSchema: z.ZodType<Prisma.ProviderFavoriteTestUncheckedUpdateManyInput> = z.object({
  Id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  ProviderId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  ParentId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  ParentName: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Level: z.union([ z.number(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  TestId: z.union([ z.number(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  CreatedAt: z.union([ z.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  UpdatedAt: z.union([ z.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const ProviderOrganizationCreateInputSchema: z.ZodType<Prisma.ProviderOrganizationCreateInput> = z.object({
  Id: z.string().optional(),
  ProviderNPI: z.string().optional().nullable(),
  Name: z.string().optional().nullable(),
  ParentOrgName: z.string().optional().nullable(),
  OrgName: z.string().optional().nullable(),
  OrgAddress: z.string().optional().nullable(),
  OrgCity: z.string().optional().nullable(),
  OrgState: z.string().optional().nullable(),
  OrgZip: z.string().optional().nullable(),
  Organization: z.lazy(() => OrganizationCreateNestedOneWithoutProviderOrganizationInputSchema),
  Provider: z.lazy(() => ProviderCreateNestedOneWithoutProviderOrganizationInputSchema)
}).strict();

export const ProviderOrganizationUncheckedCreateInputSchema: z.ZodType<Prisma.ProviderOrganizationUncheckedCreateInput> = z.object({
  Id: z.string().optional(),
  ProviderId: z.string(),
  OrganizationId: z.string(),
  ProviderNPI: z.string().optional().nullable(),
  Name: z.string().optional().nullable(),
  ParentOrgName: z.string().optional().nullable(),
  OrgName: z.string().optional().nullable(),
  OrgAddress: z.string().optional().nullable(),
  OrgCity: z.string().optional().nullable(),
  OrgState: z.string().optional().nullable(),
  OrgZip: z.string().optional().nullable()
}).strict();

export const ProviderOrganizationUpdateInputSchema: z.ZodType<Prisma.ProviderOrganizationUpdateInput> = z.object({
  Id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  ProviderNPI: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  ParentOrgName: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  OrgName: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  OrgAddress: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  OrgCity: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  OrgState: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  OrgZip: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Organization: z.lazy(() => OrganizationUpdateOneRequiredWithoutProviderOrganizationNestedInputSchema).optional(),
  Provider: z.lazy(() => ProviderUpdateOneRequiredWithoutProviderOrganizationNestedInputSchema).optional()
}).strict();

export const ProviderOrganizationUncheckedUpdateInputSchema: z.ZodType<Prisma.ProviderOrganizationUncheckedUpdateInput> = z.object({
  Id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  ProviderId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  OrganizationId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  ProviderNPI: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  ParentOrgName: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  OrgName: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  OrgAddress: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  OrgCity: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  OrgState: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  OrgZip: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const ProviderOrganizationCreateManyInputSchema: z.ZodType<Prisma.ProviderOrganizationCreateManyInput> = z.object({
  Id: z.string().optional(),
  ProviderId: z.string(),
  OrganizationId: z.string(),
  ProviderNPI: z.string().optional().nullable(),
  Name: z.string().optional().nullable(),
  ParentOrgName: z.string().optional().nullable(),
  OrgName: z.string().optional().nullable(),
  OrgAddress: z.string().optional().nullable(),
  OrgCity: z.string().optional().nullable(),
  OrgState: z.string().optional().nullable(),
  OrgZip: z.string().optional().nullable()
}).strict();

export const ProviderOrganizationUpdateManyMutationInputSchema: z.ZodType<Prisma.ProviderOrganizationUpdateManyMutationInput> = z.object({
  Id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  ProviderNPI: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  ParentOrgName: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  OrgName: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  OrgAddress: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  OrgCity: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  OrgState: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  OrgZip: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const ProviderOrganizationUncheckedUpdateManyInputSchema: z.ZodType<Prisma.ProviderOrganizationUncheckedUpdateManyInput> = z.object({
  Id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  ProviderId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  OrganizationId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  ProviderNPI: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  ParentOrgName: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  OrgName: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  OrgAddress: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  OrgCity: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  OrgState: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  OrgZip: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const SessionCreateInputSchema: z.ZodType<Prisma.SessionCreateInput> = z.object({
  id: z.string(),
  sessionToken: z.string(),
  expires: z.date(),
  User: z.lazy(() => UserCreateNestedOneWithoutSessionInputSchema)
}).strict();

export const SessionUncheckedCreateInputSchema: z.ZodType<Prisma.SessionUncheckedCreateInput> = z.object({
  id: z.string(),
  sessionToken: z.string(),
  userId: z.string(),
  expires: z.date()
}).strict();

export const SessionUpdateInputSchema: z.ZodType<Prisma.SessionUpdateInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  sessionToken: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  expires: z.union([ z.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  User: z.lazy(() => UserUpdateOneRequiredWithoutSessionNestedInputSchema).optional()
}).strict();

export const SessionUncheckedUpdateInputSchema: z.ZodType<Prisma.SessionUncheckedUpdateInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  sessionToken: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  userId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  expires: z.union([ z.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const SessionCreateManyInputSchema: z.ZodType<Prisma.SessionCreateManyInput> = z.object({
  id: z.string(),
  sessionToken: z.string(),
  userId: z.string(),
  expires: z.date()
}).strict();

export const SessionUpdateManyMutationInputSchema: z.ZodType<Prisma.SessionUpdateManyMutationInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  sessionToken: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  expires: z.union([ z.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const SessionUncheckedUpdateManyInputSchema: z.ZodType<Prisma.SessionUncheckedUpdateManyInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  sessionToken: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  userId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  expires: z.union([ z.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const SponsorCreateInputSchema: z.ZodType<Prisma.SponsorCreateInput> = z.object({
  SponsorName: z.string().optional().nullable(),
  SponsorCode: z.string().optional().nullable(),
  SponsorWebsite: z.string().optional().nullable(),
  SponsorType: z.string().optional().nullable(),
  Address: z.string().optional().nullable(),
  City: z.string().optional().nullable(),
  State: z.string().optional().nullable(),
  Zip: z.string().optional().nullable(),
  SponsoredProgram: z.lazy(() => SponsoredProgramCreateNestedManyWithoutSponsorInputSchema).optional()
}).strict();

export const SponsorUncheckedCreateInputSchema: z.ZodType<Prisma.SponsorUncheckedCreateInput> = z.object({
  SponsorId: z.number().optional(),
  SponsorName: z.string().optional().nullable(),
  SponsorCode: z.string().optional().nullable(),
  SponsorWebsite: z.string().optional().nullable(),
  SponsorType: z.string().optional().nullable(),
  Address: z.string().optional().nullable(),
  City: z.string().optional().nullable(),
  State: z.string().optional().nullable(),
  Zip: z.string().optional().nullable(),
  SponsoredProgram: z.lazy(() => SponsoredProgramUncheckedCreateNestedManyWithoutSponsorInputSchema).optional()
}).strict();

export const SponsorUpdateInputSchema: z.ZodType<Prisma.SponsorUpdateInput> = z.object({
  SponsorName: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  SponsorCode: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  SponsorWebsite: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  SponsorType: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Address: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  City: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  State: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Zip: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  SponsoredProgram: z.lazy(() => SponsoredProgramUpdateManyWithoutSponsorNestedInputSchema).optional()
}).strict();

export const SponsorUncheckedUpdateInputSchema: z.ZodType<Prisma.SponsorUncheckedUpdateInput> = z.object({
  SponsorId: z.union([ z.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  SponsorName: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  SponsorCode: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  SponsorWebsite: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  SponsorType: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Address: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  City: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  State: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Zip: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  SponsoredProgram: z.lazy(() => SponsoredProgramUncheckedUpdateManyWithoutSponsorNestedInputSchema).optional()
}).strict();

export const SponsorCreateManyInputSchema: z.ZodType<Prisma.SponsorCreateManyInput> = z.object({
  SponsorId: z.number().optional(),
  SponsorName: z.string().optional().nullable(),
  SponsorCode: z.string().optional().nullable(),
  SponsorWebsite: z.string().optional().nullable(),
  SponsorType: z.string().optional().nullable(),
  Address: z.string().optional().nullable(),
  City: z.string().optional().nullable(),
  State: z.string().optional().nullable(),
  Zip: z.string().optional().nullable()
}).strict();

export const SponsorUpdateManyMutationInputSchema: z.ZodType<Prisma.SponsorUpdateManyMutationInput> = z.object({
  SponsorName: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  SponsorCode: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  SponsorWebsite: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  SponsorType: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Address: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  City: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  State: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Zip: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const SponsorUncheckedUpdateManyInputSchema: z.ZodType<Prisma.SponsorUncheckedUpdateManyInput> = z.object({
  SponsorId: z.union([ z.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  SponsorName: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  SponsorCode: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  SponsorWebsite: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  SponsorType: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Address: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  City: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  State: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Zip: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const SponsoredProgramCreateInputSchema: z.ZodType<Prisma.SponsoredProgramCreateInput> = z.object({
  TherapeuticArea: z.string().optional().nullable(),
  ProgramName: z.string().optional().nullable(),
  ProgramUrl: z.string().optional().nullable(),
  ProgramLabUrl: z.string().optional().nullable(),
  SponosoredTestingUrl: z.string().optional().nullable(),
  ProgramEligibility: z.string().optional().nullable(),
  CreatedAt: z.date().optional().nullable(),
  UpdatedAt: z.date().optional().nullable(),
  Sponsor: z.lazy(() => SponsorCreateNestedOneWithoutSponsoredProgramInputSchema).optional(),
  SponsoredTest: z.lazy(() => SponsoredTestCreateNestedManyWithoutSponsoredProgramInputSchema).optional()
}).strict();

export const SponsoredProgramUncheckedCreateInputSchema: z.ZodType<Prisma.SponsoredProgramUncheckedCreateInput> = z.object({
  ProgramId: z.number().optional(),
  SponsorId: z.number().optional().nullable(),
  TherapeuticArea: z.string().optional().nullable(),
  ProgramName: z.string().optional().nullable(),
  ProgramUrl: z.string().optional().nullable(),
  ProgramLabUrl: z.string().optional().nullable(),
  SponosoredTestingUrl: z.string().optional().nullable(),
  ProgramEligibility: z.string().optional().nullable(),
  CreatedAt: z.date().optional().nullable(),
  UpdatedAt: z.date().optional().nullable(),
  SponsoredTest: z.lazy(() => SponsoredTestUncheckedCreateNestedManyWithoutSponsoredProgramInputSchema).optional()
}).strict();

export const SponsoredProgramUpdateInputSchema: z.ZodType<Prisma.SponsoredProgramUpdateInput> = z.object({
  TherapeuticArea: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  ProgramName: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  ProgramUrl: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  ProgramLabUrl: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  SponosoredTestingUrl: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  ProgramEligibility: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  CreatedAt: z.union([ z.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  UpdatedAt: z.union([ z.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Sponsor: z.lazy(() => SponsorUpdateOneWithoutSponsoredProgramNestedInputSchema).optional(),
  SponsoredTest: z.lazy(() => SponsoredTestUpdateManyWithoutSponsoredProgramNestedInputSchema).optional()
}).strict();

export const SponsoredProgramUncheckedUpdateInputSchema: z.ZodType<Prisma.SponsoredProgramUncheckedUpdateInput> = z.object({
  ProgramId: z.union([ z.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  SponsorId: z.union([ z.number(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  TherapeuticArea: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  ProgramName: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  ProgramUrl: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  ProgramLabUrl: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  SponosoredTestingUrl: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  ProgramEligibility: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  CreatedAt: z.union([ z.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  UpdatedAt: z.union([ z.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  SponsoredTest: z.lazy(() => SponsoredTestUncheckedUpdateManyWithoutSponsoredProgramNestedInputSchema).optional()
}).strict();

export const SponsoredProgramCreateManyInputSchema: z.ZodType<Prisma.SponsoredProgramCreateManyInput> = z.object({
  ProgramId: z.number().optional(),
  SponsorId: z.number().optional().nullable(),
  TherapeuticArea: z.string().optional().nullable(),
  ProgramName: z.string().optional().nullable(),
  ProgramUrl: z.string().optional().nullable(),
  ProgramLabUrl: z.string().optional().nullable(),
  SponosoredTestingUrl: z.string().optional().nullable(),
  ProgramEligibility: z.string().optional().nullable(),
  CreatedAt: z.date().optional().nullable(),
  UpdatedAt: z.date().optional().nullable()
}).strict();

export const SponsoredProgramUpdateManyMutationInputSchema: z.ZodType<Prisma.SponsoredProgramUpdateManyMutationInput> = z.object({
  TherapeuticArea: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  ProgramName: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  ProgramUrl: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  ProgramLabUrl: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  SponosoredTestingUrl: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  ProgramEligibility: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  CreatedAt: z.union([ z.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  UpdatedAt: z.union([ z.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const SponsoredProgramUncheckedUpdateManyInputSchema: z.ZodType<Prisma.SponsoredProgramUncheckedUpdateManyInput> = z.object({
  ProgramId: z.union([ z.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  SponsorId: z.union([ z.number(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  TherapeuticArea: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  ProgramName: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  ProgramUrl: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  ProgramLabUrl: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  SponosoredTestingUrl: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  ProgramEligibility: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  CreatedAt: z.union([ z.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  UpdatedAt: z.union([ z.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const SponsoredTestCreateInputSchema: z.ZodType<Prisma.SponsoredTestCreateInput> = z.object({
  Id: z.string().optional(),
  LabTestId: z.string().optional().nullable(),
  CasandraTestId: z.string(),
  Category: z.string(),
  SubCategory: z.string().optional().nullable(),
  CreatedAt: z.date().optional().nullable(),
  UpdatedAt: z.date().optional().nullable(),
  LabOrderSponsoredTestConsent: z.lazy(() => LabOrderSponsoredTestConsentCreateNestedManyWithoutSponsoredTestInputSchema).optional(),
  Lab: z.lazy(() => LabCreateNestedOneWithoutSponsoredTestInputSchema).optional(),
  SponsoredProgram: z.lazy(() => SponsoredProgramCreateNestedOneWithoutSponsoredTestInputSchema).optional(),
  TestCatalog: z.lazy(() => TestCatalogCreateNestedOneWithoutSponsoredTestInputSchema)
}).strict();

export const SponsoredTestUncheckedCreateInputSchema: z.ZodType<Prisma.SponsoredTestUncheckedCreateInput> = z.object({
  Id: z.string().optional(),
  TestId: z.number(),
  LabTestId: z.string().optional().nullable(),
  SponsoredProgramId: z.number().optional().nullable(),
  LabId: z.number().optional().nullable(),
  CasandraTestId: z.string(),
  Category: z.string(),
  SubCategory: z.string().optional().nullable(),
  CreatedAt: z.date().optional().nullable(),
  UpdatedAt: z.date().optional().nullable(),
  LabOrderSponsoredTestConsent: z.lazy(() => LabOrderSponsoredTestConsentUncheckedCreateNestedManyWithoutSponsoredTestInputSchema).optional()
}).strict();

export const SponsoredTestUpdateInputSchema: z.ZodType<Prisma.SponsoredTestUpdateInput> = z.object({
  Id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  LabTestId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  CasandraTestId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  Category: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  SubCategory: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  CreatedAt: z.union([ z.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  UpdatedAt: z.union([ z.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  LabOrderSponsoredTestConsent: z.lazy(() => LabOrderSponsoredTestConsentUpdateManyWithoutSponsoredTestNestedInputSchema).optional(),
  Lab: z.lazy(() => LabUpdateOneWithoutSponsoredTestNestedInputSchema).optional(),
  SponsoredProgram: z.lazy(() => SponsoredProgramUpdateOneWithoutSponsoredTestNestedInputSchema).optional(),
  TestCatalog: z.lazy(() => TestCatalogUpdateOneRequiredWithoutSponsoredTestNestedInputSchema).optional()
}).strict();

export const SponsoredTestUncheckedUpdateInputSchema: z.ZodType<Prisma.SponsoredTestUncheckedUpdateInput> = z.object({
  Id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  TestId: z.union([ z.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  LabTestId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  SponsoredProgramId: z.union([ z.number(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  LabId: z.union([ z.number(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  CasandraTestId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  Category: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  SubCategory: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  CreatedAt: z.union([ z.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  UpdatedAt: z.union([ z.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  LabOrderSponsoredTestConsent: z.lazy(() => LabOrderSponsoredTestConsentUncheckedUpdateManyWithoutSponsoredTestNestedInputSchema).optional()
}).strict();

export const SponsoredTestCreateManyInputSchema: z.ZodType<Prisma.SponsoredTestCreateManyInput> = z.object({
  Id: z.string().optional(),
  TestId: z.number(),
  LabTestId: z.string().optional().nullable(),
  SponsoredProgramId: z.number().optional().nullable(),
  LabId: z.number().optional().nullable(),
  CasandraTestId: z.string(),
  Category: z.string(),
  SubCategory: z.string().optional().nullable(),
  CreatedAt: z.date().optional().nullable(),
  UpdatedAt: z.date().optional().nullable()
}).strict();

export const SponsoredTestUpdateManyMutationInputSchema: z.ZodType<Prisma.SponsoredTestUpdateManyMutationInput> = z.object({
  Id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  LabTestId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  CasandraTestId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  Category: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  SubCategory: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  CreatedAt: z.union([ z.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  UpdatedAt: z.union([ z.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const SponsoredTestUncheckedUpdateManyInputSchema: z.ZodType<Prisma.SponsoredTestUncheckedUpdateManyInput> = z.object({
  Id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  TestId: z.union([ z.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  LabTestId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  SponsoredProgramId: z.union([ z.number(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  LabId: z.union([ z.number(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  CasandraTestId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  Category: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  SubCategory: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  CreatedAt: z.union([ z.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  UpdatedAt: z.union([ z.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const TestBiomarkerCreateInputSchema: z.ZodType<Prisma.TestBiomarkerCreateInput> = z.object({
  LabTestId: z.string().optional().nullable(),
  TranscriptReference: z.string().optional().nullable(),
  CreatedAt: z.date().optional(),
  UpdatedAt: z.date().optional(),
  BIOMARKER: z.lazy(() => BIOMARKERCreateNestedOneWithoutTestBiomarkerInputSchema),
  TestCatalog: z.lazy(() => TestCatalogCreateNestedOneWithoutTestBiomarkerInputSchema)
}).strict();

export const TestBiomarkerUncheckedCreateInputSchema: z.ZodType<Prisma.TestBiomarkerUncheckedCreateInput> = z.object({
  Id: z.number().optional(),
  TestId: z.number(),
  LabTestId: z.string().optional().nullable(),
  HGNCId: z.string(),
  TranscriptReference: z.string().optional().nullable(),
  CreatedAt: z.date().optional(),
  UpdatedAt: z.date().optional()
}).strict();

export const TestBiomarkerUpdateInputSchema: z.ZodType<Prisma.TestBiomarkerUpdateInput> = z.object({
  LabTestId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  TranscriptReference: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  CreatedAt: z.union([ z.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  UpdatedAt: z.union([ z.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  BIOMARKER: z.lazy(() => BIOMARKERUpdateOneRequiredWithoutTestBiomarkerNestedInputSchema).optional(),
  TestCatalog: z.lazy(() => TestCatalogUpdateOneRequiredWithoutTestBiomarkerNestedInputSchema).optional()
}).strict();

export const TestBiomarkerUncheckedUpdateInputSchema: z.ZodType<Prisma.TestBiomarkerUncheckedUpdateInput> = z.object({
  Id: z.union([ z.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  TestId: z.union([ z.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  LabTestId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  HGNCId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  TranscriptReference: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  CreatedAt: z.union([ z.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  UpdatedAt: z.union([ z.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const TestBiomarkerCreateManyInputSchema: z.ZodType<Prisma.TestBiomarkerCreateManyInput> = z.object({
  Id: z.number().optional(),
  TestId: z.number(),
  LabTestId: z.string().optional().nullable(),
  HGNCId: z.string(),
  TranscriptReference: z.string().optional().nullable(),
  CreatedAt: z.date().optional(),
  UpdatedAt: z.date().optional()
}).strict();

export const TestBiomarkerUpdateManyMutationInputSchema: z.ZodType<Prisma.TestBiomarkerUpdateManyMutationInput> = z.object({
  LabTestId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  TranscriptReference: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  CreatedAt: z.union([ z.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  UpdatedAt: z.union([ z.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const TestBiomarkerUncheckedUpdateManyInputSchema: z.ZodType<Prisma.TestBiomarkerUncheckedUpdateManyInput> = z.object({
  Id: z.union([ z.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  TestId: z.union([ z.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  LabTestId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  HGNCId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  TranscriptReference: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  CreatedAt: z.union([ z.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  UpdatedAt: z.union([ z.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const TestCatalogCreateInputSchema: z.ZodType<Prisma.TestCatalogCreateInput> = z.object({
  href: z.string().optional().nullable(),
  CasandraTestId: z.string(),
  LabTestId: z.string().optional().nullable(),
  TestName: z.string().optional().nullable(),
  AlternativeName: z.string().optional().nullable(),
  AlternativeName1: z.string().optional().nullable(),
  AlternativeName2: z.string().optional().nullable(),
  AlternativeName3: z.string().optional().nullable(),
  AlternativeName4: z.string().optional().nullable(),
  AlternativeName5: z.string().optional().nullable(),
  TestIncludes: z.string().optional().nullable(),
  SpecimenType: z.string().optional().nullable(),
  SpecialInstructions: z.string().optional().nullable(),
  Methodology: z.string().optional().nullable(),
  TestDescription: z.string().optional().nullable(),
  Diseases: z.string().optional().nullable(),
  Probes: z.string().optional().nullable(),
  ClinicalSignificance: z.string().optional().nullable(),
  SpecimenRequirements: z.string().optional().nullable(),
  Volume: z.string().optional().nullable(),
  MinimumVolume: z.string().optional().nullable(),
  Container: z.string().optional().nullable(),
  Collection: z.string().optional().nullable(),
  StabilityRequirements: z.string().optional().nullable(),
  StorageTransportation: z.string().optional().nullable(),
  PatientPreparation: z.string().optional().nullable(),
  CausesForRejection: z.string().optional().nullable(),
  TestUsage: z.string().optional().nullable(),
  TestLimitations: z.string().optional().nullable(),
  CPTCodes: z.string().optional().nullable(),
  NewYorkApproved: z.string().optional().nullable(),
  LevelOfService: z.string().optional().nullable(),
  TurnAroundTime: z.string().optional().nullable(),
  AssayCategory: z.string().optional().nullable(),
  ReferenceRanges: z.string().optional().nullable(),
  SetupSchedule: z.string().optional().nullable(),
  AlternativeSpecimen: z.string().optional().nullable(),
  LoincCodesText: z.string().optional().nullable(),
  LoincCodesHTML: z.string().optional().nullable(),
  TestCategory: z.string().optional().nullable(),
  TestSubCategory: z.string().optional().nullable(),
  CreatedAt: z.date().optional(),
  UpdatedAt: z.date().optional(),
  LabOrderTest: z.lazy(() => LabOrderTestCreateNestedManyWithoutTestCatalogInputSchema).optional(),
  OrganizationFavoriteTest: z.lazy(() => OrganizationFavoriteTestCreateNestedManyWithoutTestCatalogInputSchema).optional(),
  ProviderFavoriteTest: z.lazy(() => ProviderFavoriteTestCreateNestedManyWithoutTestCatalogInputSchema).optional(),
  SponsoredTest: z.lazy(() => SponsoredTestCreateNestedManyWithoutTestCatalogInputSchema).optional(),
  TestBiomarker: z.lazy(() => TestBiomarkerCreateNestedManyWithoutTestCatalogInputSchema).optional(),
  Lab: z.lazy(() => LabCreateNestedOneWithoutTestCatalogInputSchema).optional(),
  TestCptCode: z.lazy(() => TestCptCodeCreateNestedManyWithoutTestCatalogInputSchema).optional(),
  TestGene: z.lazy(() => TestGeneCreateNestedManyWithoutTestCatalogInputSchema).optional(),
  TestOrderLoinc: z.lazy(() => TestOrderLoincCreateNestedManyWithoutTestCatalogInputSchema).optional(),
  TestResultLoinc: z.lazy(() => TestResultLoincCreateNestedManyWithoutTestCatalogInputSchema).optional()
}).strict();

export const TestCatalogUncheckedCreateInputSchema: z.ZodType<Prisma.TestCatalogUncheckedCreateInput> = z.object({
  TestId: z.number().optional(),
  LabId: z.number().optional().nullable(),
  href: z.string().optional().nullable(),
  CasandraTestId: z.string(),
  LabTestId: z.string().optional().nullable(),
  TestName: z.string().optional().nullable(),
  AlternativeName: z.string().optional().nullable(),
  AlternativeName1: z.string().optional().nullable(),
  AlternativeName2: z.string().optional().nullable(),
  AlternativeName3: z.string().optional().nullable(),
  AlternativeName4: z.string().optional().nullable(),
  AlternativeName5: z.string().optional().nullable(),
  TestIncludes: z.string().optional().nullable(),
  SpecimenType: z.string().optional().nullable(),
  SpecialInstructions: z.string().optional().nullable(),
  Methodology: z.string().optional().nullable(),
  TestDescription: z.string().optional().nullable(),
  Diseases: z.string().optional().nullable(),
  Probes: z.string().optional().nullable(),
  ClinicalSignificance: z.string().optional().nullable(),
  SpecimenRequirements: z.string().optional().nullable(),
  Volume: z.string().optional().nullable(),
  MinimumVolume: z.string().optional().nullable(),
  Container: z.string().optional().nullable(),
  Collection: z.string().optional().nullable(),
  StabilityRequirements: z.string().optional().nullable(),
  StorageTransportation: z.string().optional().nullable(),
  PatientPreparation: z.string().optional().nullable(),
  CausesForRejection: z.string().optional().nullable(),
  TestUsage: z.string().optional().nullable(),
  TestLimitations: z.string().optional().nullable(),
  CPTCodes: z.string().optional().nullable(),
  NewYorkApproved: z.string().optional().nullable(),
  LevelOfService: z.string().optional().nullable(),
  TurnAroundTime: z.string().optional().nullable(),
  AssayCategory: z.string().optional().nullable(),
  ReferenceRanges: z.string().optional().nullable(),
  SetupSchedule: z.string().optional().nullable(),
  AlternativeSpecimen: z.string().optional().nullable(),
  LoincCodesText: z.string().optional().nullable(),
  LoincCodesHTML: z.string().optional().nullable(),
  TestCategory: z.string().optional().nullable(),
  TestSubCategory: z.string().optional().nullable(),
  CreatedAt: z.date().optional(),
  UpdatedAt: z.date().optional(),
  LabOrderTest: z.lazy(() => LabOrderTestUncheckedCreateNestedManyWithoutTestCatalogInputSchema).optional(),
  OrganizationFavoriteTest: z.lazy(() => OrganizationFavoriteTestUncheckedCreateNestedManyWithoutTestCatalogInputSchema).optional(),
  ProviderFavoriteTest: z.lazy(() => ProviderFavoriteTestUncheckedCreateNestedManyWithoutTestCatalogInputSchema).optional(),
  SponsoredTest: z.lazy(() => SponsoredTestUncheckedCreateNestedManyWithoutTestCatalogInputSchema).optional(),
  TestBiomarker: z.lazy(() => TestBiomarkerUncheckedCreateNestedManyWithoutTestCatalogInputSchema).optional(),
  TestCptCode: z.lazy(() => TestCptCodeUncheckedCreateNestedManyWithoutTestCatalogInputSchema).optional(),
  TestGene: z.lazy(() => TestGeneUncheckedCreateNestedManyWithoutTestCatalogInputSchema).optional(),
  TestOrderLoinc: z.lazy(() => TestOrderLoincUncheckedCreateNestedManyWithoutTestCatalogInputSchema).optional(),
  TestResultLoinc: z.lazy(() => TestResultLoincUncheckedCreateNestedManyWithoutTestCatalogInputSchema).optional()
}).strict();

export const TestCatalogUpdateInputSchema: z.ZodType<Prisma.TestCatalogUpdateInput> = z.object({
  href: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  CasandraTestId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  LabTestId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  TestName: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  AlternativeName: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  AlternativeName1: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  AlternativeName2: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  AlternativeName3: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  AlternativeName4: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  AlternativeName5: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  TestIncludes: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  SpecimenType: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  SpecialInstructions: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Methodology: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  TestDescription: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Diseases: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Probes: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  ClinicalSignificance: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  SpecimenRequirements: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Volume: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  MinimumVolume: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Container: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Collection: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  StabilityRequirements: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  StorageTransportation: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  PatientPreparation: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  CausesForRejection: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  TestUsage: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  TestLimitations: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  CPTCodes: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  NewYorkApproved: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  LevelOfService: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  TurnAroundTime: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  AssayCategory: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  ReferenceRanges: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  SetupSchedule: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  AlternativeSpecimen: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  LoincCodesText: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  LoincCodesHTML: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  TestCategory: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  TestSubCategory: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  CreatedAt: z.union([ z.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  UpdatedAt: z.union([ z.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  LabOrderTest: z.lazy(() => LabOrderTestUpdateManyWithoutTestCatalogNestedInputSchema).optional(),
  OrganizationFavoriteTest: z.lazy(() => OrganizationFavoriteTestUpdateManyWithoutTestCatalogNestedInputSchema).optional(),
  ProviderFavoriteTest: z.lazy(() => ProviderFavoriteTestUpdateManyWithoutTestCatalogNestedInputSchema).optional(),
  SponsoredTest: z.lazy(() => SponsoredTestUpdateManyWithoutTestCatalogNestedInputSchema).optional(),
  TestBiomarker: z.lazy(() => TestBiomarkerUpdateManyWithoutTestCatalogNestedInputSchema).optional(),
  Lab: z.lazy(() => LabUpdateOneWithoutTestCatalogNestedInputSchema).optional(),
  TestCptCode: z.lazy(() => TestCptCodeUpdateManyWithoutTestCatalogNestedInputSchema).optional(),
  TestGene: z.lazy(() => TestGeneUpdateManyWithoutTestCatalogNestedInputSchema).optional(),
  TestOrderLoinc: z.lazy(() => TestOrderLoincUpdateManyWithoutTestCatalogNestedInputSchema).optional(),
  TestResultLoinc: z.lazy(() => TestResultLoincUpdateManyWithoutTestCatalogNestedInputSchema).optional()
}).strict();

export const TestCatalogUncheckedUpdateInputSchema: z.ZodType<Prisma.TestCatalogUncheckedUpdateInput> = z.object({
  TestId: z.union([ z.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  LabId: z.union([ z.number(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  href: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  CasandraTestId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  LabTestId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  TestName: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  AlternativeName: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  AlternativeName1: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  AlternativeName2: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  AlternativeName3: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  AlternativeName4: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  AlternativeName5: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  TestIncludes: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  SpecimenType: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  SpecialInstructions: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Methodology: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  TestDescription: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Diseases: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Probes: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  ClinicalSignificance: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  SpecimenRequirements: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Volume: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  MinimumVolume: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Container: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Collection: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  StabilityRequirements: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  StorageTransportation: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  PatientPreparation: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  CausesForRejection: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  TestUsage: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  TestLimitations: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  CPTCodes: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  NewYorkApproved: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  LevelOfService: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  TurnAroundTime: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  AssayCategory: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  ReferenceRanges: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  SetupSchedule: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  AlternativeSpecimen: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  LoincCodesText: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  LoincCodesHTML: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  TestCategory: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  TestSubCategory: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  CreatedAt: z.union([ z.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  UpdatedAt: z.union([ z.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  LabOrderTest: z.lazy(() => LabOrderTestUncheckedUpdateManyWithoutTestCatalogNestedInputSchema).optional(),
  OrganizationFavoriteTest: z.lazy(() => OrganizationFavoriteTestUncheckedUpdateManyWithoutTestCatalogNestedInputSchema).optional(),
  ProviderFavoriteTest: z.lazy(() => ProviderFavoriteTestUncheckedUpdateManyWithoutTestCatalogNestedInputSchema).optional(),
  SponsoredTest: z.lazy(() => SponsoredTestUncheckedUpdateManyWithoutTestCatalogNestedInputSchema).optional(),
  TestBiomarker: z.lazy(() => TestBiomarkerUncheckedUpdateManyWithoutTestCatalogNestedInputSchema).optional(),
  TestCptCode: z.lazy(() => TestCptCodeUncheckedUpdateManyWithoutTestCatalogNestedInputSchema).optional(),
  TestGene: z.lazy(() => TestGeneUncheckedUpdateManyWithoutTestCatalogNestedInputSchema).optional(),
  TestOrderLoinc: z.lazy(() => TestOrderLoincUncheckedUpdateManyWithoutTestCatalogNestedInputSchema).optional(),
  TestResultLoinc: z.lazy(() => TestResultLoincUncheckedUpdateManyWithoutTestCatalogNestedInputSchema).optional()
}).strict();

export const TestCatalogCreateManyInputSchema: z.ZodType<Prisma.TestCatalogCreateManyInput> = z.object({
  TestId: z.number().optional(),
  LabId: z.number().optional().nullable(),
  href: z.string().optional().nullable(),
  CasandraTestId: z.string(),
  LabTestId: z.string().optional().nullable(),
  TestName: z.string().optional().nullable(),
  AlternativeName: z.string().optional().nullable(),
  AlternativeName1: z.string().optional().nullable(),
  AlternativeName2: z.string().optional().nullable(),
  AlternativeName3: z.string().optional().nullable(),
  AlternativeName4: z.string().optional().nullable(),
  AlternativeName5: z.string().optional().nullable(),
  TestIncludes: z.string().optional().nullable(),
  SpecimenType: z.string().optional().nullable(),
  SpecialInstructions: z.string().optional().nullable(),
  Methodology: z.string().optional().nullable(),
  TestDescription: z.string().optional().nullable(),
  Diseases: z.string().optional().nullable(),
  Probes: z.string().optional().nullable(),
  ClinicalSignificance: z.string().optional().nullable(),
  SpecimenRequirements: z.string().optional().nullable(),
  Volume: z.string().optional().nullable(),
  MinimumVolume: z.string().optional().nullable(),
  Container: z.string().optional().nullable(),
  Collection: z.string().optional().nullable(),
  StabilityRequirements: z.string().optional().nullable(),
  StorageTransportation: z.string().optional().nullable(),
  PatientPreparation: z.string().optional().nullable(),
  CausesForRejection: z.string().optional().nullable(),
  TestUsage: z.string().optional().nullable(),
  TestLimitations: z.string().optional().nullable(),
  CPTCodes: z.string().optional().nullable(),
  NewYorkApproved: z.string().optional().nullable(),
  LevelOfService: z.string().optional().nullable(),
  TurnAroundTime: z.string().optional().nullable(),
  AssayCategory: z.string().optional().nullable(),
  ReferenceRanges: z.string().optional().nullable(),
  SetupSchedule: z.string().optional().nullable(),
  AlternativeSpecimen: z.string().optional().nullable(),
  LoincCodesText: z.string().optional().nullable(),
  LoincCodesHTML: z.string().optional().nullable(),
  TestCategory: z.string().optional().nullable(),
  TestSubCategory: z.string().optional().nullable(),
  CreatedAt: z.date().optional(),
  UpdatedAt: z.date().optional()
}).strict();

export const TestCatalogUpdateManyMutationInputSchema: z.ZodType<Prisma.TestCatalogUpdateManyMutationInput> = z.object({
  href: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  CasandraTestId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  LabTestId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  TestName: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  AlternativeName: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  AlternativeName1: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  AlternativeName2: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  AlternativeName3: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  AlternativeName4: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  AlternativeName5: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  TestIncludes: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  SpecimenType: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  SpecialInstructions: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Methodology: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  TestDescription: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Diseases: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Probes: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  ClinicalSignificance: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  SpecimenRequirements: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Volume: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  MinimumVolume: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Container: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Collection: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  StabilityRequirements: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  StorageTransportation: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  PatientPreparation: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  CausesForRejection: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  TestUsage: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  TestLimitations: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  CPTCodes: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  NewYorkApproved: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  LevelOfService: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  TurnAroundTime: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  AssayCategory: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  ReferenceRanges: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  SetupSchedule: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  AlternativeSpecimen: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  LoincCodesText: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  LoincCodesHTML: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  TestCategory: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  TestSubCategory: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  CreatedAt: z.union([ z.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  UpdatedAt: z.union([ z.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const TestCatalogUncheckedUpdateManyInputSchema: z.ZodType<Prisma.TestCatalogUncheckedUpdateManyInput> = z.object({
  TestId: z.union([ z.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  LabId: z.union([ z.number(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  href: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  CasandraTestId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  LabTestId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  TestName: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  AlternativeName: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  AlternativeName1: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  AlternativeName2: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  AlternativeName3: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  AlternativeName4: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  AlternativeName5: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  TestIncludes: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  SpecimenType: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  SpecialInstructions: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Methodology: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  TestDescription: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Diseases: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Probes: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  ClinicalSignificance: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  SpecimenRequirements: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Volume: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  MinimumVolume: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Container: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Collection: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  StabilityRequirements: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  StorageTransportation: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  PatientPreparation: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  CausesForRejection: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  TestUsage: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  TestLimitations: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  CPTCodes: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  NewYorkApproved: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  LevelOfService: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  TurnAroundTime: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  AssayCategory: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  ReferenceRanges: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  SetupSchedule: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  AlternativeSpecimen: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  LoincCodesText: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  LoincCodesHTML: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  TestCategory: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  TestSubCategory: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  CreatedAt: z.union([ z.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  UpdatedAt: z.union([ z.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const TestCptCodeCreateInputSchema: z.ZodType<Prisma.TestCptCodeCreateInput> = z.object({
  LabTestId: z.string().optional().nullable(),
  CptCode: z.string().optional().nullable(),
  Modifier: z.string().optional().nullable(),
  Comments: z.string().optional().nullable(),
  CreatedAt: z.date().optional(),
  UpdatedAt: z.date().optional(),
  TestCatalog: z.lazy(() => TestCatalogCreateNestedOneWithoutTestCptCodeInputSchema)
}).strict();

export const TestCptCodeUncheckedCreateInputSchema: z.ZodType<Prisma.TestCptCodeUncheckedCreateInput> = z.object({
  Id: z.number().optional(),
  TestId: z.number(),
  LabTestId: z.string().optional().nullable(),
  CptCode: z.string().optional().nullable(),
  Modifier: z.string().optional().nullable(),
  Comments: z.string().optional().nullable(),
  CreatedAt: z.date().optional(),
  UpdatedAt: z.date().optional()
}).strict();

export const TestCptCodeUpdateInputSchema: z.ZodType<Prisma.TestCptCodeUpdateInput> = z.object({
  LabTestId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  CptCode: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Modifier: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Comments: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  CreatedAt: z.union([ z.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  UpdatedAt: z.union([ z.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  TestCatalog: z.lazy(() => TestCatalogUpdateOneRequiredWithoutTestCptCodeNestedInputSchema).optional()
}).strict();

export const TestCptCodeUncheckedUpdateInputSchema: z.ZodType<Prisma.TestCptCodeUncheckedUpdateInput> = z.object({
  Id: z.union([ z.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  TestId: z.union([ z.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  LabTestId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  CptCode: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Modifier: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Comments: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  CreatedAt: z.union([ z.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  UpdatedAt: z.union([ z.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const TestCptCodeCreateManyInputSchema: z.ZodType<Prisma.TestCptCodeCreateManyInput> = z.object({
  Id: z.number().optional(),
  TestId: z.number(),
  LabTestId: z.string().optional().nullable(),
  CptCode: z.string().optional().nullable(),
  Modifier: z.string().optional().nullable(),
  Comments: z.string().optional().nullable(),
  CreatedAt: z.date().optional(),
  UpdatedAt: z.date().optional()
}).strict();

export const TestCptCodeUpdateManyMutationInputSchema: z.ZodType<Prisma.TestCptCodeUpdateManyMutationInput> = z.object({
  LabTestId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  CptCode: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Modifier: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Comments: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  CreatedAt: z.union([ z.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  UpdatedAt: z.union([ z.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const TestCptCodeUncheckedUpdateManyInputSchema: z.ZodType<Prisma.TestCptCodeUncheckedUpdateManyInput> = z.object({
  Id: z.union([ z.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  TestId: z.union([ z.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  LabTestId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  CptCode: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Modifier: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Comments: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  CreatedAt: z.union([ z.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  UpdatedAt: z.union([ z.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const TestGeneCreateInputSchema: z.ZodType<Prisma.TestGeneCreateInput> = z.object({
  LabTestId: z.string().optional().nullable(),
  Gene: z.string(),
  TranscriptReference: z.string().optional().nullable(),
  CreatedAt: z.date().optional(),
  UpdatedAt: z.date().optional(),
  TestCatalog: z.lazy(() => TestCatalogCreateNestedOneWithoutTestGeneInputSchema)
}).strict();

export const TestGeneUncheckedCreateInputSchema: z.ZodType<Prisma.TestGeneUncheckedCreateInput> = z.object({
  Id: z.number().optional(),
  TestId: z.number(),
  LabTestId: z.string().optional().nullable(),
  Gene: z.string(),
  TranscriptReference: z.string().optional().nullable(),
  CreatedAt: z.date().optional(),
  UpdatedAt: z.date().optional()
}).strict();

export const TestGeneUpdateInputSchema: z.ZodType<Prisma.TestGeneUpdateInput> = z.object({
  LabTestId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Gene: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  TranscriptReference: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  CreatedAt: z.union([ z.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  UpdatedAt: z.union([ z.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  TestCatalog: z.lazy(() => TestCatalogUpdateOneRequiredWithoutTestGeneNestedInputSchema).optional()
}).strict();

export const TestGeneUncheckedUpdateInputSchema: z.ZodType<Prisma.TestGeneUncheckedUpdateInput> = z.object({
  Id: z.union([ z.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  TestId: z.union([ z.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  LabTestId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Gene: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  TranscriptReference: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  CreatedAt: z.union([ z.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  UpdatedAt: z.union([ z.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const TestGeneCreateManyInputSchema: z.ZodType<Prisma.TestGeneCreateManyInput> = z.object({
  Id: z.number().optional(),
  TestId: z.number(),
  LabTestId: z.string().optional().nullable(),
  Gene: z.string(),
  TranscriptReference: z.string().optional().nullable(),
  CreatedAt: z.date().optional(),
  UpdatedAt: z.date().optional()
}).strict();

export const TestGeneUpdateManyMutationInputSchema: z.ZodType<Prisma.TestGeneUpdateManyMutationInput> = z.object({
  LabTestId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Gene: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  TranscriptReference: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  CreatedAt: z.union([ z.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  UpdatedAt: z.union([ z.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const TestGeneUncheckedUpdateManyInputSchema: z.ZodType<Prisma.TestGeneUncheckedUpdateManyInput> = z.object({
  Id: z.union([ z.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  TestId: z.union([ z.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  LabTestId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Gene: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  TranscriptReference: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  CreatedAt: z.union([ z.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  UpdatedAt: z.union([ z.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const TestOrderLoincCreateInputSchema: z.ZodType<Prisma.TestOrderLoincCreateInput> = z.object({
  LabTestId: z.string().optional().nullable(),
  CreatedAt: z.date().optional(),
  UpdatedAt: z.date().optional(),
  LOINC: z.lazy(() => LOINCCreateNestedOneWithoutTestOrderLoincInputSchema).optional(),
  TestCatalog: z.lazy(() => TestCatalogCreateNestedOneWithoutTestOrderLoincInputSchema)
}).strict();

export const TestOrderLoincUncheckedCreateInputSchema: z.ZodType<Prisma.TestOrderLoincUncheckedCreateInput> = z.object({
  Id: z.number().optional(),
  TestId: z.number(),
  LabTestId: z.string().optional().nullable(),
  OrderLoinc: z.string().optional().nullable(),
  CreatedAt: z.date().optional(),
  UpdatedAt: z.date().optional()
}).strict();

export const TestOrderLoincUpdateInputSchema: z.ZodType<Prisma.TestOrderLoincUpdateInput> = z.object({
  LabTestId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  CreatedAt: z.union([ z.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  UpdatedAt: z.union([ z.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  LOINC: z.lazy(() => LOINCUpdateOneWithoutTestOrderLoincNestedInputSchema).optional(),
  TestCatalog: z.lazy(() => TestCatalogUpdateOneRequiredWithoutTestOrderLoincNestedInputSchema).optional()
}).strict();

export const TestOrderLoincUncheckedUpdateInputSchema: z.ZodType<Prisma.TestOrderLoincUncheckedUpdateInput> = z.object({
  Id: z.union([ z.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  TestId: z.union([ z.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  LabTestId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  OrderLoinc: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  CreatedAt: z.union([ z.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  UpdatedAt: z.union([ z.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const TestOrderLoincCreateManyInputSchema: z.ZodType<Prisma.TestOrderLoincCreateManyInput> = z.object({
  Id: z.number().optional(),
  TestId: z.number(),
  LabTestId: z.string().optional().nullable(),
  OrderLoinc: z.string().optional().nullable(),
  CreatedAt: z.date().optional(),
  UpdatedAt: z.date().optional()
}).strict();

export const TestOrderLoincUpdateManyMutationInputSchema: z.ZodType<Prisma.TestOrderLoincUpdateManyMutationInput> = z.object({
  LabTestId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  CreatedAt: z.union([ z.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  UpdatedAt: z.union([ z.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const TestOrderLoincUncheckedUpdateManyInputSchema: z.ZodType<Prisma.TestOrderLoincUncheckedUpdateManyInput> = z.object({
  Id: z.union([ z.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  TestId: z.union([ z.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  LabTestId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  OrderLoinc: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  CreatedAt: z.union([ z.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  UpdatedAt: z.union([ z.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const TestResultLoincCreateInputSchema: z.ZodType<Prisma.TestResultLoincCreateInput> = z.object({
  LabTestId: z.string().optional().nullable(),
  ResultCode: z.string().optional().nullable(),
  ResultCodeName: z.string().optional().nullable(),
  UofM: z.string().optional().nullable(),
  CreatedAt: z.date().optional(),
  UpdatedAt: z.date().optional(),
  LOINC: z.lazy(() => LOINCCreateNestedOneWithoutTestResultLoincInputSchema).optional(),
  TestCatalog: z.lazy(() => TestCatalogCreateNestedOneWithoutTestResultLoincInputSchema)
}).strict();

export const TestResultLoincUncheckedCreateInputSchema: z.ZodType<Prisma.TestResultLoincUncheckedCreateInput> = z.object({
  Id: z.number().optional(),
  TestId: z.number(),
  LabTestId: z.string().optional().nullable(),
  ResultCode: z.string().optional().nullable(),
  ResultCodeName: z.string().optional().nullable(),
  UofM: z.string().optional().nullable(),
  ResultLoinc: z.string().optional().nullable(),
  CreatedAt: z.date().optional(),
  UpdatedAt: z.date().optional()
}).strict();

export const TestResultLoincUpdateInputSchema: z.ZodType<Prisma.TestResultLoincUpdateInput> = z.object({
  LabTestId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  ResultCode: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  ResultCodeName: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  UofM: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  CreatedAt: z.union([ z.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  UpdatedAt: z.union([ z.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  LOINC: z.lazy(() => LOINCUpdateOneWithoutTestResultLoincNestedInputSchema).optional(),
  TestCatalog: z.lazy(() => TestCatalogUpdateOneRequiredWithoutTestResultLoincNestedInputSchema).optional()
}).strict();

export const TestResultLoincUncheckedUpdateInputSchema: z.ZodType<Prisma.TestResultLoincUncheckedUpdateInput> = z.object({
  Id: z.union([ z.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  TestId: z.union([ z.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  LabTestId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  ResultCode: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  ResultCodeName: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  UofM: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  ResultLoinc: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  CreatedAt: z.union([ z.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  UpdatedAt: z.union([ z.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const TestResultLoincCreateManyInputSchema: z.ZodType<Prisma.TestResultLoincCreateManyInput> = z.object({
  Id: z.number().optional(),
  TestId: z.number(),
  LabTestId: z.string().optional().nullable(),
  ResultCode: z.string().optional().nullable(),
  ResultCodeName: z.string().optional().nullable(),
  UofM: z.string().optional().nullable(),
  ResultLoinc: z.string().optional().nullable(),
  CreatedAt: z.date().optional(),
  UpdatedAt: z.date().optional()
}).strict();

export const TestResultLoincUpdateManyMutationInputSchema: z.ZodType<Prisma.TestResultLoincUpdateManyMutationInput> = z.object({
  LabTestId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  ResultCode: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  ResultCodeName: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  UofM: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  CreatedAt: z.union([ z.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  UpdatedAt: z.union([ z.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const TestResultLoincUncheckedUpdateManyInputSchema: z.ZodType<Prisma.TestResultLoincUncheckedUpdateManyInput> = z.object({
  Id: z.union([ z.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  TestId: z.union([ z.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  LabTestId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  ResultCode: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  ResultCodeName: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  UofM: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  ResultLoinc: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  CreatedAt: z.union([ z.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  UpdatedAt: z.union([ z.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const UserCreateInputSchema: z.ZodType<Prisma.UserCreateInput> = z.object({
  id: z.string().optional(),
  name: z.string().optional().nullable(),
  email: z.string().optional().nullable(),
  password: z.string().optional().nullable(),
  emailVerified: z.date().optional().nullable(),
  image: z.string().optional().nullable(),
  Account: z.lazy(() => AccountCreateNestedOneWithoutUserInputSchema).optional(),
  Session: z.lazy(() => SessionCreateNestedManyWithoutUserInputSchema).optional(),
  UserAttribute: z.lazy(() => UserAttributeCreateNestedOneWithoutUserInputSchema).optional()
}).strict();

export const UserUncheckedCreateInputSchema: z.ZodType<Prisma.UserUncheckedCreateInput> = z.object({
  id: z.string().optional(),
  name: z.string().optional().nullable(),
  email: z.string().optional().nullable(),
  password: z.string().optional().nullable(),
  emailVerified: z.date().optional().nullable(),
  image: z.string().optional().nullable(),
  Account: z.lazy(() => AccountUncheckedCreateNestedOneWithoutUserInputSchema).optional(),
  Session: z.lazy(() => SessionUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  UserAttribute: z.lazy(() => UserAttributeUncheckedCreateNestedOneWithoutUserInputSchema).optional()
}).strict();

export const UserUpdateInputSchema: z.ZodType<Prisma.UserUpdateInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  email: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  password: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  emailVerified: z.union([ z.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  image: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Account: z.lazy(() => AccountUpdateOneWithoutUserNestedInputSchema).optional(),
  Session: z.lazy(() => SessionUpdateManyWithoutUserNestedInputSchema).optional(),
  UserAttribute: z.lazy(() => UserAttributeUpdateOneWithoutUserNestedInputSchema).optional()
}).strict();

export const UserUncheckedUpdateInputSchema: z.ZodType<Prisma.UserUncheckedUpdateInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  email: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  password: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  emailVerified: z.union([ z.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  image: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Account: z.lazy(() => AccountUncheckedUpdateOneWithoutUserNestedInputSchema).optional(),
  Session: z.lazy(() => SessionUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  UserAttribute: z.lazy(() => UserAttributeUncheckedUpdateOneWithoutUserNestedInputSchema).optional()
}).strict();

export const UserCreateManyInputSchema: z.ZodType<Prisma.UserCreateManyInput> = z.object({
  id: z.string().optional(),
  name: z.string().optional().nullable(),
  email: z.string().optional().nullable(),
  password: z.string().optional().nullable(),
  emailVerified: z.date().optional().nullable(),
  image: z.string().optional().nullable()
}).strict();

export const UserUpdateManyMutationInputSchema: z.ZodType<Prisma.UserUpdateManyMutationInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  email: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  password: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  emailVerified: z.union([ z.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  image: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const UserUncheckedUpdateManyInputSchema: z.ZodType<Prisma.UserUncheckedUpdateManyInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  email: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  password: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  emailVerified: z.union([ z.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  image: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const UserAttributeCreateInputSchema: z.ZodType<Prisma.UserAttributeCreateInput> = z.object({
  Id: z.string().optional(),
  UserType: z.lazy(() => UserAttribute_UserTypeSchema).optional().nullable(),
  Admin: z.lazy(() => AdminCreateNestedOneWithoutUserAttributeInputSchema).optional(),
  Provider: z.lazy(() => ProviderCreateNestedOneWithoutUserAttributeInputSchema).optional(),
  User: z.lazy(() => UserCreateNestedOneWithoutUserAttributeInputSchema)
}).strict();

export const UserAttributeUncheckedCreateInputSchema: z.ZodType<Prisma.UserAttributeUncheckedCreateInput> = z.object({
  Id: z.string().optional(),
  UserId: z.string(),
  UserType: z.lazy(() => UserAttribute_UserTypeSchema).optional().nullable(),
  Admin: z.lazy(() => AdminUncheckedCreateNestedOneWithoutUserAttributeInputSchema).optional(),
  Provider: z.lazy(() => ProviderUncheckedCreateNestedOneWithoutUserAttributeInputSchema).optional()
}).strict();

export const UserAttributeUpdateInputSchema: z.ZodType<Prisma.UserAttributeUpdateInput> = z.object({
  Id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  UserType: z.union([ z.lazy(() => UserAttribute_UserTypeSchema),z.lazy(() => NullableEnumUserAttribute_UserTypeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Admin: z.lazy(() => AdminUpdateOneWithoutUserAttributeNestedInputSchema).optional(),
  Provider: z.lazy(() => ProviderUpdateOneWithoutUserAttributeNestedInputSchema).optional(),
  User: z.lazy(() => UserUpdateOneRequiredWithoutUserAttributeNestedInputSchema).optional()
}).strict();

export const UserAttributeUncheckedUpdateInputSchema: z.ZodType<Prisma.UserAttributeUncheckedUpdateInput> = z.object({
  Id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  UserId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  UserType: z.union([ z.lazy(() => UserAttribute_UserTypeSchema),z.lazy(() => NullableEnumUserAttribute_UserTypeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Admin: z.lazy(() => AdminUncheckedUpdateOneWithoutUserAttributeNestedInputSchema).optional(),
  Provider: z.lazy(() => ProviderUncheckedUpdateOneWithoutUserAttributeNestedInputSchema).optional()
}).strict();

export const UserAttributeCreateManyInputSchema: z.ZodType<Prisma.UserAttributeCreateManyInput> = z.object({
  Id: z.string().optional(),
  UserId: z.string(),
  UserType: z.lazy(() => UserAttribute_UserTypeSchema).optional().nullable()
}).strict();

export const UserAttributeUpdateManyMutationInputSchema: z.ZodType<Prisma.UserAttributeUpdateManyMutationInput> = z.object({
  Id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  UserType: z.union([ z.lazy(() => UserAttribute_UserTypeSchema),z.lazy(() => NullableEnumUserAttribute_UserTypeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const UserAttributeUncheckedUpdateManyInputSchema: z.ZodType<Prisma.UserAttributeUncheckedUpdateManyInput> = z.object({
  Id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  UserId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  UserType: z.union([ z.lazy(() => UserAttribute_UserTypeSchema),z.lazy(() => NullableEnumUserAttribute_UserTypeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const VerificationTokenCreateInputSchema: z.ZodType<Prisma.VerificationTokenCreateInput> = z.object({
  identifier: z.string(),
  token: z.string(),
  expires: z.date()
}).strict();

export const VerificationTokenUncheckedCreateInputSchema: z.ZodType<Prisma.VerificationTokenUncheckedCreateInput> = z.object({
  identifier: z.string(),
  token: z.string(),
  expires: z.date()
}).strict();

export const VerificationTokenUpdateInputSchema: z.ZodType<Prisma.VerificationTokenUpdateInput> = z.object({
  identifier: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  token: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  expires: z.union([ z.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const VerificationTokenUncheckedUpdateInputSchema: z.ZodType<Prisma.VerificationTokenUncheckedUpdateInput> = z.object({
  identifier: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  token: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  expires: z.union([ z.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const VerificationTokenCreateManyInputSchema: z.ZodType<Prisma.VerificationTokenCreateManyInput> = z.object({
  identifier: z.string(),
  token: z.string(),
  expires: z.date()
}).strict();

export const VerificationTokenUpdateManyMutationInputSchema: z.ZodType<Prisma.VerificationTokenUpdateManyMutationInput> = z.object({
  identifier: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  token: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  expires: z.union([ z.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const VerificationTokenUncheckedUpdateManyInputSchema: z.ZodType<Prisma.VerificationTokenUncheckedUpdateManyInput> = z.object({
  identifier: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  token: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  expires: z.union([ z.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const StringFilterSchema: z.ZodType<Prisma.StringFilter> = z.object({
  equals: z.string().optional(),
  in: z.string().array().optional(),
  notIn: z.string().array().optional(),
  lt: z.string().optional(),
  lte: z.string().optional(),
  gt: z.string().optional(),
  gte: z.string().optional(),
  contains: z.string().optional(),
  startsWith: z.string().optional(),
  endsWith: z.string().optional(),
  search: z.string().optional(),
  not: z.union([ z.string(),z.lazy(() => NestedStringFilterSchema) ]).optional(),
}).strict();

export const StringNullableFilterSchema: z.ZodType<Prisma.StringNullableFilter> = z.object({
  equals: z.string().optional().nullable(),
  in: z.string().array().optional().nullable(),
  notIn: z.string().array().optional().nullable(),
  lt: z.string().optional(),
  lte: z.string().optional(),
  gt: z.string().optional(),
  gte: z.string().optional(),
  contains: z.string().optional(),
  startsWith: z.string().optional(),
  endsWith: z.string().optional(),
  search: z.string().optional(),
  not: z.union([ z.string(),z.lazy(() => NestedStringNullableFilterSchema) ]).optional().nullable(),
}).strict();

export const IntNullableFilterSchema: z.ZodType<Prisma.IntNullableFilter> = z.object({
  equals: z.number().optional().nullable(),
  in: z.number().array().optional().nullable(),
  notIn: z.number().array().optional().nullable(),
  lt: z.number().optional(),
  lte: z.number().optional(),
  gt: z.number().optional(),
  gte: z.number().optional(),
  not: z.union([ z.number(),z.lazy(() => NestedIntNullableFilterSchema) ]).optional().nullable(),
}).strict();

export const DateTimeNullableFilterSchema: z.ZodType<Prisma.DateTimeNullableFilter> = z.object({
  equals: z.date().optional().nullable(),
  in: z.date().array().optional().nullable(),
  notIn: z.date().array().optional().nullable(),
  lt: z.date().optional(),
  lte: z.date().optional(),
  gt: z.date().optional(),
  gte: z.date().optional(),
  not: z.union([ z.date(),z.lazy(() => NestedDateTimeNullableFilterSchema) ]).optional().nullable(),
}).strict();

export const UserRelationFilterSchema: z.ZodType<Prisma.UserRelationFilter> = z.object({
  is: z.lazy(() => UserWhereInputSchema).optional(),
  isNot: z.lazy(() => UserWhereInputSchema).optional()
}).strict();

export const SortOrderInputSchema: z.ZodType<Prisma.SortOrderInput> = z.object({
  sort: z.lazy(() => SortOrderSchema),
  nulls: z.lazy(() => NullsOrderSchema).optional()
}).strict();

export const AccountOrderByRelevanceInputSchema: z.ZodType<Prisma.AccountOrderByRelevanceInput> = z.object({
  fields: z.union([ z.lazy(() => AccountOrderByRelevanceFieldEnumSchema),z.lazy(() => AccountOrderByRelevanceFieldEnumSchema).array() ]),
  sort: z.lazy(() => SortOrderSchema),
  search: z.string()
}).strict();

export const AccountProviderProviderAccountIdCompoundUniqueInputSchema: z.ZodType<Prisma.AccountProviderProviderAccountIdCompoundUniqueInput> = z.object({
  provider: z.string(),
  providerAccountId: z.string()
}).strict();

export const AccountCountOrderByAggregateInputSchema: z.ZodType<Prisma.AccountCountOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  userId: z.lazy(() => SortOrderSchema).optional(),
  type: z.lazy(() => SortOrderSchema).optional(),
  provider: z.lazy(() => SortOrderSchema).optional(),
  providerAccountId: z.lazy(() => SortOrderSchema).optional(),
  refresh_token: z.lazy(() => SortOrderSchema).optional(),
  access_token: z.lazy(() => SortOrderSchema).optional(),
  expires_at: z.lazy(() => SortOrderSchema).optional(),
  token_type: z.lazy(() => SortOrderSchema).optional(),
  scope: z.lazy(() => SortOrderSchema).optional(),
  state: z.lazy(() => SortOrderSchema).optional(),
  id_token: z.lazy(() => SortOrderSchema).optional(),
  session_state: z.lazy(() => SortOrderSchema).optional(),
  refresh_token_expires_in: z.lazy(() => SortOrderSchema).optional(),
  epic_dstu2_patient: z.lazy(() => SortOrderSchema).optional(),
  appointment: z.lazy(() => SortOrderSchema).optional(),
  dob: z.lazy(() => SortOrderSchema).optional(),
  encounter: z.lazy(() => SortOrderSchema).optional(),
  location: z.lazy(() => SortOrderSchema).optional(),
  loginDepartment: z.lazy(() => SortOrderSchema).optional(),
  need_patient_banner: z.lazy(() => SortOrderSchema).optional(),
  patient: z.lazy(() => SortOrderSchema).optional(),
  smart_style_url: z.lazy(() => SortOrderSchema).optional(),
  unconfirmed_status: z.lazy(() => SortOrderSchema).optional(),
  user_email: z.lazy(() => SortOrderSchema).optional(),
  username: z.lazy(() => SortOrderSchema).optional(),
  tenant: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const AccountAvgOrderByAggregateInputSchema: z.ZodType<Prisma.AccountAvgOrderByAggregateInput> = z.object({
  expires_at: z.lazy(() => SortOrderSchema).optional(),
  refresh_token_expires_in: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const AccountMaxOrderByAggregateInputSchema: z.ZodType<Prisma.AccountMaxOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  userId: z.lazy(() => SortOrderSchema).optional(),
  type: z.lazy(() => SortOrderSchema).optional(),
  provider: z.lazy(() => SortOrderSchema).optional(),
  providerAccountId: z.lazy(() => SortOrderSchema).optional(),
  refresh_token: z.lazy(() => SortOrderSchema).optional(),
  access_token: z.lazy(() => SortOrderSchema).optional(),
  expires_at: z.lazy(() => SortOrderSchema).optional(),
  token_type: z.lazy(() => SortOrderSchema).optional(),
  scope: z.lazy(() => SortOrderSchema).optional(),
  state: z.lazy(() => SortOrderSchema).optional(),
  id_token: z.lazy(() => SortOrderSchema).optional(),
  session_state: z.lazy(() => SortOrderSchema).optional(),
  refresh_token_expires_in: z.lazy(() => SortOrderSchema).optional(),
  epic_dstu2_patient: z.lazy(() => SortOrderSchema).optional(),
  appointment: z.lazy(() => SortOrderSchema).optional(),
  dob: z.lazy(() => SortOrderSchema).optional(),
  encounter: z.lazy(() => SortOrderSchema).optional(),
  location: z.lazy(() => SortOrderSchema).optional(),
  loginDepartment: z.lazy(() => SortOrderSchema).optional(),
  need_patient_banner: z.lazy(() => SortOrderSchema).optional(),
  patient: z.lazy(() => SortOrderSchema).optional(),
  smart_style_url: z.lazy(() => SortOrderSchema).optional(),
  unconfirmed_status: z.lazy(() => SortOrderSchema).optional(),
  user_email: z.lazy(() => SortOrderSchema).optional(),
  username: z.lazy(() => SortOrderSchema).optional(),
  tenant: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const AccountMinOrderByAggregateInputSchema: z.ZodType<Prisma.AccountMinOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  userId: z.lazy(() => SortOrderSchema).optional(),
  type: z.lazy(() => SortOrderSchema).optional(),
  provider: z.lazy(() => SortOrderSchema).optional(),
  providerAccountId: z.lazy(() => SortOrderSchema).optional(),
  refresh_token: z.lazy(() => SortOrderSchema).optional(),
  access_token: z.lazy(() => SortOrderSchema).optional(),
  expires_at: z.lazy(() => SortOrderSchema).optional(),
  token_type: z.lazy(() => SortOrderSchema).optional(),
  scope: z.lazy(() => SortOrderSchema).optional(),
  state: z.lazy(() => SortOrderSchema).optional(),
  id_token: z.lazy(() => SortOrderSchema).optional(),
  session_state: z.lazy(() => SortOrderSchema).optional(),
  refresh_token_expires_in: z.lazy(() => SortOrderSchema).optional(),
  epic_dstu2_patient: z.lazy(() => SortOrderSchema).optional(),
  appointment: z.lazy(() => SortOrderSchema).optional(),
  dob: z.lazy(() => SortOrderSchema).optional(),
  encounter: z.lazy(() => SortOrderSchema).optional(),
  location: z.lazy(() => SortOrderSchema).optional(),
  loginDepartment: z.lazy(() => SortOrderSchema).optional(),
  need_patient_banner: z.lazy(() => SortOrderSchema).optional(),
  patient: z.lazy(() => SortOrderSchema).optional(),
  smart_style_url: z.lazy(() => SortOrderSchema).optional(),
  unconfirmed_status: z.lazy(() => SortOrderSchema).optional(),
  user_email: z.lazy(() => SortOrderSchema).optional(),
  username: z.lazy(() => SortOrderSchema).optional(),
  tenant: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const AccountSumOrderByAggregateInputSchema: z.ZodType<Prisma.AccountSumOrderByAggregateInput> = z.object({
  expires_at: z.lazy(() => SortOrderSchema).optional(),
  refresh_token_expires_in: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const StringWithAggregatesFilterSchema: z.ZodType<Prisma.StringWithAggregatesFilter> = z.object({
  equals: z.string().optional(),
  in: z.string().array().optional(),
  notIn: z.string().array().optional(),
  lt: z.string().optional(),
  lte: z.string().optional(),
  gt: z.string().optional(),
  gte: z.string().optional(),
  contains: z.string().optional(),
  startsWith: z.string().optional(),
  endsWith: z.string().optional(),
  search: z.string().optional(),
  not: z.union([ z.string(),z.lazy(() => NestedStringWithAggregatesFilterSchema) ]).optional(),
  _count: z.lazy(() => NestedIntFilterSchema).optional(),
  _min: z.lazy(() => NestedStringFilterSchema).optional(),
  _max: z.lazy(() => NestedStringFilterSchema).optional()
}).strict();

export const StringNullableWithAggregatesFilterSchema: z.ZodType<Prisma.StringNullableWithAggregatesFilter> = z.object({
  equals: z.string().optional().nullable(),
  in: z.string().array().optional().nullable(),
  notIn: z.string().array().optional().nullable(),
  lt: z.string().optional(),
  lte: z.string().optional(),
  gt: z.string().optional(),
  gte: z.string().optional(),
  contains: z.string().optional(),
  startsWith: z.string().optional(),
  endsWith: z.string().optional(),
  search: z.string().optional(),
  not: z.union([ z.string(),z.lazy(() => NestedStringNullableWithAggregatesFilterSchema) ]).optional().nullable(),
  _count: z.lazy(() => NestedIntNullableFilterSchema).optional(),
  _min: z.lazy(() => NestedStringNullableFilterSchema).optional(),
  _max: z.lazy(() => NestedStringNullableFilterSchema).optional()
}).strict();

export const IntNullableWithAggregatesFilterSchema: z.ZodType<Prisma.IntNullableWithAggregatesFilter> = z.object({
  equals: z.number().optional().nullable(),
  in: z.number().array().optional().nullable(),
  notIn: z.number().array().optional().nullable(),
  lt: z.number().optional(),
  lte: z.number().optional(),
  gt: z.number().optional(),
  gte: z.number().optional(),
  not: z.union([ z.number(),z.lazy(() => NestedIntNullableWithAggregatesFilterSchema) ]).optional().nullable(),
  _count: z.lazy(() => NestedIntNullableFilterSchema).optional(),
  _avg: z.lazy(() => NestedFloatNullableFilterSchema).optional(),
  _sum: z.lazy(() => NestedIntNullableFilterSchema).optional(),
  _min: z.lazy(() => NestedIntNullableFilterSchema).optional(),
  _max: z.lazy(() => NestedIntNullableFilterSchema).optional()
}).strict();

export const DateTimeNullableWithAggregatesFilterSchema: z.ZodType<Prisma.DateTimeNullableWithAggregatesFilter> = z.object({
  equals: z.date().optional().nullable(),
  in: z.date().array().optional().nullable(),
  notIn: z.date().array().optional().nullable(),
  lt: z.date().optional(),
  lte: z.date().optional(),
  gt: z.date().optional(),
  gte: z.date().optional(),
  not: z.union([ z.date(),z.lazy(() => NestedDateTimeNullableWithAggregatesFilterSchema) ]).optional().nullable(),
  _count: z.lazy(() => NestedIntNullableFilterSchema).optional(),
  _min: z.lazy(() => NestedDateTimeNullableFilterSchema).optional(),
  _max: z.lazy(() => NestedDateTimeNullableFilterSchema).optional()
}).strict();

export const UserAttributeRelationFilterSchema: z.ZodType<Prisma.UserAttributeRelationFilter> = z.object({
  is: z.lazy(() => UserAttributeWhereInputSchema).optional(),
  isNot: z.lazy(() => UserAttributeWhereInputSchema).optional()
}).strict();

export const AdminOrderByRelevanceInputSchema: z.ZodType<Prisma.AdminOrderByRelevanceInput> = z.object({
  fields: z.union([ z.lazy(() => AdminOrderByRelevanceFieldEnumSchema),z.lazy(() => AdminOrderByRelevanceFieldEnumSchema).array() ]),
  sort: z.lazy(() => SortOrderSchema),
  search: z.string()
}).strict();

export const AdminCountOrderByAggregateInputSchema: z.ZodType<Prisma.AdminCountOrderByAggregateInput> = z.object({
  Id: z.lazy(() => SortOrderSchema).optional(),
  Name: z.lazy(() => SortOrderSchema).optional(),
  Email: z.lazy(() => SortOrderSchema).optional(),
  UserAttributeId: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const AdminMaxOrderByAggregateInputSchema: z.ZodType<Prisma.AdminMaxOrderByAggregateInput> = z.object({
  Id: z.lazy(() => SortOrderSchema).optional(),
  Name: z.lazy(() => SortOrderSchema).optional(),
  Email: z.lazy(() => SortOrderSchema).optional(),
  UserAttributeId: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const AdminMinOrderByAggregateInputSchema: z.ZodType<Prisma.AdminMinOrderByAggregateInput> = z.object({
  Id: z.lazy(() => SortOrderSchema).optional(),
  Name: z.lazy(() => SortOrderSchema).optional(),
  Email: z.lazy(() => SortOrderSchema).optional(),
  UserAttributeId: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const LabOrderAttachmentListRelationFilterSchema: z.ZodType<Prisma.LabOrderAttachmentListRelationFilter> = z.object({
  every: z.lazy(() => LabOrderAttachmentWhereInputSchema).optional(),
  some: z.lazy(() => LabOrderAttachmentWhereInputSchema).optional(),
  none: z.lazy(() => LabOrderAttachmentWhereInputSchema).optional()
}).strict();

export const LabOrderAttachmentOrderByRelationAggregateInputSchema: z.ZodType<Prisma.LabOrderAttachmentOrderByRelationAggregateInput> = z.object({
  _count: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const AttachmentOrderByRelevanceInputSchema: z.ZodType<Prisma.AttachmentOrderByRelevanceInput> = z.object({
  fields: z.union([ z.lazy(() => AttachmentOrderByRelevanceFieldEnumSchema),z.lazy(() => AttachmentOrderByRelevanceFieldEnumSchema).array() ]),
  sort: z.lazy(() => SortOrderSchema),
  search: z.string()
}).strict();

export const AttachmentCountOrderByAggregateInputSchema: z.ZodType<Prisma.AttachmentCountOrderByAggregateInput> = z.object({
  Id: z.lazy(() => SortOrderSchema).optional(),
  AttachmentType: z.lazy(() => SortOrderSchema).optional(),
  AttachmentUrl: z.lazy(() => SortOrderSchema).optional(),
  CreatedAt: z.lazy(() => SortOrderSchema).optional(),
  UpdatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const AttachmentMaxOrderByAggregateInputSchema: z.ZodType<Prisma.AttachmentMaxOrderByAggregateInput> = z.object({
  Id: z.lazy(() => SortOrderSchema).optional(),
  AttachmentType: z.lazy(() => SortOrderSchema).optional(),
  AttachmentUrl: z.lazy(() => SortOrderSchema).optional(),
  CreatedAt: z.lazy(() => SortOrderSchema).optional(),
  UpdatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const AttachmentMinOrderByAggregateInputSchema: z.ZodType<Prisma.AttachmentMinOrderByAggregateInput> = z.object({
  Id: z.lazy(() => SortOrderSchema).optional(),
  AttachmentType: z.lazy(() => SortOrderSchema).optional(),
  AttachmentUrl: z.lazy(() => SortOrderSchema).optional(),
  CreatedAt: z.lazy(() => SortOrderSchema).optional(),
  UpdatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const TestBiomarkerListRelationFilterSchema: z.ZodType<Prisma.TestBiomarkerListRelationFilter> = z.object({
  every: z.lazy(() => TestBiomarkerWhereInputSchema).optional(),
  some: z.lazy(() => TestBiomarkerWhereInputSchema).optional(),
  none: z.lazy(() => TestBiomarkerWhereInputSchema).optional()
}).strict();

export const TestBiomarkerOrderByRelationAggregateInputSchema: z.ZodType<Prisma.TestBiomarkerOrderByRelationAggregateInput> = z.object({
  _count: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const BIOMARKEROrderByRelevanceInputSchema: z.ZodType<Prisma.BIOMARKEROrderByRelevanceInput> = z.object({
  fields: z.union([ z.lazy(() => BIOMARKEROrderByRelevanceFieldEnumSchema),z.lazy(() => BIOMARKEROrderByRelevanceFieldEnumSchema).array() ]),
  sort: z.lazy(() => SortOrderSchema),
  search: z.string()
}).strict();

export const BIOMARKERCountOrderByAggregateInputSchema: z.ZodType<Prisma.BIOMARKERCountOrderByAggregateInput> = z.object({
  HGNCId: z.lazy(() => SortOrderSchema).optional(),
  HGNCStatus: z.lazy(() => SortOrderSchema).optional(),
  HGNCApprovedSymbol: z.lazy(() => SortOrderSchema).optional(),
  HGNCApprovedName: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const BIOMARKERMaxOrderByAggregateInputSchema: z.ZodType<Prisma.BIOMARKERMaxOrderByAggregateInput> = z.object({
  HGNCId: z.lazy(() => SortOrderSchema).optional(),
  HGNCStatus: z.lazy(() => SortOrderSchema).optional(),
  HGNCApprovedSymbol: z.lazy(() => SortOrderSchema).optional(),
  HGNCApprovedName: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const BIOMARKERMinOrderByAggregateInputSchema: z.ZodType<Prisma.BIOMARKERMinOrderByAggregateInput> = z.object({
  HGNCId: z.lazy(() => SortOrderSchema).optional(),
  HGNCStatus: z.lazy(() => SortOrderSchema).optional(),
  HGNCApprovedSymbol: z.lazy(() => SortOrderSchema).optional(),
  HGNCApprovedName: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const LabOrderIcdListRelationFilterSchema: z.ZodType<Prisma.LabOrderIcdListRelationFilter> = z.object({
  every: z.lazy(() => LabOrderIcdWhereInputSchema).optional(),
  some: z.lazy(() => LabOrderIcdWhereInputSchema).optional(),
  none: z.lazy(() => LabOrderIcdWhereInputSchema).optional()
}).strict();

export const LabOrderIcdOrderByRelationAggregateInputSchema: z.ZodType<Prisma.LabOrderIcdOrderByRelationAggregateInput> = z.object({
  _count: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const ICDOrderByRelevanceInputSchema: z.ZodType<Prisma.ICDOrderByRelevanceInput> = z.object({
  fields: z.union([ z.lazy(() => ICDOrderByRelevanceFieldEnumSchema),z.lazy(() => ICDOrderByRelevanceFieldEnumSchema).array() ]),
  sort: z.lazy(() => SortOrderSchema),
  search: z.string()
}).strict();

export const ICDCountOrderByAggregateInputSchema: z.ZodType<Prisma.ICDCountOrderByAggregateInput> = z.object({
  Id: z.lazy(() => SortOrderSchema).optional(),
  Code: z.lazy(() => SortOrderSchema).optional(),
  ShortDescription: z.lazy(() => SortOrderSchema).optional(),
  CreatedAt: z.lazy(() => SortOrderSchema).optional(),
  UpdatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const ICDMaxOrderByAggregateInputSchema: z.ZodType<Prisma.ICDMaxOrderByAggregateInput> = z.object({
  Id: z.lazy(() => SortOrderSchema).optional(),
  Code: z.lazy(() => SortOrderSchema).optional(),
  ShortDescription: z.lazy(() => SortOrderSchema).optional(),
  CreatedAt: z.lazy(() => SortOrderSchema).optional(),
  UpdatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const ICDMinOrderByAggregateInputSchema: z.ZodType<Prisma.ICDMinOrderByAggregateInput> = z.object({
  Id: z.lazy(() => SortOrderSchema).optional(),
  Code: z.lazy(() => SortOrderSchema).optional(),
  ShortDescription: z.lazy(() => SortOrderSchema).optional(),
  CreatedAt: z.lazy(() => SortOrderSchema).optional(),
  UpdatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const TestOrderLoincListRelationFilterSchema: z.ZodType<Prisma.TestOrderLoincListRelationFilter> = z.object({
  every: z.lazy(() => TestOrderLoincWhereInputSchema).optional(),
  some: z.lazy(() => TestOrderLoincWhereInputSchema).optional(),
  none: z.lazy(() => TestOrderLoincWhereInputSchema).optional()
}).strict();

export const TestResultLoincListRelationFilterSchema: z.ZodType<Prisma.TestResultLoincListRelationFilter> = z.object({
  every: z.lazy(() => TestResultLoincWhereInputSchema).optional(),
  some: z.lazy(() => TestResultLoincWhereInputSchema).optional(),
  none: z.lazy(() => TestResultLoincWhereInputSchema).optional()
}).strict();

export const TestOrderLoincOrderByRelationAggregateInputSchema: z.ZodType<Prisma.TestOrderLoincOrderByRelationAggregateInput> = z.object({
  _count: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const TestResultLoincOrderByRelationAggregateInputSchema: z.ZodType<Prisma.TestResultLoincOrderByRelationAggregateInput> = z.object({
  _count: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const LOINCOrderByRelevanceInputSchema: z.ZodType<Prisma.LOINCOrderByRelevanceInput> = z.object({
  fields: z.union([ z.lazy(() => LOINCOrderByRelevanceFieldEnumSchema),z.lazy(() => LOINCOrderByRelevanceFieldEnumSchema).array() ]),
  sort: z.lazy(() => SortOrderSchema),
  search: z.string()
}).strict();

export const LOINCCountOrderByAggregateInputSchema: z.ZodType<Prisma.LOINCCountOrderByAggregateInput> = z.object({
  Loinc_Num: z.lazy(() => SortOrderSchema).optional(),
  COMPONENT: z.lazy(() => SortOrderSchema).optional(),
  PROPERTY: z.lazy(() => SortOrderSchema).optional(),
  TIME_ASPCT: z.lazy(() => SortOrderSchema).optional(),
  SYSTEM: z.lazy(() => SortOrderSchema).optional(),
  SCALE_TYP: z.lazy(() => SortOrderSchema).optional(),
  METHOD_TYP: z.lazy(() => SortOrderSchema).optional(),
  CLASS: z.lazy(() => SortOrderSchema).optional(),
  VersionLastChanged: z.lazy(() => SortOrderSchema).optional(),
  CHNG_TYPE: z.lazy(() => SortOrderSchema).optional(),
  DefinitionDescription: z.lazy(() => SortOrderSchema).optional(),
  STATUS: z.lazy(() => SortOrderSchema).optional(),
  CONSUMER_NAME: z.lazy(() => SortOrderSchema).optional(),
  CLASSTYPE: z.lazy(() => SortOrderSchema).optional(),
  FORMULA: z.lazy(() => SortOrderSchema).optional(),
  EXMPL_ANSWERS: z.lazy(() => SortOrderSchema).optional(),
  SURVEY_QUEST_TEXT: z.lazy(() => SortOrderSchema).optional(),
  SURVEY_QUEST_SRC: z.lazy(() => SortOrderSchema).optional(),
  UNITSREQUIRED: z.lazy(() => SortOrderSchema).optional(),
  RELATEDNAMES2: z.lazy(() => SortOrderSchema).optional(),
  SHORTNAME: z.lazy(() => SortOrderSchema).optional(),
  ORDER_OBS: z.lazy(() => SortOrderSchema).optional(),
  HL7_FIELD_SUBFIELD_ID: z.lazy(() => SortOrderSchema).optional(),
  EXTERNAL_COPYRIGHT_NOTICE: z.lazy(() => SortOrderSchema).optional(),
  EXAMPLE_UNITS: z.lazy(() => SortOrderSchema).optional(),
  LONG_COMMON_NAME: z.lazy(() => SortOrderSchema).optional(),
  EXAMPLE_UCUM_UNITS: z.lazy(() => SortOrderSchema).optional(),
  STATUS_REASON: z.lazy(() => SortOrderSchema).optional(),
  STATUS_TEXT: z.lazy(() => SortOrderSchema).optional(),
  CHANGE_REASON_PUBLIC: z.lazy(() => SortOrderSchema).optional(),
  COMMON_TEST_RANK: z.lazy(() => SortOrderSchema).optional(),
  COMMON_ORDER_RANK: z.lazy(() => SortOrderSchema).optional(),
  HL7_ATTACHMENT_STRUCTURE: z.lazy(() => SortOrderSchema).optional(),
  EXTERNAL_COPYRIGHT_LINK: z.lazy(() => SortOrderSchema).optional(),
  PanelType: z.lazy(() => SortOrderSchema).optional(),
  AskAtOrderEntry: z.lazy(() => SortOrderSchema).optional(),
  AssociatedObservations: z.lazy(() => SortOrderSchema).optional(),
  VersionFirstReleased: z.lazy(() => SortOrderSchema).optional(),
  ValidHL7AttachmentRequest: z.lazy(() => SortOrderSchema).optional(),
  DisplayName: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const LOINCAvgOrderByAggregateInputSchema: z.ZodType<Prisma.LOINCAvgOrderByAggregateInput> = z.object({
  CLASSTYPE: z.lazy(() => SortOrderSchema).optional(),
  COMMON_TEST_RANK: z.lazy(() => SortOrderSchema).optional(),
  COMMON_ORDER_RANK: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const LOINCMaxOrderByAggregateInputSchema: z.ZodType<Prisma.LOINCMaxOrderByAggregateInput> = z.object({
  Loinc_Num: z.lazy(() => SortOrderSchema).optional(),
  COMPONENT: z.lazy(() => SortOrderSchema).optional(),
  PROPERTY: z.lazy(() => SortOrderSchema).optional(),
  TIME_ASPCT: z.lazy(() => SortOrderSchema).optional(),
  SYSTEM: z.lazy(() => SortOrderSchema).optional(),
  SCALE_TYP: z.lazy(() => SortOrderSchema).optional(),
  METHOD_TYP: z.lazy(() => SortOrderSchema).optional(),
  CLASS: z.lazy(() => SortOrderSchema).optional(),
  VersionLastChanged: z.lazy(() => SortOrderSchema).optional(),
  CHNG_TYPE: z.lazy(() => SortOrderSchema).optional(),
  DefinitionDescription: z.lazy(() => SortOrderSchema).optional(),
  STATUS: z.lazy(() => SortOrderSchema).optional(),
  CONSUMER_NAME: z.lazy(() => SortOrderSchema).optional(),
  CLASSTYPE: z.lazy(() => SortOrderSchema).optional(),
  FORMULA: z.lazy(() => SortOrderSchema).optional(),
  EXMPL_ANSWERS: z.lazy(() => SortOrderSchema).optional(),
  SURVEY_QUEST_TEXT: z.lazy(() => SortOrderSchema).optional(),
  SURVEY_QUEST_SRC: z.lazy(() => SortOrderSchema).optional(),
  UNITSREQUIRED: z.lazy(() => SortOrderSchema).optional(),
  RELATEDNAMES2: z.lazy(() => SortOrderSchema).optional(),
  SHORTNAME: z.lazy(() => SortOrderSchema).optional(),
  ORDER_OBS: z.lazy(() => SortOrderSchema).optional(),
  HL7_FIELD_SUBFIELD_ID: z.lazy(() => SortOrderSchema).optional(),
  EXTERNAL_COPYRIGHT_NOTICE: z.lazy(() => SortOrderSchema).optional(),
  EXAMPLE_UNITS: z.lazy(() => SortOrderSchema).optional(),
  LONG_COMMON_NAME: z.lazy(() => SortOrderSchema).optional(),
  EXAMPLE_UCUM_UNITS: z.lazy(() => SortOrderSchema).optional(),
  STATUS_REASON: z.lazy(() => SortOrderSchema).optional(),
  STATUS_TEXT: z.lazy(() => SortOrderSchema).optional(),
  CHANGE_REASON_PUBLIC: z.lazy(() => SortOrderSchema).optional(),
  COMMON_TEST_RANK: z.lazy(() => SortOrderSchema).optional(),
  COMMON_ORDER_RANK: z.lazy(() => SortOrderSchema).optional(),
  HL7_ATTACHMENT_STRUCTURE: z.lazy(() => SortOrderSchema).optional(),
  EXTERNAL_COPYRIGHT_LINK: z.lazy(() => SortOrderSchema).optional(),
  PanelType: z.lazy(() => SortOrderSchema).optional(),
  AskAtOrderEntry: z.lazy(() => SortOrderSchema).optional(),
  AssociatedObservations: z.lazy(() => SortOrderSchema).optional(),
  VersionFirstReleased: z.lazy(() => SortOrderSchema).optional(),
  ValidHL7AttachmentRequest: z.lazy(() => SortOrderSchema).optional(),
  DisplayName: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const LOINCMinOrderByAggregateInputSchema: z.ZodType<Prisma.LOINCMinOrderByAggregateInput> = z.object({
  Loinc_Num: z.lazy(() => SortOrderSchema).optional(),
  COMPONENT: z.lazy(() => SortOrderSchema).optional(),
  PROPERTY: z.lazy(() => SortOrderSchema).optional(),
  TIME_ASPCT: z.lazy(() => SortOrderSchema).optional(),
  SYSTEM: z.lazy(() => SortOrderSchema).optional(),
  SCALE_TYP: z.lazy(() => SortOrderSchema).optional(),
  METHOD_TYP: z.lazy(() => SortOrderSchema).optional(),
  CLASS: z.lazy(() => SortOrderSchema).optional(),
  VersionLastChanged: z.lazy(() => SortOrderSchema).optional(),
  CHNG_TYPE: z.lazy(() => SortOrderSchema).optional(),
  DefinitionDescription: z.lazy(() => SortOrderSchema).optional(),
  STATUS: z.lazy(() => SortOrderSchema).optional(),
  CONSUMER_NAME: z.lazy(() => SortOrderSchema).optional(),
  CLASSTYPE: z.lazy(() => SortOrderSchema).optional(),
  FORMULA: z.lazy(() => SortOrderSchema).optional(),
  EXMPL_ANSWERS: z.lazy(() => SortOrderSchema).optional(),
  SURVEY_QUEST_TEXT: z.lazy(() => SortOrderSchema).optional(),
  SURVEY_QUEST_SRC: z.lazy(() => SortOrderSchema).optional(),
  UNITSREQUIRED: z.lazy(() => SortOrderSchema).optional(),
  RELATEDNAMES2: z.lazy(() => SortOrderSchema).optional(),
  SHORTNAME: z.lazy(() => SortOrderSchema).optional(),
  ORDER_OBS: z.lazy(() => SortOrderSchema).optional(),
  HL7_FIELD_SUBFIELD_ID: z.lazy(() => SortOrderSchema).optional(),
  EXTERNAL_COPYRIGHT_NOTICE: z.lazy(() => SortOrderSchema).optional(),
  EXAMPLE_UNITS: z.lazy(() => SortOrderSchema).optional(),
  LONG_COMMON_NAME: z.lazy(() => SortOrderSchema).optional(),
  EXAMPLE_UCUM_UNITS: z.lazy(() => SortOrderSchema).optional(),
  STATUS_REASON: z.lazy(() => SortOrderSchema).optional(),
  STATUS_TEXT: z.lazy(() => SortOrderSchema).optional(),
  CHANGE_REASON_PUBLIC: z.lazy(() => SortOrderSchema).optional(),
  COMMON_TEST_RANK: z.lazy(() => SortOrderSchema).optional(),
  COMMON_ORDER_RANK: z.lazy(() => SortOrderSchema).optional(),
  HL7_ATTACHMENT_STRUCTURE: z.lazy(() => SortOrderSchema).optional(),
  EXTERNAL_COPYRIGHT_LINK: z.lazy(() => SortOrderSchema).optional(),
  PanelType: z.lazy(() => SortOrderSchema).optional(),
  AskAtOrderEntry: z.lazy(() => SortOrderSchema).optional(),
  AssociatedObservations: z.lazy(() => SortOrderSchema).optional(),
  VersionFirstReleased: z.lazy(() => SortOrderSchema).optional(),
  ValidHL7AttachmentRequest: z.lazy(() => SortOrderSchema).optional(),
  DisplayName: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const LOINCSumOrderByAggregateInputSchema: z.ZodType<Prisma.LOINCSumOrderByAggregateInput> = z.object({
  CLASSTYPE: z.lazy(() => SortOrderSchema).optional(),
  COMMON_TEST_RANK: z.lazy(() => SortOrderSchema).optional(),
  COMMON_ORDER_RANK: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const IntFilterSchema: z.ZodType<Prisma.IntFilter> = z.object({
  equals: z.number().optional(),
  in: z.number().array().optional(),
  notIn: z.number().array().optional(),
  lt: z.number().optional(),
  lte: z.number().optional(),
  gt: z.number().optional(),
  gte: z.number().optional(),
  not: z.union([ z.number(),z.lazy(() => NestedIntFilterSchema) ]).optional(),
}).strict();

export const SponsoredTestListRelationFilterSchema: z.ZodType<Prisma.SponsoredTestListRelationFilter> = z.object({
  every: z.lazy(() => SponsoredTestWhereInputSchema).optional(),
  some: z.lazy(() => SponsoredTestWhereInputSchema).optional(),
  none: z.lazy(() => SponsoredTestWhereInputSchema).optional()
}).strict();

export const TestCatalogListRelationFilterSchema: z.ZodType<Prisma.TestCatalogListRelationFilter> = z.object({
  every: z.lazy(() => TestCatalogWhereInputSchema).optional(),
  some: z.lazy(() => TestCatalogWhereInputSchema).optional(),
  none: z.lazy(() => TestCatalogWhereInputSchema).optional()
}).strict();

export const SponsoredTestOrderByRelationAggregateInputSchema: z.ZodType<Prisma.SponsoredTestOrderByRelationAggregateInput> = z.object({
  _count: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const TestCatalogOrderByRelationAggregateInputSchema: z.ZodType<Prisma.TestCatalogOrderByRelationAggregateInput> = z.object({
  _count: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const LabOrderByRelevanceInputSchema: z.ZodType<Prisma.LabOrderByRelevanceInput> = z.object({
  fields: z.union([ z.lazy(() => LabOrderByRelevanceFieldEnumSchema),z.lazy(() => LabOrderByRelevanceFieldEnumSchema).array() ]),
  sort: z.lazy(() => SortOrderSchema),
  search: z.string()
}).strict();

export const LabCountOrderByAggregateInputSchema: z.ZodType<Prisma.LabCountOrderByAggregateInput> = z.object({
  LabId: z.lazy(() => SortOrderSchema).optional(),
  LabName: z.lazy(() => SortOrderSchema).optional(),
  LabCode: z.lazy(() => SortOrderSchema).optional(),
  Address: z.lazy(() => SortOrderSchema).optional(),
  City: z.lazy(() => SortOrderSchema).optional(),
  State: z.lazy(() => SortOrderSchema).optional(),
  Zip: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const LabAvgOrderByAggregateInputSchema: z.ZodType<Prisma.LabAvgOrderByAggregateInput> = z.object({
  LabId: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const LabMaxOrderByAggregateInputSchema: z.ZodType<Prisma.LabMaxOrderByAggregateInput> = z.object({
  LabId: z.lazy(() => SortOrderSchema).optional(),
  LabName: z.lazy(() => SortOrderSchema).optional(),
  LabCode: z.lazy(() => SortOrderSchema).optional(),
  Address: z.lazy(() => SortOrderSchema).optional(),
  City: z.lazy(() => SortOrderSchema).optional(),
  State: z.lazy(() => SortOrderSchema).optional(),
  Zip: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const LabMinOrderByAggregateInputSchema: z.ZodType<Prisma.LabMinOrderByAggregateInput> = z.object({
  LabId: z.lazy(() => SortOrderSchema).optional(),
  LabName: z.lazy(() => SortOrderSchema).optional(),
  LabCode: z.lazy(() => SortOrderSchema).optional(),
  Address: z.lazy(() => SortOrderSchema).optional(),
  City: z.lazy(() => SortOrderSchema).optional(),
  State: z.lazy(() => SortOrderSchema).optional(),
  Zip: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const LabSumOrderByAggregateInputSchema: z.ZodType<Prisma.LabSumOrderByAggregateInput> = z.object({
  LabId: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const IntWithAggregatesFilterSchema: z.ZodType<Prisma.IntWithAggregatesFilter> = z.object({
  equals: z.number().optional(),
  in: z.number().array().optional(),
  notIn: z.number().array().optional(),
  lt: z.number().optional(),
  lte: z.number().optional(),
  gt: z.number().optional(),
  gte: z.number().optional(),
  not: z.union([ z.number(),z.lazy(() => NestedIntWithAggregatesFilterSchema) ]).optional(),
  _count: z.lazy(() => NestedIntFilterSchema).optional(),
  _avg: z.lazy(() => NestedFloatFilterSchema).optional(),
  _sum: z.lazy(() => NestedIntFilterSchema).optional(),
  _min: z.lazy(() => NestedIntFilterSchema).optional(),
  _max: z.lazy(() => NestedIntFilterSchema).optional()
}).strict();

export const ProviderNullableRelationFilterSchema: z.ZodType<Prisma.ProviderNullableRelationFilter> = z.object({
  is: z.lazy(() => ProviderWhereInputSchema).optional().nullable(),
  isNot: z.lazy(() => ProviderWhereInputSchema).optional().nullable()
}).strict();

export const PatientNullableRelationFilterSchema: z.ZodType<Prisma.PatientNullableRelationFilter> = z.object({
  is: z.lazy(() => PatientWhereInputSchema).optional().nullable(),
  isNot: z.lazy(() => PatientWhereInputSchema).optional().nullable()
}).strict();

export const OrganizationNullableRelationFilterSchema: z.ZodType<Prisma.OrganizationNullableRelationFilter> = z.object({
  is: z.lazy(() => OrganizationWhereInputSchema).optional().nullable(),
  isNot: z.lazy(() => OrganizationWhereInputSchema).optional().nullable()
}).strict();

export const LabOrderBillingListRelationFilterSchema: z.ZodType<Prisma.LabOrderBillingListRelationFilter> = z.object({
  every: z.lazy(() => LabOrderBillingWhereInputSchema).optional(),
  some: z.lazy(() => LabOrderBillingWhereInputSchema).optional(),
  none: z.lazy(() => LabOrderBillingWhereInputSchema).optional()
}).strict();

export const LabOrderSpecimenListRelationFilterSchema: z.ZodType<Prisma.LabOrderSpecimenListRelationFilter> = z.object({
  every: z.lazy(() => LabOrderSpecimenWhereInputSchema).optional(),
  some: z.lazy(() => LabOrderSpecimenWhereInputSchema).optional(),
  none: z.lazy(() => LabOrderSpecimenWhereInputSchema).optional()
}).strict();

export const LabOrderSponsoredTestConsentListRelationFilterSchema: z.ZodType<Prisma.LabOrderSponsoredTestConsentListRelationFilter> = z.object({
  every: z.lazy(() => LabOrderSponsoredTestConsentWhereInputSchema).optional(),
  some: z.lazy(() => LabOrderSponsoredTestConsentWhereInputSchema).optional(),
  none: z.lazy(() => LabOrderSponsoredTestConsentWhereInputSchema).optional()
}).strict();

export const LabOrderStatusListRelationFilterSchema: z.ZodType<Prisma.LabOrderStatusListRelationFilter> = z.object({
  every: z.lazy(() => LabOrderStatusWhereInputSchema).optional(),
  some: z.lazy(() => LabOrderStatusWhereInputSchema).optional(),
  none: z.lazy(() => LabOrderStatusWhereInputSchema).optional()
}).strict();

export const LabOrderTestListRelationFilterSchema: z.ZodType<Prisma.LabOrderTestListRelationFilter> = z.object({
  every: z.lazy(() => LabOrderTestWhereInputSchema).optional(),
  some: z.lazy(() => LabOrderTestWhereInputSchema).optional(),
  none: z.lazy(() => LabOrderTestWhereInputSchema).optional()
}).strict();

export const LabOrderBillingOrderByRelationAggregateInputSchema: z.ZodType<Prisma.LabOrderBillingOrderByRelationAggregateInput> = z.object({
  _count: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const LabOrderSpecimenOrderByRelationAggregateInputSchema: z.ZodType<Prisma.LabOrderSpecimenOrderByRelationAggregateInput> = z.object({
  _count: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const LabOrderSponsoredTestConsentOrderByRelationAggregateInputSchema: z.ZodType<Prisma.LabOrderSponsoredTestConsentOrderByRelationAggregateInput> = z.object({
  _count: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const LabOrderStatusOrderByRelationAggregateInputSchema: z.ZodType<Prisma.LabOrderStatusOrderByRelationAggregateInput> = z.object({
  _count: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const LabOrderTestOrderByRelationAggregateInputSchema: z.ZodType<Prisma.LabOrderTestOrderByRelationAggregateInput> = z.object({
  _count: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const LabOrderOrderByRelevanceInputSchema: z.ZodType<Prisma.LabOrderOrderByRelevanceInput> = z.object({
  fields: z.union([ z.lazy(() => LabOrderOrderByRelevanceFieldEnumSchema),z.lazy(() => LabOrderOrderByRelevanceFieldEnumSchema).array() ]),
  sort: z.lazy(() => SortOrderSchema),
  search: z.string()
}).strict();

export const LabOrderCountOrderByAggregateInputSchema: z.ZodType<Prisma.LabOrderCountOrderByAggregateInput> = z.object({
  Id: z.lazy(() => SortOrderSchema).optional(),
  OrderNumber: z.lazy(() => SortOrderSchema).optional(),
  AccessionNumber: z.lazy(() => SortOrderSchema).optional(),
  OrderingProviderId: z.lazy(() => SortOrderSchema).optional(),
  TreatingProviderId: z.lazy(() => SortOrderSchema).optional(),
  PatientId: z.lazy(() => SortOrderSchema).optional(),
  PatientMRN: z.lazy(() => SortOrderSchema).optional(),
  PatientMobile: z.lazy(() => SortOrderSchema).optional(),
  PatientEmail: z.lazy(() => SortOrderSchema).optional(),
  OrganizationId: z.lazy(() => SortOrderSchema).optional(),
  OrderDate: z.lazy(() => SortOrderSchema).optional(),
  OrderNotes: z.lazy(() => SortOrderSchema).optional(),
  CreatedAt: z.lazy(() => SortOrderSchema).optional(),
  UpdatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const LabOrderMaxOrderByAggregateInputSchema: z.ZodType<Prisma.LabOrderMaxOrderByAggregateInput> = z.object({
  Id: z.lazy(() => SortOrderSchema).optional(),
  OrderNumber: z.lazy(() => SortOrderSchema).optional(),
  AccessionNumber: z.lazy(() => SortOrderSchema).optional(),
  OrderingProviderId: z.lazy(() => SortOrderSchema).optional(),
  TreatingProviderId: z.lazy(() => SortOrderSchema).optional(),
  PatientId: z.lazy(() => SortOrderSchema).optional(),
  PatientMRN: z.lazy(() => SortOrderSchema).optional(),
  PatientMobile: z.lazy(() => SortOrderSchema).optional(),
  PatientEmail: z.lazy(() => SortOrderSchema).optional(),
  OrganizationId: z.lazy(() => SortOrderSchema).optional(),
  OrderDate: z.lazy(() => SortOrderSchema).optional(),
  OrderNotes: z.lazy(() => SortOrderSchema).optional(),
  CreatedAt: z.lazy(() => SortOrderSchema).optional(),
  UpdatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const LabOrderMinOrderByAggregateInputSchema: z.ZodType<Prisma.LabOrderMinOrderByAggregateInput> = z.object({
  Id: z.lazy(() => SortOrderSchema).optional(),
  OrderNumber: z.lazy(() => SortOrderSchema).optional(),
  AccessionNumber: z.lazy(() => SortOrderSchema).optional(),
  OrderingProviderId: z.lazy(() => SortOrderSchema).optional(),
  TreatingProviderId: z.lazy(() => SortOrderSchema).optional(),
  PatientId: z.lazy(() => SortOrderSchema).optional(),
  PatientMRN: z.lazy(() => SortOrderSchema).optional(),
  PatientMobile: z.lazy(() => SortOrderSchema).optional(),
  PatientEmail: z.lazy(() => SortOrderSchema).optional(),
  OrganizationId: z.lazy(() => SortOrderSchema).optional(),
  OrderDate: z.lazy(() => SortOrderSchema).optional(),
  OrderNotes: z.lazy(() => SortOrderSchema).optional(),
  CreatedAt: z.lazy(() => SortOrderSchema).optional(),
  UpdatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const LabOrderNullableRelationFilterSchema: z.ZodType<Prisma.LabOrderNullableRelationFilter> = z.object({
  is: z.lazy(() => LabOrderWhereInputSchema).optional().nullable(),
  isNot: z.lazy(() => LabOrderWhereInputSchema).optional().nullable()
}).strict();

export const AttachmentNullableRelationFilterSchema: z.ZodType<Prisma.AttachmentNullableRelationFilter> = z.object({
  is: z.lazy(() => AttachmentWhereInputSchema).optional().nullable(),
  isNot: z.lazy(() => AttachmentWhereInputSchema).optional().nullable()
}).strict();

export const LabOrderAttachmentOrderByRelevanceInputSchema: z.ZodType<Prisma.LabOrderAttachmentOrderByRelevanceInput> = z.object({
  fields: z.union([ z.lazy(() => LabOrderAttachmentOrderByRelevanceFieldEnumSchema),z.lazy(() => LabOrderAttachmentOrderByRelevanceFieldEnumSchema).array() ]),
  sort: z.lazy(() => SortOrderSchema),
  search: z.string()
}).strict();

export const LabOrderAttachmentCountOrderByAggregateInputSchema: z.ZodType<Prisma.LabOrderAttachmentCountOrderByAggregateInput> = z.object({
  Id: z.lazy(() => SortOrderSchema).optional(),
  LabOrderId: z.lazy(() => SortOrderSchema).optional(),
  AttachmentId: z.lazy(() => SortOrderSchema).optional(),
  CreatedAt: z.lazy(() => SortOrderSchema).optional(),
  UpdatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const LabOrderAttachmentMaxOrderByAggregateInputSchema: z.ZodType<Prisma.LabOrderAttachmentMaxOrderByAggregateInput> = z.object({
  Id: z.lazy(() => SortOrderSchema).optional(),
  LabOrderId: z.lazy(() => SortOrderSchema).optional(),
  AttachmentId: z.lazy(() => SortOrderSchema).optional(),
  CreatedAt: z.lazy(() => SortOrderSchema).optional(),
  UpdatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const LabOrderAttachmentMinOrderByAggregateInputSchema: z.ZodType<Prisma.LabOrderAttachmentMinOrderByAggregateInput> = z.object({
  Id: z.lazy(() => SortOrderSchema).optional(),
  LabOrderId: z.lazy(() => SortOrderSchema).optional(),
  AttachmentId: z.lazy(() => SortOrderSchema).optional(),
  CreatedAt: z.lazy(() => SortOrderSchema).optional(),
  UpdatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const LabOrderBillingOrderByRelevanceInputSchema: z.ZodType<Prisma.LabOrderBillingOrderByRelevanceInput> = z.object({
  fields: z.union([ z.lazy(() => LabOrderBillingOrderByRelevanceFieldEnumSchema),z.lazy(() => LabOrderBillingOrderByRelevanceFieldEnumSchema).array() ]),
  sort: z.lazy(() => SortOrderSchema),
  search: z.string()
}).strict();

export const LabOrderBillingCountOrderByAggregateInputSchema: z.ZodType<Prisma.LabOrderBillingCountOrderByAggregateInput> = z.object({
  Id: z.lazy(() => SortOrderSchema).optional(),
  LabOrderId: z.lazy(() => SortOrderSchema).optional(),
  BillToId: z.lazy(() => SortOrderSchema).optional(),
  HealthPalnId: z.lazy(() => SortOrderSchema).optional(),
  PatientStatus: z.lazy(() => SortOrderSchema).optional(),
  SponoseredTestCouponCode: z.lazy(() => SortOrderSchema).optional(),
  CreatedAt: z.lazy(() => SortOrderSchema).optional(),
  UpdatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const LabOrderBillingMaxOrderByAggregateInputSchema: z.ZodType<Prisma.LabOrderBillingMaxOrderByAggregateInput> = z.object({
  Id: z.lazy(() => SortOrderSchema).optional(),
  LabOrderId: z.lazy(() => SortOrderSchema).optional(),
  BillToId: z.lazy(() => SortOrderSchema).optional(),
  HealthPalnId: z.lazy(() => SortOrderSchema).optional(),
  PatientStatus: z.lazy(() => SortOrderSchema).optional(),
  SponoseredTestCouponCode: z.lazy(() => SortOrderSchema).optional(),
  CreatedAt: z.lazy(() => SortOrderSchema).optional(),
  UpdatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const LabOrderBillingMinOrderByAggregateInputSchema: z.ZodType<Prisma.LabOrderBillingMinOrderByAggregateInput> = z.object({
  Id: z.lazy(() => SortOrderSchema).optional(),
  LabOrderId: z.lazy(() => SortOrderSchema).optional(),
  BillToId: z.lazy(() => SortOrderSchema).optional(),
  HealthPalnId: z.lazy(() => SortOrderSchema).optional(),
  PatientStatus: z.lazy(() => SortOrderSchema).optional(),
  SponoseredTestCouponCode: z.lazy(() => SortOrderSchema).optional(),
  CreatedAt: z.lazy(() => SortOrderSchema).optional(),
  UpdatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const ICDNullableRelationFilterSchema: z.ZodType<Prisma.ICDNullableRelationFilter> = z.object({
  is: z.lazy(() => ICDWhereInputSchema).optional().nullable(),
  isNot: z.lazy(() => ICDWhereInputSchema).optional().nullable()
}).strict();

export const LabOrderIcdOrderByRelevanceInputSchema: z.ZodType<Prisma.LabOrderIcdOrderByRelevanceInput> = z.object({
  fields: z.union([ z.lazy(() => LabOrderIcdOrderByRelevanceFieldEnumSchema),z.lazy(() => LabOrderIcdOrderByRelevanceFieldEnumSchema).array() ]),
  sort: z.lazy(() => SortOrderSchema),
  search: z.string()
}).strict();

export const LabOrderIcdCountOrderByAggregateInputSchema: z.ZodType<Prisma.LabOrderIcdCountOrderByAggregateInput> = z.object({
  Id: z.lazy(() => SortOrderSchema).optional(),
  LabOrderId: z.lazy(() => SortOrderSchema).optional(),
  ICDId: z.lazy(() => SortOrderSchema).optional(),
  CreatedAt: z.lazy(() => SortOrderSchema).optional(),
  UpdatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const LabOrderIcdMaxOrderByAggregateInputSchema: z.ZodType<Prisma.LabOrderIcdMaxOrderByAggregateInput> = z.object({
  Id: z.lazy(() => SortOrderSchema).optional(),
  LabOrderId: z.lazy(() => SortOrderSchema).optional(),
  ICDId: z.lazy(() => SortOrderSchema).optional(),
  CreatedAt: z.lazy(() => SortOrderSchema).optional(),
  UpdatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const LabOrderIcdMinOrderByAggregateInputSchema: z.ZodType<Prisma.LabOrderIcdMinOrderByAggregateInput> = z.object({
  Id: z.lazy(() => SortOrderSchema).optional(),
  LabOrderId: z.lazy(() => SortOrderSchema).optional(),
  ICDId: z.lazy(() => SortOrderSchema).optional(),
  CreatedAt: z.lazy(() => SortOrderSchema).optional(),
  UpdatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const LabOrderSpecimenOrderByRelevanceInputSchema: z.ZodType<Prisma.LabOrderSpecimenOrderByRelevanceInput> = z.object({
  fields: z.union([ z.lazy(() => LabOrderSpecimenOrderByRelevanceFieldEnumSchema),z.lazy(() => LabOrderSpecimenOrderByRelevanceFieldEnumSchema).array() ]),
  sort: z.lazy(() => SortOrderSchema),
  search: z.string()
}).strict();

export const LabOrderSpecimenCountOrderByAggregateInputSchema: z.ZodType<Prisma.LabOrderSpecimenCountOrderByAggregateInput> = z.object({
  Id: z.lazy(() => SortOrderSchema).optional(),
  LabOrderId: z.lazy(() => SortOrderSchema).optional(),
  SpecimenType: z.lazy(() => SortOrderSchema).optional(),
  SpecimenCount: z.lazy(() => SortOrderSchema).optional(),
  CollectedDate: z.lazy(() => SortOrderSchema).optional(),
  CollectedTime: z.lazy(() => SortOrderSchema).optional(),
  SpecimenID: z.lazy(() => SortOrderSchema).optional(),
  BodySite: z.lazy(() => SortOrderSchema).optional(),
  TumorType: z.lazy(() => SortOrderSchema).optional(),
  Fixative: z.lazy(() => SortOrderSchema).optional(),
  FixativeDuration: z.lazy(() => SortOrderSchema).optional(),
  ColdIschemicTime: z.lazy(() => SortOrderSchema).optional(),
  CreatedAt: z.lazy(() => SortOrderSchema).optional(),
  UpdatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const LabOrderSpecimenMaxOrderByAggregateInputSchema: z.ZodType<Prisma.LabOrderSpecimenMaxOrderByAggregateInput> = z.object({
  Id: z.lazy(() => SortOrderSchema).optional(),
  LabOrderId: z.lazy(() => SortOrderSchema).optional(),
  SpecimenType: z.lazy(() => SortOrderSchema).optional(),
  SpecimenCount: z.lazy(() => SortOrderSchema).optional(),
  CollectedDate: z.lazy(() => SortOrderSchema).optional(),
  CollectedTime: z.lazy(() => SortOrderSchema).optional(),
  SpecimenID: z.lazy(() => SortOrderSchema).optional(),
  BodySite: z.lazy(() => SortOrderSchema).optional(),
  TumorType: z.lazy(() => SortOrderSchema).optional(),
  Fixative: z.lazy(() => SortOrderSchema).optional(),
  FixativeDuration: z.lazy(() => SortOrderSchema).optional(),
  ColdIschemicTime: z.lazy(() => SortOrderSchema).optional(),
  CreatedAt: z.lazy(() => SortOrderSchema).optional(),
  UpdatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const LabOrderSpecimenMinOrderByAggregateInputSchema: z.ZodType<Prisma.LabOrderSpecimenMinOrderByAggregateInput> = z.object({
  Id: z.lazy(() => SortOrderSchema).optional(),
  LabOrderId: z.lazy(() => SortOrderSchema).optional(),
  SpecimenType: z.lazy(() => SortOrderSchema).optional(),
  SpecimenCount: z.lazy(() => SortOrderSchema).optional(),
  CollectedDate: z.lazy(() => SortOrderSchema).optional(),
  CollectedTime: z.lazy(() => SortOrderSchema).optional(),
  SpecimenID: z.lazy(() => SortOrderSchema).optional(),
  BodySite: z.lazy(() => SortOrderSchema).optional(),
  TumorType: z.lazy(() => SortOrderSchema).optional(),
  Fixative: z.lazy(() => SortOrderSchema).optional(),
  FixativeDuration: z.lazy(() => SortOrderSchema).optional(),
  ColdIschemicTime: z.lazy(() => SortOrderSchema).optional(),
  CreatedAt: z.lazy(() => SortOrderSchema).optional(),
  UpdatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const SponsoredTestNullableRelationFilterSchema: z.ZodType<Prisma.SponsoredTestNullableRelationFilter> = z.object({
  is: z.lazy(() => SponsoredTestWhereInputSchema).optional().nullable(),
  isNot: z.lazy(() => SponsoredTestWhereInputSchema).optional().nullable()
}).strict();

export const LabOrderSponsoredTestConsentOrderByRelevanceInputSchema: z.ZodType<Prisma.LabOrderSponsoredTestConsentOrderByRelevanceInput> = z.object({
  fields: z.union([ z.lazy(() => LabOrderSponsoredTestConsentOrderByRelevanceFieldEnumSchema),z.lazy(() => LabOrderSponsoredTestConsentOrderByRelevanceFieldEnumSchema).array() ]),
  sort: z.lazy(() => SortOrderSchema),
  search: z.string()
}).strict();

export const LabOrderSponsoredTestConsentCountOrderByAggregateInputSchema: z.ZodType<Prisma.LabOrderSponsoredTestConsentCountOrderByAggregateInput> = z.object({
  Id: z.lazy(() => SortOrderSchema).optional(),
  LabOrderId: z.lazy(() => SortOrderSchema).optional(),
  SponsoredCasandraTestId: z.lazy(() => SortOrderSchema).optional(),
  ProviderName: z.lazy(() => SortOrderSchema).optional(),
  ProviderNPI: z.lazy(() => SortOrderSchema).optional(),
  ConsentAt: z.lazy(() => SortOrderSchema).optional(),
  CreatedAt: z.lazy(() => SortOrderSchema).optional(),
  UpdatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const LabOrderSponsoredTestConsentMaxOrderByAggregateInputSchema: z.ZodType<Prisma.LabOrderSponsoredTestConsentMaxOrderByAggregateInput> = z.object({
  Id: z.lazy(() => SortOrderSchema).optional(),
  LabOrderId: z.lazy(() => SortOrderSchema).optional(),
  SponsoredCasandraTestId: z.lazy(() => SortOrderSchema).optional(),
  ProviderName: z.lazy(() => SortOrderSchema).optional(),
  ProviderNPI: z.lazy(() => SortOrderSchema).optional(),
  ConsentAt: z.lazy(() => SortOrderSchema).optional(),
  CreatedAt: z.lazy(() => SortOrderSchema).optional(),
  UpdatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const LabOrderSponsoredTestConsentMinOrderByAggregateInputSchema: z.ZodType<Prisma.LabOrderSponsoredTestConsentMinOrderByAggregateInput> = z.object({
  Id: z.lazy(() => SortOrderSchema).optional(),
  LabOrderId: z.lazy(() => SortOrderSchema).optional(),
  SponsoredCasandraTestId: z.lazy(() => SortOrderSchema).optional(),
  ProviderName: z.lazy(() => SortOrderSchema).optional(),
  ProviderNPI: z.lazy(() => SortOrderSchema).optional(),
  ConsentAt: z.lazy(() => SortOrderSchema).optional(),
  CreatedAt: z.lazy(() => SortOrderSchema).optional(),
  UpdatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const LabOrderStatusOrderByRelevanceInputSchema: z.ZodType<Prisma.LabOrderStatusOrderByRelevanceInput> = z.object({
  fields: z.union([ z.lazy(() => LabOrderStatusOrderByRelevanceFieldEnumSchema),z.lazy(() => LabOrderStatusOrderByRelevanceFieldEnumSchema).array() ]),
  sort: z.lazy(() => SortOrderSchema),
  search: z.string()
}).strict();

export const LabOrderStatusCountOrderByAggregateInputSchema: z.ZodType<Prisma.LabOrderStatusCountOrderByAggregateInput> = z.object({
  Id: z.lazy(() => SortOrderSchema).optional(),
  LabOrderId: z.lazy(() => SortOrderSchema).optional(),
  Status: z.lazy(() => SortOrderSchema).optional(),
  StatusDate: z.lazy(() => SortOrderSchema).optional(),
  CreatedAt: z.lazy(() => SortOrderSchema).optional(),
  UpdatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const LabOrderStatusMaxOrderByAggregateInputSchema: z.ZodType<Prisma.LabOrderStatusMaxOrderByAggregateInput> = z.object({
  Id: z.lazy(() => SortOrderSchema).optional(),
  LabOrderId: z.lazy(() => SortOrderSchema).optional(),
  Status: z.lazy(() => SortOrderSchema).optional(),
  StatusDate: z.lazy(() => SortOrderSchema).optional(),
  CreatedAt: z.lazy(() => SortOrderSchema).optional(),
  UpdatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const LabOrderStatusMinOrderByAggregateInputSchema: z.ZodType<Prisma.LabOrderStatusMinOrderByAggregateInput> = z.object({
  Id: z.lazy(() => SortOrderSchema).optional(),
  LabOrderId: z.lazy(() => SortOrderSchema).optional(),
  Status: z.lazy(() => SortOrderSchema).optional(),
  StatusDate: z.lazy(() => SortOrderSchema).optional(),
  CreatedAt: z.lazy(() => SortOrderSchema).optional(),
  UpdatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const TestCatalogNullableRelationFilterSchema: z.ZodType<Prisma.TestCatalogNullableRelationFilter> = z.object({
  is: z.lazy(() => TestCatalogWhereInputSchema).optional().nullable(),
  isNot: z.lazy(() => TestCatalogWhereInputSchema).optional().nullable()
}).strict();

export const LabOrderTestOrderByRelevanceInputSchema: z.ZodType<Prisma.LabOrderTestOrderByRelevanceInput> = z.object({
  fields: z.union([ z.lazy(() => LabOrderTestOrderByRelevanceFieldEnumSchema),z.lazy(() => LabOrderTestOrderByRelevanceFieldEnumSchema).array() ]),
  sort: z.lazy(() => SortOrderSchema),
  search: z.string()
}).strict();

export const LabOrderTestCountOrderByAggregateInputSchema: z.ZodType<Prisma.LabOrderTestCountOrderByAggregateInput> = z.object({
  Id: z.lazy(() => SortOrderSchema).optional(),
  LabOrderId: z.lazy(() => SortOrderSchema).optional(),
  TestId: z.lazy(() => SortOrderSchema).optional(),
  CreatedAt: z.lazy(() => SortOrderSchema).optional(),
  UpdatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const LabOrderTestAvgOrderByAggregateInputSchema: z.ZodType<Prisma.LabOrderTestAvgOrderByAggregateInput> = z.object({
  TestId: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const LabOrderTestMaxOrderByAggregateInputSchema: z.ZodType<Prisma.LabOrderTestMaxOrderByAggregateInput> = z.object({
  Id: z.lazy(() => SortOrderSchema).optional(),
  LabOrderId: z.lazy(() => SortOrderSchema).optional(),
  TestId: z.lazy(() => SortOrderSchema).optional(),
  CreatedAt: z.lazy(() => SortOrderSchema).optional(),
  UpdatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const LabOrderTestMinOrderByAggregateInputSchema: z.ZodType<Prisma.LabOrderTestMinOrderByAggregateInput> = z.object({
  Id: z.lazy(() => SortOrderSchema).optional(),
  LabOrderId: z.lazy(() => SortOrderSchema).optional(),
  TestId: z.lazy(() => SortOrderSchema).optional(),
  CreatedAt: z.lazy(() => SortOrderSchema).optional(),
  UpdatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const LabOrderTestSumOrderByAggregateInputSchema: z.ZodType<Prisma.LabOrderTestSumOrderByAggregateInput> = z.object({
  TestId: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const BigIntFilterSchema: z.ZodType<Prisma.BigIntFilter> = z.object({
  equals: z.bigint().optional(),
  in: z.bigint().array().optional(),
  notIn: z.bigint().array().optional(),
  lt: z.bigint().optional(),
  lte: z.bigint().optional(),
  gt: z.bigint().optional(),
  gte: z.bigint().optional(),
  not: z.union([ z.bigint(),z.lazy(() => NestedBigIntFilterSchema) ]).optional(),
}).strict();

export const LoincComponentHierarchyOrderByRelevanceInputSchema: z.ZodType<Prisma.LoincComponentHierarchyOrderByRelevanceInput> = z.object({
  fields: z.union([ z.lazy(() => LoincComponentHierarchyOrderByRelevanceFieldEnumSchema),z.lazy(() => LoincComponentHierarchyOrderByRelevanceFieldEnumSchema).array() ]),
  sort: z.lazy(() => SortOrderSchema),
  search: z.string()
}).strict();

export const LoincComponentHierarchyCountOrderByAggregateInputSchema: z.ZodType<Prisma.LoincComponentHierarchyCountOrderByAggregateInput> = z.object({
  Id: z.lazy(() => SortOrderSchema).optional(),
  ParentId: z.lazy(() => SortOrderSchema).optional(),
  Level: z.lazy(() => SortOrderSchema).optional(),
  Code: z.lazy(() => SortOrderSchema).optional(),
  Sequence: z.lazy(() => SortOrderSchema).optional(),
  CodeText: z.lazy(() => SortOrderSchema).optional(),
  Component: z.lazy(() => SortOrderSchema).optional(),
  Property: z.lazy(() => SortOrderSchema).optional(),
  Timing: z.lazy(() => SortOrderSchema).optional(),
  Scale: z.lazy(() => SortOrderSchema).optional(),
  Method: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const LoincComponentHierarchyAvgOrderByAggregateInputSchema: z.ZodType<Prisma.LoincComponentHierarchyAvgOrderByAggregateInput> = z.object({
  Id: z.lazy(() => SortOrderSchema).optional(),
  ParentId: z.lazy(() => SortOrderSchema).optional(),
  Level: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const LoincComponentHierarchyMaxOrderByAggregateInputSchema: z.ZodType<Prisma.LoincComponentHierarchyMaxOrderByAggregateInput> = z.object({
  Id: z.lazy(() => SortOrderSchema).optional(),
  ParentId: z.lazy(() => SortOrderSchema).optional(),
  Level: z.lazy(() => SortOrderSchema).optional(),
  Code: z.lazy(() => SortOrderSchema).optional(),
  Sequence: z.lazy(() => SortOrderSchema).optional(),
  CodeText: z.lazy(() => SortOrderSchema).optional(),
  Component: z.lazy(() => SortOrderSchema).optional(),
  Property: z.lazy(() => SortOrderSchema).optional(),
  Timing: z.lazy(() => SortOrderSchema).optional(),
  Scale: z.lazy(() => SortOrderSchema).optional(),
  Method: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const LoincComponentHierarchyMinOrderByAggregateInputSchema: z.ZodType<Prisma.LoincComponentHierarchyMinOrderByAggregateInput> = z.object({
  Id: z.lazy(() => SortOrderSchema).optional(),
  ParentId: z.lazy(() => SortOrderSchema).optional(),
  Level: z.lazy(() => SortOrderSchema).optional(),
  Code: z.lazy(() => SortOrderSchema).optional(),
  Sequence: z.lazy(() => SortOrderSchema).optional(),
  CodeText: z.lazy(() => SortOrderSchema).optional(),
  Component: z.lazy(() => SortOrderSchema).optional(),
  Property: z.lazy(() => SortOrderSchema).optional(),
  Timing: z.lazy(() => SortOrderSchema).optional(),
  Scale: z.lazy(() => SortOrderSchema).optional(),
  Method: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const LoincComponentHierarchySumOrderByAggregateInputSchema: z.ZodType<Prisma.LoincComponentHierarchySumOrderByAggregateInput> = z.object({
  Id: z.lazy(() => SortOrderSchema).optional(),
  ParentId: z.lazy(() => SortOrderSchema).optional(),
  Level: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const BigIntWithAggregatesFilterSchema: z.ZodType<Prisma.BigIntWithAggregatesFilter> = z.object({
  equals: z.bigint().optional(),
  in: z.bigint().array().optional(),
  notIn: z.bigint().array().optional(),
  lt: z.bigint().optional(),
  lte: z.bigint().optional(),
  gt: z.bigint().optional(),
  gte: z.bigint().optional(),
  not: z.union([ z.bigint(),z.lazy(() => NestedBigIntWithAggregatesFilterSchema) ]).optional(),
  _count: z.lazy(() => NestedIntFilterSchema).optional(),
  _avg: z.lazy(() => NestedFloatFilterSchema).optional(),
  _sum: z.lazy(() => NestedBigIntFilterSchema).optional(),
  _min: z.lazy(() => NestedBigIntFilterSchema).optional(),
  _max: z.lazy(() => NestedBigIntFilterSchema).optional()
}).strict();

export const LoincPanelHierarchyOrderByRelevanceInputSchema: z.ZodType<Prisma.LoincPanelHierarchyOrderByRelevanceInput> = z.object({
  fields: z.union([ z.lazy(() => LoincPanelHierarchyOrderByRelevanceFieldEnumSchema),z.lazy(() => LoincPanelHierarchyOrderByRelevanceFieldEnumSchema).array() ]),
  sort: z.lazy(() => SortOrderSchema),
  search: z.string()
}).strict();

export const LoincPanelHierarchyCountOrderByAggregateInputSchema: z.ZodType<Prisma.LoincPanelHierarchyCountOrderByAggregateInput> = z.object({
  Id: z.lazy(() => SortOrderSchema).optional(),
  ParentId: z.lazy(() => SortOrderSchema).optional(),
  Level: z.lazy(() => SortOrderSchema).optional(),
  Code: z.lazy(() => SortOrderSchema).optional(),
  Sequence: z.lazy(() => SortOrderSchema).optional(),
  CodeText: z.lazy(() => SortOrderSchema).optional(),
  Component: z.lazy(() => SortOrderSchema).optional(),
  Property: z.lazy(() => SortOrderSchema).optional(),
  Timing: z.lazy(() => SortOrderSchema).optional(),
  Scale: z.lazy(() => SortOrderSchema).optional(),
  Method: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const LoincPanelHierarchyAvgOrderByAggregateInputSchema: z.ZodType<Prisma.LoincPanelHierarchyAvgOrderByAggregateInput> = z.object({
  Id: z.lazy(() => SortOrderSchema).optional(),
  ParentId: z.lazy(() => SortOrderSchema).optional(),
  Level: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const LoincPanelHierarchyMaxOrderByAggregateInputSchema: z.ZodType<Prisma.LoincPanelHierarchyMaxOrderByAggregateInput> = z.object({
  Id: z.lazy(() => SortOrderSchema).optional(),
  ParentId: z.lazy(() => SortOrderSchema).optional(),
  Level: z.lazy(() => SortOrderSchema).optional(),
  Code: z.lazy(() => SortOrderSchema).optional(),
  Sequence: z.lazy(() => SortOrderSchema).optional(),
  CodeText: z.lazy(() => SortOrderSchema).optional(),
  Component: z.lazy(() => SortOrderSchema).optional(),
  Property: z.lazy(() => SortOrderSchema).optional(),
  Timing: z.lazy(() => SortOrderSchema).optional(),
  Scale: z.lazy(() => SortOrderSchema).optional(),
  Method: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const LoincPanelHierarchyMinOrderByAggregateInputSchema: z.ZodType<Prisma.LoincPanelHierarchyMinOrderByAggregateInput> = z.object({
  Id: z.lazy(() => SortOrderSchema).optional(),
  ParentId: z.lazy(() => SortOrderSchema).optional(),
  Level: z.lazy(() => SortOrderSchema).optional(),
  Code: z.lazy(() => SortOrderSchema).optional(),
  Sequence: z.lazy(() => SortOrderSchema).optional(),
  CodeText: z.lazy(() => SortOrderSchema).optional(),
  Component: z.lazy(() => SortOrderSchema).optional(),
  Property: z.lazy(() => SortOrderSchema).optional(),
  Timing: z.lazy(() => SortOrderSchema).optional(),
  Scale: z.lazy(() => SortOrderSchema).optional(),
  Method: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const LoincPanelHierarchySumOrderByAggregateInputSchema: z.ZodType<Prisma.LoincPanelHierarchySumOrderByAggregateInput> = z.object({
  Id: z.lazy(() => SortOrderSchema).optional(),
  ParentId: z.lazy(() => SortOrderSchema).optional(),
  Level: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const LoincUniveralLabOrdersOrderByRelevanceInputSchema: z.ZodType<Prisma.LoincUniveralLabOrdersOrderByRelevanceInput> = z.object({
  fields: z.union([ z.lazy(() => LoincUniveralLabOrdersOrderByRelevanceFieldEnumSchema),z.lazy(() => LoincUniveralLabOrdersOrderByRelevanceFieldEnumSchema).array() ]),
  sort: z.lazy(() => SortOrderSchema),
  search: z.string()
}).strict();

export const LoincUniveralLabOrdersCountOrderByAggregateInputSchema: z.ZodType<Prisma.LoincUniveralLabOrdersCountOrderByAggregateInput> = z.object({
  Loinc_Num: z.lazy(() => SortOrderSchema).optional(),
  Long_Common_Name: z.lazy(() => SortOrderSchema).optional(),
  ORDER_OBS: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const LoincUniveralLabOrdersMaxOrderByAggregateInputSchema: z.ZodType<Prisma.LoincUniveralLabOrdersMaxOrderByAggregateInput> = z.object({
  Loinc_Num: z.lazy(() => SortOrderSchema).optional(),
  Long_Common_Name: z.lazy(() => SortOrderSchema).optional(),
  ORDER_OBS: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const LoincUniveralLabOrdersMinOrderByAggregateInputSchema: z.ZodType<Prisma.LoincUniveralLabOrdersMinOrderByAggregateInput> = z.object({
  Loinc_Num: z.lazy(() => SortOrderSchema).optional(),
  Long_Common_Name: z.lazy(() => SortOrderSchema).optional(),
  ORDER_OBS: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const LabOrderListRelationFilterSchema: z.ZodType<Prisma.LabOrderListRelationFilter> = z.object({
  every: z.lazy(() => LabOrderWhereInputSchema).optional(),
  some: z.lazy(() => LabOrderWhereInputSchema).optional(),
  none: z.lazy(() => LabOrderWhereInputSchema).optional()
}).strict();

export const OrganizationListRelationFilterSchema: z.ZodType<Prisma.OrganizationListRelationFilter> = z.object({
  every: z.lazy(() => OrganizationWhereInputSchema).optional(),
  some: z.lazy(() => OrganizationWhereInputSchema).optional(),
  none: z.lazy(() => OrganizationWhereInputSchema).optional()
}).strict();

export const OrganizationFavoriteTestListRelationFilterSchema: z.ZodType<Prisma.OrganizationFavoriteTestListRelationFilter> = z.object({
  every: z.lazy(() => OrganizationFavoriteTestWhereInputSchema).optional(),
  some: z.lazy(() => OrganizationFavoriteTestWhereInputSchema).optional(),
  none: z.lazy(() => OrganizationFavoriteTestWhereInputSchema).optional()
}).strict();

export const PatientOrganizationListRelationFilterSchema: z.ZodType<Prisma.PatientOrganizationListRelationFilter> = z.object({
  every: z.lazy(() => PatientOrganizationWhereInputSchema).optional(),
  some: z.lazy(() => PatientOrganizationWhereInputSchema).optional(),
  none: z.lazy(() => PatientOrganizationWhereInputSchema).optional()
}).strict();

export const ProviderOrganizationListRelationFilterSchema: z.ZodType<Prisma.ProviderOrganizationListRelationFilter> = z.object({
  every: z.lazy(() => ProviderOrganizationWhereInputSchema).optional(),
  some: z.lazy(() => ProviderOrganizationWhereInputSchema).optional(),
  none: z.lazy(() => ProviderOrganizationWhereInputSchema).optional()
}).strict();

export const LabOrderOrderByRelationAggregateInputSchema: z.ZodType<Prisma.LabOrderOrderByRelationAggregateInput> = z.object({
  _count: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const OrganizationOrderByRelationAggregateInputSchema: z.ZodType<Prisma.OrganizationOrderByRelationAggregateInput> = z.object({
  _count: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const OrganizationFavoriteTestOrderByRelationAggregateInputSchema: z.ZodType<Prisma.OrganizationFavoriteTestOrderByRelationAggregateInput> = z.object({
  _count: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const PatientOrganizationOrderByRelationAggregateInputSchema: z.ZodType<Prisma.PatientOrganizationOrderByRelationAggregateInput> = z.object({
  _count: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const ProviderOrganizationOrderByRelationAggregateInputSchema: z.ZodType<Prisma.ProviderOrganizationOrderByRelationAggregateInput> = z.object({
  _count: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const OrganizationOrderByRelevanceInputSchema: z.ZodType<Prisma.OrganizationOrderByRelevanceInput> = z.object({
  fields: z.union([ z.lazy(() => OrganizationOrderByRelevanceFieldEnumSchema),z.lazy(() => OrganizationOrderByRelevanceFieldEnumSchema).array() ]),
  sort: z.lazy(() => SortOrderSchema),
  search: z.string()
}).strict();

export const OrganizationCountOrderByAggregateInputSchema: z.ZodType<Prisma.OrganizationCountOrderByAggregateInput> = z.object({
  Id: z.lazy(() => SortOrderSchema).optional(),
  href: z.lazy(() => SortOrderSchema).optional(),
  ParentId: z.lazy(() => SortOrderSchema).optional(),
  Level: z.lazy(() => SortOrderSchema).optional(),
  ParentOrgName: z.lazy(() => SortOrderSchema).optional(),
  OrgName: z.lazy(() => SortOrderSchema).optional(),
  OrgType: z.lazy(() => SortOrderSchema).optional(),
  OrgSpecialty: z.lazy(() => SortOrderSchema).optional(),
  OrgAddress: z.lazy(() => SortOrderSchema).optional(),
  OrgCity: z.lazy(() => SortOrderSchema).optional(),
  OrgState: z.lazy(() => SortOrderSchema).optional(),
  OrgZip: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const OrganizationAvgOrderByAggregateInputSchema: z.ZodType<Prisma.OrganizationAvgOrderByAggregateInput> = z.object({
  Level: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const OrganizationMaxOrderByAggregateInputSchema: z.ZodType<Prisma.OrganizationMaxOrderByAggregateInput> = z.object({
  Id: z.lazy(() => SortOrderSchema).optional(),
  href: z.lazy(() => SortOrderSchema).optional(),
  ParentId: z.lazy(() => SortOrderSchema).optional(),
  Level: z.lazy(() => SortOrderSchema).optional(),
  ParentOrgName: z.lazy(() => SortOrderSchema).optional(),
  OrgName: z.lazy(() => SortOrderSchema).optional(),
  OrgType: z.lazy(() => SortOrderSchema).optional(),
  OrgSpecialty: z.lazy(() => SortOrderSchema).optional(),
  OrgAddress: z.lazy(() => SortOrderSchema).optional(),
  OrgCity: z.lazy(() => SortOrderSchema).optional(),
  OrgState: z.lazy(() => SortOrderSchema).optional(),
  OrgZip: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const OrganizationMinOrderByAggregateInputSchema: z.ZodType<Prisma.OrganizationMinOrderByAggregateInput> = z.object({
  Id: z.lazy(() => SortOrderSchema).optional(),
  href: z.lazy(() => SortOrderSchema).optional(),
  ParentId: z.lazy(() => SortOrderSchema).optional(),
  Level: z.lazy(() => SortOrderSchema).optional(),
  ParentOrgName: z.lazy(() => SortOrderSchema).optional(),
  OrgName: z.lazy(() => SortOrderSchema).optional(),
  OrgType: z.lazy(() => SortOrderSchema).optional(),
  OrgSpecialty: z.lazy(() => SortOrderSchema).optional(),
  OrgAddress: z.lazy(() => SortOrderSchema).optional(),
  OrgCity: z.lazy(() => SortOrderSchema).optional(),
  OrgState: z.lazy(() => SortOrderSchema).optional(),
  OrgZip: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const OrganizationSumOrderByAggregateInputSchema: z.ZodType<Prisma.OrganizationSumOrderByAggregateInput> = z.object({
  Level: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const OrganizationEndpointOrderByRelevanceInputSchema: z.ZodType<Prisma.OrganizationEndpointOrderByRelevanceInput> = z.object({
  fields: z.union([ z.lazy(() => OrganizationEndpointOrderByRelevanceFieldEnumSchema),z.lazy(() => OrganizationEndpointOrderByRelevanceFieldEnumSchema).array() ]),
  sort: z.lazy(() => SortOrderSchema),
  search: z.string()
}).strict();

export const OrganizationEndpointCountOrderByAggregateInputSchema: z.ZodType<Prisma.OrganizationEndpointCountOrderByAggregateInput> = z.object({
  Id: z.lazy(() => SortOrderSchema).optional(),
  OrgName: z.lazy(() => SortOrderSchema).optional(),
  EHRVendor: z.lazy(() => SortOrderSchema).optional(),
  FHIRVersion: z.lazy(() => SortOrderSchema).optional(),
  Endpoint: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const OrganizationEndpointMaxOrderByAggregateInputSchema: z.ZodType<Prisma.OrganizationEndpointMaxOrderByAggregateInput> = z.object({
  Id: z.lazy(() => SortOrderSchema).optional(),
  OrgName: z.lazy(() => SortOrderSchema).optional(),
  EHRVendor: z.lazy(() => SortOrderSchema).optional(),
  FHIRVersion: z.lazy(() => SortOrderSchema).optional(),
  Endpoint: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const OrganizationEndpointMinOrderByAggregateInputSchema: z.ZodType<Prisma.OrganizationEndpointMinOrderByAggregateInput> = z.object({
  Id: z.lazy(() => SortOrderSchema).optional(),
  OrgName: z.lazy(() => SortOrderSchema).optional(),
  EHRVendor: z.lazy(() => SortOrderSchema).optional(),
  FHIRVersion: z.lazy(() => SortOrderSchema).optional(),
  Endpoint: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const OrganizationFavoriteTestOrderByRelevanceInputSchema: z.ZodType<Prisma.OrganizationFavoriteTestOrderByRelevanceInput> = z.object({
  fields: z.union([ z.lazy(() => OrganizationFavoriteTestOrderByRelevanceFieldEnumSchema),z.lazy(() => OrganizationFavoriteTestOrderByRelevanceFieldEnumSchema).array() ]),
  sort: z.lazy(() => SortOrderSchema),
  search: z.string()
}).strict();

export const OrganizationFavoriteTestCountOrderByAggregateInputSchema: z.ZodType<Prisma.OrganizationFavoriteTestCountOrderByAggregateInput> = z.object({
  Id: z.lazy(() => SortOrderSchema).optional(),
  OrganizationId: z.lazy(() => SortOrderSchema).optional(),
  ParentId: z.lazy(() => SortOrderSchema).optional(),
  ParentName: z.lazy(() => SortOrderSchema).optional(),
  Level: z.lazy(() => SortOrderSchema).optional(),
  TestId: z.lazy(() => SortOrderSchema).optional(),
  CreatedAt: z.lazy(() => SortOrderSchema).optional(),
  UpdatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const OrganizationFavoriteTestAvgOrderByAggregateInputSchema: z.ZodType<Prisma.OrganizationFavoriteTestAvgOrderByAggregateInput> = z.object({
  Level: z.lazy(() => SortOrderSchema).optional(),
  TestId: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const OrganizationFavoriteTestMaxOrderByAggregateInputSchema: z.ZodType<Prisma.OrganizationFavoriteTestMaxOrderByAggregateInput> = z.object({
  Id: z.lazy(() => SortOrderSchema).optional(),
  OrganizationId: z.lazy(() => SortOrderSchema).optional(),
  ParentId: z.lazy(() => SortOrderSchema).optional(),
  ParentName: z.lazy(() => SortOrderSchema).optional(),
  Level: z.lazy(() => SortOrderSchema).optional(),
  TestId: z.lazy(() => SortOrderSchema).optional(),
  CreatedAt: z.lazy(() => SortOrderSchema).optional(),
  UpdatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const OrganizationFavoriteTestMinOrderByAggregateInputSchema: z.ZodType<Prisma.OrganizationFavoriteTestMinOrderByAggregateInput> = z.object({
  Id: z.lazy(() => SortOrderSchema).optional(),
  OrganizationId: z.lazy(() => SortOrderSchema).optional(),
  ParentId: z.lazy(() => SortOrderSchema).optional(),
  ParentName: z.lazy(() => SortOrderSchema).optional(),
  Level: z.lazy(() => SortOrderSchema).optional(),
  TestId: z.lazy(() => SortOrderSchema).optional(),
  CreatedAt: z.lazy(() => SortOrderSchema).optional(),
  UpdatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const OrganizationFavoriteTestSumOrderByAggregateInputSchema: z.ZodType<Prisma.OrganizationFavoriteTestSumOrderByAggregateInput> = z.object({
  Level: z.lazy(() => SortOrderSchema).optional(),
  TestId: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const PatientOrderByRelevanceInputSchema: z.ZodType<Prisma.PatientOrderByRelevanceInput> = z.object({
  fields: z.union([ z.lazy(() => PatientOrderByRelevanceFieldEnumSchema),z.lazy(() => PatientOrderByRelevanceFieldEnumSchema).array() ]),
  sort: z.lazy(() => SortOrderSchema),
  search: z.string()
}).strict();

export const PatientCountOrderByAggregateInputSchema: z.ZodType<Prisma.PatientCountOrderByAggregateInput> = z.object({
  Id: z.lazy(() => SortOrderSchema).optional(),
  FirstName: z.lazy(() => SortOrderSchema).optional(),
  LastName: z.lazy(() => SortOrderSchema).optional(),
  DateOfBirth: z.lazy(() => SortOrderSchema).optional(),
  Gender: z.lazy(() => SortOrderSchema).optional(),
  Email: z.lazy(() => SortOrderSchema).optional(),
  Mobile: z.lazy(() => SortOrderSchema).optional(),
  CreatedAt: z.lazy(() => SortOrderSchema).optional(),
  UpdatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const PatientMaxOrderByAggregateInputSchema: z.ZodType<Prisma.PatientMaxOrderByAggregateInput> = z.object({
  Id: z.lazy(() => SortOrderSchema).optional(),
  FirstName: z.lazy(() => SortOrderSchema).optional(),
  LastName: z.lazy(() => SortOrderSchema).optional(),
  DateOfBirth: z.lazy(() => SortOrderSchema).optional(),
  Gender: z.lazy(() => SortOrderSchema).optional(),
  Email: z.lazy(() => SortOrderSchema).optional(),
  Mobile: z.lazy(() => SortOrderSchema).optional(),
  CreatedAt: z.lazy(() => SortOrderSchema).optional(),
  UpdatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const PatientMinOrderByAggregateInputSchema: z.ZodType<Prisma.PatientMinOrderByAggregateInput> = z.object({
  Id: z.lazy(() => SortOrderSchema).optional(),
  FirstName: z.lazy(() => SortOrderSchema).optional(),
  LastName: z.lazy(() => SortOrderSchema).optional(),
  DateOfBirth: z.lazy(() => SortOrderSchema).optional(),
  Gender: z.lazy(() => SortOrderSchema).optional(),
  Email: z.lazy(() => SortOrderSchema).optional(),
  Mobile: z.lazy(() => SortOrderSchema).optional(),
  CreatedAt: z.lazy(() => SortOrderSchema).optional(),
  UpdatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const OrganizationRelationFilterSchema: z.ZodType<Prisma.OrganizationRelationFilter> = z.object({
  is: z.lazy(() => OrganizationWhereInputSchema).optional(),
  isNot: z.lazy(() => OrganizationWhereInputSchema).optional()
}).strict();

export const PatientRelationFilterSchema: z.ZodType<Prisma.PatientRelationFilter> = z.object({
  is: z.lazy(() => PatientWhereInputSchema).optional(),
  isNot: z.lazy(() => PatientWhereInputSchema).optional()
}).strict();

export const PatientOrganizationOrderByRelevanceInputSchema: z.ZodType<Prisma.PatientOrganizationOrderByRelevanceInput> = z.object({
  fields: z.union([ z.lazy(() => PatientOrganizationOrderByRelevanceFieldEnumSchema),z.lazy(() => PatientOrganizationOrderByRelevanceFieldEnumSchema).array() ]),
  sort: z.lazy(() => SortOrderSchema),
  search: z.string()
}).strict();

export const PatientOrganizationCountOrderByAggregateInputSchema: z.ZodType<Prisma.PatientOrganizationCountOrderByAggregateInput> = z.object({
  Id: z.lazy(() => SortOrderSchema).optional(),
  PatientId: z.lazy(() => SortOrderSchema).optional(),
  OrganizationId: z.lazy(() => SortOrderSchema).optional(),
  MRN: z.lazy(() => SortOrderSchema).optional(),
  Mobile: z.lazy(() => SortOrderSchema).optional(),
  Email: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const PatientOrganizationMaxOrderByAggregateInputSchema: z.ZodType<Prisma.PatientOrganizationMaxOrderByAggregateInput> = z.object({
  Id: z.lazy(() => SortOrderSchema).optional(),
  PatientId: z.lazy(() => SortOrderSchema).optional(),
  OrganizationId: z.lazy(() => SortOrderSchema).optional(),
  MRN: z.lazy(() => SortOrderSchema).optional(),
  Mobile: z.lazy(() => SortOrderSchema).optional(),
  Email: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const PatientOrganizationMinOrderByAggregateInputSchema: z.ZodType<Prisma.PatientOrganizationMinOrderByAggregateInput> = z.object({
  Id: z.lazy(() => SortOrderSchema).optional(),
  PatientId: z.lazy(() => SortOrderSchema).optional(),
  OrganizationId: z.lazy(() => SortOrderSchema).optional(),
  MRN: z.lazy(() => SortOrderSchema).optional(),
  Mobile: z.lazy(() => SortOrderSchema).optional(),
  Email: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const DateTimeFilterSchema: z.ZodType<Prisma.DateTimeFilter> = z.object({
  equals: z.date().optional(),
  in: z.date().array().optional(),
  notIn: z.date().array().optional(),
  lt: z.date().optional(),
  lte: z.date().optional(),
  gt: z.date().optional(),
  gte: z.date().optional(),
  not: z.union([ z.date(),z.lazy(() => NestedDateTimeFilterSchema) ]).optional(),
}).strict();

export const PostOrderByRelevanceInputSchema: z.ZodType<Prisma.PostOrderByRelevanceInput> = z.object({
  fields: z.union([ z.lazy(() => PostOrderByRelevanceFieldEnumSchema),z.lazy(() => PostOrderByRelevanceFieldEnumSchema).array() ]),
  sort: z.lazy(() => SortOrderSchema),
  search: z.string()
}).strict();

export const PostCountOrderByAggregateInputSchema: z.ZodType<Prisma.PostCountOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const PostAvgOrderByAggregateInputSchema: z.ZodType<Prisma.PostAvgOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const PostMaxOrderByAggregateInputSchema: z.ZodType<Prisma.PostMaxOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const PostMinOrderByAggregateInputSchema: z.ZodType<Prisma.PostMinOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const PostSumOrderByAggregateInputSchema: z.ZodType<Prisma.PostSumOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const DateTimeWithAggregatesFilterSchema: z.ZodType<Prisma.DateTimeWithAggregatesFilter> = z.object({
  equals: z.date().optional(),
  in: z.date().array().optional(),
  notIn: z.date().array().optional(),
  lt: z.date().optional(),
  lte: z.date().optional(),
  gt: z.date().optional(),
  gte: z.date().optional(),
  not: z.union([ z.date(),z.lazy(() => NestedDateTimeWithAggregatesFilterSchema) ]).optional(),
  _count: z.lazy(() => NestedIntFilterSchema).optional(),
  _min: z.lazy(() => NestedDateTimeFilterSchema).optional(),
  _max: z.lazy(() => NestedDateTimeFilterSchema).optional()
}).strict();

export const UserAttributeNullableRelationFilterSchema: z.ZodType<Prisma.UserAttributeNullableRelationFilter> = z.object({
  is: z.lazy(() => UserAttributeWhereInputSchema).optional().nullable(),
  isNot: z.lazy(() => UserAttributeWhereInputSchema).optional().nullable()
}).strict();

export const ProviderEducationListRelationFilterSchema: z.ZodType<Prisma.ProviderEducationListRelationFilter> = z.object({
  every: z.lazy(() => ProviderEducationWhereInputSchema).optional(),
  some: z.lazy(() => ProviderEducationWhereInputSchema).optional(),
  none: z.lazy(() => ProviderEducationWhereInputSchema).optional()
}).strict();

export const ProviderFavoriteTestListRelationFilterSchema: z.ZodType<Prisma.ProviderFavoriteTestListRelationFilter> = z.object({
  every: z.lazy(() => ProviderFavoriteTestWhereInputSchema).optional(),
  some: z.lazy(() => ProviderFavoriteTestWhereInputSchema).optional(),
  none: z.lazy(() => ProviderFavoriteTestWhereInputSchema).optional()
}).strict();

export const ProviderEducationOrderByRelationAggregateInputSchema: z.ZodType<Prisma.ProviderEducationOrderByRelationAggregateInput> = z.object({
  _count: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const ProviderFavoriteTestOrderByRelationAggregateInputSchema: z.ZodType<Prisma.ProviderFavoriteTestOrderByRelationAggregateInput> = z.object({
  _count: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const ProviderOrderByRelevanceInputSchema: z.ZodType<Prisma.ProviderOrderByRelevanceInput> = z.object({
  fields: z.union([ z.lazy(() => ProviderOrderByRelevanceFieldEnumSchema),z.lazy(() => ProviderOrderByRelevanceFieldEnumSchema).array() ]),
  sort: z.lazy(() => SortOrderSchema),
  search: z.string()
}).strict();

export const ProviderCountOrderByAggregateInputSchema: z.ZodType<Prisma.ProviderCountOrderByAggregateInput> = z.object({
  Id: z.lazy(() => SortOrderSchema).optional(),
  href: z.lazy(() => SortOrderSchema).optional(),
  NPI: z.lazy(() => SortOrderSchema).optional(),
  Name: z.lazy(() => SortOrderSchema).optional(),
  Email: z.lazy(() => SortOrderSchema).optional(),
  Credentials: z.lazy(() => SortOrderSchema).optional(),
  Specialty: z.lazy(() => SortOrderSchema).optional(),
  Aboutme: z.lazy(() => SortOrderSchema).optional(),
  Gender: z.lazy(() => SortOrderSchema).optional(),
  ProviderType: z.lazy(() => SortOrderSchema).optional(),
  Affiliation: z.lazy(() => SortOrderSchema).optional(),
  ProceduresAndResearch: z.lazy(() => SortOrderSchema).optional(),
  SpecialInterests: z.lazy(() => SortOrderSchema).optional(),
  UserAttributeId: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const ProviderMaxOrderByAggregateInputSchema: z.ZodType<Prisma.ProviderMaxOrderByAggregateInput> = z.object({
  Id: z.lazy(() => SortOrderSchema).optional(),
  href: z.lazy(() => SortOrderSchema).optional(),
  NPI: z.lazy(() => SortOrderSchema).optional(),
  Name: z.lazy(() => SortOrderSchema).optional(),
  Email: z.lazy(() => SortOrderSchema).optional(),
  Credentials: z.lazy(() => SortOrderSchema).optional(),
  Specialty: z.lazy(() => SortOrderSchema).optional(),
  Aboutme: z.lazy(() => SortOrderSchema).optional(),
  Gender: z.lazy(() => SortOrderSchema).optional(),
  ProviderType: z.lazy(() => SortOrderSchema).optional(),
  Affiliation: z.lazy(() => SortOrderSchema).optional(),
  ProceduresAndResearch: z.lazy(() => SortOrderSchema).optional(),
  SpecialInterests: z.lazy(() => SortOrderSchema).optional(),
  UserAttributeId: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const ProviderMinOrderByAggregateInputSchema: z.ZodType<Prisma.ProviderMinOrderByAggregateInput> = z.object({
  Id: z.lazy(() => SortOrderSchema).optional(),
  href: z.lazy(() => SortOrderSchema).optional(),
  NPI: z.lazy(() => SortOrderSchema).optional(),
  Name: z.lazy(() => SortOrderSchema).optional(),
  Email: z.lazy(() => SortOrderSchema).optional(),
  Credentials: z.lazy(() => SortOrderSchema).optional(),
  Specialty: z.lazy(() => SortOrderSchema).optional(),
  Aboutme: z.lazy(() => SortOrderSchema).optional(),
  Gender: z.lazy(() => SortOrderSchema).optional(),
  ProviderType: z.lazy(() => SortOrderSchema).optional(),
  Affiliation: z.lazy(() => SortOrderSchema).optional(),
  ProceduresAndResearch: z.lazy(() => SortOrderSchema).optional(),
  SpecialInterests: z.lazy(() => SortOrderSchema).optional(),
  UserAttributeId: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const ProviderRelationFilterSchema: z.ZodType<Prisma.ProviderRelationFilter> = z.object({
  is: z.lazy(() => ProviderWhereInputSchema).optional(),
  isNot: z.lazy(() => ProviderWhereInputSchema).optional()
}).strict();

export const ProviderEducationOrderByRelevanceInputSchema: z.ZodType<Prisma.ProviderEducationOrderByRelevanceInput> = z.object({
  fields: z.union([ z.lazy(() => ProviderEducationOrderByRelevanceFieldEnumSchema),z.lazy(() => ProviderEducationOrderByRelevanceFieldEnumSchema).array() ]),
  sort: z.lazy(() => SortOrderSchema),
  search: z.string()
}).strict();

export const ProviderEducationCountOrderByAggregateInputSchema: z.ZodType<Prisma.ProviderEducationCountOrderByAggregateInput> = z.object({
  Id: z.lazy(() => SortOrderSchema).optional(),
  ProviderId: z.lazy(() => SortOrderSchema).optional(),
  ProviderNPI: z.lazy(() => SortOrderSchema).optional(),
  Name: z.lazy(() => SortOrderSchema).optional(),
  EducationType: z.lazy(() => SortOrderSchema).optional(),
  SchoolName: z.lazy(() => SortOrderSchema).optional(),
  AreaOfEducation: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const ProviderEducationMaxOrderByAggregateInputSchema: z.ZodType<Prisma.ProviderEducationMaxOrderByAggregateInput> = z.object({
  Id: z.lazy(() => SortOrderSchema).optional(),
  ProviderId: z.lazy(() => SortOrderSchema).optional(),
  ProviderNPI: z.lazy(() => SortOrderSchema).optional(),
  Name: z.lazy(() => SortOrderSchema).optional(),
  EducationType: z.lazy(() => SortOrderSchema).optional(),
  SchoolName: z.lazy(() => SortOrderSchema).optional(),
  AreaOfEducation: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const ProviderEducationMinOrderByAggregateInputSchema: z.ZodType<Prisma.ProviderEducationMinOrderByAggregateInput> = z.object({
  Id: z.lazy(() => SortOrderSchema).optional(),
  ProviderId: z.lazy(() => SortOrderSchema).optional(),
  ProviderNPI: z.lazy(() => SortOrderSchema).optional(),
  Name: z.lazy(() => SortOrderSchema).optional(),
  EducationType: z.lazy(() => SortOrderSchema).optional(),
  SchoolName: z.lazy(() => SortOrderSchema).optional(),
  AreaOfEducation: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const ProviderFavoriteTestOrderByRelevanceInputSchema: z.ZodType<Prisma.ProviderFavoriteTestOrderByRelevanceInput> = z.object({
  fields: z.union([ z.lazy(() => ProviderFavoriteTestOrderByRelevanceFieldEnumSchema),z.lazy(() => ProviderFavoriteTestOrderByRelevanceFieldEnumSchema).array() ]),
  sort: z.lazy(() => SortOrderSchema),
  search: z.string()
}).strict();

export const ProviderFavoriteTestCountOrderByAggregateInputSchema: z.ZodType<Prisma.ProviderFavoriteTestCountOrderByAggregateInput> = z.object({
  Id: z.lazy(() => SortOrderSchema).optional(),
  ProviderId: z.lazy(() => SortOrderSchema).optional(),
  ParentId: z.lazy(() => SortOrderSchema).optional(),
  ParentName: z.lazy(() => SortOrderSchema).optional(),
  Level: z.lazy(() => SortOrderSchema).optional(),
  TestId: z.lazy(() => SortOrderSchema).optional(),
  CreatedAt: z.lazy(() => SortOrderSchema).optional(),
  UpdatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const ProviderFavoriteTestAvgOrderByAggregateInputSchema: z.ZodType<Prisma.ProviderFavoriteTestAvgOrderByAggregateInput> = z.object({
  Level: z.lazy(() => SortOrderSchema).optional(),
  TestId: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const ProviderFavoriteTestMaxOrderByAggregateInputSchema: z.ZodType<Prisma.ProviderFavoriteTestMaxOrderByAggregateInput> = z.object({
  Id: z.lazy(() => SortOrderSchema).optional(),
  ProviderId: z.lazy(() => SortOrderSchema).optional(),
  ParentId: z.lazy(() => SortOrderSchema).optional(),
  ParentName: z.lazy(() => SortOrderSchema).optional(),
  Level: z.lazy(() => SortOrderSchema).optional(),
  TestId: z.lazy(() => SortOrderSchema).optional(),
  CreatedAt: z.lazy(() => SortOrderSchema).optional(),
  UpdatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const ProviderFavoriteTestMinOrderByAggregateInputSchema: z.ZodType<Prisma.ProviderFavoriteTestMinOrderByAggregateInput> = z.object({
  Id: z.lazy(() => SortOrderSchema).optional(),
  ProviderId: z.lazy(() => SortOrderSchema).optional(),
  ParentId: z.lazy(() => SortOrderSchema).optional(),
  ParentName: z.lazy(() => SortOrderSchema).optional(),
  Level: z.lazy(() => SortOrderSchema).optional(),
  TestId: z.lazy(() => SortOrderSchema).optional(),
  CreatedAt: z.lazy(() => SortOrderSchema).optional(),
  UpdatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const ProviderFavoriteTestSumOrderByAggregateInputSchema: z.ZodType<Prisma.ProviderFavoriteTestSumOrderByAggregateInput> = z.object({
  Level: z.lazy(() => SortOrderSchema).optional(),
  TestId: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const ProviderOrganizationOrderByRelevanceInputSchema: z.ZodType<Prisma.ProviderOrganizationOrderByRelevanceInput> = z.object({
  fields: z.union([ z.lazy(() => ProviderOrganizationOrderByRelevanceFieldEnumSchema),z.lazy(() => ProviderOrganizationOrderByRelevanceFieldEnumSchema).array() ]),
  sort: z.lazy(() => SortOrderSchema),
  search: z.string()
}).strict();

export const ProviderOrganizationCountOrderByAggregateInputSchema: z.ZodType<Prisma.ProviderOrganizationCountOrderByAggregateInput> = z.object({
  Id: z.lazy(() => SortOrderSchema).optional(),
  ProviderId: z.lazy(() => SortOrderSchema).optional(),
  OrganizationId: z.lazy(() => SortOrderSchema).optional(),
  ProviderNPI: z.lazy(() => SortOrderSchema).optional(),
  Name: z.lazy(() => SortOrderSchema).optional(),
  ParentOrgName: z.lazy(() => SortOrderSchema).optional(),
  OrgName: z.lazy(() => SortOrderSchema).optional(),
  OrgAddress: z.lazy(() => SortOrderSchema).optional(),
  OrgCity: z.lazy(() => SortOrderSchema).optional(),
  OrgState: z.lazy(() => SortOrderSchema).optional(),
  OrgZip: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const ProviderOrganizationMaxOrderByAggregateInputSchema: z.ZodType<Prisma.ProviderOrganizationMaxOrderByAggregateInput> = z.object({
  Id: z.lazy(() => SortOrderSchema).optional(),
  ProviderId: z.lazy(() => SortOrderSchema).optional(),
  OrganizationId: z.lazy(() => SortOrderSchema).optional(),
  ProviderNPI: z.lazy(() => SortOrderSchema).optional(),
  Name: z.lazy(() => SortOrderSchema).optional(),
  ParentOrgName: z.lazy(() => SortOrderSchema).optional(),
  OrgName: z.lazy(() => SortOrderSchema).optional(),
  OrgAddress: z.lazy(() => SortOrderSchema).optional(),
  OrgCity: z.lazy(() => SortOrderSchema).optional(),
  OrgState: z.lazy(() => SortOrderSchema).optional(),
  OrgZip: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const ProviderOrganizationMinOrderByAggregateInputSchema: z.ZodType<Prisma.ProviderOrganizationMinOrderByAggregateInput> = z.object({
  Id: z.lazy(() => SortOrderSchema).optional(),
  ProviderId: z.lazy(() => SortOrderSchema).optional(),
  OrganizationId: z.lazy(() => SortOrderSchema).optional(),
  ProviderNPI: z.lazy(() => SortOrderSchema).optional(),
  Name: z.lazy(() => SortOrderSchema).optional(),
  ParentOrgName: z.lazy(() => SortOrderSchema).optional(),
  OrgName: z.lazy(() => SortOrderSchema).optional(),
  OrgAddress: z.lazy(() => SortOrderSchema).optional(),
  OrgCity: z.lazy(() => SortOrderSchema).optional(),
  OrgState: z.lazy(() => SortOrderSchema).optional(),
  OrgZip: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const SessionOrderByRelevanceInputSchema: z.ZodType<Prisma.SessionOrderByRelevanceInput> = z.object({
  fields: z.union([ z.lazy(() => SessionOrderByRelevanceFieldEnumSchema),z.lazy(() => SessionOrderByRelevanceFieldEnumSchema).array() ]),
  sort: z.lazy(() => SortOrderSchema),
  search: z.string()
}).strict();

export const SessionCountOrderByAggregateInputSchema: z.ZodType<Prisma.SessionCountOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  sessionToken: z.lazy(() => SortOrderSchema).optional(),
  userId: z.lazy(() => SortOrderSchema).optional(),
  expires: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const SessionMaxOrderByAggregateInputSchema: z.ZodType<Prisma.SessionMaxOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  sessionToken: z.lazy(() => SortOrderSchema).optional(),
  userId: z.lazy(() => SortOrderSchema).optional(),
  expires: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const SessionMinOrderByAggregateInputSchema: z.ZodType<Prisma.SessionMinOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  sessionToken: z.lazy(() => SortOrderSchema).optional(),
  userId: z.lazy(() => SortOrderSchema).optional(),
  expires: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const SponsoredProgramListRelationFilterSchema: z.ZodType<Prisma.SponsoredProgramListRelationFilter> = z.object({
  every: z.lazy(() => SponsoredProgramWhereInputSchema).optional(),
  some: z.lazy(() => SponsoredProgramWhereInputSchema).optional(),
  none: z.lazy(() => SponsoredProgramWhereInputSchema).optional()
}).strict();

export const SponsoredProgramOrderByRelationAggregateInputSchema: z.ZodType<Prisma.SponsoredProgramOrderByRelationAggregateInput> = z.object({
  _count: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const SponsorOrderByRelevanceInputSchema: z.ZodType<Prisma.SponsorOrderByRelevanceInput> = z.object({
  fields: z.union([ z.lazy(() => SponsorOrderByRelevanceFieldEnumSchema),z.lazy(() => SponsorOrderByRelevanceFieldEnumSchema).array() ]),
  sort: z.lazy(() => SortOrderSchema),
  search: z.string()
}).strict();

export const SponsorCountOrderByAggregateInputSchema: z.ZodType<Prisma.SponsorCountOrderByAggregateInput> = z.object({
  SponsorId: z.lazy(() => SortOrderSchema).optional(),
  SponsorName: z.lazy(() => SortOrderSchema).optional(),
  SponsorCode: z.lazy(() => SortOrderSchema).optional(),
  SponsorWebsite: z.lazy(() => SortOrderSchema).optional(),
  SponsorType: z.lazy(() => SortOrderSchema).optional(),
  Address: z.lazy(() => SortOrderSchema).optional(),
  City: z.lazy(() => SortOrderSchema).optional(),
  State: z.lazy(() => SortOrderSchema).optional(),
  Zip: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const SponsorAvgOrderByAggregateInputSchema: z.ZodType<Prisma.SponsorAvgOrderByAggregateInput> = z.object({
  SponsorId: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const SponsorMaxOrderByAggregateInputSchema: z.ZodType<Prisma.SponsorMaxOrderByAggregateInput> = z.object({
  SponsorId: z.lazy(() => SortOrderSchema).optional(),
  SponsorName: z.lazy(() => SortOrderSchema).optional(),
  SponsorCode: z.lazy(() => SortOrderSchema).optional(),
  SponsorWebsite: z.lazy(() => SortOrderSchema).optional(),
  SponsorType: z.lazy(() => SortOrderSchema).optional(),
  Address: z.lazy(() => SortOrderSchema).optional(),
  City: z.lazy(() => SortOrderSchema).optional(),
  State: z.lazy(() => SortOrderSchema).optional(),
  Zip: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const SponsorMinOrderByAggregateInputSchema: z.ZodType<Prisma.SponsorMinOrderByAggregateInput> = z.object({
  SponsorId: z.lazy(() => SortOrderSchema).optional(),
  SponsorName: z.lazy(() => SortOrderSchema).optional(),
  SponsorCode: z.lazy(() => SortOrderSchema).optional(),
  SponsorWebsite: z.lazy(() => SortOrderSchema).optional(),
  SponsorType: z.lazy(() => SortOrderSchema).optional(),
  Address: z.lazy(() => SortOrderSchema).optional(),
  City: z.lazy(() => SortOrderSchema).optional(),
  State: z.lazy(() => SortOrderSchema).optional(),
  Zip: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const SponsorSumOrderByAggregateInputSchema: z.ZodType<Prisma.SponsorSumOrderByAggregateInput> = z.object({
  SponsorId: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const SponsorNullableRelationFilterSchema: z.ZodType<Prisma.SponsorNullableRelationFilter> = z.object({
  is: z.lazy(() => SponsorWhereInputSchema).optional().nullable(),
  isNot: z.lazy(() => SponsorWhereInputSchema).optional().nullable()
}).strict();

export const SponsoredProgramOrderByRelevanceInputSchema: z.ZodType<Prisma.SponsoredProgramOrderByRelevanceInput> = z.object({
  fields: z.union([ z.lazy(() => SponsoredProgramOrderByRelevanceFieldEnumSchema),z.lazy(() => SponsoredProgramOrderByRelevanceFieldEnumSchema).array() ]),
  sort: z.lazy(() => SortOrderSchema),
  search: z.string()
}).strict();

export const SponsoredProgramCountOrderByAggregateInputSchema: z.ZodType<Prisma.SponsoredProgramCountOrderByAggregateInput> = z.object({
  ProgramId: z.lazy(() => SortOrderSchema).optional(),
  SponsorId: z.lazy(() => SortOrderSchema).optional(),
  TherapeuticArea: z.lazy(() => SortOrderSchema).optional(),
  ProgramName: z.lazy(() => SortOrderSchema).optional(),
  ProgramUrl: z.lazy(() => SortOrderSchema).optional(),
  ProgramLabUrl: z.lazy(() => SortOrderSchema).optional(),
  SponosoredTestingUrl: z.lazy(() => SortOrderSchema).optional(),
  ProgramEligibility: z.lazy(() => SortOrderSchema).optional(),
  CreatedAt: z.lazy(() => SortOrderSchema).optional(),
  UpdatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const SponsoredProgramAvgOrderByAggregateInputSchema: z.ZodType<Prisma.SponsoredProgramAvgOrderByAggregateInput> = z.object({
  ProgramId: z.lazy(() => SortOrderSchema).optional(),
  SponsorId: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const SponsoredProgramMaxOrderByAggregateInputSchema: z.ZodType<Prisma.SponsoredProgramMaxOrderByAggregateInput> = z.object({
  ProgramId: z.lazy(() => SortOrderSchema).optional(),
  SponsorId: z.lazy(() => SortOrderSchema).optional(),
  TherapeuticArea: z.lazy(() => SortOrderSchema).optional(),
  ProgramName: z.lazy(() => SortOrderSchema).optional(),
  ProgramUrl: z.lazy(() => SortOrderSchema).optional(),
  ProgramLabUrl: z.lazy(() => SortOrderSchema).optional(),
  SponosoredTestingUrl: z.lazy(() => SortOrderSchema).optional(),
  ProgramEligibility: z.lazy(() => SortOrderSchema).optional(),
  CreatedAt: z.lazy(() => SortOrderSchema).optional(),
  UpdatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const SponsoredProgramMinOrderByAggregateInputSchema: z.ZodType<Prisma.SponsoredProgramMinOrderByAggregateInput> = z.object({
  ProgramId: z.lazy(() => SortOrderSchema).optional(),
  SponsorId: z.lazy(() => SortOrderSchema).optional(),
  TherapeuticArea: z.lazy(() => SortOrderSchema).optional(),
  ProgramName: z.lazy(() => SortOrderSchema).optional(),
  ProgramUrl: z.lazy(() => SortOrderSchema).optional(),
  ProgramLabUrl: z.lazy(() => SortOrderSchema).optional(),
  SponosoredTestingUrl: z.lazy(() => SortOrderSchema).optional(),
  ProgramEligibility: z.lazy(() => SortOrderSchema).optional(),
  CreatedAt: z.lazy(() => SortOrderSchema).optional(),
  UpdatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const SponsoredProgramSumOrderByAggregateInputSchema: z.ZodType<Prisma.SponsoredProgramSumOrderByAggregateInput> = z.object({
  ProgramId: z.lazy(() => SortOrderSchema).optional(),
  SponsorId: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const LabNullableRelationFilterSchema: z.ZodType<Prisma.LabNullableRelationFilter> = z.object({
  is: z.lazy(() => LabWhereInputSchema).optional().nullable(),
  isNot: z.lazy(() => LabWhereInputSchema).optional().nullable()
}).strict();

export const SponsoredProgramNullableRelationFilterSchema: z.ZodType<Prisma.SponsoredProgramNullableRelationFilter> = z.object({
  is: z.lazy(() => SponsoredProgramWhereInputSchema).optional().nullable(),
  isNot: z.lazy(() => SponsoredProgramWhereInputSchema).optional().nullable()
}).strict();

export const TestCatalogRelationFilterSchema: z.ZodType<Prisma.TestCatalogRelationFilter> = z.object({
  is: z.lazy(() => TestCatalogWhereInputSchema).optional(),
  isNot: z.lazy(() => TestCatalogWhereInputSchema).optional()
}).strict();

export const SponsoredTestOrderByRelevanceInputSchema: z.ZodType<Prisma.SponsoredTestOrderByRelevanceInput> = z.object({
  fields: z.union([ z.lazy(() => SponsoredTestOrderByRelevanceFieldEnumSchema),z.lazy(() => SponsoredTestOrderByRelevanceFieldEnumSchema).array() ]),
  sort: z.lazy(() => SortOrderSchema),
  search: z.string()
}).strict();

export const SponsoredTestCountOrderByAggregateInputSchema: z.ZodType<Prisma.SponsoredTestCountOrderByAggregateInput> = z.object({
  Id: z.lazy(() => SortOrderSchema).optional(),
  TestId: z.lazy(() => SortOrderSchema).optional(),
  LabTestId: z.lazy(() => SortOrderSchema).optional(),
  SponsoredProgramId: z.lazy(() => SortOrderSchema).optional(),
  LabId: z.lazy(() => SortOrderSchema).optional(),
  CasandraTestId: z.lazy(() => SortOrderSchema).optional(),
  Category: z.lazy(() => SortOrderSchema).optional(),
  SubCategory: z.lazy(() => SortOrderSchema).optional(),
  CreatedAt: z.lazy(() => SortOrderSchema).optional(),
  UpdatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const SponsoredTestAvgOrderByAggregateInputSchema: z.ZodType<Prisma.SponsoredTestAvgOrderByAggregateInput> = z.object({
  TestId: z.lazy(() => SortOrderSchema).optional(),
  SponsoredProgramId: z.lazy(() => SortOrderSchema).optional(),
  LabId: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const SponsoredTestMaxOrderByAggregateInputSchema: z.ZodType<Prisma.SponsoredTestMaxOrderByAggregateInput> = z.object({
  Id: z.lazy(() => SortOrderSchema).optional(),
  TestId: z.lazy(() => SortOrderSchema).optional(),
  LabTestId: z.lazy(() => SortOrderSchema).optional(),
  SponsoredProgramId: z.lazy(() => SortOrderSchema).optional(),
  LabId: z.lazy(() => SortOrderSchema).optional(),
  CasandraTestId: z.lazy(() => SortOrderSchema).optional(),
  Category: z.lazy(() => SortOrderSchema).optional(),
  SubCategory: z.lazy(() => SortOrderSchema).optional(),
  CreatedAt: z.lazy(() => SortOrderSchema).optional(),
  UpdatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const SponsoredTestMinOrderByAggregateInputSchema: z.ZodType<Prisma.SponsoredTestMinOrderByAggregateInput> = z.object({
  Id: z.lazy(() => SortOrderSchema).optional(),
  TestId: z.lazy(() => SortOrderSchema).optional(),
  LabTestId: z.lazy(() => SortOrderSchema).optional(),
  SponsoredProgramId: z.lazy(() => SortOrderSchema).optional(),
  LabId: z.lazy(() => SortOrderSchema).optional(),
  CasandraTestId: z.lazy(() => SortOrderSchema).optional(),
  Category: z.lazy(() => SortOrderSchema).optional(),
  SubCategory: z.lazy(() => SortOrderSchema).optional(),
  CreatedAt: z.lazy(() => SortOrderSchema).optional(),
  UpdatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const SponsoredTestSumOrderByAggregateInputSchema: z.ZodType<Prisma.SponsoredTestSumOrderByAggregateInput> = z.object({
  TestId: z.lazy(() => SortOrderSchema).optional(),
  SponsoredProgramId: z.lazy(() => SortOrderSchema).optional(),
  LabId: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const BIOMARKERRelationFilterSchema: z.ZodType<Prisma.BIOMARKERRelationFilter> = z.object({
  is: z.lazy(() => BIOMARKERWhereInputSchema).optional(),
  isNot: z.lazy(() => BIOMARKERWhereInputSchema).optional()
}).strict();

export const TestBiomarkerOrderByRelevanceInputSchema: z.ZodType<Prisma.TestBiomarkerOrderByRelevanceInput> = z.object({
  fields: z.union([ z.lazy(() => TestBiomarkerOrderByRelevanceFieldEnumSchema),z.lazy(() => TestBiomarkerOrderByRelevanceFieldEnumSchema).array() ]),
  sort: z.lazy(() => SortOrderSchema),
  search: z.string()
}).strict();

export const TestBiomarkerTestIdHGNCIdCompoundUniqueInputSchema: z.ZodType<Prisma.TestBiomarkerTestIdHGNCIdCompoundUniqueInput> = z.object({
  TestId: z.number(),
  HGNCId: z.string()
}).strict();

export const TestBiomarkerCountOrderByAggregateInputSchema: z.ZodType<Prisma.TestBiomarkerCountOrderByAggregateInput> = z.object({
  Id: z.lazy(() => SortOrderSchema).optional(),
  TestId: z.lazy(() => SortOrderSchema).optional(),
  LabTestId: z.lazy(() => SortOrderSchema).optional(),
  HGNCId: z.lazy(() => SortOrderSchema).optional(),
  TranscriptReference: z.lazy(() => SortOrderSchema).optional(),
  CreatedAt: z.lazy(() => SortOrderSchema).optional(),
  UpdatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const TestBiomarkerAvgOrderByAggregateInputSchema: z.ZodType<Prisma.TestBiomarkerAvgOrderByAggregateInput> = z.object({
  Id: z.lazy(() => SortOrderSchema).optional(),
  TestId: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const TestBiomarkerMaxOrderByAggregateInputSchema: z.ZodType<Prisma.TestBiomarkerMaxOrderByAggregateInput> = z.object({
  Id: z.lazy(() => SortOrderSchema).optional(),
  TestId: z.lazy(() => SortOrderSchema).optional(),
  LabTestId: z.lazy(() => SortOrderSchema).optional(),
  HGNCId: z.lazy(() => SortOrderSchema).optional(),
  TranscriptReference: z.lazy(() => SortOrderSchema).optional(),
  CreatedAt: z.lazy(() => SortOrderSchema).optional(),
  UpdatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const TestBiomarkerMinOrderByAggregateInputSchema: z.ZodType<Prisma.TestBiomarkerMinOrderByAggregateInput> = z.object({
  Id: z.lazy(() => SortOrderSchema).optional(),
  TestId: z.lazy(() => SortOrderSchema).optional(),
  LabTestId: z.lazy(() => SortOrderSchema).optional(),
  HGNCId: z.lazy(() => SortOrderSchema).optional(),
  TranscriptReference: z.lazy(() => SortOrderSchema).optional(),
  CreatedAt: z.lazy(() => SortOrderSchema).optional(),
  UpdatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const TestBiomarkerSumOrderByAggregateInputSchema: z.ZodType<Prisma.TestBiomarkerSumOrderByAggregateInput> = z.object({
  Id: z.lazy(() => SortOrderSchema).optional(),
  TestId: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const TestCptCodeListRelationFilterSchema: z.ZodType<Prisma.TestCptCodeListRelationFilter> = z.object({
  every: z.lazy(() => TestCptCodeWhereInputSchema).optional(),
  some: z.lazy(() => TestCptCodeWhereInputSchema).optional(),
  none: z.lazy(() => TestCptCodeWhereInputSchema).optional()
}).strict();

export const TestGeneListRelationFilterSchema: z.ZodType<Prisma.TestGeneListRelationFilter> = z.object({
  every: z.lazy(() => TestGeneWhereInputSchema).optional(),
  some: z.lazy(() => TestGeneWhereInputSchema).optional(),
  none: z.lazy(() => TestGeneWhereInputSchema).optional()
}).strict();

export const TestCptCodeOrderByRelationAggregateInputSchema: z.ZodType<Prisma.TestCptCodeOrderByRelationAggregateInput> = z.object({
  _count: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const TestGeneOrderByRelationAggregateInputSchema: z.ZodType<Prisma.TestGeneOrderByRelationAggregateInput> = z.object({
  _count: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const TestCatalogOrderByRelevanceInputSchema: z.ZodType<Prisma.TestCatalogOrderByRelevanceInput> = z.object({
  fields: z.union([ z.lazy(() => TestCatalogOrderByRelevanceFieldEnumSchema),z.lazy(() => TestCatalogOrderByRelevanceFieldEnumSchema).array() ]),
  sort: z.lazy(() => SortOrderSchema),
  search: z.string()
}).strict();

export const TestCatalogLabIdLabTestIdCompoundUniqueInputSchema: z.ZodType<Prisma.TestCatalogLabIdLabTestIdCompoundUniqueInput> = z.object({
  LabId: z.number(),
  LabTestId: z.string()
}).strict();

export const TestCatalogCountOrderByAggregateInputSchema: z.ZodType<Prisma.TestCatalogCountOrderByAggregateInput> = z.object({
  TestId: z.lazy(() => SortOrderSchema).optional(),
  LabId: z.lazy(() => SortOrderSchema).optional(),
  href: z.lazy(() => SortOrderSchema).optional(),
  CasandraTestId: z.lazy(() => SortOrderSchema).optional(),
  LabTestId: z.lazy(() => SortOrderSchema).optional(),
  TestName: z.lazy(() => SortOrderSchema).optional(),
  AlternativeName: z.lazy(() => SortOrderSchema).optional(),
  AlternativeName1: z.lazy(() => SortOrderSchema).optional(),
  AlternativeName2: z.lazy(() => SortOrderSchema).optional(),
  AlternativeName3: z.lazy(() => SortOrderSchema).optional(),
  AlternativeName4: z.lazy(() => SortOrderSchema).optional(),
  AlternativeName5: z.lazy(() => SortOrderSchema).optional(),
  TestIncludes: z.lazy(() => SortOrderSchema).optional(),
  SpecimenType: z.lazy(() => SortOrderSchema).optional(),
  SpecialInstructions: z.lazy(() => SortOrderSchema).optional(),
  Methodology: z.lazy(() => SortOrderSchema).optional(),
  TestDescription: z.lazy(() => SortOrderSchema).optional(),
  Diseases: z.lazy(() => SortOrderSchema).optional(),
  Probes: z.lazy(() => SortOrderSchema).optional(),
  ClinicalSignificance: z.lazy(() => SortOrderSchema).optional(),
  SpecimenRequirements: z.lazy(() => SortOrderSchema).optional(),
  Volume: z.lazy(() => SortOrderSchema).optional(),
  MinimumVolume: z.lazy(() => SortOrderSchema).optional(),
  Container: z.lazy(() => SortOrderSchema).optional(),
  Collection: z.lazy(() => SortOrderSchema).optional(),
  StabilityRequirements: z.lazy(() => SortOrderSchema).optional(),
  StorageTransportation: z.lazy(() => SortOrderSchema).optional(),
  PatientPreparation: z.lazy(() => SortOrderSchema).optional(),
  CausesForRejection: z.lazy(() => SortOrderSchema).optional(),
  TestUsage: z.lazy(() => SortOrderSchema).optional(),
  TestLimitations: z.lazy(() => SortOrderSchema).optional(),
  CPTCodes: z.lazy(() => SortOrderSchema).optional(),
  NewYorkApproved: z.lazy(() => SortOrderSchema).optional(),
  LevelOfService: z.lazy(() => SortOrderSchema).optional(),
  TurnAroundTime: z.lazy(() => SortOrderSchema).optional(),
  AssayCategory: z.lazy(() => SortOrderSchema).optional(),
  ReferenceRanges: z.lazy(() => SortOrderSchema).optional(),
  SetupSchedule: z.lazy(() => SortOrderSchema).optional(),
  AlternativeSpecimen: z.lazy(() => SortOrderSchema).optional(),
  LoincCodesText: z.lazy(() => SortOrderSchema).optional(),
  LoincCodesHTML: z.lazy(() => SortOrderSchema).optional(),
  TestCategory: z.lazy(() => SortOrderSchema).optional(),
  TestSubCategory: z.lazy(() => SortOrderSchema).optional(),
  CreatedAt: z.lazy(() => SortOrderSchema).optional(),
  UpdatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const TestCatalogAvgOrderByAggregateInputSchema: z.ZodType<Prisma.TestCatalogAvgOrderByAggregateInput> = z.object({
  TestId: z.lazy(() => SortOrderSchema).optional(),
  LabId: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const TestCatalogMaxOrderByAggregateInputSchema: z.ZodType<Prisma.TestCatalogMaxOrderByAggregateInput> = z.object({
  TestId: z.lazy(() => SortOrderSchema).optional(),
  LabId: z.lazy(() => SortOrderSchema).optional(),
  href: z.lazy(() => SortOrderSchema).optional(),
  CasandraTestId: z.lazy(() => SortOrderSchema).optional(),
  LabTestId: z.lazy(() => SortOrderSchema).optional(),
  TestName: z.lazy(() => SortOrderSchema).optional(),
  AlternativeName: z.lazy(() => SortOrderSchema).optional(),
  AlternativeName1: z.lazy(() => SortOrderSchema).optional(),
  AlternativeName2: z.lazy(() => SortOrderSchema).optional(),
  AlternativeName3: z.lazy(() => SortOrderSchema).optional(),
  AlternativeName4: z.lazy(() => SortOrderSchema).optional(),
  AlternativeName5: z.lazy(() => SortOrderSchema).optional(),
  TestIncludes: z.lazy(() => SortOrderSchema).optional(),
  SpecimenType: z.lazy(() => SortOrderSchema).optional(),
  SpecialInstructions: z.lazy(() => SortOrderSchema).optional(),
  Methodology: z.lazy(() => SortOrderSchema).optional(),
  TestDescription: z.lazy(() => SortOrderSchema).optional(),
  Diseases: z.lazy(() => SortOrderSchema).optional(),
  Probes: z.lazy(() => SortOrderSchema).optional(),
  ClinicalSignificance: z.lazy(() => SortOrderSchema).optional(),
  SpecimenRequirements: z.lazy(() => SortOrderSchema).optional(),
  Volume: z.lazy(() => SortOrderSchema).optional(),
  MinimumVolume: z.lazy(() => SortOrderSchema).optional(),
  Container: z.lazy(() => SortOrderSchema).optional(),
  Collection: z.lazy(() => SortOrderSchema).optional(),
  StabilityRequirements: z.lazy(() => SortOrderSchema).optional(),
  StorageTransportation: z.lazy(() => SortOrderSchema).optional(),
  PatientPreparation: z.lazy(() => SortOrderSchema).optional(),
  CausesForRejection: z.lazy(() => SortOrderSchema).optional(),
  TestUsage: z.lazy(() => SortOrderSchema).optional(),
  TestLimitations: z.lazy(() => SortOrderSchema).optional(),
  CPTCodes: z.lazy(() => SortOrderSchema).optional(),
  NewYorkApproved: z.lazy(() => SortOrderSchema).optional(),
  LevelOfService: z.lazy(() => SortOrderSchema).optional(),
  TurnAroundTime: z.lazy(() => SortOrderSchema).optional(),
  AssayCategory: z.lazy(() => SortOrderSchema).optional(),
  ReferenceRanges: z.lazy(() => SortOrderSchema).optional(),
  SetupSchedule: z.lazy(() => SortOrderSchema).optional(),
  AlternativeSpecimen: z.lazy(() => SortOrderSchema).optional(),
  LoincCodesText: z.lazy(() => SortOrderSchema).optional(),
  LoincCodesHTML: z.lazy(() => SortOrderSchema).optional(),
  TestCategory: z.lazy(() => SortOrderSchema).optional(),
  TestSubCategory: z.lazy(() => SortOrderSchema).optional(),
  CreatedAt: z.lazy(() => SortOrderSchema).optional(),
  UpdatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const TestCatalogMinOrderByAggregateInputSchema: z.ZodType<Prisma.TestCatalogMinOrderByAggregateInput> = z.object({
  TestId: z.lazy(() => SortOrderSchema).optional(),
  LabId: z.lazy(() => SortOrderSchema).optional(),
  href: z.lazy(() => SortOrderSchema).optional(),
  CasandraTestId: z.lazy(() => SortOrderSchema).optional(),
  LabTestId: z.lazy(() => SortOrderSchema).optional(),
  TestName: z.lazy(() => SortOrderSchema).optional(),
  AlternativeName: z.lazy(() => SortOrderSchema).optional(),
  AlternativeName1: z.lazy(() => SortOrderSchema).optional(),
  AlternativeName2: z.lazy(() => SortOrderSchema).optional(),
  AlternativeName3: z.lazy(() => SortOrderSchema).optional(),
  AlternativeName4: z.lazy(() => SortOrderSchema).optional(),
  AlternativeName5: z.lazy(() => SortOrderSchema).optional(),
  TestIncludes: z.lazy(() => SortOrderSchema).optional(),
  SpecimenType: z.lazy(() => SortOrderSchema).optional(),
  SpecialInstructions: z.lazy(() => SortOrderSchema).optional(),
  Methodology: z.lazy(() => SortOrderSchema).optional(),
  TestDescription: z.lazy(() => SortOrderSchema).optional(),
  Diseases: z.lazy(() => SortOrderSchema).optional(),
  Probes: z.lazy(() => SortOrderSchema).optional(),
  ClinicalSignificance: z.lazy(() => SortOrderSchema).optional(),
  SpecimenRequirements: z.lazy(() => SortOrderSchema).optional(),
  Volume: z.lazy(() => SortOrderSchema).optional(),
  MinimumVolume: z.lazy(() => SortOrderSchema).optional(),
  Container: z.lazy(() => SortOrderSchema).optional(),
  Collection: z.lazy(() => SortOrderSchema).optional(),
  StabilityRequirements: z.lazy(() => SortOrderSchema).optional(),
  StorageTransportation: z.lazy(() => SortOrderSchema).optional(),
  PatientPreparation: z.lazy(() => SortOrderSchema).optional(),
  CausesForRejection: z.lazy(() => SortOrderSchema).optional(),
  TestUsage: z.lazy(() => SortOrderSchema).optional(),
  TestLimitations: z.lazy(() => SortOrderSchema).optional(),
  CPTCodes: z.lazy(() => SortOrderSchema).optional(),
  NewYorkApproved: z.lazy(() => SortOrderSchema).optional(),
  LevelOfService: z.lazy(() => SortOrderSchema).optional(),
  TurnAroundTime: z.lazy(() => SortOrderSchema).optional(),
  AssayCategory: z.lazy(() => SortOrderSchema).optional(),
  ReferenceRanges: z.lazy(() => SortOrderSchema).optional(),
  SetupSchedule: z.lazy(() => SortOrderSchema).optional(),
  AlternativeSpecimen: z.lazy(() => SortOrderSchema).optional(),
  LoincCodesText: z.lazy(() => SortOrderSchema).optional(),
  LoincCodesHTML: z.lazy(() => SortOrderSchema).optional(),
  TestCategory: z.lazy(() => SortOrderSchema).optional(),
  TestSubCategory: z.lazy(() => SortOrderSchema).optional(),
  CreatedAt: z.lazy(() => SortOrderSchema).optional(),
  UpdatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const TestCatalogSumOrderByAggregateInputSchema: z.ZodType<Prisma.TestCatalogSumOrderByAggregateInput> = z.object({
  TestId: z.lazy(() => SortOrderSchema).optional(),
  LabId: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const TestCptCodeOrderByRelevanceInputSchema: z.ZodType<Prisma.TestCptCodeOrderByRelevanceInput> = z.object({
  fields: z.union([ z.lazy(() => TestCptCodeOrderByRelevanceFieldEnumSchema),z.lazy(() => TestCptCodeOrderByRelevanceFieldEnumSchema).array() ]),
  sort: z.lazy(() => SortOrderSchema),
  search: z.string()
}).strict();

export const TestCptCodeCountOrderByAggregateInputSchema: z.ZodType<Prisma.TestCptCodeCountOrderByAggregateInput> = z.object({
  Id: z.lazy(() => SortOrderSchema).optional(),
  TestId: z.lazy(() => SortOrderSchema).optional(),
  LabTestId: z.lazy(() => SortOrderSchema).optional(),
  CptCode: z.lazy(() => SortOrderSchema).optional(),
  Modifier: z.lazy(() => SortOrderSchema).optional(),
  Comments: z.lazy(() => SortOrderSchema).optional(),
  CreatedAt: z.lazy(() => SortOrderSchema).optional(),
  UpdatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const TestCptCodeAvgOrderByAggregateInputSchema: z.ZodType<Prisma.TestCptCodeAvgOrderByAggregateInput> = z.object({
  Id: z.lazy(() => SortOrderSchema).optional(),
  TestId: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const TestCptCodeMaxOrderByAggregateInputSchema: z.ZodType<Prisma.TestCptCodeMaxOrderByAggregateInput> = z.object({
  Id: z.lazy(() => SortOrderSchema).optional(),
  TestId: z.lazy(() => SortOrderSchema).optional(),
  LabTestId: z.lazy(() => SortOrderSchema).optional(),
  CptCode: z.lazy(() => SortOrderSchema).optional(),
  Modifier: z.lazy(() => SortOrderSchema).optional(),
  Comments: z.lazy(() => SortOrderSchema).optional(),
  CreatedAt: z.lazy(() => SortOrderSchema).optional(),
  UpdatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const TestCptCodeMinOrderByAggregateInputSchema: z.ZodType<Prisma.TestCptCodeMinOrderByAggregateInput> = z.object({
  Id: z.lazy(() => SortOrderSchema).optional(),
  TestId: z.lazy(() => SortOrderSchema).optional(),
  LabTestId: z.lazy(() => SortOrderSchema).optional(),
  CptCode: z.lazy(() => SortOrderSchema).optional(),
  Modifier: z.lazy(() => SortOrderSchema).optional(),
  Comments: z.lazy(() => SortOrderSchema).optional(),
  CreatedAt: z.lazy(() => SortOrderSchema).optional(),
  UpdatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const TestCptCodeSumOrderByAggregateInputSchema: z.ZodType<Prisma.TestCptCodeSumOrderByAggregateInput> = z.object({
  Id: z.lazy(() => SortOrderSchema).optional(),
  TestId: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const TestGeneOrderByRelevanceInputSchema: z.ZodType<Prisma.TestGeneOrderByRelevanceInput> = z.object({
  fields: z.union([ z.lazy(() => TestGeneOrderByRelevanceFieldEnumSchema),z.lazy(() => TestGeneOrderByRelevanceFieldEnumSchema).array() ]),
  sort: z.lazy(() => SortOrderSchema),
  search: z.string()
}).strict();

export const TestGeneTestIdGeneCompoundUniqueInputSchema: z.ZodType<Prisma.TestGeneTestIdGeneCompoundUniqueInput> = z.object({
  TestId: z.number(),
  Gene: z.string()
}).strict();

export const TestGeneCountOrderByAggregateInputSchema: z.ZodType<Prisma.TestGeneCountOrderByAggregateInput> = z.object({
  Id: z.lazy(() => SortOrderSchema).optional(),
  TestId: z.lazy(() => SortOrderSchema).optional(),
  LabTestId: z.lazy(() => SortOrderSchema).optional(),
  Gene: z.lazy(() => SortOrderSchema).optional(),
  TranscriptReference: z.lazy(() => SortOrderSchema).optional(),
  CreatedAt: z.lazy(() => SortOrderSchema).optional(),
  UpdatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const TestGeneAvgOrderByAggregateInputSchema: z.ZodType<Prisma.TestGeneAvgOrderByAggregateInput> = z.object({
  Id: z.lazy(() => SortOrderSchema).optional(),
  TestId: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const TestGeneMaxOrderByAggregateInputSchema: z.ZodType<Prisma.TestGeneMaxOrderByAggregateInput> = z.object({
  Id: z.lazy(() => SortOrderSchema).optional(),
  TestId: z.lazy(() => SortOrderSchema).optional(),
  LabTestId: z.lazy(() => SortOrderSchema).optional(),
  Gene: z.lazy(() => SortOrderSchema).optional(),
  TranscriptReference: z.lazy(() => SortOrderSchema).optional(),
  CreatedAt: z.lazy(() => SortOrderSchema).optional(),
  UpdatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const TestGeneMinOrderByAggregateInputSchema: z.ZodType<Prisma.TestGeneMinOrderByAggregateInput> = z.object({
  Id: z.lazy(() => SortOrderSchema).optional(),
  TestId: z.lazy(() => SortOrderSchema).optional(),
  LabTestId: z.lazy(() => SortOrderSchema).optional(),
  Gene: z.lazy(() => SortOrderSchema).optional(),
  TranscriptReference: z.lazy(() => SortOrderSchema).optional(),
  CreatedAt: z.lazy(() => SortOrderSchema).optional(),
  UpdatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const TestGeneSumOrderByAggregateInputSchema: z.ZodType<Prisma.TestGeneSumOrderByAggregateInput> = z.object({
  Id: z.lazy(() => SortOrderSchema).optional(),
  TestId: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const LOINCNullableRelationFilterSchema: z.ZodType<Prisma.LOINCNullableRelationFilter> = z.object({
  is: z.lazy(() => LOINCWhereInputSchema).optional().nullable(),
  isNot: z.lazy(() => LOINCWhereInputSchema).optional().nullable()
}).strict();

export const TestOrderLoincOrderByRelevanceInputSchema: z.ZodType<Prisma.TestOrderLoincOrderByRelevanceInput> = z.object({
  fields: z.union([ z.lazy(() => TestOrderLoincOrderByRelevanceFieldEnumSchema),z.lazy(() => TestOrderLoincOrderByRelevanceFieldEnumSchema).array() ]),
  sort: z.lazy(() => SortOrderSchema),
  search: z.string()
}).strict();

export const TestOrderLoincTestIdOrderLoincCompoundUniqueInputSchema: z.ZodType<Prisma.TestOrderLoincTestIdOrderLoincCompoundUniqueInput> = z.object({
  TestId: z.number(),
  OrderLoinc: z.string()
}).strict();

export const TestOrderLoincCountOrderByAggregateInputSchema: z.ZodType<Prisma.TestOrderLoincCountOrderByAggregateInput> = z.object({
  Id: z.lazy(() => SortOrderSchema).optional(),
  TestId: z.lazy(() => SortOrderSchema).optional(),
  LabTestId: z.lazy(() => SortOrderSchema).optional(),
  OrderLoinc: z.lazy(() => SortOrderSchema).optional(),
  CreatedAt: z.lazy(() => SortOrderSchema).optional(),
  UpdatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const TestOrderLoincAvgOrderByAggregateInputSchema: z.ZodType<Prisma.TestOrderLoincAvgOrderByAggregateInput> = z.object({
  Id: z.lazy(() => SortOrderSchema).optional(),
  TestId: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const TestOrderLoincMaxOrderByAggregateInputSchema: z.ZodType<Prisma.TestOrderLoincMaxOrderByAggregateInput> = z.object({
  Id: z.lazy(() => SortOrderSchema).optional(),
  TestId: z.lazy(() => SortOrderSchema).optional(),
  LabTestId: z.lazy(() => SortOrderSchema).optional(),
  OrderLoinc: z.lazy(() => SortOrderSchema).optional(),
  CreatedAt: z.lazy(() => SortOrderSchema).optional(),
  UpdatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const TestOrderLoincMinOrderByAggregateInputSchema: z.ZodType<Prisma.TestOrderLoincMinOrderByAggregateInput> = z.object({
  Id: z.lazy(() => SortOrderSchema).optional(),
  TestId: z.lazy(() => SortOrderSchema).optional(),
  LabTestId: z.lazy(() => SortOrderSchema).optional(),
  OrderLoinc: z.lazy(() => SortOrderSchema).optional(),
  CreatedAt: z.lazy(() => SortOrderSchema).optional(),
  UpdatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const TestOrderLoincSumOrderByAggregateInputSchema: z.ZodType<Prisma.TestOrderLoincSumOrderByAggregateInput> = z.object({
  Id: z.lazy(() => SortOrderSchema).optional(),
  TestId: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const TestResultLoincOrderByRelevanceInputSchema: z.ZodType<Prisma.TestResultLoincOrderByRelevanceInput> = z.object({
  fields: z.union([ z.lazy(() => TestResultLoincOrderByRelevanceFieldEnumSchema),z.lazy(() => TestResultLoincOrderByRelevanceFieldEnumSchema).array() ]),
  sort: z.lazy(() => SortOrderSchema),
  search: z.string()
}).strict();

export const TestResultLoincCountOrderByAggregateInputSchema: z.ZodType<Prisma.TestResultLoincCountOrderByAggregateInput> = z.object({
  Id: z.lazy(() => SortOrderSchema).optional(),
  TestId: z.lazy(() => SortOrderSchema).optional(),
  LabTestId: z.lazy(() => SortOrderSchema).optional(),
  ResultCode: z.lazy(() => SortOrderSchema).optional(),
  ResultCodeName: z.lazy(() => SortOrderSchema).optional(),
  UofM: z.lazy(() => SortOrderSchema).optional(),
  ResultLoinc: z.lazy(() => SortOrderSchema).optional(),
  CreatedAt: z.lazy(() => SortOrderSchema).optional(),
  UpdatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const TestResultLoincAvgOrderByAggregateInputSchema: z.ZodType<Prisma.TestResultLoincAvgOrderByAggregateInput> = z.object({
  Id: z.lazy(() => SortOrderSchema).optional(),
  TestId: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const TestResultLoincMaxOrderByAggregateInputSchema: z.ZodType<Prisma.TestResultLoincMaxOrderByAggregateInput> = z.object({
  Id: z.lazy(() => SortOrderSchema).optional(),
  TestId: z.lazy(() => SortOrderSchema).optional(),
  LabTestId: z.lazy(() => SortOrderSchema).optional(),
  ResultCode: z.lazy(() => SortOrderSchema).optional(),
  ResultCodeName: z.lazy(() => SortOrderSchema).optional(),
  UofM: z.lazy(() => SortOrderSchema).optional(),
  ResultLoinc: z.lazy(() => SortOrderSchema).optional(),
  CreatedAt: z.lazy(() => SortOrderSchema).optional(),
  UpdatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const TestResultLoincMinOrderByAggregateInputSchema: z.ZodType<Prisma.TestResultLoincMinOrderByAggregateInput> = z.object({
  Id: z.lazy(() => SortOrderSchema).optional(),
  TestId: z.lazy(() => SortOrderSchema).optional(),
  LabTestId: z.lazy(() => SortOrderSchema).optional(),
  ResultCode: z.lazy(() => SortOrderSchema).optional(),
  ResultCodeName: z.lazy(() => SortOrderSchema).optional(),
  UofM: z.lazy(() => SortOrderSchema).optional(),
  ResultLoinc: z.lazy(() => SortOrderSchema).optional(),
  CreatedAt: z.lazy(() => SortOrderSchema).optional(),
  UpdatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const TestResultLoincSumOrderByAggregateInputSchema: z.ZodType<Prisma.TestResultLoincSumOrderByAggregateInput> = z.object({
  Id: z.lazy(() => SortOrderSchema).optional(),
  TestId: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const AccountNullableRelationFilterSchema: z.ZodType<Prisma.AccountNullableRelationFilter> = z.object({
  is: z.lazy(() => AccountWhereInputSchema).optional().nullable(),
  isNot: z.lazy(() => AccountWhereInputSchema).optional().nullable()
}).strict();

export const SessionListRelationFilterSchema: z.ZodType<Prisma.SessionListRelationFilter> = z.object({
  every: z.lazy(() => SessionWhereInputSchema).optional(),
  some: z.lazy(() => SessionWhereInputSchema).optional(),
  none: z.lazy(() => SessionWhereInputSchema).optional()
}).strict();

export const SessionOrderByRelationAggregateInputSchema: z.ZodType<Prisma.SessionOrderByRelationAggregateInput> = z.object({
  _count: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const UserOrderByRelevanceInputSchema: z.ZodType<Prisma.UserOrderByRelevanceInput> = z.object({
  fields: z.union([ z.lazy(() => UserOrderByRelevanceFieldEnumSchema),z.lazy(() => UserOrderByRelevanceFieldEnumSchema).array() ]),
  sort: z.lazy(() => SortOrderSchema),
  search: z.string()
}).strict();

export const UserCountOrderByAggregateInputSchema: z.ZodType<Prisma.UserCountOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  email: z.lazy(() => SortOrderSchema).optional(),
  password: z.lazy(() => SortOrderSchema).optional(),
  emailVerified: z.lazy(() => SortOrderSchema).optional(),
  image: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const UserMaxOrderByAggregateInputSchema: z.ZodType<Prisma.UserMaxOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  email: z.lazy(() => SortOrderSchema).optional(),
  password: z.lazy(() => SortOrderSchema).optional(),
  emailVerified: z.lazy(() => SortOrderSchema).optional(),
  image: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const UserMinOrderByAggregateInputSchema: z.ZodType<Prisma.UserMinOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  email: z.lazy(() => SortOrderSchema).optional(),
  password: z.lazy(() => SortOrderSchema).optional(),
  emailVerified: z.lazy(() => SortOrderSchema).optional(),
  image: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const EnumUserAttribute_UserTypeNullableFilterSchema: z.ZodType<Prisma.EnumUserAttribute_UserTypeNullableFilter> = z.object({
  equals: z.lazy(() => UserAttribute_UserTypeSchema).optional().nullable(),
  in: z.lazy(() => UserAttribute_UserTypeSchema).array().optional().nullable(),
  notIn: z.lazy(() => UserAttribute_UserTypeSchema).array().optional().nullable(),
  not: z.union([ z.lazy(() => UserAttribute_UserTypeSchema),z.lazy(() => NestedEnumUserAttribute_UserTypeNullableFilterSchema) ]).optional().nullable(),
}).strict();

export const AdminNullableRelationFilterSchema: z.ZodType<Prisma.AdminNullableRelationFilter> = z.object({
  is: z.lazy(() => AdminWhereInputSchema).optional().nullable(),
  isNot: z.lazy(() => AdminWhereInputSchema).optional().nullable()
}).strict();

export const UserAttributeOrderByRelevanceInputSchema: z.ZodType<Prisma.UserAttributeOrderByRelevanceInput> = z.object({
  fields: z.union([ z.lazy(() => UserAttributeOrderByRelevanceFieldEnumSchema),z.lazy(() => UserAttributeOrderByRelevanceFieldEnumSchema).array() ]),
  sort: z.lazy(() => SortOrderSchema),
  search: z.string()
}).strict();

export const UserAttributeCountOrderByAggregateInputSchema: z.ZodType<Prisma.UserAttributeCountOrderByAggregateInput> = z.object({
  Id: z.lazy(() => SortOrderSchema).optional(),
  UserId: z.lazy(() => SortOrderSchema).optional(),
  UserType: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const UserAttributeMaxOrderByAggregateInputSchema: z.ZodType<Prisma.UserAttributeMaxOrderByAggregateInput> = z.object({
  Id: z.lazy(() => SortOrderSchema).optional(),
  UserId: z.lazy(() => SortOrderSchema).optional(),
  UserType: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const UserAttributeMinOrderByAggregateInputSchema: z.ZodType<Prisma.UserAttributeMinOrderByAggregateInput> = z.object({
  Id: z.lazy(() => SortOrderSchema).optional(),
  UserId: z.lazy(() => SortOrderSchema).optional(),
  UserType: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const EnumUserAttribute_UserTypeNullableWithAggregatesFilterSchema: z.ZodType<Prisma.EnumUserAttribute_UserTypeNullableWithAggregatesFilter> = z.object({
  equals: z.lazy(() => UserAttribute_UserTypeSchema).optional().nullable(),
  in: z.lazy(() => UserAttribute_UserTypeSchema).array().optional().nullable(),
  notIn: z.lazy(() => UserAttribute_UserTypeSchema).array().optional().nullable(),
  not: z.union([ z.lazy(() => UserAttribute_UserTypeSchema),z.lazy(() => NestedEnumUserAttribute_UserTypeNullableWithAggregatesFilterSchema) ]).optional().nullable(),
  _count: z.lazy(() => NestedIntNullableFilterSchema).optional(),
  _min: z.lazy(() => NestedEnumUserAttribute_UserTypeNullableFilterSchema).optional(),
  _max: z.lazy(() => NestedEnumUserAttribute_UserTypeNullableFilterSchema).optional()
}).strict();

export const VerificationTokenOrderByRelevanceInputSchema: z.ZodType<Prisma.VerificationTokenOrderByRelevanceInput> = z.object({
  fields: z.union([ z.lazy(() => VerificationTokenOrderByRelevanceFieldEnumSchema),z.lazy(() => VerificationTokenOrderByRelevanceFieldEnumSchema).array() ]),
  sort: z.lazy(() => SortOrderSchema),
  search: z.string()
}).strict();

export const VerificationTokenIdentifierTokenCompoundUniqueInputSchema: z.ZodType<Prisma.VerificationTokenIdentifierTokenCompoundUniqueInput> = z.object({
  identifier: z.string(),
  token: z.string()
}).strict();

export const VerificationTokenCountOrderByAggregateInputSchema: z.ZodType<Prisma.VerificationTokenCountOrderByAggregateInput> = z.object({
  identifier: z.lazy(() => SortOrderSchema).optional(),
  token: z.lazy(() => SortOrderSchema).optional(),
  expires: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const VerificationTokenMaxOrderByAggregateInputSchema: z.ZodType<Prisma.VerificationTokenMaxOrderByAggregateInput> = z.object({
  identifier: z.lazy(() => SortOrderSchema).optional(),
  token: z.lazy(() => SortOrderSchema).optional(),
  expires: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const VerificationTokenMinOrderByAggregateInputSchema: z.ZodType<Prisma.VerificationTokenMinOrderByAggregateInput> = z.object({
  identifier: z.lazy(() => SortOrderSchema).optional(),
  token: z.lazy(() => SortOrderSchema).optional(),
  expires: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const UserCreateNestedOneWithoutAccountInputSchema: z.ZodType<Prisma.UserCreateNestedOneWithoutAccountInput> = z.object({
  create: z.union([ z.lazy(() => UserCreateWithoutAccountInputSchema),z.lazy(() => UserUncheckedCreateWithoutAccountInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => UserCreateOrConnectWithoutAccountInputSchema).optional(),
  connect: z.lazy(() => UserWhereUniqueInputSchema).optional()
}).strict();

export const StringFieldUpdateOperationsInputSchema: z.ZodType<Prisma.StringFieldUpdateOperationsInput> = z.object({
  set: z.string().optional()
}).strict();

export const NullableStringFieldUpdateOperationsInputSchema: z.ZodType<Prisma.NullableStringFieldUpdateOperationsInput> = z.object({
  set: z.string().optional().nullable()
}).strict();

export const NullableIntFieldUpdateOperationsInputSchema: z.ZodType<Prisma.NullableIntFieldUpdateOperationsInput> = z.object({
  set: z.number().optional().nullable(),
  increment: z.number().optional(),
  decrement: z.number().optional(),
  multiply: z.number().optional(),
  divide: z.number().optional()
}).strict();

export const NullableDateTimeFieldUpdateOperationsInputSchema: z.ZodType<Prisma.NullableDateTimeFieldUpdateOperationsInput> = z.object({
  set: z.date().optional().nullable()
}).strict();

export const UserUpdateOneRequiredWithoutAccountNestedInputSchema: z.ZodType<Prisma.UserUpdateOneRequiredWithoutAccountNestedInput> = z.object({
  create: z.union([ z.lazy(() => UserCreateWithoutAccountInputSchema),z.lazy(() => UserUncheckedCreateWithoutAccountInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => UserCreateOrConnectWithoutAccountInputSchema).optional(),
  upsert: z.lazy(() => UserUpsertWithoutAccountInputSchema).optional(),
  connect: z.lazy(() => UserWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => UserUpdateToOneWithWhereWithoutAccountInputSchema),z.lazy(() => UserUpdateWithoutAccountInputSchema),z.lazy(() => UserUncheckedUpdateWithoutAccountInputSchema) ]).optional(),
}).strict();

export const UserAttributeCreateNestedOneWithoutAdminInputSchema: z.ZodType<Prisma.UserAttributeCreateNestedOneWithoutAdminInput> = z.object({
  create: z.union([ z.lazy(() => UserAttributeCreateWithoutAdminInputSchema),z.lazy(() => UserAttributeUncheckedCreateWithoutAdminInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => UserAttributeCreateOrConnectWithoutAdminInputSchema).optional(),
  connect: z.lazy(() => UserAttributeWhereUniqueInputSchema).optional()
}).strict();

export const UserAttributeUpdateOneRequiredWithoutAdminNestedInputSchema: z.ZodType<Prisma.UserAttributeUpdateOneRequiredWithoutAdminNestedInput> = z.object({
  create: z.union([ z.lazy(() => UserAttributeCreateWithoutAdminInputSchema),z.lazy(() => UserAttributeUncheckedCreateWithoutAdminInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => UserAttributeCreateOrConnectWithoutAdminInputSchema).optional(),
  upsert: z.lazy(() => UserAttributeUpsertWithoutAdminInputSchema).optional(),
  connect: z.lazy(() => UserAttributeWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => UserAttributeUpdateToOneWithWhereWithoutAdminInputSchema),z.lazy(() => UserAttributeUpdateWithoutAdminInputSchema),z.lazy(() => UserAttributeUncheckedUpdateWithoutAdminInputSchema) ]).optional(),
}).strict();

export const LabOrderAttachmentCreateNestedManyWithoutAttachmentInputSchema: z.ZodType<Prisma.LabOrderAttachmentCreateNestedManyWithoutAttachmentInput> = z.object({
  create: z.union([ z.lazy(() => LabOrderAttachmentCreateWithoutAttachmentInputSchema),z.lazy(() => LabOrderAttachmentCreateWithoutAttachmentInputSchema).array(),z.lazy(() => LabOrderAttachmentUncheckedCreateWithoutAttachmentInputSchema),z.lazy(() => LabOrderAttachmentUncheckedCreateWithoutAttachmentInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => LabOrderAttachmentCreateOrConnectWithoutAttachmentInputSchema),z.lazy(() => LabOrderAttachmentCreateOrConnectWithoutAttachmentInputSchema).array() ]).optional(),
  createMany: z.lazy(() => LabOrderAttachmentCreateManyAttachmentInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => LabOrderAttachmentWhereUniqueInputSchema),z.lazy(() => LabOrderAttachmentWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const LabOrderAttachmentUncheckedCreateNestedManyWithoutAttachmentInputSchema: z.ZodType<Prisma.LabOrderAttachmentUncheckedCreateNestedManyWithoutAttachmentInput> = z.object({
  create: z.union([ z.lazy(() => LabOrderAttachmentCreateWithoutAttachmentInputSchema),z.lazy(() => LabOrderAttachmentCreateWithoutAttachmentInputSchema).array(),z.lazy(() => LabOrderAttachmentUncheckedCreateWithoutAttachmentInputSchema),z.lazy(() => LabOrderAttachmentUncheckedCreateWithoutAttachmentInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => LabOrderAttachmentCreateOrConnectWithoutAttachmentInputSchema),z.lazy(() => LabOrderAttachmentCreateOrConnectWithoutAttachmentInputSchema).array() ]).optional(),
  createMany: z.lazy(() => LabOrderAttachmentCreateManyAttachmentInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => LabOrderAttachmentWhereUniqueInputSchema),z.lazy(() => LabOrderAttachmentWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const LabOrderAttachmentUpdateManyWithoutAttachmentNestedInputSchema: z.ZodType<Prisma.LabOrderAttachmentUpdateManyWithoutAttachmentNestedInput> = z.object({
  create: z.union([ z.lazy(() => LabOrderAttachmentCreateWithoutAttachmentInputSchema),z.lazy(() => LabOrderAttachmentCreateWithoutAttachmentInputSchema).array(),z.lazy(() => LabOrderAttachmentUncheckedCreateWithoutAttachmentInputSchema),z.lazy(() => LabOrderAttachmentUncheckedCreateWithoutAttachmentInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => LabOrderAttachmentCreateOrConnectWithoutAttachmentInputSchema),z.lazy(() => LabOrderAttachmentCreateOrConnectWithoutAttachmentInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => LabOrderAttachmentUpsertWithWhereUniqueWithoutAttachmentInputSchema),z.lazy(() => LabOrderAttachmentUpsertWithWhereUniqueWithoutAttachmentInputSchema).array() ]).optional(),
  createMany: z.lazy(() => LabOrderAttachmentCreateManyAttachmentInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => LabOrderAttachmentWhereUniqueInputSchema),z.lazy(() => LabOrderAttachmentWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => LabOrderAttachmentWhereUniqueInputSchema),z.lazy(() => LabOrderAttachmentWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => LabOrderAttachmentWhereUniqueInputSchema),z.lazy(() => LabOrderAttachmentWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => LabOrderAttachmentWhereUniqueInputSchema),z.lazy(() => LabOrderAttachmentWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => LabOrderAttachmentUpdateWithWhereUniqueWithoutAttachmentInputSchema),z.lazy(() => LabOrderAttachmentUpdateWithWhereUniqueWithoutAttachmentInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => LabOrderAttachmentUpdateManyWithWhereWithoutAttachmentInputSchema),z.lazy(() => LabOrderAttachmentUpdateManyWithWhereWithoutAttachmentInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => LabOrderAttachmentScalarWhereInputSchema),z.lazy(() => LabOrderAttachmentScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const LabOrderAttachmentUncheckedUpdateManyWithoutAttachmentNestedInputSchema: z.ZodType<Prisma.LabOrderAttachmentUncheckedUpdateManyWithoutAttachmentNestedInput> = z.object({
  create: z.union([ z.lazy(() => LabOrderAttachmentCreateWithoutAttachmentInputSchema),z.lazy(() => LabOrderAttachmentCreateWithoutAttachmentInputSchema).array(),z.lazy(() => LabOrderAttachmentUncheckedCreateWithoutAttachmentInputSchema),z.lazy(() => LabOrderAttachmentUncheckedCreateWithoutAttachmentInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => LabOrderAttachmentCreateOrConnectWithoutAttachmentInputSchema),z.lazy(() => LabOrderAttachmentCreateOrConnectWithoutAttachmentInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => LabOrderAttachmentUpsertWithWhereUniqueWithoutAttachmentInputSchema),z.lazy(() => LabOrderAttachmentUpsertWithWhereUniqueWithoutAttachmentInputSchema).array() ]).optional(),
  createMany: z.lazy(() => LabOrderAttachmentCreateManyAttachmentInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => LabOrderAttachmentWhereUniqueInputSchema),z.lazy(() => LabOrderAttachmentWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => LabOrderAttachmentWhereUniqueInputSchema),z.lazy(() => LabOrderAttachmentWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => LabOrderAttachmentWhereUniqueInputSchema),z.lazy(() => LabOrderAttachmentWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => LabOrderAttachmentWhereUniqueInputSchema),z.lazy(() => LabOrderAttachmentWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => LabOrderAttachmentUpdateWithWhereUniqueWithoutAttachmentInputSchema),z.lazy(() => LabOrderAttachmentUpdateWithWhereUniqueWithoutAttachmentInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => LabOrderAttachmentUpdateManyWithWhereWithoutAttachmentInputSchema),z.lazy(() => LabOrderAttachmentUpdateManyWithWhereWithoutAttachmentInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => LabOrderAttachmentScalarWhereInputSchema),z.lazy(() => LabOrderAttachmentScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const TestBiomarkerCreateNestedManyWithoutBIOMARKERInputSchema: z.ZodType<Prisma.TestBiomarkerCreateNestedManyWithoutBIOMARKERInput> = z.object({
  create: z.union([ z.lazy(() => TestBiomarkerCreateWithoutBIOMARKERInputSchema),z.lazy(() => TestBiomarkerCreateWithoutBIOMARKERInputSchema).array(),z.lazy(() => TestBiomarkerUncheckedCreateWithoutBIOMARKERInputSchema),z.lazy(() => TestBiomarkerUncheckedCreateWithoutBIOMARKERInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => TestBiomarkerCreateOrConnectWithoutBIOMARKERInputSchema),z.lazy(() => TestBiomarkerCreateOrConnectWithoutBIOMARKERInputSchema).array() ]).optional(),
  createMany: z.lazy(() => TestBiomarkerCreateManyBIOMARKERInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => TestBiomarkerWhereUniqueInputSchema),z.lazy(() => TestBiomarkerWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const TestBiomarkerUncheckedCreateNestedManyWithoutBIOMARKERInputSchema: z.ZodType<Prisma.TestBiomarkerUncheckedCreateNestedManyWithoutBIOMARKERInput> = z.object({
  create: z.union([ z.lazy(() => TestBiomarkerCreateWithoutBIOMARKERInputSchema),z.lazy(() => TestBiomarkerCreateWithoutBIOMARKERInputSchema).array(),z.lazy(() => TestBiomarkerUncheckedCreateWithoutBIOMARKERInputSchema),z.lazy(() => TestBiomarkerUncheckedCreateWithoutBIOMARKERInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => TestBiomarkerCreateOrConnectWithoutBIOMARKERInputSchema),z.lazy(() => TestBiomarkerCreateOrConnectWithoutBIOMARKERInputSchema).array() ]).optional(),
  createMany: z.lazy(() => TestBiomarkerCreateManyBIOMARKERInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => TestBiomarkerWhereUniqueInputSchema),z.lazy(() => TestBiomarkerWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const TestBiomarkerUpdateManyWithoutBIOMARKERNestedInputSchema: z.ZodType<Prisma.TestBiomarkerUpdateManyWithoutBIOMARKERNestedInput> = z.object({
  create: z.union([ z.lazy(() => TestBiomarkerCreateWithoutBIOMARKERInputSchema),z.lazy(() => TestBiomarkerCreateWithoutBIOMARKERInputSchema).array(),z.lazy(() => TestBiomarkerUncheckedCreateWithoutBIOMARKERInputSchema),z.lazy(() => TestBiomarkerUncheckedCreateWithoutBIOMARKERInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => TestBiomarkerCreateOrConnectWithoutBIOMARKERInputSchema),z.lazy(() => TestBiomarkerCreateOrConnectWithoutBIOMARKERInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => TestBiomarkerUpsertWithWhereUniqueWithoutBIOMARKERInputSchema),z.lazy(() => TestBiomarkerUpsertWithWhereUniqueWithoutBIOMARKERInputSchema).array() ]).optional(),
  createMany: z.lazy(() => TestBiomarkerCreateManyBIOMARKERInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => TestBiomarkerWhereUniqueInputSchema),z.lazy(() => TestBiomarkerWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => TestBiomarkerWhereUniqueInputSchema),z.lazy(() => TestBiomarkerWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => TestBiomarkerWhereUniqueInputSchema),z.lazy(() => TestBiomarkerWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => TestBiomarkerWhereUniqueInputSchema),z.lazy(() => TestBiomarkerWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => TestBiomarkerUpdateWithWhereUniqueWithoutBIOMARKERInputSchema),z.lazy(() => TestBiomarkerUpdateWithWhereUniqueWithoutBIOMARKERInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => TestBiomarkerUpdateManyWithWhereWithoutBIOMARKERInputSchema),z.lazy(() => TestBiomarkerUpdateManyWithWhereWithoutBIOMARKERInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => TestBiomarkerScalarWhereInputSchema),z.lazy(() => TestBiomarkerScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const TestBiomarkerUncheckedUpdateManyWithoutBIOMARKERNestedInputSchema: z.ZodType<Prisma.TestBiomarkerUncheckedUpdateManyWithoutBIOMARKERNestedInput> = z.object({
  create: z.union([ z.lazy(() => TestBiomarkerCreateWithoutBIOMARKERInputSchema),z.lazy(() => TestBiomarkerCreateWithoutBIOMARKERInputSchema).array(),z.lazy(() => TestBiomarkerUncheckedCreateWithoutBIOMARKERInputSchema),z.lazy(() => TestBiomarkerUncheckedCreateWithoutBIOMARKERInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => TestBiomarkerCreateOrConnectWithoutBIOMARKERInputSchema),z.lazy(() => TestBiomarkerCreateOrConnectWithoutBIOMARKERInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => TestBiomarkerUpsertWithWhereUniqueWithoutBIOMARKERInputSchema),z.lazy(() => TestBiomarkerUpsertWithWhereUniqueWithoutBIOMARKERInputSchema).array() ]).optional(),
  createMany: z.lazy(() => TestBiomarkerCreateManyBIOMARKERInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => TestBiomarkerWhereUniqueInputSchema),z.lazy(() => TestBiomarkerWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => TestBiomarkerWhereUniqueInputSchema),z.lazy(() => TestBiomarkerWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => TestBiomarkerWhereUniqueInputSchema),z.lazy(() => TestBiomarkerWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => TestBiomarkerWhereUniqueInputSchema),z.lazy(() => TestBiomarkerWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => TestBiomarkerUpdateWithWhereUniqueWithoutBIOMARKERInputSchema),z.lazy(() => TestBiomarkerUpdateWithWhereUniqueWithoutBIOMARKERInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => TestBiomarkerUpdateManyWithWhereWithoutBIOMARKERInputSchema),z.lazy(() => TestBiomarkerUpdateManyWithWhereWithoutBIOMARKERInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => TestBiomarkerScalarWhereInputSchema),z.lazy(() => TestBiomarkerScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const LabOrderIcdCreateNestedManyWithoutICDInputSchema: z.ZodType<Prisma.LabOrderIcdCreateNestedManyWithoutICDInput> = z.object({
  create: z.union([ z.lazy(() => LabOrderIcdCreateWithoutICDInputSchema),z.lazy(() => LabOrderIcdCreateWithoutICDInputSchema).array(),z.lazy(() => LabOrderIcdUncheckedCreateWithoutICDInputSchema),z.lazy(() => LabOrderIcdUncheckedCreateWithoutICDInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => LabOrderIcdCreateOrConnectWithoutICDInputSchema),z.lazy(() => LabOrderIcdCreateOrConnectWithoutICDInputSchema).array() ]).optional(),
  createMany: z.lazy(() => LabOrderIcdCreateManyICDInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => LabOrderIcdWhereUniqueInputSchema),z.lazy(() => LabOrderIcdWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const LabOrderIcdUncheckedCreateNestedManyWithoutICDInputSchema: z.ZodType<Prisma.LabOrderIcdUncheckedCreateNestedManyWithoutICDInput> = z.object({
  create: z.union([ z.lazy(() => LabOrderIcdCreateWithoutICDInputSchema),z.lazy(() => LabOrderIcdCreateWithoutICDInputSchema).array(),z.lazy(() => LabOrderIcdUncheckedCreateWithoutICDInputSchema),z.lazy(() => LabOrderIcdUncheckedCreateWithoutICDInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => LabOrderIcdCreateOrConnectWithoutICDInputSchema),z.lazy(() => LabOrderIcdCreateOrConnectWithoutICDInputSchema).array() ]).optional(),
  createMany: z.lazy(() => LabOrderIcdCreateManyICDInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => LabOrderIcdWhereUniqueInputSchema),z.lazy(() => LabOrderIcdWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const LabOrderIcdUpdateManyWithoutICDNestedInputSchema: z.ZodType<Prisma.LabOrderIcdUpdateManyWithoutICDNestedInput> = z.object({
  create: z.union([ z.lazy(() => LabOrderIcdCreateWithoutICDInputSchema),z.lazy(() => LabOrderIcdCreateWithoutICDInputSchema).array(),z.lazy(() => LabOrderIcdUncheckedCreateWithoutICDInputSchema),z.lazy(() => LabOrderIcdUncheckedCreateWithoutICDInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => LabOrderIcdCreateOrConnectWithoutICDInputSchema),z.lazy(() => LabOrderIcdCreateOrConnectWithoutICDInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => LabOrderIcdUpsertWithWhereUniqueWithoutICDInputSchema),z.lazy(() => LabOrderIcdUpsertWithWhereUniqueWithoutICDInputSchema).array() ]).optional(),
  createMany: z.lazy(() => LabOrderIcdCreateManyICDInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => LabOrderIcdWhereUniqueInputSchema),z.lazy(() => LabOrderIcdWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => LabOrderIcdWhereUniqueInputSchema),z.lazy(() => LabOrderIcdWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => LabOrderIcdWhereUniqueInputSchema),z.lazy(() => LabOrderIcdWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => LabOrderIcdWhereUniqueInputSchema),z.lazy(() => LabOrderIcdWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => LabOrderIcdUpdateWithWhereUniqueWithoutICDInputSchema),z.lazy(() => LabOrderIcdUpdateWithWhereUniqueWithoutICDInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => LabOrderIcdUpdateManyWithWhereWithoutICDInputSchema),z.lazy(() => LabOrderIcdUpdateManyWithWhereWithoutICDInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => LabOrderIcdScalarWhereInputSchema),z.lazy(() => LabOrderIcdScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const LabOrderIcdUncheckedUpdateManyWithoutICDNestedInputSchema: z.ZodType<Prisma.LabOrderIcdUncheckedUpdateManyWithoutICDNestedInput> = z.object({
  create: z.union([ z.lazy(() => LabOrderIcdCreateWithoutICDInputSchema),z.lazy(() => LabOrderIcdCreateWithoutICDInputSchema).array(),z.lazy(() => LabOrderIcdUncheckedCreateWithoutICDInputSchema),z.lazy(() => LabOrderIcdUncheckedCreateWithoutICDInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => LabOrderIcdCreateOrConnectWithoutICDInputSchema),z.lazy(() => LabOrderIcdCreateOrConnectWithoutICDInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => LabOrderIcdUpsertWithWhereUniqueWithoutICDInputSchema),z.lazy(() => LabOrderIcdUpsertWithWhereUniqueWithoutICDInputSchema).array() ]).optional(),
  createMany: z.lazy(() => LabOrderIcdCreateManyICDInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => LabOrderIcdWhereUniqueInputSchema),z.lazy(() => LabOrderIcdWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => LabOrderIcdWhereUniqueInputSchema),z.lazy(() => LabOrderIcdWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => LabOrderIcdWhereUniqueInputSchema),z.lazy(() => LabOrderIcdWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => LabOrderIcdWhereUniqueInputSchema),z.lazy(() => LabOrderIcdWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => LabOrderIcdUpdateWithWhereUniqueWithoutICDInputSchema),z.lazy(() => LabOrderIcdUpdateWithWhereUniqueWithoutICDInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => LabOrderIcdUpdateManyWithWhereWithoutICDInputSchema),z.lazy(() => LabOrderIcdUpdateManyWithWhereWithoutICDInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => LabOrderIcdScalarWhereInputSchema),z.lazy(() => LabOrderIcdScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const TestOrderLoincCreateNestedManyWithoutLOINCInputSchema: z.ZodType<Prisma.TestOrderLoincCreateNestedManyWithoutLOINCInput> = z.object({
  create: z.union([ z.lazy(() => TestOrderLoincCreateWithoutLOINCInputSchema),z.lazy(() => TestOrderLoincCreateWithoutLOINCInputSchema).array(),z.lazy(() => TestOrderLoincUncheckedCreateWithoutLOINCInputSchema),z.lazy(() => TestOrderLoincUncheckedCreateWithoutLOINCInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => TestOrderLoincCreateOrConnectWithoutLOINCInputSchema),z.lazy(() => TestOrderLoincCreateOrConnectWithoutLOINCInputSchema).array() ]).optional(),
  createMany: z.lazy(() => TestOrderLoincCreateManyLOINCInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => TestOrderLoincWhereUniqueInputSchema),z.lazy(() => TestOrderLoincWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const TestResultLoincCreateNestedManyWithoutLOINCInputSchema: z.ZodType<Prisma.TestResultLoincCreateNestedManyWithoutLOINCInput> = z.object({
  create: z.union([ z.lazy(() => TestResultLoincCreateWithoutLOINCInputSchema),z.lazy(() => TestResultLoincCreateWithoutLOINCInputSchema).array(),z.lazy(() => TestResultLoincUncheckedCreateWithoutLOINCInputSchema),z.lazy(() => TestResultLoincUncheckedCreateWithoutLOINCInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => TestResultLoincCreateOrConnectWithoutLOINCInputSchema),z.lazy(() => TestResultLoincCreateOrConnectWithoutLOINCInputSchema).array() ]).optional(),
  createMany: z.lazy(() => TestResultLoincCreateManyLOINCInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => TestResultLoincWhereUniqueInputSchema),z.lazy(() => TestResultLoincWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const TestOrderLoincUncheckedCreateNestedManyWithoutLOINCInputSchema: z.ZodType<Prisma.TestOrderLoincUncheckedCreateNestedManyWithoutLOINCInput> = z.object({
  create: z.union([ z.lazy(() => TestOrderLoincCreateWithoutLOINCInputSchema),z.lazy(() => TestOrderLoincCreateWithoutLOINCInputSchema).array(),z.lazy(() => TestOrderLoincUncheckedCreateWithoutLOINCInputSchema),z.lazy(() => TestOrderLoincUncheckedCreateWithoutLOINCInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => TestOrderLoincCreateOrConnectWithoutLOINCInputSchema),z.lazy(() => TestOrderLoincCreateOrConnectWithoutLOINCInputSchema).array() ]).optional(),
  createMany: z.lazy(() => TestOrderLoincCreateManyLOINCInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => TestOrderLoincWhereUniqueInputSchema),z.lazy(() => TestOrderLoincWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const TestResultLoincUncheckedCreateNestedManyWithoutLOINCInputSchema: z.ZodType<Prisma.TestResultLoincUncheckedCreateNestedManyWithoutLOINCInput> = z.object({
  create: z.union([ z.lazy(() => TestResultLoincCreateWithoutLOINCInputSchema),z.lazy(() => TestResultLoincCreateWithoutLOINCInputSchema).array(),z.lazy(() => TestResultLoincUncheckedCreateWithoutLOINCInputSchema),z.lazy(() => TestResultLoincUncheckedCreateWithoutLOINCInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => TestResultLoincCreateOrConnectWithoutLOINCInputSchema),z.lazy(() => TestResultLoincCreateOrConnectWithoutLOINCInputSchema).array() ]).optional(),
  createMany: z.lazy(() => TestResultLoincCreateManyLOINCInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => TestResultLoincWhereUniqueInputSchema),z.lazy(() => TestResultLoincWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const TestOrderLoincUpdateManyWithoutLOINCNestedInputSchema: z.ZodType<Prisma.TestOrderLoincUpdateManyWithoutLOINCNestedInput> = z.object({
  create: z.union([ z.lazy(() => TestOrderLoincCreateWithoutLOINCInputSchema),z.lazy(() => TestOrderLoincCreateWithoutLOINCInputSchema).array(),z.lazy(() => TestOrderLoincUncheckedCreateWithoutLOINCInputSchema),z.lazy(() => TestOrderLoincUncheckedCreateWithoutLOINCInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => TestOrderLoincCreateOrConnectWithoutLOINCInputSchema),z.lazy(() => TestOrderLoincCreateOrConnectWithoutLOINCInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => TestOrderLoincUpsertWithWhereUniqueWithoutLOINCInputSchema),z.lazy(() => TestOrderLoincUpsertWithWhereUniqueWithoutLOINCInputSchema).array() ]).optional(),
  createMany: z.lazy(() => TestOrderLoincCreateManyLOINCInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => TestOrderLoincWhereUniqueInputSchema),z.lazy(() => TestOrderLoincWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => TestOrderLoincWhereUniqueInputSchema),z.lazy(() => TestOrderLoincWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => TestOrderLoincWhereUniqueInputSchema),z.lazy(() => TestOrderLoincWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => TestOrderLoincWhereUniqueInputSchema),z.lazy(() => TestOrderLoincWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => TestOrderLoincUpdateWithWhereUniqueWithoutLOINCInputSchema),z.lazy(() => TestOrderLoincUpdateWithWhereUniqueWithoutLOINCInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => TestOrderLoincUpdateManyWithWhereWithoutLOINCInputSchema),z.lazy(() => TestOrderLoincUpdateManyWithWhereWithoutLOINCInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => TestOrderLoincScalarWhereInputSchema),z.lazy(() => TestOrderLoincScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const TestResultLoincUpdateManyWithoutLOINCNestedInputSchema: z.ZodType<Prisma.TestResultLoincUpdateManyWithoutLOINCNestedInput> = z.object({
  create: z.union([ z.lazy(() => TestResultLoincCreateWithoutLOINCInputSchema),z.lazy(() => TestResultLoincCreateWithoutLOINCInputSchema).array(),z.lazy(() => TestResultLoincUncheckedCreateWithoutLOINCInputSchema),z.lazy(() => TestResultLoincUncheckedCreateWithoutLOINCInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => TestResultLoincCreateOrConnectWithoutLOINCInputSchema),z.lazy(() => TestResultLoincCreateOrConnectWithoutLOINCInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => TestResultLoincUpsertWithWhereUniqueWithoutLOINCInputSchema),z.lazy(() => TestResultLoincUpsertWithWhereUniqueWithoutLOINCInputSchema).array() ]).optional(),
  createMany: z.lazy(() => TestResultLoincCreateManyLOINCInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => TestResultLoincWhereUniqueInputSchema),z.lazy(() => TestResultLoincWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => TestResultLoincWhereUniqueInputSchema),z.lazy(() => TestResultLoincWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => TestResultLoincWhereUniqueInputSchema),z.lazy(() => TestResultLoincWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => TestResultLoincWhereUniqueInputSchema),z.lazy(() => TestResultLoincWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => TestResultLoincUpdateWithWhereUniqueWithoutLOINCInputSchema),z.lazy(() => TestResultLoincUpdateWithWhereUniqueWithoutLOINCInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => TestResultLoincUpdateManyWithWhereWithoutLOINCInputSchema),z.lazy(() => TestResultLoincUpdateManyWithWhereWithoutLOINCInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => TestResultLoincScalarWhereInputSchema),z.lazy(() => TestResultLoincScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const TestOrderLoincUncheckedUpdateManyWithoutLOINCNestedInputSchema: z.ZodType<Prisma.TestOrderLoincUncheckedUpdateManyWithoutLOINCNestedInput> = z.object({
  create: z.union([ z.lazy(() => TestOrderLoincCreateWithoutLOINCInputSchema),z.lazy(() => TestOrderLoincCreateWithoutLOINCInputSchema).array(),z.lazy(() => TestOrderLoincUncheckedCreateWithoutLOINCInputSchema),z.lazy(() => TestOrderLoincUncheckedCreateWithoutLOINCInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => TestOrderLoincCreateOrConnectWithoutLOINCInputSchema),z.lazy(() => TestOrderLoincCreateOrConnectWithoutLOINCInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => TestOrderLoincUpsertWithWhereUniqueWithoutLOINCInputSchema),z.lazy(() => TestOrderLoincUpsertWithWhereUniqueWithoutLOINCInputSchema).array() ]).optional(),
  createMany: z.lazy(() => TestOrderLoincCreateManyLOINCInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => TestOrderLoincWhereUniqueInputSchema),z.lazy(() => TestOrderLoincWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => TestOrderLoincWhereUniqueInputSchema),z.lazy(() => TestOrderLoincWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => TestOrderLoincWhereUniqueInputSchema),z.lazy(() => TestOrderLoincWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => TestOrderLoincWhereUniqueInputSchema),z.lazy(() => TestOrderLoincWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => TestOrderLoincUpdateWithWhereUniqueWithoutLOINCInputSchema),z.lazy(() => TestOrderLoincUpdateWithWhereUniqueWithoutLOINCInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => TestOrderLoincUpdateManyWithWhereWithoutLOINCInputSchema),z.lazy(() => TestOrderLoincUpdateManyWithWhereWithoutLOINCInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => TestOrderLoincScalarWhereInputSchema),z.lazy(() => TestOrderLoincScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const TestResultLoincUncheckedUpdateManyWithoutLOINCNestedInputSchema: z.ZodType<Prisma.TestResultLoincUncheckedUpdateManyWithoutLOINCNestedInput> = z.object({
  create: z.union([ z.lazy(() => TestResultLoincCreateWithoutLOINCInputSchema),z.lazy(() => TestResultLoincCreateWithoutLOINCInputSchema).array(),z.lazy(() => TestResultLoincUncheckedCreateWithoutLOINCInputSchema),z.lazy(() => TestResultLoincUncheckedCreateWithoutLOINCInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => TestResultLoincCreateOrConnectWithoutLOINCInputSchema),z.lazy(() => TestResultLoincCreateOrConnectWithoutLOINCInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => TestResultLoincUpsertWithWhereUniqueWithoutLOINCInputSchema),z.lazy(() => TestResultLoincUpsertWithWhereUniqueWithoutLOINCInputSchema).array() ]).optional(),
  createMany: z.lazy(() => TestResultLoincCreateManyLOINCInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => TestResultLoincWhereUniqueInputSchema),z.lazy(() => TestResultLoincWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => TestResultLoincWhereUniqueInputSchema),z.lazy(() => TestResultLoincWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => TestResultLoincWhereUniqueInputSchema),z.lazy(() => TestResultLoincWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => TestResultLoincWhereUniqueInputSchema),z.lazy(() => TestResultLoincWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => TestResultLoincUpdateWithWhereUniqueWithoutLOINCInputSchema),z.lazy(() => TestResultLoincUpdateWithWhereUniqueWithoutLOINCInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => TestResultLoincUpdateManyWithWhereWithoutLOINCInputSchema),z.lazy(() => TestResultLoincUpdateManyWithWhereWithoutLOINCInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => TestResultLoincScalarWhereInputSchema),z.lazy(() => TestResultLoincScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const SponsoredTestCreateNestedManyWithoutLabInputSchema: z.ZodType<Prisma.SponsoredTestCreateNestedManyWithoutLabInput> = z.object({
  create: z.union([ z.lazy(() => SponsoredTestCreateWithoutLabInputSchema),z.lazy(() => SponsoredTestCreateWithoutLabInputSchema).array(),z.lazy(() => SponsoredTestUncheckedCreateWithoutLabInputSchema),z.lazy(() => SponsoredTestUncheckedCreateWithoutLabInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => SponsoredTestCreateOrConnectWithoutLabInputSchema),z.lazy(() => SponsoredTestCreateOrConnectWithoutLabInputSchema).array() ]).optional(),
  createMany: z.lazy(() => SponsoredTestCreateManyLabInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => SponsoredTestWhereUniqueInputSchema),z.lazy(() => SponsoredTestWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const TestCatalogCreateNestedManyWithoutLabInputSchema: z.ZodType<Prisma.TestCatalogCreateNestedManyWithoutLabInput> = z.object({
  create: z.union([ z.lazy(() => TestCatalogCreateWithoutLabInputSchema),z.lazy(() => TestCatalogCreateWithoutLabInputSchema).array(),z.lazy(() => TestCatalogUncheckedCreateWithoutLabInputSchema),z.lazy(() => TestCatalogUncheckedCreateWithoutLabInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => TestCatalogCreateOrConnectWithoutLabInputSchema),z.lazy(() => TestCatalogCreateOrConnectWithoutLabInputSchema).array() ]).optional(),
  createMany: z.lazy(() => TestCatalogCreateManyLabInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => TestCatalogWhereUniqueInputSchema),z.lazy(() => TestCatalogWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const SponsoredTestUncheckedCreateNestedManyWithoutLabInputSchema: z.ZodType<Prisma.SponsoredTestUncheckedCreateNestedManyWithoutLabInput> = z.object({
  create: z.union([ z.lazy(() => SponsoredTestCreateWithoutLabInputSchema),z.lazy(() => SponsoredTestCreateWithoutLabInputSchema).array(),z.lazy(() => SponsoredTestUncheckedCreateWithoutLabInputSchema),z.lazy(() => SponsoredTestUncheckedCreateWithoutLabInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => SponsoredTestCreateOrConnectWithoutLabInputSchema),z.lazy(() => SponsoredTestCreateOrConnectWithoutLabInputSchema).array() ]).optional(),
  createMany: z.lazy(() => SponsoredTestCreateManyLabInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => SponsoredTestWhereUniqueInputSchema),z.lazy(() => SponsoredTestWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const TestCatalogUncheckedCreateNestedManyWithoutLabInputSchema: z.ZodType<Prisma.TestCatalogUncheckedCreateNestedManyWithoutLabInput> = z.object({
  create: z.union([ z.lazy(() => TestCatalogCreateWithoutLabInputSchema),z.lazy(() => TestCatalogCreateWithoutLabInputSchema).array(),z.lazy(() => TestCatalogUncheckedCreateWithoutLabInputSchema),z.lazy(() => TestCatalogUncheckedCreateWithoutLabInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => TestCatalogCreateOrConnectWithoutLabInputSchema),z.lazy(() => TestCatalogCreateOrConnectWithoutLabInputSchema).array() ]).optional(),
  createMany: z.lazy(() => TestCatalogCreateManyLabInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => TestCatalogWhereUniqueInputSchema),z.lazy(() => TestCatalogWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const SponsoredTestUpdateManyWithoutLabNestedInputSchema: z.ZodType<Prisma.SponsoredTestUpdateManyWithoutLabNestedInput> = z.object({
  create: z.union([ z.lazy(() => SponsoredTestCreateWithoutLabInputSchema),z.lazy(() => SponsoredTestCreateWithoutLabInputSchema).array(),z.lazy(() => SponsoredTestUncheckedCreateWithoutLabInputSchema),z.lazy(() => SponsoredTestUncheckedCreateWithoutLabInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => SponsoredTestCreateOrConnectWithoutLabInputSchema),z.lazy(() => SponsoredTestCreateOrConnectWithoutLabInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => SponsoredTestUpsertWithWhereUniqueWithoutLabInputSchema),z.lazy(() => SponsoredTestUpsertWithWhereUniqueWithoutLabInputSchema).array() ]).optional(),
  createMany: z.lazy(() => SponsoredTestCreateManyLabInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => SponsoredTestWhereUniqueInputSchema),z.lazy(() => SponsoredTestWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => SponsoredTestWhereUniqueInputSchema),z.lazy(() => SponsoredTestWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => SponsoredTestWhereUniqueInputSchema),z.lazy(() => SponsoredTestWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => SponsoredTestWhereUniqueInputSchema),z.lazy(() => SponsoredTestWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => SponsoredTestUpdateWithWhereUniqueWithoutLabInputSchema),z.lazy(() => SponsoredTestUpdateWithWhereUniqueWithoutLabInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => SponsoredTestUpdateManyWithWhereWithoutLabInputSchema),z.lazy(() => SponsoredTestUpdateManyWithWhereWithoutLabInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => SponsoredTestScalarWhereInputSchema),z.lazy(() => SponsoredTestScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const TestCatalogUpdateManyWithoutLabNestedInputSchema: z.ZodType<Prisma.TestCatalogUpdateManyWithoutLabNestedInput> = z.object({
  create: z.union([ z.lazy(() => TestCatalogCreateWithoutLabInputSchema),z.lazy(() => TestCatalogCreateWithoutLabInputSchema).array(),z.lazy(() => TestCatalogUncheckedCreateWithoutLabInputSchema),z.lazy(() => TestCatalogUncheckedCreateWithoutLabInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => TestCatalogCreateOrConnectWithoutLabInputSchema),z.lazy(() => TestCatalogCreateOrConnectWithoutLabInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => TestCatalogUpsertWithWhereUniqueWithoutLabInputSchema),z.lazy(() => TestCatalogUpsertWithWhereUniqueWithoutLabInputSchema).array() ]).optional(),
  createMany: z.lazy(() => TestCatalogCreateManyLabInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => TestCatalogWhereUniqueInputSchema),z.lazy(() => TestCatalogWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => TestCatalogWhereUniqueInputSchema),z.lazy(() => TestCatalogWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => TestCatalogWhereUniqueInputSchema),z.lazy(() => TestCatalogWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => TestCatalogWhereUniqueInputSchema),z.lazy(() => TestCatalogWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => TestCatalogUpdateWithWhereUniqueWithoutLabInputSchema),z.lazy(() => TestCatalogUpdateWithWhereUniqueWithoutLabInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => TestCatalogUpdateManyWithWhereWithoutLabInputSchema),z.lazy(() => TestCatalogUpdateManyWithWhereWithoutLabInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => TestCatalogScalarWhereInputSchema),z.lazy(() => TestCatalogScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const IntFieldUpdateOperationsInputSchema: z.ZodType<Prisma.IntFieldUpdateOperationsInput> = z.object({
  set: z.number().optional(),
  increment: z.number().optional(),
  decrement: z.number().optional(),
  multiply: z.number().optional(),
  divide: z.number().optional()
}).strict();

export const SponsoredTestUncheckedUpdateManyWithoutLabNestedInputSchema: z.ZodType<Prisma.SponsoredTestUncheckedUpdateManyWithoutLabNestedInput> = z.object({
  create: z.union([ z.lazy(() => SponsoredTestCreateWithoutLabInputSchema),z.lazy(() => SponsoredTestCreateWithoutLabInputSchema).array(),z.lazy(() => SponsoredTestUncheckedCreateWithoutLabInputSchema),z.lazy(() => SponsoredTestUncheckedCreateWithoutLabInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => SponsoredTestCreateOrConnectWithoutLabInputSchema),z.lazy(() => SponsoredTestCreateOrConnectWithoutLabInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => SponsoredTestUpsertWithWhereUniqueWithoutLabInputSchema),z.lazy(() => SponsoredTestUpsertWithWhereUniqueWithoutLabInputSchema).array() ]).optional(),
  createMany: z.lazy(() => SponsoredTestCreateManyLabInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => SponsoredTestWhereUniqueInputSchema),z.lazy(() => SponsoredTestWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => SponsoredTestWhereUniqueInputSchema),z.lazy(() => SponsoredTestWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => SponsoredTestWhereUniqueInputSchema),z.lazy(() => SponsoredTestWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => SponsoredTestWhereUniqueInputSchema),z.lazy(() => SponsoredTestWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => SponsoredTestUpdateWithWhereUniqueWithoutLabInputSchema),z.lazy(() => SponsoredTestUpdateWithWhereUniqueWithoutLabInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => SponsoredTestUpdateManyWithWhereWithoutLabInputSchema),z.lazy(() => SponsoredTestUpdateManyWithWhereWithoutLabInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => SponsoredTestScalarWhereInputSchema),z.lazy(() => SponsoredTestScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const TestCatalogUncheckedUpdateManyWithoutLabNestedInputSchema: z.ZodType<Prisma.TestCatalogUncheckedUpdateManyWithoutLabNestedInput> = z.object({
  create: z.union([ z.lazy(() => TestCatalogCreateWithoutLabInputSchema),z.lazy(() => TestCatalogCreateWithoutLabInputSchema).array(),z.lazy(() => TestCatalogUncheckedCreateWithoutLabInputSchema),z.lazy(() => TestCatalogUncheckedCreateWithoutLabInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => TestCatalogCreateOrConnectWithoutLabInputSchema),z.lazy(() => TestCatalogCreateOrConnectWithoutLabInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => TestCatalogUpsertWithWhereUniqueWithoutLabInputSchema),z.lazy(() => TestCatalogUpsertWithWhereUniqueWithoutLabInputSchema).array() ]).optional(),
  createMany: z.lazy(() => TestCatalogCreateManyLabInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => TestCatalogWhereUniqueInputSchema),z.lazy(() => TestCatalogWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => TestCatalogWhereUniqueInputSchema),z.lazy(() => TestCatalogWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => TestCatalogWhereUniqueInputSchema),z.lazy(() => TestCatalogWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => TestCatalogWhereUniqueInputSchema),z.lazy(() => TestCatalogWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => TestCatalogUpdateWithWhereUniqueWithoutLabInputSchema),z.lazy(() => TestCatalogUpdateWithWhereUniqueWithoutLabInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => TestCatalogUpdateManyWithWhereWithoutLabInputSchema),z.lazy(() => TestCatalogUpdateManyWithWhereWithoutLabInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => TestCatalogScalarWhereInputSchema),z.lazy(() => TestCatalogScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const ProviderCreateNestedOneWithoutOrderingProviderLabOrderInputSchema: z.ZodType<Prisma.ProviderCreateNestedOneWithoutOrderingProviderLabOrderInput> = z.object({
  create: z.union([ z.lazy(() => ProviderCreateWithoutOrderingProviderLabOrderInputSchema),z.lazy(() => ProviderUncheckedCreateWithoutOrderingProviderLabOrderInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => ProviderCreateOrConnectWithoutOrderingProviderLabOrderInputSchema).optional(),
  connect: z.lazy(() => ProviderWhereUniqueInputSchema).optional()
}).strict();

export const ProviderCreateNestedOneWithoutTreatingProviderLabOrderInputSchema: z.ZodType<Prisma.ProviderCreateNestedOneWithoutTreatingProviderLabOrderInput> = z.object({
  create: z.union([ z.lazy(() => ProviderCreateWithoutTreatingProviderLabOrderInputSchema),z.lazy(() => ProviderUncheckedCreateWithoutTreatingProviderLabOrderInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => ProviderCreateOrConnectWithoutTreatingProviderLabOrderInputSchema).optional(),
  connect: z.lazy(() => ProviderWhereUniqueInputSchema).optional()
}).strict();

export const PatientCreateNestedOneWithoutLabOrderInputSchema: z.ZodType<Prisma.PatientCreateNestedOneWithoutLabOrderInput> = z.object({
  create: z.union([ z.lazy(() => PatientCreateWithoutLabOrderInputSchema),z.lazy(() => PatientUncheckedCreateWithoutLabOrderInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => PatientCreateOrConnectWithoutLabOrderInputSchema).optional(),
  connect: z.lazy(() => PatientWhereUniqueInputSchema).optional()
}).strict();

export const OrganizationCreateNestedOneWithoutLabOrderInputSchema: z.ZodType<Prisma.OrganizationCreateNestedOneWithoutLabOrderInput> = z.object({
  create: z.union([ z.lazy(() => OrganizationCreateWithoutLabOrderInputSchema),z.lazy(() => OrganizationUncheckedCreateWithoutLabOrderInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => OrganizationCreateOrConnectWithoutLabOrderInputSchema).optional(),
  connect: z.lazy(() => OrganizationWhereUniqueInputSchema).optional()
}).strict();

export const LabOrderAttachmentCreateNestedManyWithoutLabOrderInputSchema: z.ZodType<Prisma.LabOrderAttachmentCreateNestedManyWithoutLabOrderInput> = z.object({
  create: z.union([ z.lazy(() => LabOrderAttachmentCreateWithoutLabOrderInputSchema),z.lazy(() => LabOrderAttachmentCreateWithoutLabOrderInputSchema).array(),z.lazy(() => LabOrderAttachmentUncheckedCreateWithoutLabOrderInputSchema),z.lazy(() => LabOrderAttachmentUncheckedCreateWithoutLabOrderInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => LabOrderAttachmentCreateOrConnectWithoutLabOrderInputSchema),z.lazy(() => LabOrderAttachmentCreateOrConnectWithoutLabOrderInputSchema).array() ]).optional(),
  createMany: z.lazy(() => LabOrderAttachmentCreateManyLabOrderInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => LabOrderAttachmentWhereUniqueInputSchema),z.lazy(() => LabOrderAttachmentWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const LabOrderBillingCreateNestedManyWithoutLabOrderInputSchema: z.ZodType<Prisma.LabOrderBillingCreateNestedManyWithoutLabOrderInput> = z.object({
  create: z.union([ z.lazy(() => LabOrderBillingCreateWithoutLabOrderInputSchema),z.lazy(() => LabOrderBillingCreateWithoutLabOrderInputSchema).array(),z.lazy(() => LabOrderBillingUncheckedCreateWithoutLabOrderInputSchema),z.lazy(() => LabOrderBillingUncheckedCreateWithoutLabOrderInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => LabOrderBillingCreateOrConnectWithoutLabOrderInputSchema),z.lazy(() => LabOrderBillingCreateOrConnectWithoutLabOrderInputSchema).array() ]).optional(),
  createMany: z.lazy(() => LabOrderBillingCreateManyLabOrderInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => LabOrderBillingWhereUniqueInputSchema),z.lazy(() => LabOrderBillingWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const LabOrderIcdCreateNestedManyWithoutLabOrderInputSchema: z.ZodType<Prisma.LabOrderIcdCreateNestedManyWithoutLabOrderInput> = z.object({
  create: z.union([ z.lazy(() => LabOrderIcdCreateWithoutLabOrderInputSchema),z.lazy(() => LabOrderIcdCreateWithoutLabOrderInputSchema).array(),z.lazy(() => LabOrderIcdUncheckedCreateWithoutLabOrderInputSchema),z.lazy(() => LabOrderIcdUncheckedCreateWithoutLabOrderInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => LabOrderIcdCreateOrConnectWithoutLabOrderInputSchema),z.lazy(() => LabOrderIcdCreateOrConnectWithoutLabOrderInputSchema).array() ]).optional(),
  createMany: z.lazy(() => LabOrderIcdCreateManyLabOrderInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => LabOrderIcdWhereUniqueInputSchema),z.lazy(() => LabOrderIcdWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const LabOrderSpecimenCreateNestedManyWithoutLabOrderInputSchema: z.ZodType<Prisma.LabOrderSpecimenCreateNestedManyWithoutLabOrderInput> = z.object({
  create: z.union([ z.lazy(() => LabOrderSpecimenCreateWithoutLabOrderInputSchema),z.lazy(() => LabOrderSpecimenCreateWithoutLabOrderInputSchema).array(),z.lazy(() => LabOrderSpecimenUncheckedCreateWithoutLabOrderInputSchema),z.lazy(() => LabOrderSpecimenUncheckedCreateWithoutLabOrderInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => LabOrderSpecimenCreateOrConnectWithoutLabOrderInputSchema),z.lazy(() => LabOrderSpecimenCreateOrConnectWithoutLabOrderInputSchema).array() ]).optional(),
  createMany: z.lazy(() => LabOrderSpecimenCreateManyLabOrderInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => LabOrderSpecimenWhereUniqueInputSchema),z.lazy(() => LabOrderSpecimenWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const LabOrderSponsoredTestConsentCreateNestedManyWithoutLabOrderInputSchema: z.ZodType<Prisma.LabOrderSponsoredTestConsentCreateNestedManyWithoutLabOrderInput> = z.object({
  create: z.union([ z.lazy(() => LabOrderSponsoredTestConsentCreateWithoutLabOrderInputSchema),z.lazy(() => LabOrderSponsoredTestConsentCreateWithoutLabOrderInputSchema).array(),z.lazy(() => LabOrderSponsoredTestConsentUncheckedCreateWithoutLabOrderInputSchema),z.lazy(() => LabOrderSponsoredTestConsentUncheckedCreateWithoutLabOrderInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => LabOrderSponsoredTestConsentCreateOrConnectWithoutLabOrderInputSchema),z.lazy(() => LabOrderSponsoredTestConsentCreateOrConnectWithoutLabOrderInputSchema).array() ]).optional(),
  createMany: z.lazy(() => LabOrderSponsoredTestConsentCreateManyLabOrderInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => LabOrderSponsoredTestConsentWhereUniqueInputSchema),z.lazy(() => LabOrderSponsoredTestConsentWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const LabOrderStatusCreateNestedManyWithoutLabOrderInputSchema: z.ZodType<Prisma.LabOrderStatusCreateNestedManyWithoutLabOrderInput> = z.object({
  create: z.union([ z.lazy(() => LabOrderStatusCreateWithoutLabOrderInputSchema),z.lazy(() => LabOrderStatusCreateWithoutLabOrderInputSchema).array(),z.lazy(() => LabOrderStatusUncheckedCreateWithoutLabOrderInputSchema),z.lazy(() => LabOrderStatusUncheckedCreateWithoutLabOrderInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => LabOrderStatusCreateOrConnectWithoutLabOrderInputSchema),z.lazy(() => LabOrderStatusCreateOrConnectWithoutLabOrderInputSchema).array() ]).optional(),
  createMany: z.lazy(() => LabOrderStatusCreateManyLabOrderInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => LabOrderStatusWhereUniqueInputSchema),z.lazy(() => LabOrderStatusWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const LabOrderTestCreateNestedManyWithoutLabOrderInputSchema: z.ZodType<Prisma.LabOrderTestCreateNestedManyWithoutLabOrderInput> = z.object({
  create: z.union([ z.lazy(() => LabOrderTestCreateWithoutLabOrderInputSchema),z.lazy(() => LabOrderTestCreateWithoutLabOrderInputSchema).array(),z.lazy(() => LabOrderTestUncheckedCreateWithoutLabOrderInputSchema),z.lazy(() => LabOrderTestUncheckedCreateWithoutLabOrderInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => LabOrderTestCreateOrConnectWithoutLabOrderInputSchema),z.lazy(() => LabOrderTestCreateOrConnectWithoutLabOrderInputSchema).array() ]).optional(),
  createMany: z.lazy(() => LabOrderTestCreateManyLabOrderInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => LabOrderTestWhereUniqueInputSchema),z.lazy(() => LabOrderTestWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const LabOrderAttachmentUncheckedCreateNestedManyWithoutLabOrderInputSchema: z.ZodType<Prisma.LabOrderAttachmentUncheckedCreateNestedManyWithoutLabOrderInput> = z.object({
  create: z.union([ z.lazy(() => LabOrderAttachmentCreateWithoutLabOrderInputSchema),z.lazy(() => LabOrderAttachmentCreateWithoutLabOrderInputSchema).array(),z.lazy(() => LabOrderAttachmentUncheckedCreateWithoutLabOrderInputSchema),z.lazy(() => LabOrderAttachmentUncheckedCreateWithoutLabOrderInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => LabOrderAttachmentCreateOrConnectWithoutLabOrderInputSchema),z.lazy(() => LabOrderAttachmentCreateOrConnectWithoutLabOrderInputSchema).array() ]).optional(),
  createMany: z.lazy(() => LabOrderAttachmentCreateManyLabOrderInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => LabOrderAttachmentWhereUniqueInputSchema),z.lazy(() => LabOrderAttachmentWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const LabOrderBillingUncheckedCreateNestedManyWithoutLabOrderInputSchema: z.ZodType<Prisma.LabOrderBillingUncheckedCreateNestedManyWithoutLabOrderInput> = z.object({
  create: z.union([ z.lazy(() => LabOrderBillingCreateWithoutLabOrderInputSchema),z.lazy(() => LabOrderBillingCreateWithoutLabOrderInputSchema).array(),z.lazy(() => LabOrderBillingUncheckedCreateWithoutLabOrderInputSchema),z.lazy(() => LabOrderBillingUncheckedCreateWithoutLabOrderInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => LabOrderBillingCreateOrConnectWithoutLabOrderInputSchema),z.lazy(() => LabOrderBillingCreateOrConnectWithoutLabOrderInputSchema).array() ]).optional(),
  createMany: z.lazy(() => LabOrderBillingCreateManyLabOrderInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => LabOrderBillingWhereUniqueInputSchema),z.lazy(() => LabOrderBillingWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const LabOrderIcdUncheckedCreateNestedManyWithoutLabOrderInputSchema: z.ZodType<Prisma.LabOrderIcdUncheckedCreateNestedManyWithoutLabOrderInput> = z.object({
  create: z.union([ z.lazy(() => LabOrderIcdCreateWithoutLabOrderInputSchema),z.lazy(() => LabOrderIcdCreateWithoutLabOrderInputSchema).array(),z.lazy(() => LabOrderIcdUncheckedCreateWithoutLabOrderInputSchema),z.lazy(() => LabOrderIcdUncheckedCreateWithoutLabOrderInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => LabOrderIcdCreateOrConnectWithoutLabOrderInputSchema),z.lazy(() => LabOrderIcdCreateOrConnectWithoutLabOrderInputSchema).array() ]).optional(),
  createMany: z.lazy(() => LabOrderIcdCreateManyLabOrderInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => LabOrderIcdWhereUniqueInputSchema),z.lazy(() => LabOrderIcdWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const LabOrderSpecimenUncheckedCreateNestedManyWithoutLabOrderInputSchema: z.ZodType<Prisma.LabOrderSpecimenUncheckedCreateNestedManyWithoutLabOrderInput> = z.object({
  create: z.union([ z.lazy(() => LabOrderSpecimenCreateWithoutLabOrderInputSchema),z.lazy(() => LabOrderSpecimenCreateWithoutLabOrderInputSchema).array(),z.lazy(() => LabOrderSpecimenUncheckedCreateWithoutLabOrderInputSchema),z.lazy(() => LabOrderSpecimenUncheckedCreateWithoutLabOrderInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => LabOrderSpecimenCreateOrConnectWithoutLabOrderInputSchema),z.lazy(() => LabOrderSpecimenCreateOrConnectWithoutLabOrderInputSchema).array() ]).optional(),
  createMany: z.lazy(() => LabOrderSpecimenCreateManyLabOrderInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => LabOrderSpecimenWhereUniqueInputSchema),z.lazy(() => LabOrderSpecimenWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const LabOrderSponsoredTestConsentUncheckedCreateNestedManyWithoutLabOrderInputSchema: z.ZodType<Prisma.LabOrderSponsoredTestConsentUncheckedCreateNestedManyWithoutLabOrderInput> = z.object({
  create: z.union([ z.lazy(() => LabOrderSponsoredTestConsentCreateWithoutLabOrderInputSchema),z.lazy(() => LabOrderSponsoredTestConsentCreateWithoutLabOrderInputSchema).array(),z.lazy(() => LabOrderSponsoredTestConsentUncheckedCreateWithoutLabOrderInputSchema),z.lazy(() => LabOrderSponsoredTestConsentUncheckedCreateWithoutLabOrderInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => LabOrderSponsoredTestConsentCreateOrConnectWithoutLabOrderInputSchema),z.lazy(() => LabOrderSponsoredTestConsentCreateOrConnectWithoutLabOrderInputSchema).array() ]).optional(),
  createMany: z.lazy(() => LabOrderSponsoredTestConsentCreateManyLabOrderInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => LabOrderSponsoredTestConsentWhereUniqueInputSchema),z.lazy(() => LabOrderSponsoredTestConsentWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const LabOrderStatusUncheckedCreateNestedManyWithoutLabOrderInputSchema: z.ZodType<Prisma.LabOrderStatusUncheckedCreateNestedManyWithoutLabOrderInput> = z.object({
  create: z.union([ z.lazy(() => LabOrderStatusCreateWithoutLabOrderInputSchema),z.lazy(() => LabOrderStatusCreateWithoutLabOrderInputSchema).array(),z.lazy(() => LabOrderStatusUncheckedCreateWithoutLabOrderInputSchema),z.lazy(() => LabOrderStatusUncheckedCreateWithoutLabOrderInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => LabOrderStatusCreateOrConnectWithoutLabOrderInputSchema),z.lazy(() => LabOrderStatusCreateOrConnectWithoutLabOrderInputSchema).array() ]).optional(),
  createMany: z.lazy(() => LabOrderStatusCreateManyLabOrderInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => LabOrderStatusWhereUniqueInputSchema),z.lazy(() => LabOrderStatusWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const LabOrderTestUncheckedCreateNestedManyWithoutLabOrderInputSchema: z.ZodType<Prisma.LabOrderTestUncheckedCreateNestedManyWithoutLabOrderInput> = z.object({
  create: z.union([ z.lazy(() => LabOrderTestCreateWithoutLabOrderInputSchema),z.lazy(() => LabOrderTestCreateWithoutLabOrderInputSchema).array(),z.lazy(() => LabOrderTestUncheckedCreateWithoutLabOrderInputSchema),z.lazy(() => LabOrderTestUncheckedCreateWithoutLabOrderInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => LabOrderTestCreateOrConnectWithoutLabOrderInputSchema),z.lazy(() => LabOrderTestCreateOrConnectWithoutLabOrderInputSchema).array() ]).optional(),
  createMany: z.lazy(() => LabOrderTestCreateManyLabOrderInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => LabOrderTestWhereUniqueInputSchema),z.lazy(() => LabOrderTestWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const ProviderUpdateOneWithoutOrderingProviderLabOrderNestedInputSchema: z.ZodType<Prisma.ProviderUpdateOneWithoutOrderingProviderLabOrderNestedInput> = z.object({
  create: z.union([ z.lazy(() => ProviderCreateWithoutOrderingProviderLabOrderInputSchema),z.lazy(() => ProviderUncheckedCreateWithoutOrderingProviderLabOrderInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => ProviderCreateOrConnectWithoutOrderingProviderLabOrderInputSchema).optional(),
  upsert: z.lazy(() => ProviderUpsertWithoutOrderingProviderLabOrderInputSchema).optional(),
  disconnect: z.union([ z.boolean(),z.lazy(() => ProviderWhereInputSchema) ]).optional(),
  delete: z.union([ z.boolean(),z.lazy(() => ProviderWhereInputSchema) ]).optional(),
  connect: z.lazy(() => ProviderWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => ProviderUpdateToOneWithWhereWithoutOrderingProviderLabOrderInputSchema),z.lazy(() => ProviderUpdateWithoutOrderingProviderLabOrderInputSchema),z.lazy(() => ProviderUncheckedUpdateWithoutOrderingProviderLabOrderInputSchema) ]).optional(),
}).strict();

export const ProviderUpdateOneWithoutTreatingProviderLabOrderNestedInputSchema: z.ZodType<Prisma.ProviderUpdateOneWithoutTreatingProviderLabOrderNestedInput> = z.object({
  create: z.union([ z.lazy(() => ProviderCreateWithoutTreatingProviderLabOrderInputSchema),z.lazy(() => ProviderUncheckedCreateWithoutTreatingProviderLabOrderInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => ProviderCreateOrConnectWithoutTreatingProviderLabOrderInputSchema).optional(),
  upsert: z.lazy(() => ProviderUpsertWithoutTreatingProviderLabOrderInputSchema).optional(),
  disconnect: z.union([ z.boolean(),z.lazy(() => ProviderWhereInputSchema) ]).optional(),
  delete: z.union([ z.boolean(),z.lazy(() => ProviderWhereInputSchema) ]).optional(),
  connect: z.lazy(() => ProviderWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => ProviderUpdateToOneWithWhereWithoutTreatingProviderLabOrderInputSchema),z.lazy(() => ProviderUpdateWithoutTreatingProviderLabOrderInputSchema),z.lazy(() => ProviderUncheckedUpdateWithoutTreatingProviderLabOrderInputSchema) ]).optional(),
}).strict();

export const PatientUpdateOneWithoutLabOrderNestedInputSchema: z.ZodType<Prisma.PatientUpdateOneWithoutLabOrderNestedInput> = z.object({
  create: z.union([ z.lazy(() => PatientCreateWithoutLabOrderInputSchema),z.lazy(() => PatientUncheckedCreateWithoutLabOrderInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => PatientCreateOrConnectWithoutLabOrderInputSchema).optional(),
  upsert: z.lazy(() => PatientUpsertWithoutLabOrderInputSchema).optional(),
  disconnect: z.union([ z.boolean(),z.lazy(() => PatientWhereInputSchema) ]).optional(),
  delete: z.union([ z.boolean(),z.lazy(() => PatientWhereInputSchema) ]).optional(),
  connect: z.lazy(() => PatientWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => PatientUpdateToOneWithWhereWithoutLabOrderInputSchema),z.lazy(() => PatientUpdateWithoutLabOrderInputSchema),z.lazy(() => PatientUncheckedUpdateWithoutLabOrderInputSchema) ]).optional(),
}).strict();

export const OrganizationUpdateOneWithoutLabOrderNestedInputSchema: z.ZodType<Prisma.OrganizationUpdateOneWithoutLabOrderNestedInput> = z.object({
  create: z.union([ z.lazy(() => OrganizationCreateWithoutLabOrderInputSchema),z.lazy(() => OrganizationUncheckedCreateWithoutLabOrderInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => OrganizationCreateOrConnectWithoutLabOrderInputSchema).optional(),
  upsert: z.lazy(() => OrganizationUpsertWithoutLabOrderInputSchema).optional(),
  disconnect: z.union([ z.boolean(),z.lazy(() => OrganizationWhereInputSchema) ]).optional(),
  delete: z.union([ z.boolean(),z.lazy(() => OrganizationWhereInputSchema) ]).optional(),
  connect: z.lazy(() => OrganizationWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => OrganizationUpdateToOneWithWhereWithoutLabOrderInputSchema),z.lazy(() => OrganizationUpdateWithoutLabOrderInputSchema),z.lazy(() => OrganizationUncheckedUpdateWithoutLabOrderInputSchema) ]).optional(),
}).strict();

export const LabOrderAttachmentUpdateManyWithoutLabOrderNestedInputSchema: z.ZodType<Prisma.LabOrderAttachmentUpdateManyWithoutLabOrderNestedInput> = z.object({
  create: z.union([ z.lazy(() => LabOrderAttachmentCreateWithoutLabOrderInputSchema),z.lazy(() => LabOrderAttachmentCreateWithoutLabOrderInputSchema).array(),z.lazy(() => LabOrderAttachmentUncheckedCreateWithoutLabOrderInputSchema),z.lazy(() => LabOrderAttachmentUncheckedCreateWithoutLabOrderInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => LabOrderAttachmentCreateOrConnectWithoutLabOrderInputSchema),z.lazy(() => LabOrderAttachmentCreateOrConnectWithoutLabOrderInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => LabOrderAttachmentUpsertWithWhereUniqueWithoutLabOrderInputSchema),z.lazy(() => LabOrderAttachmentUpsertWithWhereUniqueWithoutLabOrderInputSchema).array() ]).optional(),
  createMany: z.lazy(() => LabOrderAttachmentCreateManyLabOrderInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => LabOrderAttachmentWhereUniqueInputSchema),z.lazy(() => LabOrderAttachmentWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => LabOrderAttachmentWhereUniqueInputSchema),z.lazy(() => LabOrderAttachmentWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => LabOrderAttachmentWhereUniqueInputSchema),z.lazy(() => LabOrderAttachmentWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => LabOrderAttachmentWhereUniqueInputSchema),z.lazy(() => LabOrderAttachmentWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => LabOrderAttachmentUpdateWithWhereUniqueWithoutLabOrderInputSchema),z.lazy(() => LabOrderAttachmentUpdateWithWhereUniqueWithoutLabOrderInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => LabOrderAttachmentUpdateManyWithWhereWithoutLabOrderInputSchema),z.lazy(() => LabOrderAttachmentUpdateManyWithWhereWithoutLabOrderInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => LabOrderAttachmentScalarWhereInputSchema),z.lazy(() => LabOrderAttachmentScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const LabOrderBillingUpdateManyWithoutLabOrderNestedInputSchema: z.ZodType<Prisma.LabOrderBillingUpdateManyWithoutLabOrderNestedInput> = z.object({
  create: z.union([ z.lazy(() => LabOrderBillingCreateWithoutLabOrderInputSchema),z.lazy(() => LabOrderBillingCreateWithoutLabOrderInputSchema).array(),z.lazy(() => LabOrderBillingUncheckedCreateWithoutLabOrderInputSchema),z.lazy(() => LabOrderBillingUncheckedCreateWithoutLabOrderInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => LabOrderBillingCreateOrConnectWithoutLabOrderInputSchema),z.lazy(() => LabOrderBillingCreateOrConnectWithoutLabOrderInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => LabOrderBillingUpsertWithWhereUniqueWithoutLabOrderInputSchema),z.lazy(() => LabOrderBillingUpsertWithWhereUniqueWithoutLabOrderInputSchema).array() ]).optional(),
  createMany: z.lazy(() => LabOrderBillingCreateManyLabOrderInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => LabOrderBillingWhereUniqueInputSchema),z.lazy(() => LabOrderBillingWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => LabOrderBillingWhereUniqueInputSchema),z.lazy(() => LabOrderBillingWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => LabOrderBillingWhereUniqueInputSchema),z.lazy(() => LabOrderBillingWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => LabOrderBillingWhereUniqueInputSchema),z.lazy(() => LabOrderBillingWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => LabOrderBillingUpdateWithWhereUniqueWithoutLabOrderInputSchema),z.lazy(() => LabOrderBillingUpdateWithWhereUniqueWithoutLabOrderInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => LabOrderBillingUpdateManyWithWhereWithoutLabOrderInputSchema),z.lazy(() => LabOrderBillingUpdateManyWithWhereWithoutLabOrderInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => LabOrderBillingScalarWhereInputSchema),z.lazy(() => LabOrderBillingScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const LabOrderIcdUpdateManyWithoutLabOrderNestedInputSchema: z.ZodType<Prisma.LabOrderIcdUpdateManyWithoutLabOrderNestedInput> = z.object({
  create: z.union([ z.lazy(() => LabOrderIcdCreateWithoutLabOrderInputSchema),z.lazy(() => LabOrderIcdCreateWithoutLabOrderInputSchema).array(),z.lazy(() => LabOrderIcdUncheckedCreateWithoutLabOrderInputSchema),z.lazy(() => LabOrderIcdUncheckedCreateWithoutLabOrderInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => LabOrderIcdCreateOrConnectWithoutLabOrderInputSchema),z.lazy(() => LabOrderIcdCreateOrConnectWithoutLabOrderInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => LabOrderIcdUpsertWithWhereUniqueWithoutLabOrderInputSchema),z.lazy(() => LabOrderIcdUpsertWithWhereUniqueWithoutLabOrderInputSchema).array() ]).optional(),
  createMany: z.lazy(() => LabOrderIcdCreateManyLabOrderInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => LabOrderIcdWhereUniqueInputSchema),z.lazy(() => LabOrderIcdWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => LabOrderIcdWhereUniqueInputSchema),z.lazy(() => LabOrderIcdWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => LabOrderIcdWhereUniqueInputSchema),z.lazy(() => LabOrderIcdWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => LabOrderIcdWhereUniqueInputSchema),z.lazy(() => LabOrderIcdWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => LabOrderIcdUpdateWithWhereUniqueWithoutLabOrderInputSchema),z.lazy(() => LabOrderIcdUpdateWithWhereUniqueWithoutLabOrderInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => LabOrderIcdUpdateManyWithWhereWithoutLabOrderInputSchema),z.lazy(() => LabOrderIcdUpdateManyWithWhereWithoutLabOrderInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => LabOrderIcdScalarWhereInputSchema),z.lazy(() => LabOrderIcdScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const LabOrderSpecimenUpdateManyWithoutLabOrderNestedInputSchema: z.ZodType<Prisma.LabOrderSpecimenUpdateManyWithoutLabOrderNestedInput> = z.object({
  create: z.union([ z.lazy(() => LabOrderSpecimenCreateWithoutLabOrderInputSchema),z.lazy(() => LabOrderSpecimenCreateWithoutLabOrderInputSchema).array(),z.lazy(() => LabOrderSpecimenUncheckedCreateWithoutLabOrderInputSchema),z.lazy(() => LabOrderSpecimenUncheckedCreateWithoutLabOrderInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => LabOrderSpecimenCreateOrConnectWithoutLabOrderInputSchema),z.lazy(() => LabOrderSpecimenCreateOrConnectWithoutLabOrderInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => LabOrderSpecimenUpsertWithWhereUniqueWithoutLabOrderInputSchema),z.lazy(() => LabOrderSpecimenUpsertWithWhereUniqueWithoutLabOrderInputSchema).array() ]).optional(),
  createMany: z.lazy(() => LabOrderSpecimenCreateManyLabOrderInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => LabOrderSpecimenWhereUniqueInputSchema),z.lazy(() => LabOrderSpecimenWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => LabOrderSpecimenWhereUniqueInputSchema),z.lazy(() => LabOrderSpecimenWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => LabOrderSpecimenWhereUniqueInputSchema),z.lazy(() => LabOrderSpecimenWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => LabOrderSpecimenWhereUniqueInputSchema),z.lazy(() => LabOrderSpecimenWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => LabOrderSpecimenUpdateWithWhereUniqueWithoutLabOrderInputSchema),z.lazy(() => LabOrderSpecimenUpdateWithWhereUniqueWithoutLabOrderInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => LabOrderSpecimenUpdateManyWithWhereWithoutLabOrderInputSchema),z.lazy(() => LabOrderSpecimenUpdateManyWithWhereWithoutLabOrderInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => LabOrderSpecimenScalarWhereInputSchema),z.lazy(() => LabOrderSpecimenScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const LabOrderSponsoredTestConsentUpdateManyWithoutLabOrderNestedInputSchema: z.ZodType<Prisma.LabOrderSponsoredTestConsentUpdateManyWithoutLabOrderNestedInput> = z.object({
  create: z.union([ z.lazy(() => LabOrderSponsoredTestConsentCreateWithoutLabOrderInputSchema),z.lazy(() => LabOrderSponsoredTestConsentCreateWithoutLabOrderInputSchema).array(),z.lazy(() => LabOrderSponsoredTestConsentUncheckedCreateWithoutLabOrderInputSchema),z.lazy(() => LabOrderSponsoredTestConsentUncheckedCreateWithoutLabOrderInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => LabOrderSponsoredTestConsentCreateOrConnectWithoutLabOrderInputSchema),z.lazy(() => LabOrderSponsoredTestConsentCreateOrConnectWithoutLabOrderInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => LabOrderSponsoredTestConsentUpsertWithWhereUniqueWithoutLabOrderInputSchema),z.lazy(() => LabOrderSponsoredTestConsentUpsertWithWhereUniqueWithoutLabOrderInputSchema).array() ]).optional(),
  createMany: z.lazy(() => LabOrderSponsoredTestConsentCreateManyLabOrderInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => LabOrderSponsoredTestConsentWhereUniqueInputSchema),z.lazy(() => LabOrderSponsoredTestConsentWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => LabOrderSponsoredTestConsentWhereUniqueInputSchema),z.lazy(() => LabOrderSponsoredTestConsentWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => LabOrderSponsoredTestConsentWhereUniqueInputSchema),z.lazy(() => LabOrderSponsoredTestConsentWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => LabOrderSponsoredTestConsentWhereUniqueInputSchema),z.lazy(() => LabOrderSponsoredTestConsentWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => LabOrderSponsoredTestConsentUpdateWithWhereUniqueWithoutLabOrderInputSchema),z.lazy(() => LabOrderSponsoredTestConsentUpdateWithWhereUniqueWithoutLabOrderInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => LabOrderSponsoredTestConsentUpdateManyWithWhereWithoutLabOrderInputSchema),z.lazy(() => LabOrderSponsoredTestConsentUpdateManyWithWhereWithoutLabOrderInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => LabOrderSponsoredTestConsentScalarWhereInputSchema),z.lazy(() => LabOrderSponsoredTestConsentScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const LabOrderStatusUpdateManyWithoutLabOrderNestedInputSchema: z.ZodType<Prisma.LabOrderStatusUpdateManyWithoutLabOrderNestedInput> = z.object({
  create: z.union([ z.lazy(() => LabOrderStatusCreateWithoutLabOrderInputSchema),z.lazy(() => LabOrderStatusCreateWithoutLabOrderInputSchema).array(),z.lazy(() => LabOrderStatusUncheckedCreateWithoutLabOrderInputSchema),z.lazy(() => LabOrderStatusUncheckedCreateWithoutLabOrderInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => LabOrderStatusCreateOrConnectWithoutLabOrderInputSchema),z.lazy(() => LabOrderStatusCreateOrConnectWithoutLabOrderInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => LabOrderStatusUpsertWithWhereUniqueWithoutLabOrderInputSchema),z.lazy(() => LabOrderStatusUpsertWithWhereUniqueWithoutLabOrderInputSchema).array() ]).optional(),
  createMany: z.lazy(() => LabOrderStatusCreateManyLabOrderInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => LabOrderStatusWhereUniqueInputSchema),z.lazy(() => LabOrderStatusWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => LabOrderStatusWhereUniqueInputSchema),z.lazy(() => LabOrderStatusWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => LabOrderStatusWhereUniqueInputSchema),z.lazy(() => LabOrderStatusWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => LabOrderStatusWhereUniqueInputSchema),z.lazy(() => LabOrderStatusWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => LabOrderStatusUpdateWithWhereUniqueWithoutLabOrderInputSchema),z.lazy(() => LabOrderStatusUpdateWithWhereUniqueWithoutLabOrderInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => LabOrderStatusUpdateManyWithWhereWithoutLabOrderInputSchema),z.lazy(() => LabOrderStatusUpdateManyWithWhereWithoutLabOrderInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => LabOrderStatusScalarWhereInputSchema),z.lazy(() => LabOrderStatusScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const LabOrderTestUpdateManyWithoutLabOrderNestedInputSchema: z.ZodType<Prisma.LabOrderTestUpdateManyWithoutLabOrderNestedInput> = z.object({
  create: z.union([ z.lazy(() => LabOrderTestCreateWithoutLabOrderInputSchema),z.lazy(() => LabOrderTestCreateWithoutLabOrderInputSchema).array(),z.lazy(() => LabOrderTestUncheckedCreateWithoutLabOrderInputSchema),z.lazy(() => LabOrderTestUncheckedCreateWithoutLabOrderInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => LabOrderTestCreateOrConnectWithoutLabOrderInputSchema),z.lazy(() => LabOrderTestCreateOrConnectWithoutLabOrderInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => LabOrderTestUpsertWithWhereUniqueWithoutLabOrderInputSchema),z.lazy(() => LabOrderTestUpsertWithWhereUniqueWithoutLabOrderInputSchema).array() ]).optional(),
  createMany: z.lazy(() => LabOrderTestCreateManyLabOrderInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => LabOrderTestWhereUniqueInputSchema),z.lazy(() => LabOrderTestWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => LabOrderTestWhereUniqueInputSchema),z.lazy(() => LabOrderTestWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => LabOrderTestWhereUniqueInputSchema),z.lazy(() => LabOrderTestWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => LabOrderTestWhereUniqueInputSchema),z.lazy(() => LabOrderTestWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => LabOrderTestUpdateWithWhereUniqueWithoutLabOrderInputSchema),z.lazy(() => LabOrderTestUpdateWithWhereUniqueWithoutLabOrderInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => LabOrderTestUpdateManyWithWhereWithoutLabOrderInputSchema),z.lazy(() => LabOrderTestUpdateManyWithWhereWithoutLabOrderInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => LabOrderTestScalarWhereInputSchema),z.lazy(() => LabOrderTestScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const LabOrderAttachmentUncheckedUpdateManyWithoutLabOrderNestedInputSchema: z.ZodType<Prisma.LabOrderAttachmentUncheckedUpdateManyWithoutLabOrderNestedInput> = z.object({
  create: z.union([ z.lazy(() => LabOrderAttachmentCreateWithoutLabOrderInputSchema),z.lazy(() => LabOrderAttachmentCreateWithoutLabOrderInputSchema).array(),z.lazy(() => LabOrderAttachmentUncheckedCreateWithoutLabOrderInputSchema),z.lazy(() => LabOrderAttachmentUncheckedCreateWithoutLabOrderInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => LabOrderAttachmentCreateOrConnectWithoutLabOrderInputSchema),z.lazy(() => LabOrderAttachmentCreateOrConnectWithoutLabOrderInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => LabOrderAttachmentUpsertWithWhereUniqueWithoutLabOrderInputSchema),z.lazy(() => LabOrderAttachmentUpsertWithWhereUniqueWithoutLabOrderInputSchema).array() ]).optional(),
  createMany: z.lazy(() => LabOrderAttachmentCreateManyLabOrderInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => LabOrderAttachmentWhereUniqueInputSchema),z.lazy(() => LabOrderAttachmentWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => LabOrderAttachmentWhereUniqueInputSchema),z.lazy(() => LabOrderAttachmentWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => LabOrderAttachmentWhereUniqueInputSchema),z.lazy(() => LabOrderAttachmentWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => LabOrderAttachmentWhereUniqueInputSchema),z.lazy(() => LabOrderAttachmentWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => LabOrderAttachmentUpdateWithWhereUniqueWithoutLabOrderInputSchema),z.lazy(() => LabOrderAttachmentUpdateWithWhereUniqueWithoutLabOrderInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => LabOrderAttachmentUpdateManyWithWhereWithoutLabOrderInputSchema),z.lazy(() => LabOrderAttachmentUpdateManyWithWhereWithoutLabOrderInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => LabOrderAttachmentScalarWhereInputSchema),z.lazy(() => LabOrderAttachmentScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const LabOrderBillingUncheckedUpdateManyWithoutLabOrderNestedInputSchema: z.ZodType<Prisma.LabOrderBillingUncheckedUpdateManyWithoutLabOrderNestedInput> = z.object({
  create: z.union([ z.lazy(() => LabOrderBillingCreateWithoutLabOrderInputSchema),z.lazy(() => LabOrderBillingCreateWithoutLabOrderInputSchema).array(),z.lazy(() => LabOrderBillingUncheckedCreateWithoutLabOrderInputSchema),z.lazy(() => LabOrderBillingUncheckedCreateWithoutLabOrderInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => LabOrderBillingCreateOrConnectWithoutLabOrderInputSchema),z.lazy(() => LabOrderBillingCreateOrConnectWithoutLabOrderInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => LabOrderBillingUpsertWithWhereUniqueWithoutLabOrderInputSchema),z.lazy(() => LabOrderBillingUpsertWithWhereUniqueWithoutLabOrderInputSchema).array() ]).optional(),
  createMany: z.lazy(() => LabOrderBillingCreateManyLabOrderInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => LabOrderBillingWhereUniqueInputSchema),z.lazy(() => LabOrderBillingWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => LabOrderBillingWhereUniqueInputSchema),z.lazy(() => LabOrderBillingWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => LabOrderBillingWhereUniqueInputSchema),z.lazy(() => LabOrderBillingWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => LabOrderBillingWhereUniqueInputSchema),z.lazy(() => LabOrderBillingWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => LabOrderBillingUpdateWithWhereUniqueWithoutLabOrderInputSchema),z.lazy(() => LabOrderBillingUpdateWithWhereUniqueWithoutLabOrderInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => LabOrderBillingUpdateManyWithWhereWithoutLabOrderInputSchema),z.lazy(() => LabOrderBillingUpdateManyWithWhereWithoutLabOrderInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => LabOrderBillingScalarWhereInputSchema),z.lazy(() => LabOrderBillingScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const LabOrderIcdUncheckedUpdateManyWithoutLabOrderNestedInputSchema: z.ZodType<Prisma.LabOrderIcdUncheckedUpdateManyWithoutLabOrderNestedInput> = z.object({
  create: z.union([ z.lazy(() => LabOrderIcdCreateWithoutLabOrderInputSchema),z.lazy(() => LabOrderIcdCreateWithoutLabOrderInputSchema).array(),z.lazy(() => LabOrderIcdUncheckedCreateWithoutLabOrderInputSchema),z.lazy(() => LabOrderIcdUncheckedCreateWithoutLabOrderInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => LabOrderIcdCreateOrConnectWithoutLabOrderInputSchema),z.lazy(() => LabOrderIcdCreateOrConnectWithoutLabOrderInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => LabOrderIcdUpsertWithWhereUniqueWithoutLabOrderInputSchema),z.lazy(() => LabOrderIcdUpsertWithWhereUniqueWithoutLabOrderInputSchema).array() ]).optional(),
  createMany: z.lazy(() => LabOrderIcdCreateManyLabOrderInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => LabOrderIcdWhereUniqueInputSchema),z.lazy(() => LabOrderIcdWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => LabOrderIcdWhereUniqueInputSchema),z.lazy(() => LabOrderIcdWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => LabOrderIcdWhereUniqueInputSchema),z.lazy(() => LabOrderIcdWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => LabOrderIcdWhereUniqueInputSchema),z.lazy(() => LabOrderIcdWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => LabOrderIcdUpdateWithWhereUniqueWithoutLabOrderInputSchema),z.lazy(() => LabOrderIcdUpdateWithWhereUniqueWithoutLabOrderInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => LabOrderIcdUpdateManyWithWhereWithoutLabOrderInputSchema),z.lazy(() => LabOrderIcdUpdateManyWithWhereWithoutLabOrderInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => LabOrderIcdScalarWhereInputSchema),z.lazy(() => LabOrderIcdScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const LabOrderSpecimenUncheckedUpdateManyWithoutLabOrderNestedInputSchema: z.ZodType<Prisma.LabOrderSpecimenUncheckedUpdateManyWithoutLabOrderNestedInput> = z.object({
  create: z.union([ z.lazy(() => LabOrderSpecimenCreateWithoutLabOrderInputSchema),z.lazy(() => LabOrderSpecimenCreateWithoutLabOrderInputSchema).array(),z.lazy(() => LabOrderSpecimenUncheckedCreateWithoutLabOrderInputSchema),z.lazy(() => LabOrderSpecimenUncheckedCreateWithoutLabOrderInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => LabOrderSpecimenCreateOrConnectWithoutLabOrderInputSchema),z.lazy(() => LabOrderSpecimenCreateOrConnectWithoutLabOrderInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => LabOrderSpecimenUpsertWithWhereUniqueWithoutLabOrderInputSchema),z.lazy(() => LabOrderSpecimenUpsertWithWhereUniqueWithoutLabOrderInputSchema).array() ]).optional(),
  createMany: z.lazy(() => LabOrderSpecimenCreateManyLabOrderInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => LabOrderSpecimenWhereUniqueInputSchema),z.lazy(() => LabOrderSpecimenWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => LabOrderSpecimenWhereUniqueInputSchema),z.lazy(() => LabOrderSpecimenWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => LabOrderSpecimenWhereUniqueInputSchema),z.lazy(() => LabOrderSpecimenWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => LabOrderSpecimenWhereUniqueInputSchema),z.lazy(() => LabOrderSpecimenWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => LabOrderSpecimenUpdateWithWhereUniqueWithoutLabOrderInputSchema),z.lazy(() => LabOrderSpecimenUpdateWithWhereUniqueWithoutLabOrderInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => LabOrderSpecimenUpdateManyWithWhereWithoutLabOrderInputSchema),z.lazy(() => LabOrderSpecimenUpdateManyWithWhereWithoutLabOrderInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => LabOrderSpecimenScalarWhereInputSchema),z.lazy(() => LabOrderSpecimenScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const LabOrderSponsoredTestConsentUncheckedUpdateManyWithoutLabOrderNestedInputSchema: z.ZodType<Prisma.LabOrderSponsoredTestConsentUncheckedUpdateManyWithoutLabOrderNestedInput> = z.object({
  create: z.union([ z.lazy(() => LabOrderSponsoredTestConsentCreateWithoutLabOrderInputSchema),z.lazy(() => LabOrderSponsoredTestConsentCreateWithoutLabOrderInputSchema).array(),z.lazy(() => LabOrderSponsoredTestConsentUncheckedCreateWithoutLabOrderInputSchema),z.lazy(() => LabOrderSponsoredTestConsentUncheckedCreateWithoutLabOrderInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => LabOrderSponsoredTestConsentCreateOrConnectWithoutLabOrderInputSchema),z.lazy(() => LabOrderSponsoredTestConsentCreateOrConnectWithoutLabOrderInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => LabOrderSponsoredTestConsentUpsertWithWhereUniqueWithoutLabOrderInputSchema),z.lazy(() => LabOrderSponsoredTestConsentUpsertWithWhereUniqueWithoutLabOrderInputSchema).array() ]).optional(),
  createMany: z.lazy(() => LabOrderSponsoredTestConsentCreateManyLabOrderInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => LabOrderSponsoredTestConsentWhereUniqueInputSchema),z.lazy(() => LabOrderSponsoredTestConsentWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => LabOrderSponsoredTestConsentWhereUniqueInputSchema),z.lazy(() => LabOrderSponsoredTestConsentWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => LabOrderSponsoredTestConsentWhereUniqueInputSchema),z.lazy(() => LabOrderSponsoredTestConsentWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => LabOrderSponsoredTestConsentWhereUniqueInputSchema),z.lazy(() => LabOrderSponsoredTestConsentWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => LabOrderSponsoredTestConsentUpdateWithWhereUniqueWithoutLabOrderInputSchema),z.lazy(() => LabOrderSponsoredTestConsentUpdateWithWhereUniqueWithoutLabOrderInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => LabOrderSponsoredTestConsentUpdateManyWithWhereWithoutLabOrderInputSchema),z.lazy(() => LabOrderSponsoredTestConsentUpdateManyWithWhereWithoutLabOrderInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => LabOrderSponsoredTestConsentScalarWhereInputSchema),z.lazy(() => LabOrderSponsoredTestConsentScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const LabOrderStatusUncheckedUpdateManyWithoutLabOrderNestedInputSchema: z.ZodType<Prisma.LabOrderStatusUncheckedUpdateManyWithoutLabOrderNestedInput> = z.object({
  create: z.union([ z.lazy(() => LabOrderStatusCreateWithoutLabOrderInputSchema),z.lazy(() => LabOrderStatusCreateWithoutLabOrderInputSchema).array(),z.lazy(() => LabOrderStatusUncheckedCreateWithoutLabOrderInputSchema),z.lazy(() => LabOrderStatusUncheckedCreateWithoutLabOrderInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => LabOrderStatusCreateOrConnectWithoutLabOrderInputSchema),z.lazy(() => LabOrderStatusCreateOrConnectWithoutLabOrderInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => LabOrderStatusUpsertWithWhereUniqueWithoutLabOrderInputSchema),z.lazy(() => LabOrderStatusUpsertWithWhereUniqueWithoutLabOrderInputSchema).array() ]).optional(),
  createMany: z.lazy(() => LabOrderStatusCreateManyLabOrderInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => LabOrderStatusWhereUniqueInputSchema),z.lazy(() => LabOrderStatusWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => LabOrderStatusWhereUniqueInputSchema),z.lazy(() => LabOrderStatusWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => LabOrderStatusWhereUniqueInputSchema),z.lazy(() => LabOrderStatusWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => LabOrderStatusWhereUniqueInputSchema),z.lazy(() => LabOrderStatusWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => LabOrderStatusUpdateWithWhereUniqueWithoutLabOrderInputSchema),z.lazy(() => LabOrderStatusUpdateWithWhereUniqueWithoutLabOrderInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => LabOrderStatusUpdateManyWithWhereWithoutLabOrderInputSchema),z.lazy(() => LabOrderStatusUpdateManyWithWhereWithoutLabOrderInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => LabOrderStatusScalarWhereInputSchema),z.lazy(() => LabOrderStatusScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const LabOrderTestUncheckedUpdateManyWithoutLabOrderNestedInputSchema: z.ZodType<Prisma.LabOrderTestUncheckedUpdateManyWithoutLabOrderNestedInput> = z.object({
  create: z.union([ z.lazy(() => LabOrderTestCreateWithoutLabOrderInputSchema),z.lazy(() => LabOrderTestCreateWithoutLabOrderInputSchema).array(),z.lazy(() => LabOrderTestUncheckedCreateWithoutLabOrderInputSchema),z.lazy(() => LabOrderTestUncheckedCreateWithoutLabOrderInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => LabOrderTestCreateOrConnectWithoutLabOrderInputSchema),z.lazy(() => LabOrderTestCreateOrConnectWithoutLabOrderInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => LabOrderTestUpsertWithWhereUniqueWithoutLabOrderInputSchema),z.lazy(() => LabOrderTestUpsertWithWhereUniqueWithoutLabOrderInputSchema).array() ]).optional(),
  createMany: z.lazy(() => LabOrderTestCreateManyLabOrderInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => LabOrderTestWhereUniqueInputSchema),z.lazy(() => LabOrderTestWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => LabOrderTestWhereUniqueInputSchema),z.lazy(() => LabOrderTestWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => LabOrderTestWhereUniqueInputSchema),z.lazy(() => LabOrderTestWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => LabOrderTestWhereUniqueInputSchema),z.lazy(() => LabOrderTestWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => LabOrderTestUpdateWithWhereUniqueWithoutLabOrderInputSchema),z.lazy(() => LabOrderTestUpdateWithWhereUniqueWithoutLabOrderInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => LabOrderTestUpdateManyWithWhereWithoutLabOrderInputSchema),z.lazy(() => LabOrderTestUpdateManyWithWhereWithoutLabOrderInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => LabOrderTestScalarWhereInputSchema),z.lazy(() => LabOrderTestScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const LabOrderCreateNestedOneWithoutLabOrderAttachmentInputSchema: z.ZodType<Prisma.LabOrderCreateNestedOneWithoutLabOrderAttachmentInput> = z.object({
  create: z.union([ z.lazy(() => LabOrderCreateWithoutLabOrderAttachmentInputSchema),z.lazy(() => LabOrderUncheckedCreateWithoutLabOrderAttachmentInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => LabOrderCreateOrConnectWithoutLabOrderAttachmentInputSchema).optional(),
  connect: z.lazy(() => LabOrderWhereUniqueInputSchema).optional()
}).strict();

export const AttachmentCreateNestedOneWithoutLabOrderAttachmentInputSchema: z.ZodType<Prisma.AttachmentCreateNestedOneWithoutLabOrderAttachmentInput> = z.object({
  create: z.union([ z.lazy(() => AttachmentCreateWithoutLabOrderAttachmentInputSchema),z.lazy(() => AttachmentUncheckedCreateWithoutLabOrderAttachmentInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => AttachmentCreateOrConnectWithoutLabOrderAttachmentInputSchema).optional(),
  connect: z.lazy(() => AttachmentWhereUniqueInputSchema).optional()
}).strict();

export const LabOrderUpdateOneWithoutLabOrderAttachmentNestedInputSchema: z.ZodType<Prisma.LabOrderUpdateOneWithoutLabOrderAttachmentNestedInput> = z.object({
  create: z.union([ z.lazy(() => LabOrderCreateWithoutLabOrderAttachmentInputSchema),z.lazy(() => LabOrderUncheckedCreateWithoutLabOrderAttachmentInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => LabOrderCreateOrConnectWithoutLabOrderAttachmentInputSchema).optional(),
  upsert: z.lazy(() => LabOrderUpsertWithoutLabOrderAttachmentInputSchema).optional(),
  disconnect: z.union([ z.boolean(),z.lazy(() => LabOrderWhereInputSchema) ]).optional(),
  delete: z.union([ z.boolean(),z.lazy(() => LabOrderWhereInputSchema) ]).optional(),
  connect: z.lazy(() => LabOrderWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => LabOrderUpdateToOneWithWhereWithoutLabOrderAttachmentInputSchema),z.lazy(() => LabOrderUpdateWithoutLabOrderAttachmentInputSchema),z.lazy(() => LabOrderUncheckedUpdateWithoutLabOrderAttachmentInputSchema) ]).optional(),
}).strict();

export const AttachmentUpdateOneWithoutLabOrderAttachmentNestedInputSchema: z.ZodType<Prisma.AttachmentUpdateOneWithoutLabOrderAttachmentNestedInput> = z.object({
  create: z.union([ z.lazy(() => AttachmentCreateWithoutLabOrderAttachmentInputSchema),z.lazy(() => AttachmentUncheckedCreateWithoutLabOrderAttachmentInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => AttachmentCreateOrConnectWithoutLabOrderAttachmentInputSchema).optional(),
  upsert: z.lazy(() => AttachmentUpsertWithoutLabOrderAttachmentInputSchema).optional(),
  disconnect: z.union([ z.boolean(),z.lazy(() => AttachmentWhereInputSchema) ]).optional(),
  delete: z.union([ z.boolean(),z.lazy(() => AttachmentWhereInputSchema) ]).optional(),
  connect: z.lazy(() => AttachmentWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => AttachmentUpdateToOneWithWhereWithoutLabOrderAttachmentInputSchema),z.lazy(() => AttachmentUpdateWithoutLabOrderAttachmentInputSchema),z.lazy(() => AttachmentUncheckedUpdateWithoutLabOrderAttachmentInputSchema) ]).optional(),
}).strict();

export const LabOrderCreateNestedOneWithoutLabOrderBillingInputSchema: z.ZodType<Prisma.LabOrderCreateNestedOneWithoutLabOrderBillingInput> = z.object({
  create: z.union([ z.lazy(() => LabOrderCreateWithoutLabOrderBillingInputSchema),z.lazy(() => LabOrderUncheckedCreateWithoutLabOrderBillingInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => LabOrderCreateOrConnectWithoutLabOrderBillingInputSchema).optional(),
  connect: z.lazy(() => LabOrderWhereUniqueInputSchema).optional()
}).strict();

export const LabOrderUpdateOneWithoutLabOrderBillingNestedInputSchema: z.ZodType<Prisma.LabOrderUpdateOneWithoutLabOrderBillingNestedInput> = z.object({
  create: z.union([ z.lazy(() => LabOrderCreateWithoutLabOrderBillingInputSchema),z.lazy(() => LabOrderUncheckedCreateWithoutLabOrderBillingInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => LabOrderCreateOrConnectWithoutLabOrderBillingInputSchema).optional(),
  upsert: z.lazy(() => LabOrderUpsertWithoutLabOrderBillingInputSchema).optional(),
  disconnect: z.union([ z.boolean(),z.lazy(() => LabOrderWhereInputSchema) ]).optional(),
  delete: z.union([ z.boolean(),z.lazy(() => LabOrderWhereInputSchema) ]).optional(),
  connect: z.lazy(() => LabOrderWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => LabOrderUpdateToOneWithWhereWithoutLabOrderBillingInputSchema),z.lazy(() => LabOrderUpdateWithoutLabOrderBillingInputSchema),z.lazy(() => LabOrderUncheckedUpdateWithoutLabOrderBillingInputSchema) ]).optional(),
}).strict();

export const LabOrderCreateNestedOneWithoutLabOrderIcdInputSchema: z.ZodType<Prisma.LabOrderCreateNestedOneWithoutLabOrderIcdInput> = z.object({
  create: z.union([ z.lazy(() => LabOrderCreateWithoutLabOrderIcdInputSchema),z.lazy(() => LabOrderUncheckedCreateWithoutLabOrderIcdInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => LabOrderCreateOrConnectWithoutLabOrderIcdInputSchema).optional(),
  connect: z.lazy(() => LabOrderWhereUniqueInputSchema).optional()
}).strict();

export const ICDCreateNestedOneWithoutLabOrderIcdInputSchema: z.ZodType<Prisma.ICDCreateNestedOneWithoutLabOrderIcdInput> = z.object({
  create: z.union([ z.lazy(() => ICDCreateWithoutLabOrderIcdInputSchema),z.lazy(() => ICDUncheckedCreateWithoutLabOrderIcdInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => ICDCreateOrConnectWithoutLabOrderIcdInputSchema).optional(),
  connect: z.lazy(() => ICDWhereUniqueInputSchema).optional()
}).strict();

export const LabOrderUpdateOneWithoutLabOrderIcdNestedInputSchema: z.ZodType<Prisma.LabOrderUpdateOneWithoutLabOrderIcdNestedInput> = z.object({
  create: z.union([ z.lazy(() => LabOrderCreateWithoutLabOrderIcdInputSchema),z.lazy(() => LabOrderUncheckedCreateWithoutLabOrderIcdInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => LabOrderCreateOrConnectWithoutLabOrderIcdInputSchema).optional(),
  upsert: z.lazy(() => LabOrderUpsertWithoutLabOrderIcdInputSchema).optional(),
  disconnect: z.union([ z.boolean(),z.lazy(() => LabOrderWhereInputSchema) ]).optional(),
  delete: z.union([ z.boolean(),z.lazy(() => LabOrderWhereInputSchema) ]).optional(),
  connect: z.lazy(() => LabOrderWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => LabOrderUpdateToOneWithWhereWithoutLabOrderIcdInputSchema),z.lazy(() => LabOrderUpdateWithoutLabOrderIcdInputSchema),z.lazy(() => LabOrderUncheckedUpdateWithoutLabOrderIcdInputSchema) ]).optional(),
}).strict();

export const ICDUpdateOneWithoutLabOrderIcdNestedInputSchema: z.ZodType<Prisma.ICDUpdateOneWithoutLabOrderIcdNestedInput> = z.object({
  create: z.union([ z.lazy(() => ICDCreateWithoutLabOrderIcdInputSchema),z.lazy(() => ICDUncheckedCreateWithoutLabOrderIcdInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => ICDCreateOrConnectWithoutLabOrderIcdInputSchema).optional(),
  upsert: z.lazy(() => ICDUpsertWithoutLabOrderIcdInputSchema).optional(),
  disconnect: z.union([ z.boolean(),z.lazy(() => ICDWhereInputSchema) ]).optional(),
  delete: z.union([ z.boolean(),z.lazy(() => ICDWhereInputSchema) ]).optional(),
  connect: z.lazy(() => ICDWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => ICDUpdateToOneWithWhereWithoutLabOrderIcdInputSchema),z.lazy(() => ICDUpdateWithoutLabOrderIcdInputSchema),z.lazy(() => ICDUncheckedUpdateWithoutLabOrderIcdInputSchema) ]).optional(),
}).strict();

export const LabOrderCreateNestedOneWithoutLabOrderSpecimenInputSchema: z.ZodType<Prisma.LabOrderCreateNestedOneWithoutLabOrderSpecimenInput> = z.object({
  create: z.union([ z.lazy(() => LabOrderCreateWithoutLabOrderSpecimenInputSchema),z.lazy(() => LabOrderUncheckedCreateWithoutLabOrderSpecimenInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => LabOrderCreateOrConnectWithoutLabOrderSpecimenInputSchema).optional(),
  connect: z.lazy(() => LabOrderWhereUniqueInputSchema).optional()
}).strict();

export const LabOrderUpdateOneWithoutLabOrderSpecimenNestedInputSchema: z.ZodType<Prisma.LabOrderUpdateOneWithoutLabOrderSpecimenNestedInput> = z.object({
  create: z.union([ z.lazy(() => LabOrderCreateWithoutLabOrderSpecimenInputSchema),z.lazy(() => LabOrderUncheckedCreateWithoutLabOrderSpecimenInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => LabOrderCreateOrConnectWithoutLabOrderSpecimenInputSchema).optional(),
  upsert: z.lazy(() => LabOrderUpsertWithoutLabOrderSpecimenInputSchema).optional(),
  disconnect: z.union([ z.boolean(),z.lazy(() => LabOrderWhereInputSchema) ]).optional(),
  delete: z.union([ z.boolean(),z.lazy(() => LabOrderWhereInputSchema) ]).optional(),
  connect: z.lazy(() => LabOrderWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => LabOrderUpdateToOneWithWhereWithoutLabOrderSpecimenInputSchema),z.lazy(() => LabOrderUpdateWithoutLabOrderSpecimenInputSchema),z.lazy(() => LabOrderUncheckedUpdateWithoutLabOrderSpecimenInputSchema) ]).optional(),
}).strict();

export const SponsoredTestCreateNestedOneWithoutLabOrderSponsoredTestConsentInputSchema: z.ZodType<Prisma.SponsoredTestCreateNestedOneWithoutLabOrderSponsoredTestConsentInput> = z.object({
  create: z.union([ z.lazy(() => SponsoredTestCreateWithoutLabOrderSponsoredTestConsentInputSchema),z.lazy(() => SponsoredTestUncheckedCreateWithoutLabOrderSponsoredTestConsentInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => SponsoredTestCreateOrConnectWithoutLabOrderSponsoredTestConsentInputSchema).optional(),
  connect: z.lazy(() => SponsoredTestWhereUniqueInputSchema).optional()
}).strict();

export const LabOrderCreateNestedOneWithoutLabOrderSponsoredTestConsentInputSchema: z.ZodType<Prisma.LabOrderCreateNestedOneWithoutLabOrderSponsoredTestConsentInput> = z.object({
  create: z.union([ z.lazy(() => LabOrderCreateWithoutLabOrderSponsoredTestConsentInputSchema),z.lazy(() => LabOrderUncheckedCreateWithoutLabOrderSponsoredTestConsentInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => LabOrderCreateOrConnectWithoutLabOrderSponsoredTestConsentInputSchema).optional(),
  connect: z.lazy(() => LabOrderWhereUniqueInputSchema).optional()
}).strict();

export const SponsoredTestUpdateOneWithoutLabOrderSponsoredTestConsentNestedInputSchema: z.ZodType<Prisma.SponsoredTestUpdateOneWithoutLabOrderSponsoredTestConsentNestedInput> = z.object({
  create: z.union([ z.lazy(() => SponsoredTestCreateWithoutLabOrderSponsoredTestConsentInputSchema),z.lazy(() => SponsoredTestUncheckedCreateWithoutLabOrderSponsoredTestConsentInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => SponsoredTestCreateOrConnectWithoutLabOrderSponsoredTestConsentInputSchema).optional(),
  upsert: z.lazy(() => SponsoredTestUpsertWithoutLabOrderSponsoredTestConsentInputSchema).optional(),
  disconnect: z.union([ z.boolean(),z.lazy(() => SponsoredTestWhereInputSchema) ]).optional(),
  delete: z.union([ z.boolean(),z.lazy(() => SponsoredTestWhereInputSchema) ]).optional(),
  connect: z.lazy(() => SponsoredTestWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => SponsoredTestUpdateToOneWithWhereWithoutLabOrderSponsoredTestConsentInputSchema),z.lazy(() => SponsoredTestUpdateWithoutLabOrderSponsoredTestConsentInputSchema),z.lazy(() => SponsoredTestUncheckedUpdateWithoutLabOrderSponsoredTestConsentInputSchema) ]).optional(),
}).strict();

export const LabOrderUpdateOneWithoutLabOrderSponsoredTestConsentNestedInputSchema: z.ZodType<Prisma.LabOrderUpdateOneWithoutLabOrderSponsoredTestConsentNestedInput> = z.object({
  create: z.union([ z.lazy(() => LabOrderCreateWithoutLabOrderSponsoredTestConsentInputSchema),z.lazy(() => LabOrderUncheckedCreateWithoutLabOrderSponsoredTestConsentInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => LabOrderCreateOrConnectWithoutLabOrderSponsoredTestConsentInputSchema).optional(),
  upsert: z.lazy(() => LabOrderUpsertWithoutLabOrderSponsoredTestConsentInputSchema).optional(),
  disconnect: z.union([ z.boolean(),z.lazy(() => LabOrderWhereInputSchema) ]).optional(),
  delete: z.union([ z.boolean(),z.lazy(() => LabOrderWhereInputSchema) ]).optional(),
  connect: z.lazy(() => LabOrderWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => LabOrderUpdateToOneWithWhereWithoutLabOrderSponsoredTestConsentInputSchema),z.lazy(() => LabOrderUpdateWithoutLabOrderSponsoredTestConsentInputSchema),z.lazy(() => LabOrderUncheckedUpdateWithoutLabOrderSponsoredTestConsentInputSchema) ]).optional(),
}).strict();

export const LabOrderCreateNestedOneWithoutLabOrderStatusInputSchema: z.ZodType<Prisma.LabOrderCreateNestedOneWithoutLabOrderStatusInput> = z.object({
  create: z.union([ z.lazy(() => LabOrderCreateWithoutLabOrderStatusInputSchema),z.lazy(() => LabOrderUncheckedCreateWithoutLabOrderStatusInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => LabOrderCreateOrConnectWithoutLabOrderStatusInputSchema).optional(),
  connect: z.lazy(() => LabOrderWhereUniqueInputSchema).optional()
}).strict();

export const LabOrderUpdateOneWithoutLabOrderStatusNestedInputSchema: z.ZodType<Prisma.LabOrderUpdateOneWithoutLabOrderStatusNestedInput> = z.object({
  create: z.union([ z.lazy(() => LabOrderCreateWithoutLabOrderStatusInputSchema),z.lazy(() => LabOrderUncheckedCreateWithoutLabOrderStatusInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => LabOrderCreateOrConnectWithoutLabOrderStatusInputSchema).optional(),
  upsert: z.lazy(() => LabOrderUpsertWithoutLabOrderStatusInputSchema).optional(),
  disconnect: z.union([ z.boolean(),z.lazy(() => LabOrderWhereInputSchema) ]).optional(),
  delete: z.union([ z.boolean(),z.lazy(() => LabOrderWhereInputSchema) ]).optional(),
  connect: z.lazy(() => LabOrderWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => LabOrderUpdateToOneWithWhereWithoutLabOrderStatusInputSchema),z.lazy(() => LabOrderUpdateWithoutLabOrderStatusInputSchema),z.lazy(() => LabOrderUncheckedUpdateWithoutLabOrderStatusInputSchema) ]).optional(),
}).strict();

export const LabOrderCreateNestedOneWithoutLabOrderTestInputSchema: z.ZodType<Prisma.LabOrderCreateNestedOneWithoutLabOrderTestInput> = z.object({
  create: z.union([ z.lazy(() => LabOrderCreateWithoutLabOrderTestInputSchema),z.lazy(() => LabOrderUncheckedCreateWithoutLabOrderTestInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => LabOrderCreateOrConnectWithoutLabOrderTestInputSchema).optional(),
  connect: z.lazy(() => LabOrderWhereUniqueInputSchema).optional()
}).strict();

export const TestCatalogCreateNestedOneWithoutLabOrderTestInputSchema: z.ZodType<Prisma.TestCatalogCreateNestedOneWithoutLabOrderTestInput> = z.object({
  create: z.union([ z.lazy(() => TestCatalogCreateWithoutLabOrderTestInputSchema),z.lazy(() => TestCatalogUncheckedCreateWithoutLabOrderTestInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => TestCatalogCreateOrConnectWithoutLabOrderTestInputSchema).optional(),
  connect: z.lazy(() => TestCatalogWhereUniqueInputSchema).optional()
}).strict();

export const LabOrderUpdateOneWithoutLabOrderTestNestedInputSchema: z.ZodType<Prisma.LabOrderUpdateOneWithoutLabOrderTestNestedInput> = z.object({
  create: z.union([ z.lazy(() => LabOrderCreateWithoutLabOrderTestInputSchema),z.lazy(() => LabOrderUncheckedCreateWithoutLabOrderTestInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => LabOrderCreateOrConnectWithoutLabOrderTestInputSchema).optional(),
  upsert: z.lazy(() => LabOrderUpsertWithoutLabOrderTestInputSchema).optional(),
  disconnect: z.union([ z.boolean(),z.lazy(() => LabOrderWhereInputSchema) ]).optional(),
  delete: z.union([ z.boolean(),z.lazy(() => LabOrderWhereInputSchema) ]).optional(),
  connect: z.lazy(() => LabOrderWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => LabOrderUpdateToOneWithWhereWithoutLabOrderTestInputSchema),z.lazy(() => LabOrderUpdateWithoutLabOrderTestInputSchema),z.lazy(() => LabOrderUncheckedUpdateWithoutLabOrderTestInputSchema) ]).optional(),
}).strict();

export const TestCatalogUpdateOneWithoutLabOrderTestNestedInputSchema: z.ZodType<Prisma.TestCatalogUpdateOneWithoutLabOrderTestNestedInput> = z.object({
  create: z.union([ z.lazy(() => TestCatalogCreateWithoutLabOrderTestInputSchema),z.lazy(() => TestCatalogUncheckedCreateWithoutLabOrderTestInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => TestCatalogCreateOrConnectWithoutLabOrderTestInputSchema).optional(),
  upsert: z.lazy(() => TestCatalogUpsertWithoutLabOrderTestInputSchema).optional(),
  disconnect: z.union([ z.boolean(),z.lazy(() => TestCatalogWhereInputSchema) ]).optional(),
  delete: z.union([ z.boolean(),z.lazy(() => TestCatalogWhereInputSchema) ]).optional(),
  connect: z.lazy(() => TestCatalogWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => TestCatalogUpdateToOneWithWhereWithoutLabOrderTestInputSchema),z.lazy(() => TestCatalogUpdateWithoutLabOrderTestInputSchema),z.lazy(() => TestCatalogUncheckedUpdateWithoutLabOrderTestInputSchema) ]).optional(),
}).strict();

export const BigIntFieldUpdateOperationsInputSchema: z.ZodType<Prisma.BigIntFieldUpdateOperationsInput> = z.object({
  set: z.bigint().optional(),
  increment: z.bigint().optional(),
  decrement: z.bigint().optional(),
  multiply: z.bigint().optional(),
  divide: z.bigint().optional()
}).strict();

export const LabOrderCreateNestedManyWithoutOrganizationInputSchema: z.ZodType<Prisma.LabOrderCreateNestedManyWithoutOrganizationInput> = z.object({
  create: z.union([ z.lazy(() => LabOrderCreateWithoutOrganizationInputSchema),z.lazy(() => LabOrderCreateWithoutOrganizationInputSchema).array(),z.lazy(() => LabOrderUncheckedCreateWithoutOrganizationInputSchema),z.lazy(() => LabOrderUncheckedCreateWithoutOrganizationInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => LabOrderCreateOrConnectWithoutOrganizationInputSchema),z.lazy(() => LabOrderCreateOrConnectWithoutOrganizationInputSchema).array() ]).optional(),
  createMany: z.lazy(() => LabOrderCreateManyOrganizationInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => LabOrderWhereUniqueInputSchema),z.lazy(() => LabOrderWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const OrganizationCreateNestedOneWithoutChildOrganizationInputSchema: z.ZodType<Prisma.OrganizationCreateNestedOneWithoutChildOrganizationInput> = z.object({
  create: z.union([ z.lazy(() => OrganizationCreateWithoutChildOrganizationInputSchema),z.lazy(() => OrganizationUncheckedCreateWithoutChildOrganizationInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => OrganizationCreateOrConnectWithoutChildOrganizationInputSchema).optional(),
  connect: z.lazy(() => OrganizationWhereUniqueInputSchema).optional()
}).strict();

export const OrganizationCreateNestedManyWithoutOrganizationInputSchema: z.ZodType<Prisma.OrganizationCreateNestedManyWithoutOrganizationInput> = z.object({
  create: z.union([ z.lazy(() => OrganizationCreateWithoutOrganizationInputSchema),z.lazy(() => OrganizationCreateWithoutOrganizationInputSchema).array(),z.lazy(() => OrganizationUncheckedCreateWithoutOrganizationInputSchema),z.lazy(() => OrganizationUncheckedCreateWithoutOrganizationInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => OrganizationCreateOrConnectWithoutOrganizationInputSchema),z.lazy(() => OrganizationCreateOrConnectWithoutOrganizationInputSchema).array() ]).optional(),
  createMany: z.lazy(() => OrganizationCreateManyOrganizationInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => OrganizationWhereUniqueInputSchema),z.lazy(() => OrganizationWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const OrganizationFavoriteTestCreateNestedManyWithoutOrganizationInputSchema: z.ZodType<Prisma.OrganizationFavoriteTestCreateNestedManyWithoutOrganizationInput> = z.object({
  create: z.union([ z.lazy(() => OrganizationFavoriteTestCreateWithoutOrganizationInputSchema),z.lazy(() => OrganizationFavoriteTestCreateWithoutOrganizationInputSchema).array(),z.lazy(() => OrganizationFavoriteTestUncheckedCreateWithoutOrganizationInputSchema),z.lazy(() => OrganizationFavoriteTestUncheckedCreateWithoutOrganizationInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => OrganizationFavoriteTestCreateOrConnectWithoutOrganizationInputSchema),z.lazy(() => OrganizationFavoriteTestCreateOrConnectWithoutOrganizationInputSchema).array() ]).optional(),
  createMany: z.lazy(() => OrganizationFavoriteTestCreateManyOrganizationInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => OrganizationFavoriteTestWhereUniqueInputSchema),z.lazy(() => OrganizationFavoriteTestWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const PatientOrganizationCreateNestedManyWithoutOrganizationInputSchema: z.ZodType<Prisma.PatientOrganizationCreateNestedManyWithoutOrganizationInput> = z.object({
  create: z.union([ z.lazy(() => PatientOrganizationCreateWithoutOrganizationInputSchema),z.lazy(() => PatientOrganizationCreateWithoutOrganizationInputSchema).array(),z.lazy(() => PatientOrganizationUncheckedCreateWithoutOrganizationInputSchema),z.lazy(() => PatientOrganizationUncheckedCreateWithoutOrganizationInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => PatientOrganizationCreateOrConnectWithoutOrganizationInputSchema),z.lazy(() => PatientOrganizationCreateOrConnectWithoutOrganizationInputSchema).array() ]).optional(),
  createMany: z.lazy(() => PatientOrganizationCreateManyOrganizationInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => PatientOrganizationWhereUniqueInputSchema),z.lazy(() => PatientOrganizationWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const ProviderOrganizationCreateNestedManyWithoutOrganizationInputSchema: z.ZodType<Prisma.ProviderOrganizationCreateNestedManyWithoutOrganizationInput> = z.object({
  create: z.union([ z.lazy(() => ProviderOrganizationCreateWithoutOrganizationInputSchema),z.lazy(() => ProviderOrganizationCreateWithoutOrganizationInputSchema).array(),z.lazy(() => ProviderOrganizationUncheckedCreateWithoutOrganizationInputSchema),z.lazy(() => ProviderOrganizationUncheckedCreateWithoutOrganizationInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => ProviderOrganizationCreateOrConnectWithoutOrganizationInputSchema),z.lazy(() => ProviderOrganizationCreateOrConnectWithoutOrganizationInputSchema).array() ]).optional(),
  createMany: z.lazy(() => ProviderOrganizationCreateManyOrganizationInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => ProviderOrganizationWhereUniqueInputSchema),z.lazy(() => ProviderOrganizationWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const LabOrderUncheckedCreateNestedManyWithoutOrganizationInputSchema: z.ZodType<Prisma.LabOrderUncheckedCreateNestedManyWithoutOrganizationInput> = z.object({
  create: z.union([ z.lazy(() => LabOrderCreateWithoutOrganizationInputSchema),z.lazy(() => LabOrderCreateWithoutOrganizationInputSchema).array(),z.lazy(() => LabOrderUncheckedCreateWithoutOrganizationInputSchema),z.lazy(() => LabOrderUncheckedCreateWithoutOrganizationInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => LabOrderCreateOrConnectWithoutOrganizationInputSchema),z.lazy(() => LabOrderCreateOrConnectWithoutOrganizationInputSchema).array() ]).optional(),
  createMany: z.lazy(() => LabOrderCreateManyOrganizationInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => LabOrderWhereUniqueInputSchema),z.lazy(() => LabOrderWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const OrganizationUncheckedCreateNestedManyWithoutOrganizationInputSchema: z.ZodType<Prisma.OrganizationUncheckedCreateNestedManyWithoutOrganizationInput> = z.object({
  create: z.union([ z.lazy(() => OrganizationCreateWithoutOrganizationInputSchema),z.lazy(() => OrganizationCreateWithoutOrganizationInputSchema).array(),z.lazy(() => OrganizationUncheckedCreateWithoutOrganizationInputSchema),z.lazy(() => OrganizationUncheckedCreateWithoutOrganizationInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => OrganizationCreateOrConnectWithoutOrganizationInputSchema),z.lazy(() => OrganizationCreateOrConnectWithoutOrganizationInputSchema).array() ]).optional(),
  createMany: z.lazy(() => OrganizationCreateManyOrganizationInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => OrganizationWhereUniqueInputSchema),z.lazy(() => OrganizationWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const OrganizationFavoriteTestUncheckedCreateNestedManyWithoutOrganizationInputSchema: z.ZodType<Prisma.OrganizationFavoriteTestUncheckedCreateNestedManyWithoutOrganizationInput> = z.object({
  create: z.union([ z.lazy(() => OrganizationFavoriteTestCreateWithoutOrganizationInputSchema),z.lazy(() => OrganizationFavoriteTestCreateWithoutOrganizationInputSchema).array(),z.lazy(() => OrganizationFavoriteTestUncheckedCreateWithoutOrganizationInputSchema),z.lazy(() => OrganizationFavoriteTestUncheckedCreateWithoutOrganizationInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => OrganizationFavoriteTestCreateOrConnectWithoutOrganizationInputSchema),z.lazy(() => OrganizationFavoriteTestCreateOrConnectWithoutOrganizationInputSchema).array() ]).optional(),
  createMany: z.lazy(() => OrganizationFavoriteTestCreateManyOrganizationInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => OrganizationFavoriteTestWhereUniqueInputSchema),z.lazy(() => OrganizationFavoriteTestWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const PatientOrganizationUncheckedCreateNestedManyWithoutOrganizationInputSchema: z.ZodType<Prisma.PatientOrganizationUncheckedCreateNestedManyWithoutOrganizationInput> = z.object({
  create: z.union([ z.lazy(() => PatientOrganizationCreateWithoutOrganizationInputSchema),z.lazy(() => PatientOrganizationCreateWithoutOrganizationInputSchema).array(),z.lazy(() => PatientOrganizationUncheckedCreateWithoutOrganizationInputSchema),z.lazy(() => PatientOrganizationUncheckedCreateWithoutOrganizationInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => PatientOrganizationCreateOrConnectWithoutOrganizationInputSchema),z.lazy(() => PatientOrganizationCreateOrConnectWithoutOrganizationInputSchema).array() ]).optional(),
  createMany: z.lazy(() => PatientOrganizationCreateManyOrganizationInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => PatientOrganizationWhereUniqueInputSchema),z.lazy(() => PatientOrganizationWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const ProviderOrganizationUncheckedCreateNestedManyWithoutOrganizationInputSchema: z.ZodType<Prisma.ProviderOrganizationUncheckedCreateNestedManyWithoutOrganizationInput> = z.object({
  create: z.union([ z.lazy(() => ProviderOrganizationCreateWithoutOrganizationInputSchema),z.lazy(() => ProviderOrganizationCreateWithoutOrganizationInputSchema).array(),z.lazy(() => ProviderOrganizationUncheckedCreateWithoutOrganizationInputSchema),z.lazy(() => ProviderOrganizationUncheckedCreateWithoutOrganizationInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => ProviderOrganizationCreateOrConnectWithoutOrganizationInputSchema),z.lazy(() => ProviderOrganizationCreateOrConnectWithoutOrganizationInputSchema).array() ]).optional(),
  createMany: z.lazy(() => ProviderOrganizationCreateManyOrganizationInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => ProviderOrganizationWhereUniqueInputSchema),z.lazy(() => ProviderOrganizationWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const LabOrderUpdateManyWithoutOrganizationNestedInputSchema: z.ZodType<Prisma.LabOrderUpdateManyWithoutOrganizationNestedInput> = z.object({
  create: z.union([ z.lazy(() => LabOrderCreateWithoutOrganizationInputSchema),z.lazy(() => LabOrderCreateWithoutOrganizationInputSchema).array(),z.lazy(() => LabOrderUncheckedCreateWithoutOrganizationInputSchema),z.lazy(() => LabOrderUncheckedCreateWithoutOrganizationInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => LabOrderCreateOrConnectWithoutOrganizationInputSchema),z.lazy(() => LabOrderCreateOrConnectWithoutOrganizationInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => LabOrderUpsertWithWhereUniqueWithoutOrganizationInputSchema),z.lazy(() => LabOrderUpsertWithWhereUniqueWithoutOrganizationInputSchema).array() ]).optional(),
  createMany: z.lazy(() => LabOrderCreateManyOrganizationInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => LabOrderWhereUniqueInputSchema),z.lazy(() => LabOrderWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => LabOrderWhereUniqueInputSchema),z.lazy(() => LabOrderWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => LabOrderWhereUniqueInputSchema),z.lazy(() => LabOrderWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => LabOrderWhereUniqueInputSchema),z.lazy(() => LabOrderWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => LabOrderUpdateWithWhereUniqueWithoutOrganizationInputSchema),z.lazy(() => LabOrderUpdateWithWhereUniqueWithoutOrganizationInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => LabOrderUpdateManyWithWhereWithoutOrganizationInputSchema),z.lazy(() => LabOrderUpdateManyWithWhereWithoutOrganizationInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => LabOrderScalarWhereInputSchema),z.lazy(() => LabOrderScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const OrganizationUpdateOneWithoutChildOrganizationNestedInputSchema: z.ZodType<Prisma.OrganizationUpdateOneWithoutChildOrganizationNestedInput> = z.object({
  create: z.union([ z.lazy(() => OrganizationCreateWithoutChildOrganizationInputSchema),z.lazy(() => OrganizationUncheckedCreateWithoutChildOrganizationInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => OrganizationCreateOrConnectWithoutChildOrganizationInputSchema).optional(),
  upsert: z.lazy(() => OrganizationUpsertWithoutChildOrganizationInputSchema).optional(),
  disconnect: z.union([ z.boolean(),z.lazy(() => OrganizationWhereInputSchema) ]).optional(),
  delete: z.union([ z.boolean(),z.lazy(() => OrganizationWhereInputSchema) ]).optional(),
  connect: z.lazy(() => OrganizationWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => OrganizationUpdateToOneWithWhereWithoutChildOrganizationInputSchema),z.lazy(() => OrganizationUpdateWithoutChildOrganizationInputSchema),z.lazy(() => OrganizationUncheckedUpdateWithoutChildOrganizationInputSchema) ]).optional(),
}).strict();

export const OrganizationUpdateManyWithoutOrganizationNestedInputSchema: z.ZodType<Prisma.OrganizationUpdateManyWithoutOrganizationNestedInput> = z.object({
  create: z.union([ z.lazy(() => OrganizationCreateWithoutOrganizationInputSchema),z.lazy(() => OrganizationCreateWithoutOrganizationInputSchema).array(),z.lazy(() => OrganizationUncheckedCreateWithoutOrganizationInputSchema),z.lazy(() => OrganizationUncheckedCreateWithoutOrganizationInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => OrganizationCreateOrConnectWithoutOrganizationInputSchema),z.lazy(() => OrganizationCreateOrConnectWithoutOrganizationInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => OrganizationUpsertWithWhereUniqueWithoutOrganizationInputSchema),z.lazy(() => OrganizationUpsertWithWhereUniqueWithoutOrganizationInputSchema).array() ]).optional(),
  createMany: z.lazy(() => OrganizationCreateManyOrganizationInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => OrganizationWhereUniqueInputSchema),z.lazy(() => OrganizationWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => OrganizationWhereUniqueInputSchema),z.lazy(() => OrganizationWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => OrganizationWhereUniqueInputSchema),z.lazy(() => OrganizationWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => OrganizationWhereUniqueInputSchema),z.lazy(() => OrganizationWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => OrganizationUpdateWithWhereUniqueWithoutOrganizationInputSchema),z.lazy(() => OrganizationUpdateWithWhereUniqueWithoutOrganizationInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => OrganizationUpdateManyWithWhereWithoutOrganizationInputSchema),z.lazy(() => OrganizationUpdateManyWithWhereWithoutOrganizationInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => OrganizationScalarWhereInputSchema),z.lazy(() => OrganizationScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const OrganizationFavoriteTestUpdateManyWithoutOrganizationNestedInputSchema: z.ZodType<Prisma.OrganizationFavoriteTestUpdateManyWithoutOrganizationNestedInput> = z.object({
  create: z.union([ z.lazy(() => OrganizationFavoriteTestCreateWithoutOrganizationInputSchema),z.lazy(() => OrganizationFavoriteTestCreateWithoutOrganizationInputSchema).array(),z.lazy(() => OrganizationFavoriteTestUncheckedCreateWithoutOrganizationInputSchema),z.lazy(() => OrganizationFavoriteTestUncheckedCreateWithoutOrganizationInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => OrganizationFavoriteTestCreateOrConnectWithoutOrganizationInputSchema),z.lazy(() => OrganizationFavoriteTestCreateOrConnectWithoutOrganizationInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => OrganizationFavoriteTestUpsertWithWhereUniqueWithoutOrganizationInputSchema),z.lazy(() => OrganizationFavoriteTestUpsertWithWhereUniqueWithoutOrganizationInputSchema).array() ]).optional(),
  createMany: z.lazy(() => OrganizationFavoriteTestCreateManyOrganizationInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => OrganizationFavoriteTestWhereUniqueInputSchema),z.lazy(() => OrganizationFavoriteTestWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => OrganizationFavoriteTestWhereUniqueInputSchema),z.lazy(() => OrganizationFavoriteTestWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => OrganizationFavoriteTestWhereUniqueInputSchema),z.lazy(() => OrganizationFavoriteTestWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => OrganizationFavoriteTestWhereUniqueInputSchema),z.lazy(() => OrganizationFavoriteTestWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => OrganizationFavoriteTestUpdateWithWhereUniqueWithoutOrganizationInputSchema),z.lazy(() => OrganizationFavoriteTestUpdateWithWhereUniqueWithoutOrganizationInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => OrganizationFavoriteTestUpdateManyWithWhereWithoutOrganizationInputSchema),z.lazy(() => OrganizationFavoriteTestUpdateManyWithWhereWithoutOrganizationInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => OrganizationFavoriteTestScalarWhereInputSchema),z.lazy(() => OrganizationFavoriteTestScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const PatientOrganizationUpdateManyWithoutOrganizationNestedInputSchema: z.ZodType<Prisma.PatientOrganizationUpdateManyWithoutOrganizationNestedInput> = z.object({
  create: z.union([ z.lazy(() => PatientOrganizationCreateWithoutOrganizationInputSchema),z.lazy(() => PatientOrganizationCreateWithoutOrganizationInputSchema).array(),z.lazy(() => PatientOrganizationUncheckedCreateWithoutOrganizationInputSchema),z.lazy(() => PatientOrganizationUncheckedCreateWithoutOrganizationInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => PatientOrganizationCreateOrConnectWithoutOrganizationInputSchema),z.lazy(() => PatientOrganizationCreateOrConnectWithoutOrganizationInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => PatientOrganizationUpsertWithWhereUniqueWithoutOrganizationInputSchema),z.lazy(() => PatientOrganizationUpsertWithWhereUniqueWithoutOrganizationInputSchema).array() ]).optional(),
  createMany: z.lazy(() => PatientOrganizationCreateManyOrganizationInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => PatientOrganizationWhereUniqueInputSchema),z.lazy(() => PatientOrganizationWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => PatientOrganizationWhereUniqueInputSchema),z.lazy(() => PatientOrganizationWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => PatientOrganizationWhereUniqueInputSchema),z.lazy(() => PatientOrganizationWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => PatientOrganizationWhereUniqueInputSchema),z.lazy(() => PatientOrganizationWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => PatientOrganizationUpdateWithWhereUniqueWithoutOrganizationInputSchema),z.lazy(() => PatientOrganizationUpdateWithWhereUniqueWithoutOrganizationInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => PatientOrganizationUpdateManyWithWhereWithoutOrganizationInputSchema),z.lazy(() => PatientOrganizationUpdateManyWithWhereWithoutOrganizationInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => PatientOrganizationScalarWhereInputSchema),z.lazy(() => PatientOrganizationScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const ProviderOrganizationUpdateManyWithoutOrganizationNestedInputSchema: z.ZodType<Prisma.ProviderOrganizationUpdateManyWithoutOrganizationNestedInput> = z.object({
  create: z.union([ z.lazy(() => ProviderOrganizationCreateWithoutOrganizationInputSchema),z.lazy(() => ProviderOrganizationCreateWithoutOrganizationInputSchema).array(),z.lazy(() => ProviderOrganizationUncheckedCreateWithoutOrganizationInputSchema),z.lazy(() => ProviderOrganizationUncheckedCreateWithoutOrganizationInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => ProviderOrganizationCreateOrConnectWithoutOrganizationInputSchema),z.lazy(() => ProviderOrganizationCreateOrConnectWithoutOrganizationInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => ProviderOrganizationUpsertWithWhereUniqueWithoutOrganizationInputSchema),z.lazy(() => ProviderOrganizationUpsertWithWhereUniqueWithoutOrganizationInputSchema).array() ]).optional(),
  createMany: z.lazy(() => ProviderOrganizationCreateManyOrganizationInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => ProviderOrganizationWhereUniqueInputSchema),z.lazy(() => ProviderOrganizationWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => ProviderOrganizationWhereUniqueInputSchema),z.lazy(() => ProviderOrganizationWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => ProviderOrganizationWhereUniqueInputSchema),z.lazy(() => ProviderOrganizationWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => ProviderOrganizationWhereUniqueInputSchema),z.lazy(() => ProviderOrganizationWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => ProviderOrganizationUpdateWithWhereUniqueWithoutOrganizationInputSchema),z.lazy(() => ProviderOrganizationUpdateWithWhereUniqueWithoutOrganizationInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => ProviderOrganizationUpdateManyWithWhereWithoutOrganizationInputSchema),z.lazy(() => ProviderOrganizationUpdateManyWithWhereWithoutOrganizationInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => ProviderOrganizationScalarWhereInputSchema),z.lazy(() => ProviderOrganizationScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const LabOrderUncheckedUpdateManyWithoutOrganizationNestedInputSchema: z.ZodType<Prisma.LabOrderUncheckedUpdateManyWithoutOrganizationNestedInput> = z.object({
  create: z.union([ z.lazy(() => LabOrderCreateWithoutOrganizationInputSchema),z.lazy(() => LabOrderCreateWithoutOrganizationInputSchema).array(),z.lazy(() => LabOrderUncheckedCreateWithoutOrganizationInputSchema),z.lazy(() => LabOrderUncheckedCreateWithoutOrganizationInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => LabOrderCreateOrConnectWithoutOrganizationInputSchema),z.lazy(() => LabOrderCreateOrConnectWithoutOrganizationInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => LabOrderUpsertWithWhereUniqueWithoutOrganizationInputSchema),z.lazy(() => LabOrderUpsertWithWhereUniqueWithoutOrganizationInputSchema).array() ]).optional(),
  createMany: z.lazy(() => LabOrderCreateManyOrganizationInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => LabOrderWhereUniqueInputSchema),z.lazy(() => LabOrderWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => LabOrderWhereUniqueInputSchema),z.lazy(() => LabOrderWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => LabOrderWhereUniqueInputSchema),z.lazy(() => LabOrderWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => LabOrderWhereUniqueInputSchema),z.lazy(() => LabOrderWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => LabOrderUpdateWithWhereUniqueWithoutOrganizationInputSchema),z.lazy(() => LabOrderUpdateWithWhereUniqueWithoutOrganizationInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => LabOrderUpdateManyWithWhereWithoutOrganizationInputSchema),z.lazy(() => LabOrderUpdateManyWithWhereWithoutOrganizationInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => LabOrderScalarWhereInputSchema),z.lazy(() => LabOrderScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const OrganizationUncheckedUpdateManyWithoutOrganizationNestedInputSchema: z.ZodType<Prisma.OrganizationUncheckedUpdateManyWithoutOrganizationNestedInput> = z.object({
  create: z.union([ z.lazy(() => OrganizationCreateWithoutOrganizationInputSchema),z.lazy(() => OrganizationCreateWithoutOrganizationInputSchema).array(),z.lazy(() => OrganizationUncheckedCreateWithoutOrganizationInputSchema),z.lazy(() => OrganizationUncheckedCreateWithoutOrganizationInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => OrganizationCreateOrConnectWithoutOrganizationInputSchema),z.lazy(() => OrganizationCreateOrConnectWithoutOrganizationInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => OrganizationUpsertWithWhereUniqueWithoutOrganizationInputSchema),z.lazy(() => OrganizationUpsertWithWhereUniqueWithoutOrganizationInputSchema).array() ]).optional(),
  createMany: z.lazy(() => OrganizationCreateManyOrganizationInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => OrganizationWhereUniqueInputSchema),z.lazy(() => OrganizationWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => OrganizationWhereUniqueInputSchema),z.lazy(() => OrganizationWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => OrganizationWhereUniqueInputSchema),z.lazy(() => OrganizationWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => OrganizationWhereUniqueInputSchema),z.lazy(() => OrganizationWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => OrganizationUpdateWithWhereUniqueWithoutOrganizationInputSchema),z.lazy(() => OrganizationUpdateWithWhereUniqueWithoutOrganizationInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => OrganizationUpdateManyWithWhereWithoutOrganizationInputSchema),z.lazy(() => OrganizationUpdateManyWithWhereWithoutOrganizationInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => OrganizationScalarWhereInputSchema),z.lazy(() => OrganizationScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const OrganizationFavoriteTestUncheckedUpdateManyWithoutOrganizationNestedInputSchema: z.ZodType<Prisma.OrganizationFavoriteTestUncheckedUpdateManyWithoutOrganizationNestedInput> = z.object({
  create: z.union([ z.lazy(() => OrganizationFavoriteTestCreateWithoutOrganizationInputSchema),z.lazy(() => OrganizationFavoriteTestCreateWithoutOrganizationInputSchema).array(),z.lazy(() => OrganizationFavoriteTestUncheckedCreateWithoutOrganizationInputSchema),z.lazy(() => OrganizationFavoriteTestUncheckedCreateWithoutOrganizationInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => OrganizationFavoriteTestCreateOrConnectWithoutOrganizationInputSchema),z.lazy(() => OrganizationFavoriteTestCreateOrConnectWithoutOrganizationInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => OrganizationFavoriteTestUpsertWithWhereUniqueWithoutOrganizationInputSchema),z.lazy(() => OrganizationFavoriteTestUpsertWithWhereUniqueWithoutOrganizationInputSchema).array() ]).optional(),
  createMany: z.lazy(() => OrganizationFavoriteTestCreateManyOrganizationInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => OrganizationFavoriteTestWhereUniqueInputSchema),z.lazy(() => OrganizationFavoriteTestWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => OrganizationFavoriteTestWhereUniqueInputSchema),z.lazy(() => OrganizationFavoriteTestWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => OrganizationFavoriteTestWhereUniqueInputSchema),z.lazy(() => OrganizationFavoriteTestWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => OrganizationFavoriteTestWhereUniqueInputSchema),z.lazy(() => OrganizationFavoriteTestWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => OrganizationFavoriteTestUpdateWithWhereUniqueWithoutOrganizationInputSchema),z.lazy(() => OrganizationFavoriteTestUpdateWithWhereUniqueWithoutOrganizationInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => OrganizationFavoriteTestUpdateManyWithWhereWithoutOrganizationInputSchema),z.lazy(() => OrganizationFavoriteTestUpdateManyWithWhereWithoutOrganizationInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => OrganizationFavoriteTestScalarWhereInputSchema),z.lazy(() => OrganizationFavoriteTestScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const PatientOrganizationUncheckedUpdateManyWithoutOrganizationNestedInputSchema: z.ZodType<Prisma.PatientOrganizationUncheckedUpdateManyWithoutOrganizationNestedInput> = z.object({
  create: z.union([ z.lazy(() => PatientOrganizationCreateWithoutOrganizationInputSchema),z.lazy(() => PatientOrganizationCreateWithoutOrganizationInputSchema).array(),z.lazy(() => PatientOrganizationUncheckedCreateWithoutOrganizationInputSchema),z.lazy(() => PatientOrganizationUncheckedCreateWithoutOrganizationInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => PatientOrganizationCreateOrConnectWithoutOrganizationInputSchema),z.lazy(() => PatientOrganizationCreateOrConnectWithoutOrganizationInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => PatientOrganizationUpsertWithWhereUniqueWithoutOrganizationInputSchema),z.lazy(() => PatientOrganizationUpsertWithWhereUniqueWithoutOrganizationInputSchema).array() ]).optional(),
  createMany: z.lazy(() => PatientOrganizationCreateManyOrganizationInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => PatientOrganizationWhereUniqueInputSchema),z.lazy(() => PatientOrganizationWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => PatientOrganizationWhereUniqueInputSchema),z.lazy(() => PatientOrganizationWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => PatientOrganizationWhereUniqueInputSchema),z.lazy(() => PatientOrganizationWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => PatientOrganizationWhereUniqueInputSchema),z.lazy(() => PatientOrganizationWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => PatientOrganizationUpdateWithWhereUniqueWithoutOrganizationInputSchema),z.lazy(() => PatientOrganizationUpdateWithWhereUniqueWithoutOrganizationInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => PatientOrganizationUpdateManyWithWhereWithoutOrganizationInputSchema),z.lazy(() => PatientOrganizationUpdateManyWithWhereWithoutOrganizationInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => PatientOrganizationScalarWhereInputSchema),z.lazy(() => PatientOrganizationScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const ProviderOrganizationUncheckedUpdateManyWithoutOrganizationNestedInputSchema: z.ZodType<Prisma.ProviderOrganizationUncheckedUpdateManyWithoutOrganizationNestedInput> = z.object({
  create: z.union([ z.lazy(() => ProviderOrganizationCreateWithoutOrganizationInputSchema),z.lazy(() => ProviderOrganizationCreateWithoutOrganizationInputSchema).array(),z.lazy(() => ProviderOrganizationUncheckedCreateWithoutOrganizationInputSchema),z.lazy(() => ProviderOrganizationUncheckedCreateWithoutOrganizationInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => ProviderOrganizationCreateOrConnectWithoutOrganizationInputSchema),z.lazy(() => ProviderOrganizationCreateOrConnectWithoutOrganizationInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => ProviderOrganizationUpsertWithWhereUniqueWithoutOrganizationInputSchema),z.lazy(() => ProviderOrganizationUpsertWithWhereUniqueWithoutOrganizationInputSchema).array() ]).optional(),
  createMany: z.lazy(() => ProviderOrganizationCreateManyOrganizationInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => ProviderOrganizationWhereUniqueInputSchema),z.lazy(() => ProviderOrganizationWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => ProviderOrganizationWhereUniqueInputSchema),z.lazy(() => ProviderOrganizationWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => ProviderOrganizationWhereUniqueInputSchema),z.lazy(() => ProviderOrganizationWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => ProviderOrganizationWhereUniqueInputSchema),z.lazy(() => ProviderOrganizationWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => ProviderOrganizationUpdateWithWhereUniqueWithoutOrganizationInputSchema),z.lazy(() => ProviderOrganizationUpdateWithWhereUniqueWithoutOrganizationInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => ProviderOrganizationUpdateManyWithWhereWithoutOrganizationInputSchema),z.lazy(() => ProviderOrganizationUpdateManyWithWhereWithoutOrganizationInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => ProviderOrganizationScalarWhereInputSchema),z.lazy(() => ProviderOrganizationScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const OrganizationCreateNestedOneWithoutOrganizationFavoriteTestInputSchema: z.ZodType<Prisma.OrganizationCreateNestedOneWithoutOrganizationFavoriteTestInput> = z.object({
  create: z.union([ z.lazy(() => OrganizationCreateWithoutOrganizationFavoriteTestInputSchema),z.lazy(() => OrganizationUncheckedCreateWithoutOrganizationFavoriteTestInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => OrganizationCreateOrConnectWithoutOrganizationFavoriteTestInputSchema).optional(),
  connect: z.lazy(() => OrganizationWhereUniqueInputSchema).optional()
}).strict();

export const TestCatalogCreateNestedOneWithoutOrganizationFavoriteTestInputSchema: z.ZodType<Prisma.TestCatalogCreateNestedOneWithoutOrganizationFavoriteTestInput> = z.object({
  create: z.union([ z.lazy(() => TestCatalogCreateWithoutOrganizationFavoriteTestInputSchema),z.lazy(() => TestCatalogUncheckedCreateWithoutOrganizationFavoriteTestInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => TestCatalogCreateOrConnectWithoutOrganizationFavoriteTestInputSchema).optional(),
  connect: z.lazy(() => TestCatalogWhereUniqueInputSchema).optional()
}).strict();

export const OrganizationUpdateOneWithoutOrganizationFavoriteTestNestedInputSchema: z.ZodType<Prisma.OrganizationUpdateOneWithoutOrganizationFavoriteTestNestedInput> = z.object({
  create: z.union([ z.lazy(() => OrganizationCreateWithoutOrganizationFavoriteTestInputSchema),z.lazy(() => OrganizationUncheckedCreateWithoutOrganizationFavoriteTestInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => OrganizationCreateOrConnectWithoutOrganizationFavoriteTestInputSchema).optional(),
  upsert: z.lazy(() => OrganizationUpsertWithoutOrganizationFavoriteTestInputSchema).optional(),
  disconnect: z.union([ z.boolean(),z.lazy(() => OrganizationWhereInputSchema) ]).optional(),
  delete: z.union([ z.boolean(),z.lazy(() => OrganizationWhereInputSchema) ]).optional(),
  connect: z.lazy(() => OrganizationWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => OrganizationUpdateToOneWithWhereWithoutOrganizationFavoriteTestInputSchema),z.lazy(() => OrganizationUpdateWithoutOrganizationFavoriteTestInputSchema),z.lazy(() => OrganizationUncheckedUpdateWithoutOrganizationFavoriteTestInputSchema) ]).optional(),
}).strict();

export const TestCatalogUpdateOneWithoutOrganizationFavoriteTestNestedInputSchema: z.ZodType<Prisma.TestCatalogUpdateOneWithoutOrganizationFavoriteTestNestedInput> = z.object({
  create: z.union([ z.lazy(() => TestCatalogCreateWithoutOrganizationFavoriteTestInputSchema),z.lazy(() => TestCatalogUncheckedCreateWithoutOrganizationFavoriteTestInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => TestCatalogCreateOrConnectWithoutOrganizationFavoriteTestInputSchema).optional(),
  upsert: z.lazy(() => TestCatalogUpsertWithoutOrganizationFavoriteTestInputSchema).optional(),
  disconnect: z.union([ z.boolean(),z.lazy(() => TestCatalogWhereInputSchema) ]).optional(),
  delete: z.union([ z.boolean(),z.lazy(() => TestCatalogWhereInputSchema) ]).optional(),
  connect: z.lazy(() => TestCatalogWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => TestCatalogUpdateToOneWithWhereWithoutOrganizationFavoriteTestInputSchema),z.lazy(() => TestCatalogUpdateWithoutOrganizationFavoriteTestInputSchema),z.lazy(() => TestCatalogUncheckedUpdateWithoutOrganizationFavoriteTestInputSchema) ]).optional(),
}).strict();

export const LabOrderCreateNestedManyWithoutPatientInputSchema: z.ZodType<Prisma.LabOrderCreateNestedManyWithoutPatientInput> = z.object({
  create: z.union([ z.lazy(() => LabOrderCreateWithoutPatientInputSchema),z.lazy(() => LabOrderCreateWithoutPatientInputSchema).array(),z.lazy(() => LabOrderUncheckedCreateWithoutPatientInputSchema),z.lazy(() => LabOrderUncheckedCreateWithoutPatientInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => LabOrderCreateOrConnectWithoutPatientInputSchema),z.lazy(() => LabOrderCreateOrConnectWithoutPatientInputSchema).array() ]).optional(),
  createMany: z.lazy(() => LabOrderCreateManyPatientInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => LabOrderWhereUniqueInputSchema),z.lazy(() => LabOrderWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const PatientOrganizationCreateNestedManyWithoutPatientInputSchema: z.ZodType<Prisma.PatientOrganizationCreateNestedManyWithoutPatientInput> = z.object({
  create: z.union([ z.lazy(() => PatientOrganizationCreateWithoutPatientInputSchema),z.lazy(() => PatientOrganizationCreateWithoutPatientInputSchema).array(),z.lazy(() => PatientOrganizationUncheckedCreateWithoutPatientInputSchema),z.lazy(() => PatientOrganizationUncheckedCreateWithoutPatientInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => PatientOrganizationCreateOrConnectWithoutPatientInputSchema),z.lazy(() => PatientOrganizationCreateOrConnectWithoutPatientInputSchema).array() ]).optional(),
  createMany: z.lazy(() => PatientOrganizationCreateManyPatientInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => PatientOrganizationWhereUniqueInputSchema),z.lazy(() => PatientOrganizationWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const LabOrderUncheckedCreateNestedManyWithoutPatientInputSchema: z.ZodType<Prisma.LabOrderUncheckedCreateNestedManyWithoutPatientInput> = z.object({
  create: z.union([ z.lazy(() => LabOrderCreateWithoutPatientInputSchema),z.lazy(() => LabOrderCreateWithoutPatientInputSchema).array(),z.lazy(() => LabOrderUncheckedCreateWithoutPatientInputSchema),z.lazy(() => LabOrderUncheckedCreateWithoutPatientInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => LabOrderCreateOrConnectWithoutPatientInputSchema),z.lazy(() => LabOrderCreateOrConnectWithoutPatientInputSchema).array() ]).optional(),
  createMany: z.lazy(() => LabOrderCreateManyPatientInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => LabOrderWhereUniqueInputSchema),z.lazy(() => LabOrderWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const PatientOrganizationUncheckedCreateNestedManyWithoutPatientInputSchema: z.ZodType<Prisma.PatientOrganizationUncheckedCreateNestedManyWithoutPatientInput> = z.object({
  create: z.union([ z.lazy(() => PatientOrganizationCreateWithoutPatientInputSchema),z.lazy(() => PatientOrganizationCreateWithoutPatientInputSchema).array(),z.lazy(() => PatientOrganizationUncheckedCreateWithoutPatientInputSchema),z.lazy(() => PatientOrganizationUncheckedCreateWithoutPatientInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => PatientOrganizationCreateOrConnectWithoutPatientInputSchema),z.lazy(() => PatientOrganizationCreateOrConnectWithoutPatientInputSchema).array() ]).optional(),
  createMany: z.lazy(() => PatientOrganizationCreateManyPatientInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => PatientOrganizationWhereUniqueInputSchema),z.lazy(() => PatientOrganizationWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const LabOrderUpdateManyWithoutPatientNestedInputSchema: z.ZodType<Prisma.LabOrderUpdateManyWithoutPatientNestedInput> = z.object({
  create: z.union([ z.lazy(() => LabOrderCreateWithoutPatientInputSchema),z.lazy(() => LabOrderCreateWithoutPatientInputSchema).array(),z.lazy(() => LabOrderUncheckedCreateWithoutPatientInputSchema),z.lazy(() => LabOrderUncheckedCreateWithoutPatientInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => LabOrderCreateOrConnectWithoutPatientInputSchema),z.lazy(() => LabOrderCreateOrConnectWithoutPatientInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => LabOrderUpsertWithWhereUniqueWithoutPatientInputSchema),z.lazy(() => LabOrderUpsertWithWhereUniqueWithoutPatientInputSchema).array() ]).optional(),
  createMany: z.lazy(() => LabOrderCreateManyPatientInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => LabOrderWhereUniqueInputSchema),z.lazy(() => LabOrderWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => LabOrderWhereUniqueInputSchema),z.lazy(() => LabOrderWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => LabOrderWhereUniqueInputSchema),z.lazy(() => LabOrderWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => LabOrderWhereUniqueInputSchema),z.lazy(() => LabOrderWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => LabOrderUpdateWithWhereUniqueWithoutPatientInputSchema),z.lazy(() => LabOrderUpdateWithWhereUniqueWithoutPatientInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => LabOrderUpdateManyWithWhereWithoutPatientInputSchema),z.lazy(() => LabOrderUpdateManyWithWhereWithoutPatientInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => LabOrderScalarWhereInputSchema),z.lazy(() => LabOrderScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const PatientOrganizationUpdateManyWithoutPatientNestedInputSchema: z.ZodType<Prisma.PatientOrganizationUpdateManyWithoutPatientNestedInput> = z.object({
  create: z.union([ z.lazy(() => PatientOrganizationCreateWithoutPatientInputSchema),z.lazy(() => PatientOrganizationCreateWithoutPatientInputSchema).array(),z.lazy(() => PatientOrganizationUncheckedCreateWithoutPatientInputSchema),z.lazy(() => PatientOrganizationUncheckedCreateWithoutPatientInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => PatientOrganizationCreateOrConnectWithoutPatientInputSchema),z.lazy(() => PatientOrganizationCreateOrConnectWithoutPatientInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => PatientOrganizationUpsertWithWhereUniqueWithoutPatientInputSchema),z.lazy(() => PatientOrganizationUpsertWithWhereUniqueWithoutPatientInputSchema).array() ]).optional(),
  createMany: z.lazy(() => PatientOrganizationCreateManyPatientInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => PatientOrganizationWhereUniqueInputSchema),z.lazy(() => PatientOrganizationWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => PatientOrganizationWhereUniqueInputSchema),z.lazy(() => PatientOrganizationWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => PatientOrganizationWhereUniqueInputSchema),z.lazy(() => PatientOrganizationWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => PatientOrganizationWhereUniqueInputSchema),z.lazy(() => PatientOrganizationWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => PatientOrganizationUpdateWithWhereUniqueWithoutPatientInputSchema),z.lazy(() => PatientOrganizationUpdateWithWhereUniqueWithoutPatientInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => PatientOrganizationUpdateManyWithWhereWithoutPatientInputSchema),z.lazy(() => PatientOrganizationUpdateManyWithWhereWithoutPatientInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => PatientOrganizationScalarWhereInputSchema),z.lazy(() => PatientOrganizationScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const LabOrderUncheckedUpdateManyWithoutPatientNestedInputSchema: z.ZodType<Prisma.LabOrderUncheckedUpdateManyWithoutPatientNestedInput> = z.object({
  create: z.union([ z.lazy(() => LabOrderCreateWithoutPatientInputSchema),z.lazy(() => LabOrderCreateWithoutPatientInputSchema).array(),z.lazy(() => LabOrderUncheckedCreateWithoutPatientInputSchema),z.lazy(() => LabOrderUncheckedCreateWithoutPatientInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => LabOrderCreateOrConnectWithoutPatientInputSchema),z.lazy(() => LabOrderCreateOrConnectWithoutPatientInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => LabOrderUpsertWithWhereUniqueWithoutPatientInputSchema),z.lazy(() => LabOrderUpsertWithWhereUniqueWithoutPatientInputSchema).array() ]).optional(),
  createMany: z.lazy(() => LabOrderCreateManyPatientInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => LabOrderWhereUniqueInputSchema),z.lazy(() => LabOrderWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => LabOrderWhereUniqueInputSchema),z.lazy(() => LabOrderWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => LabOrderWhereUniqueInputSchema),z.lazy(() => LabOrderWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => LabOrderWhereUniqueInputSchema),z.lazy(() => LabOrderWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => LabOrderUpdateWithWhereUniqueWithoutPatientInputSchema),z.lazy(() => LabOrderUpdateWithWhereUniqueWithoutPatientInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => LabOrderUpdateManyWithWhereWithoutPatientInputSchema),z.lazy(() => LabOrderUpdateManyWithWhereWithoutPatientInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => LabOrderScalarWhereInputSchema),z.lazy(() => LabOrderScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const PatientOrganizationUncheckedUpdateManyWithoutPatientNestedInputSchema: z.ZodType<Prisma.PatientOrganizationUncheckedUpdateManyWithoutPatientNestedInput> = z.object({
  create: z.union([ z.lazy(() => PatientOrganizationCreateWithoutPatientInputSchema),z.lazy(() => PatientOrganizationCreateWithoutPatientInputSchema).array(),z.lazy(() => PatientOrganizationUncheckedCreateWithoutPatientInputSchema),z.lazy(() => PatientOrganizationUncheckedCreateWithoutPatientInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => PatientOrganizationCreateOrConnectWithoutPatientInputSchema),z.lazy(() => PatientOrganizationCreateOrConnectWithoutPatientInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => PatientOrganizationUpsertWithWhereUniqueWithoutPatientInputSchema),z.lazy(() => PatientOrganizationUpsertWithWhereUniqueWithoutPatientInputSchema).array() ]).optional(),
  createMany: z.lazy(() => PatientOrganizationCreateManyPatientInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => PatientOrganizationWhereUniqueInputSchema),z.lazy(() => PatientOrganizationWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => PatientOrganizationWhereUniqueInputSchema),z.lazy(() => PatientOrganizationWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => PatientOrganizationWhereUniqueInputSchema),z.lazy(() => PatientOrganizationWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => PatientOrganizationWhereUniqueInputSchema),z.lazy(() => PatientOrganizationWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => PatientOrganizationUpdateWithWhereUniqueWithoutPatientInputSchema),z.lazy(() => PatientOrganizationUpdateWithWhereUniqueWithoutPatientInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => PatientOrganizationUpdateManyWithWhereWithoutPatientInputSchema),z.lazy(() => PatientOrganizationUpdateManyWithWhereWithoutPatientInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => PatientOrganizationScalarWhereInputSchema),z.lazy(() => PatientOrganizationScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const OrganizationCreateNestedOneWithoutPatientOrganizationInputSchema: z.ZodType<Prisma.OrganizationCreateNestedOneWithoutPatientOrganizationInput> = z.object({
  create: z.union([ z.lazy(() => OrganizationCreateWithoutPatientOrganizationInputSchema),z.lazy(() => OrganizationUncheckedCreateWithoutPatientOrganizationInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => OrganizationCreateOrConnectWithoutPatientOrganizationInputSchema).optional(),
  connect: z.lazy(() => OrganizationWhereUniqueInputSchema).optional()
}).strict();

export const PatientCreateNestedOneWithoutPatientOrganizationInputSchema: z.ZodType<Prisma.PatientCreateNestedOneWithoutPatientOrganizationInput> = z.object({
  create: z.union([ z.lazy(() => PatientCreateWithoutPatientOrganizationInputSchema),z.lazy(() => PatientUncheckedCreateWithoutPatientOrganizationInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => PatientCreateOrConnectWithoutPatientOrganizationInputSchema).optional(),
  connect: z.lazy(() => PatientWhereUniqueInputSchema).optional()
}).strict();

export const OrganizationUpdateOneRequiredWithoutPatientOrganizationNestedInputSchema: z.ZodType<Prisma.OrganizationUpdateOneRequiredWithoutPatientOrganizationNestedInput> = z.object({
  create: z.union([ z.lazy(() => OrganizationCreateWithoutPatientOrganizationInputSchema),z.lazy(() => OrganizationUncheckedCreateWithoutPatientOrganizationInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => OrganizationCreateOrConnectWithoutPatientOrganizationInputSchema).optional(),
  upsert: z.lazy(() => OrganizationUpsertWithoutPatientOrganizationInputSchema).optional(),
  connect: z.lazy(() => OrganizationWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => OrganizationUpdateToOneWithWhereWithoutPatientOrganizationInputSchema),z.lazy(() => OrganizationUpdateWithoutPatientOrganizationInputSchema),z.lazy(() => OrganizationUncheckedUpdateWithoutPatientOrganizationInputSchema) ]).optional(),
}).strict();

export const PatientUpdateOneRequiredWithoutPatientOrganizationNestedInputSchema: z.ZodType<Prisma.PatientUpdateOneRequiredWithoutPatientOrganizationNestedInput> = z.object({
  create: z.union([ z.lazy(() => PatientCreateWithoutPatientOrganizationInputSchema),z.lazy(() => PatientUncheckedCreateWithoutPatientOrganizationInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => PatientCreateOrConnectWithoutPatientOrganizationInputSchema).optional(),
  upsert: z.lazy(() => PatientUpsertWithoutPatientOrganizationInputSchema).optional(),
  connect: z.lazy(() => PatientWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => PatientUpdateToOneWithWhereWithoutPatientOrganizationInputSchema),z.lazy(() => PatientUpdateWithoutPatientOrganizationInputSchema),z.lazy(() => PatientUncheckedUpdateWithoutPatientOrganizationInputSchema) ]).optional(),
}).strict();

export const DateTimeFieldUpdateOperationsInputSchema: z.ZodType<Prisma.DateTimeFieldUpdateOperationsInput> = z.object({
  set: z.date().optional()
}).strict();

export const LabOrderCreateNestedManyWithoutOrderingProviderInputSchema: z.ZodType<Prisma.LabOrderCreateNestedManyWithoutOrderingProviderInput> = z.object({
  create: z.union([ z.lazy(() => LabOrderCreateWithoutOrderingProviderInputSchema),z.lazy(() => LabOrderCreateWithoutOrderingProviderInputSchema).array(),z.lazy(() => LabOrderUncheckedCreateWithoutOrderingProviderInputSchema),z.lazy(() => LabOrderUncheckedCreateWithoutOrderingProviderInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => LabOrderCreateOrConnectWithoutOrderingProviderInputSchema),z.lazy(() => LabOrderCreateOrConnectWithoutOrderingProviderInputSchema).array() ]).optional(),
  createMany: z.lazy(() => LabOrderCreateManyOrderingProviderInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => LabOrderWhereUniqueInputSchema),z.lazy(() => LabOrderWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const LabOrderCreateNestedManyWithoutTreatingProviderInputSchema: z.ZodType<Prisma.LabOrderCreateNestedManyWithoutTreatingProviderInput> = z.object({
  create: z.union([ z.lazy(() => LabOrderCreateWithoutTreatingProviderInputSchema),z.lazy(() => LabOrderCreateWithoutTreatingProviderInputSchema).array(),z.lazy(() => LabOrderUncheckedCreateWithoutTreatingProviderInputSchema),z.lazy(() => LabOrderUncheckedCreateWithoutTreatingProviderInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => LabOrderCreateOrConnectWithoutTreatingProviderInputSchema),z.lazy(() => LabOrderCreateOrConnectWithoutTreatingProviderInputSchema).array() ]).optional(),
  createMany: z.lazy(() => LabOrderCreateManyTreatingProviderInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => LabOrderWhereUniqueInputSchema),z.lazy(() => LabOrderWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const UserAttributeCreateNestedOneWithoutProviderInputSchema: z.ZodType<Prisma.UserAttributeCreateNestedOneWithoutProviderInput> = z.object({
  create: z.union([ z.lazy(() => UserAttributeCreateWithoutProviderInputSchema),z.lazy(() => UserAttributeUncheckedCreateWithoutProviderInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => UserAttributeCreateOrConnectWithoutProviderInputSchema).optional(),
  connect: z.lazy(() => UserAttributeWhereUniqueInputSchema).optional()
}).strict();

export const ProviderEducationCreateNestedManyWithoutProviderInputSchema: z.ZodType<Prisma.ProviderEducationCreateNestedManyWithoutProviderInput> = z.object({
  create: z.union([ z.lazy(() => ProviderEducationCreateWithoutProviderInputSchema),z.lazy(() => ProviderEducationCreateWithoutProviderInputSchema).array(),z.lazy(() => ProviderEducationUncheckedCreateWithoutProviderInputSchema),z.lazy(() => ProviderEducationUncheckedCreateWithoutProviderInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => ProviderEducationCreateOrConnectWithoutProviderInputSchema),z.lazy(() => ProviderEducationCreateOrConnectWithoutProviderInputSchema).array() ]).optional(),
  createMany: z.lazy(() => ProviderEducationCreateManyProviderInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => ProviderEducationWhereUniqueInputSchema),z.lazy(() => ProviderEducationWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const ProviderFavoriteTestCreateNestedManyWithoutProviderInputSchema: z.ZodType<Prisma.ProviderFavoriteTestCreateNestedManyWithoutProviderInput> = z.object({
  create: z.union([ z.lazy(() => ProviderFavoriteTestCreateWithoutProviderInputSchema),z.lazy(() => ProviderFavoriteTestCreateWithoutProviderInputSchema).array(),z.lazy(() => ProviderFavoriteTestUncheckedCreateWithoutProviderInputSchema),z.lazy(() => ProviderFavoriteTestUncheckedCreateWithoutProviderInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => ProviderFavoriteTestCreateOrConnectWithoutProviderInputSchema),z.lazy(() => ProviderFavoriteTestCreateOrConnectWithoutProviderInputSchema).array() ]).optional(),
  createMany: z.lazy(() => ProviderFavoriteTestCreateManyProviderInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => ProviderFavoriteTestWhereUniqueInputSchema),z.lazy(() => ProviderFavoriteTestWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const ProviderOrganizationCreateNestedManyWithoutProviderInputSchema: z.ZodType<Prisma.ProviderOrganizationCreateNestedManyWithoutProviderInput> = z.object({
  create: z.union([ z.lazy(() => ProviderOrganizationCreateWithoutProviderInputSchema),z.lazy(() => ProviderOrganizationCreateWithoutProviderInputSchema).array(),z.lazy(() => ProviderOrganizationUncheckedCreateWithoutProviderInputSchema),z.lazy(() => ProviderOrganizationUncheckedCreateWithoutProviderInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => ProviderOrganizationCreateOrConnectWithoutProviderInputSchema),z.lazy(() => ProviderOrganizationCreateOrConnectWithoutProviderInputSchema).array() ]).optional(),
  createMany: z.lazy(() => ProviderOrganizationCreateManyProviderInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => ProviderOrganizationWhereUniqueInputSchema),z.lazy(() => ProviderOrganizationWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const LabOrderUncheckedCreateNestedManyWithoutOrderingProviderInputSchema: z.ZodType<Prisma.LabOrderUncheckedCreateNestedManyWithoutOrderingProviderInput> = z.object({
  create: z.union([ z.lazy(() => LabOrderCreateWithoutOrderingProviderInputSchema),z.lazy(() => LabOrderCreateWithoutOrderingProviderInputSchema).array(),z.lazy(() => LabOrderUncheckedCreateWithoutOrderingProviderInputSchema),z.lazy(() => LabOrderUncheckedCreateWithoutOrderingProviderInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => LabOrderCreateOrConnectWithoutOrderingProviderInputSchema),z.lazy(() => LabOrderCreateOrConnectWithoutOrderingProviderInputSchema).array() ]).optional(),
  createMany: z.lazy(() => LabOrderCreateManyOrderingProviderInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => LabOrderWhereUniqueInputSchema),z.lazy(() => LabOrderWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const LabOrderUncheckedCreateNestedManyWithoutTreatingProviderInputSchema: z.ZodType<Prisma.LabOrderUncheckedCreateNestedManyWithoutTreatingProviderInput> = z.object({
  create: z.union([ z.lazy(() => LabOrderCreateWithoutTreatingProviderInputSchema),z.lazy(() => LabOrderCreateWithoutTreatingProviderInputSchema).array(),z.lazy(() => LabOrderUncheckedCreateWithoutTreatingProviderInputSchema),z.lazy(() => LabOrderUncheckedCreateWithoutTreatingProviderInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => LabOrderCreateOrConnectWithoutTreatingProviderInputSchema),z.lazy(() => LabOrderCreateOrConnectWithoutTreatingProviderInputSchema).array() ]).optional(),
  createMany: z.lazy(() => LabOrderCreateManyTreatingProviderInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => LabOrderWhereUniqueInputSchema),z.lazy(() => LabOrderWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const ProviderEducationUncheckedCreateNestedManyWithoutProviderInputSchema: z.ZodType<Prisma.ProviderEducationUncheckedCreateNestedManyWithoutProviderInput> = z.object({
  create: z.union([ z.lazy(() => ProviderEducationCreateWithoutProviderInputSchema),z.lazy(() => ProviderEducationCreateWithoutProviderInputSchema).array(),z.lazy(() => ProviderEducationUncheckedCreateWithoutProviderInputSchema),z.lazy(() => ProviderEducationUncheckedCreateWithoutProviderInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => ProviderEducationCreateOrConnectWithoutProviderInputSchema),z.lazy(() => ProviderEducationCreateOrConnectWithoutProviderInputSchema).array() ]).optional(),
  createMany: z.lazy(() => ProviderEducationCreateManyProviderInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => ProviderEducationWhereUniqueInputSchema),z.lazy(() => ProviderEducationWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const ProviderFavoriteTestUncheckedCreateNestedManyWithoutProviderInputSchema: z.ZodType<Prisma.ProviderFavoriteTestUncheckedCreateNestedManyWithoutProviderInput> = z.object({
  create: z.union([ z.lazy(() => ProviderFavoriteTestCreateWithoutProviderInputSchema),z.lazy(() => ProviderFavoriteTestCreateWithoutProviderInputSchema).array(),z.lazy(() => ProviderFavoriteTestUncheckedCreateWithoutProviderInputSchema),z.lazy(() => ProviderFavoriteTestUncheckedCreateWithoutProviderInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => ProviderFavoriteTestCreateOrConnectWithoutProviderInputSchema),z.lazy(() => ProviderFavoriteTestCreateOrConnectWithoutProviderInputSchema).array() ]).optional(),
  createMany: z.lazy(() => ProviderFavoriteTestCreateManyProviderInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => ProviderFavoriteTestWhereUniqueInputSchema),z.lazy(() => ProviderFavoriteTestWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const ProviderOrganizationUncheckedCreateNestedManyWithoutProviderInputSchema: z.ZodType<Prisma.ProviderOrganizationUncheckedCreateNestedManyWithoutProviderInput> = z.object({
  create: z.union([ z.lazy(() => ProviderOrganizationCreateWithoutProviderInputSchema),z.lazy(() => ProviderOrganizationCreateWithoutProviderInputSchema).array(),z.lazy(() => ProviderOrganizationUncheckedCreateWithoutProviderInputSchema),z.lazy(() => ProviderOrganizationUncheckedCreateWithoutProviderInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => ProviderOrganizationCreateOrConnectWithoutProviderInputSchema),z.lazy(() => ProviderOrganizationCreateOrConnectWithoutProviderInputSchema).array() ]).optional(),
  createMany: z.lazy(() => ProviderOrganizationCreateManyProviderInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => ProviderOrganizationWhereUniqueInputSchema),z.lazy(() => ProviderOrganizationWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const LabOrderUpdateManyWithoutOrderingProviderNestedInputSchema: z.ZodType<Prisma.LabOrderUpdateManyWithoutOrderingProviderNestedInput> = z.object({
  create: z.union([ z.lazy(() => LabOrderCreateWithoutOrderingProviderInputSchema),z.lazy(() => LabOrderCreateWithoutOrderingProviderInputSchema).array(),z.lazy(() => LabOrderUncheckedCreateWithoutOrderingProviderInputSchema),z.lazy(() => LabOrderUncheckedCreateWithoutOrderingProviderInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => LabOrderCreateOrConnectWithoutOrderingProviderInputSchema),z.lazy(() => LabOrderCreateOrConnectWithoutOrderingProviderInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => LabOrderUpsertWithWhereUniqueWithoutOrderingProviderInputSchema),z.lazy(() => LabOrderUpsertWithWhereUniqueWithoutOrderingProviderInputSchema).array() ]).optional(),
  createMany: z.lazy(() => LabOrderCreateManyOrderingProviderInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => LabOrderWhereUniqueInputSchema),z.lazy(() => LabOrderWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => LabOrderWhereUniqueInputSchema),z.lazy(() => LabOrderWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => LabOrderWhereUniqueInputSchema),z.lazy(() => LabOrderWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => LabOrderWhereUniqueInputSchema),z.lazy(() => LabOrderWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => LabOrderUpdateWithWhereUniqueWithoutOrderingProviderInputSchema),z.lazy(() => LabOrderUpdateWithWhereUniqueWithoutOrderingProviderInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => LabOrderUpdateManyWithWhereWithoutOrderingProviderInputSchema),z.lazy(() => LabOrderUpdateManyWithWhereWithoutOrderingProviderInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => LabOrderScalarWhereInputSchema),z.lazy(() => LabOrderScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const LabOrderUpdateManyWithoutTreatingProviderNestedInputSchema: z.ZodType<Prisma.LabOrderUpdateManyWithoutTreatingProviderNestedInput> = z.object({
  create: z.union([ z.lazy(() => LabOrderCreateWithoutTreatingProviderInputSchema),z.lazy(() => LabOrderCreateWithoutTreatingProviderInputSchema).array(),z.lazy(() => LabOrderUncheckedCreateWithoutTreatingProviderInputSchema),z.lazy(() => LabOrderUncheckedCreateWithoutTreatingProviderInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => LabOrderCreateOrConnectWithoutTreatingProviderInputSchema),z.lazy(() => LabOrderCreateOrConnectWithoutTreatingProviderInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => LabOrderUpsertWithWhereUniqueWithoutTreatingProviderInputSchema),z.lazy(() => LabOrderUpsertWithWhereUniqueWithoutTreatingProviderInputSchema).array() ]).optional(),
  createMany: z.lazy(() => LabOrderCreateManyTreatingProviderInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => LabOrderWhereUniqueInputSchema),z.lazy(() => LabOrderWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => LabOrderWhereUniqueInputSchema),z.lazy(() => LabOrderWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => LabOrderWhereUniqueInputSchema),z.lazy(() => LabOrderWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => LabOrderWhereUniqueInputSchema),z.lazy(() => LabOrderWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => LabOrderUpdateWithWhereUniqueWithoutTreatingProviderInputSchema),z.lazy(() => LabOrderUpdateWithWhereUniqueWithoutTreatingProviderInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => LabOrderUpdateManyWithWhereWithoutTreatingProviderInputSchema),z.lazy(() => LabOrderUpdateManyWithWhereWithoutTreatingProviderInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => LabOrderScalarWhereInputSchema),z.lazy(() => LabOrderScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const UserAttributeUpdateOneWithoutProviderNestedInputSchema: z.ZodType<Prisma.UserAttributeUpdateOneWithoutProviderNestedInput> = z.object({
  create: z.union([ z.lazy(() => UserAttributeCreateWithoutProviderInputSchema),z.lazy(() => UserAttributeUncheckedCreateWithoutProviderInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => UserAttributeCreateOrConnectWithoutProviderInputSchema).optional(),
  upsert: z.lazy(() => UserAttributeUpsertWithoutProviderInputSchema).optional(),
  disconnect: z.union([ z.boolean(),z.lazy(() => UserAttributeWhereInputSchema) ]).optional(),
  delete: z.union([ z.boolean(),z.lazy(() => UserAttributeWhereInputSchema) ]).optional(),
  connect: z.lazy(() => UserAttributeWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => UserAttributeUpdateToOneWithWhereWithoutProviderInputSchema),z.lazy(() => UserAttributeUpdateWithoutProviderInputSchema),z.lazy(() => UserAttributeUncheckedUpdateWithoutProviderInputSchema) ]).optional(),
}).strict();

export const ProviderEducationUpdateManyWithoutProviderNestedInputSchema: z.ZodType<Prisma.ProviderEducationUpdateManyWithoutProviderNestedInput> = z.object({
  create: z.union([ z.lazy(() => ProviderEducationCreateWithoutProviderInputSchema),z.lazy(() => ProviderEducationCreateWithoutProviderInputSchema).array(),z.lazy(() => ProviderEducationUncheckedCreateWithoutProviderInputSchema),z.lazy(() => ProviderEducationUncheckedCreateWithoutProviderInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => ProviderEducationCreateOrConnectWithoutProviderInputSchema),z.lazy(() => ProviderEducationCreateOrConnectWithoutProviderInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => ProviderEducationUpsertWithWhereUniqueWithoutProviderInputSchema),z.lazy(() => ProviderEducationUpsertWithWhereUniqueWithoutProviderInputSchema).array() ]).optional(),
  createMany: z.lazy(() => ProviderEducationCreateManyProviderInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => ProviderEducationWhereUniqueInputSchema),z.lazy(() => ProviderEducationWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => ProviderEducationWhereUniqueInputSchema),z.lazy(() => ProviderEducationWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => ProviderEducationWhereUniqueInputSchema),z.lazy(() => ProviderEducationWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => ProviderEducationWhereUniqueInputSchema),z.lazy(() => ProviderEducationWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => ProviderEducationUpdateWithWhereUniqueWithoutProviderInputSchema),z.lazy(() => ProviderEducationUpdateWithWhereUniqueWithoutProviderInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => ProviderEducationUpdateManyWithWhereWithoutProviderInputSchema),z.lazy(() => ProviderEducationUpdateManyWithWhereWithoutProviderInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => ProviderEducationScalarWhereInputSchema),z.lazy(() => ProviderEducationScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const ProviderFavoriteTestUpdateManyWithoutProviderNestedInputSchema: z.ZodType<Prisma.ProviderFavoriteTestUpdateManyWithoutProviderNestedInput> = z.object({
  create: z.union([ z.lazy(() => ProviderFavoriteTestCreateWithoutProviderInputSchema),z.lazy(() => ProviderFavoriteTestCreateWithoutProviderInputSchema).array(),z.lazy(() => ProviderFavoriteTestUncheckedCreateWithoutProviderInputSchema),z.lazy(() => ProviderFavoriteTestUncheckedCreateWithoutProviderInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => ProviderFavoriteTestCreateOrConnectWithoutProviderInputSchema),z.lazy(() => ProviderFavoriteTestCreateOrConnectWithoutProviderInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => ProviderFavoriteTestUpsertWithWhereUniqueWithoutProviderInputSchema),z.lazy(() => ProviderFavoriteTestUpsertWithWhereUniqueWithoutProviderInputSchema).array() ]).optional(),
  createMany: z.lazy(() => ProviderFavoriteTestCreateManyProviderInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => ProviderFavoriteTestWhereUniqueInputSchema),z.lazy(() => ProviderFavoriteTestWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => ProviderFavoriteTestWhereUniqueInputSchema),z.lazy(() => ProviderFavoriteTestWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => ProviderFavoriteTestWhereUniqueInputSchema),z.lazy(() => ProviderFavoriteTestWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => ProviderFavoriteTestWhereUniqueInputSchema),z.lazy(() => ProviderFavoriteTestWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => ProviderFavoriteTestUpdateWithWhereUniqueWithoutProviderInputSchema),z.lazy(() => ProviderFavoriteTestUpdateWithWhereUniqueWithoutProviderInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => ProviderFavoriteTestUpdateManyWithWhereWithoutProviderInputSchema),z.lazy(() => ProviderFavoriteTestUpdateManyWithWhereWithoutProviderInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => ProviderFavoriteTestScalarWhereInputSchema),z.lazy(() => ProviderFavoriteTestScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const ProviderOrganizationUpdateManyWithoutProviderNestedInputSchema: z.ZodType<Prisma.ProviderOrganizationUpdateManyWithoutProviderNestedInput> = z.object({
  create: z.union([ z.lazy(() => ProviderOrganizationCreateWithoutProviderInputSchema),z.lazy(() => ProviderOrganizationCreateWithoutProviderInputSchema).array(),z.lazy(() => ProviderOrganizationUncheckedCreateWithoutProviderInputSchema),z.lazy(() => ProviderOrganizationUncheckedCreateWithoutProviderInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => ProviderOrganizationCreateOrConnectWithoutProviderInputSchema),z.lazy(() => ProviderOrganizationCreateOrConnectWithoutProviderInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => ProviderOrganizationUpsertWithWhereUniqueWithoutProviderInputSchema),z.lazy(() => ProviderOrganizationUpsertWithWhereUniqueWithoutProviderInputSchema).array() ]).optional(),
  createMany: z.lazy(() => ProviderOrganizationCreateManyProviderInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => ProviderOrganizationWhereUniqueInputSchema),z.lazy(() => ProviderOrganizationWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => ProviderOrganizationWhereUniqueInputSchema),z.lazy(() => ProviderOrganizationWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => ProviderOrganizationWhereUniqueInputSchema),z.lazy(() => ProviderOrganizationWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => ProviderOrganizationWhereUniqueInputSchema),z.lazy(() => ProviderOrganizationWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => ProviderOrganizationUpdateWithWhereUniqueWithoutProviderInputSchema),z.lazy(() => ProviderOrganizationUpdateWithWhereUniqueWithoutProviderInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => ProviderOrganizationUpdateManyWithWhereWithoutProviderInputSchema),z.lazy(() => ProviderOrganizationUpdateManyWithWhereWithoutProviderInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => ProviderOrganizationScalarWhereInputSchema),z.lazy(() => ProviderOrganizationScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const LabOrderUncheckedUpdateManyWithoutOrderingProviderNestedInputSchema: z.ZodType<Prisma.LabOrderUncheckedUpdateManyWithoutOrderingProviderNestedInput> = z.object({
  create: z.union([ z.lazy(() => LabOrderCreateWithoutOrderingProviderInputSchema),z.lazy(() => LabOrderCreateWithoutOrderingProviderInputSchema).array(),z.lazy(() => LabOrderUncheckedCreateWithoutOrderingProviderInputSchema),z.lazy(() => LabOrderUncheckedCreateWithoutOrderingProviderInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => LabOrderCreateOrConnectWithoutOrderingProviderInputSchema),z.lazy(() => LabOrderCreateOrConnectWithoutOrderingProviderInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => LabOrderUpsertWithWhereUniqueWithoutOrderingProviderInputSchema),z.lazy(() => LabOrderUpsertWithWhereUniqueWithoutOrderingProviderInputSchema).array() ]).optional(),
  createMany: z.lazy(() => LabOrderCreateManyOrderingProviderInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => LabOrderWhereUniqueInputSchema),z.lazy(() => LabOrderWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => LabOrderWhereUniqueInputSchema),z.lazy(() => LabOrderWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => LabOrderWhereUniqueInputSchema),z.lazy(() => LabOrderWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => LabOrderWhereUniqueInputSchema),z.lazy(() => LabOrderWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => LabOrderUpdateWithWhereUniqueWithoutOrderingProviderInputSchema),z.lazy(() => LabOrderUpdateWithWhereUniqueWithoutOrderingProviderInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => LabOrderUpdateManyWithWhereWithoutOrderingProviderInputSchema),z.lazy(() => LabOrderUpdateManyWithWhereWithoutOrderingProviderInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => LabOrderScalarWhereInputSchema),z.lazy(() => LabOrderScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const LabOrderUncheckedUpdateManyWithoutTreatingProviderNestedInputSchema: z.ZodType<Prisma.LabOrderUncheckedUpdateManyWithoutTreatingProviderNestedInput> = z.object({
  create: z.union([ z.lazy(() => LabOrderCreateWithoutTreatingProviderInputSchema),z.lazy(() => LabOrderCreateWithoutTreatingProviderInputSchema).array(),z.lazy(() => LabOrderUncheckedCreateWithoutTreatingProviderInputSchema),z.lazy(() => LabOrderUncheckedCreateWithoutTreatingProviderInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => LabOrderCreateOrConnectWithoutTreatingProviderInputSchema),z.lazy(() => LabOrderCreateOrConnectWithoutTreatingProviderInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => LabOrderUpsertWithWhereUniqueWithoutTreatingProviderInputSchema),z.lazy(() => LabOrderUpsertWithWhereUniqueWithoutTreatingProviderInputSchema).array() ]).optional(),
  createMany: z.lazy(() => LabOrderCreateManyTreatingProviderInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => LabOrderWhereUniqueInputSchema),z.lazy(() => LabOrderWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => LabOrderWhereUniqueInputSchema),z.lazy(() => LabOrderWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => LabOrderWhereUniqueInputSchema),z.lazy(() => LabOrderWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => LabOrderWhereUniqueInputSchema),z.lazy(() => LabOrderWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => LabOrderUpdateWithWhereUniqueWithoutTreatingProviderInputSchema),z.lazy(() => LabOrderUpdateWithWhereUniqueWithoutTreatingProviderInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => LabOrderUpdateManyWithWhereWithoutTreatingProviderInputSchema),z.lazy(() => LabOrderUpdateManyWithWhereWithoutTreatingProviderInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => LabOrderScalarWhereInputSchema),z.lazy(() => LabOrderScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const ProviderEducationUncheckedUpdateManyWithoutProviderNestedInputSchema: z.ZodType<Prisma.ProviderEducationUncheckedUpdateManyWithoutProviderNestedInput> = z.object({
  create: z.union([ z.lazy(() => ProviderEducationCreateWithoutProviderInputSchema),z.lazy(() => ProviderEducationCreateWithoutProviderInputSchema).array(),z.lazy(() => ProviderEducationUncheckedCreateWithoutProviderInputSchema),z.lazy(() => ProviderEducationUncheckedCreateWithoutProviderInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => ProviderEducationCreateOrConnectWithoutProviderInputSchema),z.lazy(() => ProviderEducationCreateOrConnectWithoutProviderInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => ProviderEducationUpsertWithWhereUniqueWithoutProviderInputSchema),z.lazy(() => ProviderEducationUpsertWithWhereUniqueWithoutProviderInputSchema).array() ]).optional(),
  createMany: z.lazy(() => ProviderEducationCreateManyProviderInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => ProviderEducationWhereUniqueInputSchema),z.lazy(() => ProviderEducationWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => ProviderEducationWhereUniqueInputSchema),z.lazy(() => ProviderEducationWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => ProviderEducationWhereUniqueInputSchema),z.lazy(() => ProviderEducationWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => ProviderEducationWhereUniqueInputSchema),z.lazy(() => ProviderEducationWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => ProviderEducationUpdateWithWhereUniqueWithoutProviderInputSchema),z.lazy(() => ProviderEducationUpdateWithWhereUniqueWithoutProviderInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => ProviderEducationUpdateManyWithWhereWithoutProviderInputSchema),z.lazy(() => ProviderEducationUpdateManyWithWhereWithoutProviderInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => ProviderEducationScalarWhereInputSchema),z.lazy(() => ProviderEducationScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const ProviderFavoriteTestUncheckedUpdateManyWithoutProviderNestedInputSchema: z.ZodType<Prisma.ProviderFavoriteTestUncheckedUpdateManyWithoutProviderNestedInput> = z.object({
  create: z.union([ z.lazy(() => ProviderFavoriteTestCreateWithoutProviderInputSchema),z.lazy(() => ProviderFavoriteTestCreateWithoutProviderInputSchema).array(),z.lazy(() => ProviderFavoriteTestUncheckedCreateWithoutProviderInputSchema),z.lazy(() => ProviderFavoriteTestUncheckedCreateWithoutProviderInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => ProviderFavoriteTestCreateOrConnectWithoutProviderInputSchema),z.lazy(() => ProviderFavoriteTestCreateOrConnectWithoutProviderInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => ProviderFavoriteTestUpsertWithWhereUniqueWithoutProviderInputSchema),z.lazy(() => ProviderFavoriteTestUpsertWithWhereUniqueWithoutProviderInputSchema).array() ]).optional(),
  createMany: z.lazy(() => ProviderFavoriteTestCreateManyProviderInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => ProviderFavoriteTestWhereUniqueInputSchema),z.lazy(() => ProviderFavoriteTestWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => ProviderFavoriteTestWhereUniqueInputSchema),z.lazy(() => ProviderFavoriteTestWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => ProviderFavoriteTestWhereUniqueInputSchema),z.lazy(() => ProviderFavoriteTestWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => ProviderFavoriteTestWhereUniqueInputSchema),z.lazy(() => ProviderFavoriteTestWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => ProviderFavoriteTestUpdateWithWhereUniqueWithoutProviderInputSchema),z.lazy(() => ProviderFavoriteTestUpdateWithWhereUniqueWithoutProviderInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => ProviderFavoriteTestUpdateManyWithWhereWithoutProviderInputSchema),z.lazy(() => ProviderFavoriteTestUpdateManyWithWhereWithoutProviderInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => ProviderFavoriteTestScalarWhereInputSchema),z.lazy(() => ProviderFavoriteTestScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const ProviderOrganizationUncheckedUpdateManyWithoutProviderNestedInputSchema: z.ZodType<Prisma.ProviderOrganizationUncheckedUpdateManyWithoutProviderNestedInput> = z.object({
  create: z.union([ z.lazy(() => ProviderOrganizationCreateWithoutProviderInputSchema),z.lazy(() => ProviderOrganizationCreateWithoutProviderInputSchema).array(),z.lazy(() => ProviderOrganizationUncheckedCreateWithoutProviderInputSchema),z.lazy(() => ProviderOrganizationUncheckedCreateWithoutProviderInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => ProviderOrganizationCreateOrConnectWithoutProviderInputSchema),z.lazy(() => ProviderOrganizationCreateOrConnectWithoutProviderInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => ProviderOrganizationUpsertWithWhereUniqueWithoutProviderInputSchema),z.lazy(() => ProviderOrganizationUpsertWithWhereUniqueWithoutProviderInputSchema).array() ]).optional(),
  createMany: z.lazy(() => ProviderOrganizationCreateManyProviderInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => ProviderOrganizationWhereUniqueInputSchema),z.lazy(() => ProviderOrganizationWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => ProviderOrganizationWhereUniqueInputSchema),z.lazy(() => ProviderOrganizationWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => ProviderOrganizationWhereUniqueInputSchema),z.lazy(() => ProviderOrganizationWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => ProviderOrganizationWhereUniqueInputSchema),z.lazy(() => ProviderOrganizationWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => ProviderOrganizationUpdateWithWhereUniqueWithoutProviderInputSchema),z.lazy(() => ProviderOrganizationUpdateWithWhereUniqueWithoutProviderInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => ProviderOrganizationUpdateManyWithWhereWithoutProviderInputSchema),z.lazy(() => ProviderOrganizationUpdateManyWithWhereWithoutProviderInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => ProviderOrganizationScalarWhereInputSchema),z.lazy(() => ProviderOrganizationScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const ProviderCreateNestedOneWithoutProviderEducationInputSchema: z.ZodType<Prisma.ProviderCreateNestedOneWithoutProviderEducationInput> = z.object({
  create: z.union([ z.lazy(() => ProviderCreateWithoutProviderEducationInputSchema),z.lazy(() => ProviderUncheckedCreateWithoutProviderEducationInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => ProviderCreateOrConnectWithoutProviderEducationInputSchema).optional(),
  connect: z.lazy(() => ProviderWhereUniqueInputSchema).optional()
}).strict();

export const ProviderUpdateOneRequiredWithoutProviderEducationNestedInputSchema: z.ZodType<Prisma.ProviderUpdateOneRequiredWithoutProviderEducationNestedInput> = z.object({
  create: z.union([ z.lazy(() => ProviderCreateWithoutProviderEducationInputSchema),z.lazy(() => ProviderUncheckedCreateWithoutProviderEducationInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => ProviderCreateOrConnectWithoutProviderEducationInputSchema).optional(),
  upsert: z.lazy(() => ProviderUpsertWithoutProviderEducationInputSchema).optional(),
  connect: z.lazy(() => ProviderWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => ProviderUpdateToOneWithWhereWithoutProviderEducationInputSchema),z.lazy(() => ProviderUpdateWithoutProviderEducationInputSchema),z.lazy(() => ProviderUncheckedUpdateWithoutProviderEducationInputSchema) ]).optional(),
}).strict();

export const ProviderCreateNestedOneWithoutProviderFavoriteTestInputSchema: z.ZodType<Prisma.ProviderCreateNestedOneWithoutProviderFavoriteTestInput> = z.object({
  create: z.union([ z.lazy(() => ProviderCreateWithoutProviderFavoriteTestInputSchema),z.lazy(() => ProviderUncheckedCreateWithoutProviderFavoriteTestInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => ProviderCreateOrConnectWithoutProviderFavoriteTestInputSchema).optional(),
  connect: z.lazy(() => ProviderWhereUniqueInputSchema).optional()
}).strict();

export const TestCatalogCreateNestedOneWithoutProviderFavoriteTestInputSchema: z.ZodType<Prisma.TestCatalogCreateNestedOneWithoutProviderFavoriteTestInput> = z.object({
  create: z.union([ z.lazy(() => TestCatalogCreateWithoutProviderFavoriteTestInputSchema),z.lazy(() => TestCatalogUncheckedCreateWithoutProviderFavoriteTestInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => TestCatalogCreateOrConnectWithoutProviderFavoriteTestInputSchema).optional(),
  connect: z.lazy(() => TestCatalogWhereUniqueInputSchema).optional()
}).strict();

export const ProviderUpdateOneWithoutProviderFavoriteTestNestedInputSchema: z.ZodType<Prisma.ProviderUpdateOneWithoutProviderFavoriteTestNestedInput> = z.object({
  create: z.union([ z.lazy(() => ProviderCreateWithoutProviderFavoriteTestInputSchema),z.lazy(() => ProviderUncheckedCreateWithoutProviderFavoriteTestInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => ProviderCreateOrConnectWithoutProviderFavoriteTestInputSchema).optional(),
  upsert: z.lazy(() => ProviderUpsertWithoutProviderFavoriteTestInputSchema).optional(),
  disconnect: z.union([ z.boolean(),z.lazy(() => ProviderWhereInputSchema) ]).optional(),
  delete: z.union([ z.boolean(),z.lazy(() => ProviderWhereInputSchema) ]).optional(),
  connect: z.lazy(() => ProviderWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => ProviderUpdateToOneWithWhereWithoutProviderFavoriteTestInputSchema),z.lazy(() => ProviderUpdateWithoutProviderFavoriteTestInputSchema),z.lazy(() => ProviderUncheckedUpdateWithoutProviderFavoriteTestInputSchema) ]).optional(),
}).strict();

export const TestCatalogUpdateOneWithoutProviderFavoriteTestNestedInputSchema: z.ZodType<Prisma.TestCatalogUpdateOneWithoutProviderFavoriteTestNestedInput> = z.object({
  create: z.union([ z.lazy(() => TestCatalogCreateWithoutProviderFavoriteTestInputSchema),z.lazy(() => TestCatalogUncheckedCreateWithoutProviderFavoriteTestInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => TestCatalogCreateOrConnectWithoutProviderFavoriteTestInputSchema).optional(),
  upsert: z.lazy(() => TestCatalogUpsertWithoutProviderFavoriteTestInputSchema).optional(),
  disconnect: z.union([ z.boolean(),z.lazy(() => TestCatalogWhereInputSchema) ]).optional(),
  delete: z.union([ z.boolean(),z.lazy(() => TestCatalogWhereInputSchema) ]).optional(),
  connect: z.lazy(() => TestCatalogWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => TestCatalogUpdateToOneWithWhereWithoutProviderFavoriteTestInputSchema),z.lazy(() => TestCatalogUpdateWithoutProviderFavoriteTestInputSchema),z.lazy(() => TestCatalogUncheckedUpdateWithoutProviderFavoriteTestInputSchema) ]).optional(),
}).strict();

export const OrganizationCreateNestedOneWithoutProviderOrganizationInputSchema: z.ZodType<Prisma.OrganizationCreateNestedOneWithoutProviderOrganizationInput> = z.object({
  create: z.union([ z.lazy(() => OrganizationCreateWithoutProviderOrganizationInputSchema),z.lazy(() => OrganizationUncheckedCreateWithoutProviderOrganizationInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => OrganizationCreateOrConnectWithoutProviderOrganizationInputSchema).optional(),
  connect: z.lazy(() => OrganizationWhereUniqueInputSchema).optional()
}).strict();

export const ProviderCreateNestedOneWithoutProviderOrganizationInputSchema: z.ZodType<Prisma.ProviderCreateNestedOneWithoutProviderOrganizationInput> = z.object({
  create: z.union([ z.lazy(() => ProviderCreateWithoutProviderOrganizationInputSchema),z.lazy(() => ProviderUncheckedCreateWithoutProviderOrganizationInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => ProviderCreateOrConnectWithoutProviderOrganizationInputSchema).optional(),
  connect: z.lazy(() => ProviderWhereUniqueInputSchema).optional()
}).strict();

export const OrganizationUpdateOneRequiredWithoutProviderOrganizationNestedInputSchema: z.ZodType<Prisma.OrganizationUpdateOneRequiredWithoutProviderOrganizationNestedInput> = z.object({
  create: z.union([ z.lazy(() => OrganizationCreateWithoutProviderOrganizationInputSchema),z.lazy(() => OrganizationUncheckedCreateWithoutProviderOrganizationInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => OrganizationCreateOrConnectWithoutProviderOrganizationInputSchema).optional(),
  upsert: z.lazy(() => OrganizationUpsertWithoutProviderOrganizationInputSchema).optional(),
  connect: z.lazy(() => OrganizationWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => OrganizationUpdateToOneWithWhereWithoutProviderOrganizationInputSchema),z.lazy(() => OrganizationUpdateWithoutProviderOrganizationInputSchema),z.lazy(() => OrganizationUncheckedUpdateWithoutProviderOrganizationInputSchema) ]).optional(),
}).strict();

export const ProviderUpdateOneRequiredWithoutProviderOrganizationNestedInputSchema: z.ZodType<Prisma.ProviderUpdateOneRequiredWithoutProviderOrganizationNestedInput> = z.object({
  create: z.union([ z.lazy(() => ProviderCreateWithoutProviderOrganizationInputSchema),z.lazy(() => ProviderUncheckedCreateWithoutProviderOrganizationInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => ProviderCreateOrConnectWithoutProviderOrganizationInputSchema).optional(),
  upsert: z.lazy(() => ProviderUpsertWithoutProviderOrganizationInputSchema).optional(),
  connect: z.lazy(() => ProviderWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => ProviderUpdateToOneWithWhereWithoutProviderOrganizationInputSchema),z.lazy(() => ProviderUpdateWithoutProviderOrganizationInputSchema),z.lazy(() => ProviderUncheckedUpdateWithoutProviderOrganizationInputSchema) ]).optional(),
}).strict();

export const UserCreateNestedOneWithoutSessionInputSchema: z.ZodType<Prisma.UserCreateNestedOneWithoutSessionInput> = z.object({
  create: z.union([ z.lazy(() => UserCreateWithoutSessionInputSchema),z.lazy(() => UserUncheckedCreateWithoutSessionInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => UserCreateOrConnectWithoutSessionInputSchema).optional(),
  connect: z.lazy(() => UserWhereUniqueInputSchema).optional()
}).strict();

export const UserUpdateOneRequiredWithoutSessionNestedInputSchema: z.ZodType<Prisma.UserUpdateOneRequiredWithoutSessionNestedInput> = z.object({
  create: z.union([ z.lazy(() => UserCreateWithoutSessionInputSchema),z.lazy(() => UserUncheckedCreateWithoutSessionInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => UserCreateOrConnectWithoutSessionInputSchema).optional(),
  upsert: z.lazy(() => UserUpsertWithoutSessionInputSchema).optional(),
  connect: z.lazy(() => UserWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => UserUpdateToOneWithWhereWithoutSessionInputSchema),z.lazy(() => UserUpdateWithoutSessionInputSchema),z.lazy(() => UserUncheckedUpdateWithoutSessionInputSchema) ]).optional(),
}).strict();

export const SponsoredProgramCreateNestedManyWithoutSponsorInputSchema: z.ZodType<Prisma.SponsoredProgramCreateNestedManyWithoutSponsorInput> = z.object({
  create: z.union([ z.lazy(() => SponsoredProgramCreateWithoutSponsorInputSchema),z.lazy(() => SponsoredProgramCreateWithoutSponsorInputSchema).array(),z.lazy(() => SponsoredProgramUncheckedCreateWithoutSponsorInputSchema),z.lazy(() => SponsoredProgramUncheckedCreateWithoutSponsorInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => SponsoredProgramCreateOrConnectWithoutSponsorInputSchema),z.lazy(() => SponsoredProgramCreateOrConnectWithoutSponsorInputSchema).array() ]).optional(),
  createMany: z.lazy(() => SponsoredProgramCreateManySponsorInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => SponsoredProgramWhereUniqueInputSchema),z.lazy(() => SponsoredProgramWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const SponsoredProgramUncheckedCreateNestedManyWithoutSponsorInputSchema: z.ZodType<Prisma.SponsoredProgramUncheckedCreateNestedManyWithoutSponsorInput> = z.object({
  create: z.union([ z.lazy(() => SponsoredProgramCreateWithoutSponsorInputSchema),z.lazy(() => SponsoredProgramCreateWithoutSponsorInputSchema).array(),z.lazy(() => SponsoredProgramUncheckedCreateWithoutSponsorInputSchema),z.lazy(() => SponsoredProgramUncheckedCreateWithoutSponsorInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => SponsoredProgramCreateOrConnectWithoutSponsorInputSchema),z.lazy(() => SponsoredProgramCreateOrConnectWithoutSponsorInputSchema).array() ]).optional(),
  createMany: z.lazy(() => SponsoredProgramCreateManySponsorInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => SponsoredProgramWhereUniqueInputSchema),z.lazy(() => SponsoredProgramWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const SponsoredProgramUpdateManyWithoutSponsorNestedInputSchema: z.ZodType<Prisma.SponsoredProgramUpdateManyWithoutSponsorNestedInput> = z.object({
  create: z.union([ z.lazy(() => SponsoredProgramCreateWithoutSponsorInputSchema),z.lazy(() => SponsoredProgramCreateWithoutSponsorInputSchema).array(),z.lazy(() => SponsoredProgramUncheckedCreateWithoutSponsorInputSchema),z.lazy(() => SponsoredProgramUncheckedCreateWithoutSponsorInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => SponsoredProgramCreateOrConnectWithoutSponsorInputSchema),z.lazy(() => SponsoredProgramCreateOrConnectWithoutSponsorInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => SponsoredProgramUpsertWithWhereUniqueWithoutSponsorInputSchema),z.lazy(() => SponsoredProgramUpsertWithWhereUniqueWithoutSponsorInputSchema).array() ]).optional(),
  createMany: z.lazy(() => SponsoredProgramCreateManySponsorInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => SponsoredProgramWhereUniqueInputSchema),z.lazy(() => SponsoredProgramWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => SponsoredProgramWhereUniqueInputSchema),z.lazy(() => SponsoredProgramWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => SponsoredProgramWhereUniqueInputSchema),z.lazy(() => SponsoredProgramWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => SponsoredProgramWhereUniqueInputSchema),z.lazy(() => SponsoredProgramWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => SponsoredProgramUpdateWithWhereUniqueWithoutSponsorInputSchema),z.lazy(() => SponsoredProgramUpdateWithWhereUniqueWithoutSponsorInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => SponsoredProgramUpdateManyWithWhereWithoutSponsorInputSchema),z.lazy(() => SponsoredProgramUpdateManyWithWhereWithoutSponsorInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => SponsoredProgramScalarWhereInputSchema),z.lazy(() => SponsoredProgramScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const SponsoredProgramUncheckedUpdateManyWithoutSponsorNestedInputSchema: z.ZodType<Prisma.SponsoredProgramUncheckedUpdateManyWithoutSponsorNestedInput> = z.object({
  create: z.union([ z.lazy(() => SponsoredProgramCreateWithoutSponsorInputSchema),z.lazy(() => SponsoredProgramCreateWithoutSponsorInputSchema).array(),z.lazy(() => SponsoredProgramUncheckedCreateWithoutSponsorInputSchema),z.lazy(() => SponsoredProgramUncheckedCreateWithoutSponsorInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => SponsoredProgramCreateOrConnectWithoutSponsorInputSchema),z.lazy(() => SponsoredProgramCreateOrConnectWithoutSponsorInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => SponsoredProgramUpsertWithWhereUniqueWithoutSponsorInputSchema),z.lazy(() => SponsoredProgramUpsertWithWhereUniqueWithoutSponsorInputSchema).array() ]).optional(),
  createMany: z.lazy(() => SponsoredProgramCreateManySponsorInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => SponsoredProgramWhereUniqueInputSchema),z.lazy(() => SponsoredProgramWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => SponsoredProgramWhereUniqueInputSchema),z.lazy(() => SponsoredProgramWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => SponsoredProgramWhereUniqueInputSchema),z.lazy(() => SponsoredProgramWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => SponsoredProgramWhereUniqueInputSchema),z.lazy(() => SponsoredProgramWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => SponsoredProgramUpdateWithWhereUniqueWithoutSponsorInputSchema),z.lazy(() => SponsoredProgramUpdateWithWhereUniqueWithoutSponsorInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => SponsoredProgramUpdateManyWithWhereWithoutSponsorInputSchema),z.lazy(() => SponsoredProgramUpdateManyWithWhereWithoutSponsorInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => SponsoredProgramScalarWhereInputSchema),z.lazy(() => SponsoredProgramScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const SponsorCreateNestedOneWithoutSponsoredProgramInputSchema: z.ZodType<Prisma.SponsorCreateNestedOneWithoutSponsoredProgramInput> = z.object({
  create: z.union([ z.lazy(() => SponsorCreateWithoutSponsoredProgramInputSchema),z.lazy(() => SponsorUncheckedCreateWithoutSponsoredProgramInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => SponsorCreateOrConnectWithoutSponsoredProgramInputSchema).optional(),
  connect: z.lazy(() => SponsorWhereUniqueInputSchema).optional()
}).strict();

export const SponsoredTestCreateNestedManyWithoutSponsoredProgramInputSchema: z.ZodType<Prisma.SponsoredTestCreateNestedManyWithoutSponsoredProgramInput> = z.object({
  create: z.union([ z.lazy(() => SponsoredTestCreateWithoutSponsoredProgramInputSchema),z.lazy(() => SponsoredTestCreateWithoutSponsoredProgramInputSchema).array(),z.lazy(() => SponsoredTestUncheckedCreateWithoutSponsoredProgramInputSchema),z.lazy(() => SponsoredTestUncheckedCreateWithoutSponsoredProgramInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => SponsoredTestCreateOrConnectWithoutSponsoredProgramInputSchema),z.lazy(() => SponsoredTestCreateOrConnectWithoutSponsoredProgramInputSchema).array() ]).optional(),
  createMany: z.lazy(() => SponsoredTestCreateManySponsoredProgramInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => SponsoredTestWhereUniqueInputSchema),z.lazy(() => SponsoredTestWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const SponsoredTestUncheckedCreateNestedManyWithoutSponsoredProgramInputSchema: z.ZodType<Prisma.SponsoredTestUncheckedCreateNestedManyWithoutSponsoredProgramInput> = z.object({
  create: z.union([ z.lazy(() => SponsoredTestCreateWithoutSponsoredProgramInputSchema),z.lazy(() => SponsoredTestCreateWithoutSponsoredProgramInputSchema).array(),z.lazy(() => SponsoredTestUncheckedCreateWithoutSponsoredProgramInputSchema),z.lazy(() => SponsoredTestUncheckedCreateWithoutSponsoredProgramInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => SponsoredTestCreateOrConnectWithoutSponsoredProgramInputSchema),z.lazy(() => SponsoredTestCreateOrConnectWithoutSponsoredProgramInputSchema).array() ]).optional(),
  createMany: z.lazy(() => SponsoredTestCreateManySponsoredProgramInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => SponsoredTestWhereUniqueInputSchema),z.lazy(() => SponsoredTestWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const SponsorUpdateOneWithoutSponsoredProgramNestedInputSchema: z.ZodType<Prisma.SponsorUpdateOneWithoutSponsoredProgramNestedInput> = z.object({
  create: z.union([ z.lazy(() => SponsorCreateWithoutSponsoredProgramInputSchema),z.lazy(() => SponsorUncheckedCreateWithoutSponsoredProgramInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => SponsorCreateOrConnectWithoutSponsoredProgramInputSchema).optional(),
  upsert: z.lazy(() => SponsorUpsertWithoutSponsoredProgramInputSchema).optional(),
  disconnect: z.union([ z.boolean(),z.lazy(() => SponsorWhereInputSchema) ]).optional(),
  delete: z.union([ z.boolean(),z.lazy(() => SponsorWhereInputSchema) ]).optional(),
  connect: z.lazy(() => SponsorWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => SponsorUpdateToOneWithWhereWithoutSponsoredProgramInputSchema),z.lazy(() => SponsorUpdateWithoutSponsoredProgramInputSchema),z.lazy(() => SponsorUncheckedUpdateWithoutSponsoredProgramInputSchema) ]).optional(),
}).strict();

export const SponsoredTestUpdateManyWithoutSponsoredProgramNestedInputSchema: z.ZodType<Prisma.SponsoredTestUpdateManyWithoutSponsoredProgramNestedInput> = z.object({
  create: z.union([ z.lazy(() => SponsoredTestCreateWithoutSponsoredProgramInputSchema),z.lazy(() => SponsoredTestCreateWithoutSponsoredProgramInputSchema).array(),z.lazy(() => SponsoredTestUncheckedCreateWithoutSponsoredProgramInputSchema),z.lazy(() => SponsoredTestUncheckedCreateWithoutSponsoredProgramInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => SponsoredTestCreateOrConnectWithoutSponsoredProgramInputSchema),z.lazy(() => SponsoredTestCreateOrConnectWithoutSponsoredProgramInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => SponsoredTestUpsertWithWhereUniqueWithoutSponsoredProgramInputSchema),z.lazy(() => SponsoredTestUpsertWithWhereUniqueWithoutSponsoredProgramInputSchema).array() ]).optional(),
  createMany: z.lazy(() => SponsoredTestCreateManySponsoredProgramInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => SponsoredTestWhereUniqueInputSchema),z.lazy(() => SponsoredTestWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => SponsoredTestWhereUniqueInputSchema),z.lazy(() => SponsoredTestWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => SponsoredTestWhereUniqueInputSchema),z.lazy(() => SponsoredTestWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => SponsoredTestWhereUniqueInputSchema),z.lazy(() => SponsoredTestWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => SponsoredTestUpdateWithWhereUniqueWithoutSponsoredProgramInputSchema),z.lazy(() => SponsoredTestUpdateWithWhereUniqueWithoutSponsoredProgramInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => SponsoredTestUpdateManyWithWhereWithoutSponsoredProgramInputSchema),z.lazy(() => SponsoredTestUpdateManyWithWhereWithoutSponsoredProgramInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => SponsoredTestScalarWhereInputSchema),z.lazy(() => SponsoredTestScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const SponsoredTestUncheckedUpdateManyWithoutSponsoredProgramNestedInputSchema: z.ZodType<Prisma.SponsoredTestUncheckedUpdateManyWithoutSponsoredProgramNestedInput> = z.object({
  create: z.union([ z.lazy(() => SponsoredTestCreateWithoutSponsoredProgramInputSchema),z.lazy(() => SponsoredTestCreateWithoutSponsoredProgramInputSchema).array(),z.lazy(() => SponsoredTestUncheckedCreateWithoutSponsoredProgramInputSchema),z.lazy(() => SponsoredTestUncheckedCreateWithoutSponsoredProgramInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => SponsoredTestCreateOrConnectWithoutSponsoredProgramInputSchema),z.lazy(() => SponsoredTestCreateOrConnectWithoutSponsoredProgramInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => SponsoredTestUpsertWithWhereUniqueWithoutSponsoredProgramInputSchema),z.lazy(() => SponsoredTestUpsertWithWhereUniqueWithoutSponsoredProgramInputSchema).array() ]).optional(),
  createMany: z.lazy(() => SponsoredTestCreateManySponsoredProgramInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => SponsoredTestWhereUniqueInputSchema),z.lazy(() => SponsoredTestWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => SponsoredTestWhereUniqueInputSchema),z.lazy(() => SponsoredTestWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => SponsoredTestWhereUniqueInputSchema),z.lazy(() => SponsoredTestWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => SponsoredTestWhereUniqueInputSchema),z.lazy(() => SponsoredTestWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => SponsoredTestUpdateWithWhereUniqueWithoutSponsoredProgramInputSchema),z.lazy(() => SponsoredTestUpdateWithWhereUniqueWithoutSponsoredProgramInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => SponsoredTestUpdateManyWithWhereWithoutSponsoredProgramInputSchema),z.lazy(() => SponsoredTestUpdateManyWithWhereWithoutSponsoredProgramInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => SponsoredTestScalarWhereInputSchema),z.lazy(() => SponsoredTestScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const LabOrderSponsoredTestConsentCreateNestedManyWithoutSponsoredTestInputSchema: z.ZodType<Prisma.LabOrderSponsoredTestConsentCreateNestedManyWithoutSponsoredTestInput> = z.object({
  create: z.union([ z.lazy(() => LabOrderSponsoredTestConsentCreateWithoutSponsoredTestInputSchema),z.lazy(() => LabOrderSponsoredTestConsentCreateWithoutSponsoredTestInputSchema).array(),z.lazy(() => LabOrderSponsoredTestConsentUncheckedCreateWithoutSponsoredTestInputSchema),z.lazy(() => LabOrderSponsoredTestConsentUncheckedCreateWithoutSponsoredTestInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => LabOrderSponsoredTestConsentCreateOrConnectWithoutSponsoredTestInputSchema),z.lazy(() => LabOrderSponsoredTestConsentCreateOrConnectWithoutSponsoredTestInputSchema).array() ]).optional(),
  createMany: z.lazy(() => LabOrderSponsoredTestConsentCreateManySponsoredTestInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => LabOrderSponsoredTestConsentWhereUniqueInputSchema),z.lazy(() => LabOrderSponsoredTestConsentWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const LabCreateNestedOneWithoutSponsoredTestInputSchema: z.ZodType<Prisma.LabCreateNestedOneWithoutSponsoredTestInput> = z.object({
  create: z.union([ z.lazy(() => LabCreateWithoutSponsoredTestInputSchema),z.lazy(() => LabUncheckedCreateWithoutSponsoredTestInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => LabCreateOrConnectWithoutSponsoredTestInputSchema).optional(),
  connect: z.lazy(() => LabWhereUniqueInputSchema).optional()
}).strict();

export const SponsoredProgramCreateNestedOneWithoutSponsoredTestInputSchema: z.ZodType<Prisma.SponsoredProgramCreateNestedOneWithoutSponsoredTestInput> = z.object({
  create: z.union([ z.lazy(() => SponsoredProgramCreateWithoutSponsoredTestInputSchema),z.lazy(() => SponsoredProgramUncheckedCreateWithoutSponsoredTestInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => SponsoredProgramCreateOrConnectWithoutSponsoredTestInputSchema).optional(),
  connect: z.lazy(() => SponsoredProgramWhereUniqueInputSchema).optional()
}).strict();

export const TestCatalogCreateNestedOneWithoutSponsoredTestInputSchema: z.ZodType<Prisma.TestCatalogCreateNestedOneWithoutSponsoredTestInput> = z.object({
  create: z.union([ z.lazy(() => TestCatalogCreateWithoutSponsoredTestInputSchema),z.lazy(() => TestCatalogUncheckedCreateWithoutSponsoredTestInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => TestCatalogCreateOrConnectWithoutSponsoredTestInputSchema).optional(),
  connect: z.lazy(() => TestCatalogWhereUniqueInputSchema).optional()
}).strict();

export const LabOrderSponsoredTestConsentUncheckedCreateNestedManyWithoutSponsoredTestInputSchema: z.ZodType<Prisma.LabOrderSponsoredTestConsentUncheckedCreateNestedManyWithoutSponsoredTestInput> = z.object({
  create: z.union([ z.lazy(() => LabOrderSponsoredTestConsentCreateWithoutSponsoredTestInputSchema),z.lazy(() => LabOrderSponsoredTestConsentCreateWithoutSponsoredTestInputSchema).array(),z.lazy(() => LabOrderSponsoredTestConsentUncheckedCreateWithoutSponsoredTestInputSchema),z.lazy(() => LabOrderSponsoredTestConsentUncheckedCreateWithoutSponsoredTestInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => LabOrderSponsoredTestConsentCreateOrConnectWithoutSponsoredTestInputSchema),z.lazy(() => LabOrderSponsoredTestConsentCreateOrConnectWithoutSponsoredTestInputSchema).array() ]).optional(),
  createMany: z.lazy(() => LabOrderSponsoredTestConsentCreateManySponsoredTestInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => LabOrderSponsoredTestConsentWhereUniqueInputSchema),z.lazy(() => LabOrderSponsoredTestConsentWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const LabOrderSponsoredTestConsentUpdateManyWithoutSponsoredTestNestedInputSchema: z.ZodType<Prisma.LabOrderSponsoredTestConsentUpdateManyWithoutSponsoredTestNestedInput> = z.object({
  create: z.union([ z.lazy(() => LabOrderSponsoredTestConsentCreateWithoutSponsoredTestInputSchema),z.lazy(() => LabOrderSponsoredTestConsentCreateWithoutSponsoredTestInputSchema).array(),z.lazy(() => LabOrderSponsoredTestConsentUncheckedCreateWithoutSponsoredTestInputSchema),z.lazy(() => LabOrderSponsoredTestConsentUncheckedCreateWithoutSponsoredTestInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => LabOrderSponsoredTestConsentCreateOrConnectWithoutSponsoredTestInputSchema),z.lazy(() => LabOrderSponsoredTestConsentCreateOrConnectWithoutSponsoredTestInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => LabOrderSponsoredTestConsentUpsertWithWhereUniqueWithoutSponsoredTestInputSchema),z.lazy(() => LabOrderSponsoredTestConsentUpsertWithWhereUniqueWithoutSponsoredTestInputSchema).array() ]).optional(),
  createMany: z.lazy(() => LabOrderSponsoredTestConsentCreateManySponsoredTestInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => LabOrderSponsoredTestConsentWhereUniqueInputSchema),z.lazy(() => LabOrderSponsoredTestConsentWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => LabOrderSponsoredTestConsentWhereUniqueInputSchema),z.lazy(() => LabOrderSponsoredTestConsentWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => LabOrderSponsoredTestConsentWhereUniqueInputSchema),z.lazy(() => LabOrderSponsoredTestConsentWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => LabOrderSponsoredTestConsentWhereUniqueInputSchema),z.lazy(() => LabOrderSponsoredTestConsentWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => LabOrderSponsoredTestConsentUpdateWithWhereUniqueWithoutSponsoredTestInputSchema),z.lazy(() => LabOrderSponsoredTestConsentUpdateWithWhereUniqueWithoutSponsoredTestInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => LabOrderSponsoredTestConsentUpdateManyWithWhereWithoutSponsoredTestInputSchema),z.lazy(() => LabOrderSponsoredTestConsentUpdateManyWithWhereWithoutSponsoredTestInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => LabOrderSponsoredTestConsentScalarWhereInputSchema),z.lazy(() => LabOrderSponsoredTestConsentScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const LabUpdateOneWithoutSponsoredTestNestedInputSchema: z.ZodType<Prisma.LabUpdateOneWithoutSponsoredTestNestedInput> = z.object({
  create: z.union([ z.lazy(() => LabCreateWithoutSponsoredTestInputSchema),z.lazy(() => LabUncheckedCreateWithoutSponsoredTestInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => LabCreateOrConnectWithoutSponsoredTestInputSchema).optional(),
  upsert: z.lazy(() => LabUpsertWithoutSponsoredTestInputSchema).optional(),
  disconnect: z.union([ z.boolean(),z.lazy(() => LabWhereInputSchema) ]).optional(),
  delete: z.union([ z.boolean(),z.lazy(() => LabWhereInputSchema) ]).optional(),
  connect: z.lazy(() => LabWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => LabUpdateToOneWithWhereWithoutSponsoredTestInputSchema),z.lazy(() => LabUpdateWithoutSponsoredTestInputSchema),z.lazy(() => LabUncheckedUpdateWithoutSponsoredTestInputSchema) ]).optional(),
}).strict();

export const SponsoredProgramUpdateOneWithoutSponsoredTestNestedInputSchema: z.ZodType<Prisma.SponsoredProgramUpdateOneWithoutSponsoredTestNestedInput> = z.object({
  create: z.union([ z.lazy(() => SponsoredProgramCreateWithoutSponsoredTestInputSchema),z.lazy(() => SponsoredProgramUncheckedCreateWithoutSponsoredTestInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => SponsoredProgramCreateOrConnectWithoutSponsoredTestInputSchema).optional(),
  upsert: z.lazy(() => SponsoredProgramUpsertWithoutSponsoredTestInputSchema).optional(),
  disconnect: z.union([ z.boolean(),z.lazy(() => SponsoredProgramWhereInputSchema) ]).optional(),
  delete: z.union([ z.boolean(),z.lazy(() => SponsoredProgramWhereInputSchema) ]).optional(),
  connect: z.lazy(() => SponsoredProgramWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => SponsoredProgramUpdateToOneWithWhereWithoutSponsoredTestInputSchema),z.lazy(() => SponsoredProgramUpdateWithoutSponsoredTestInputSchema),z.lazy(() => SponsoredProgramUncheckedUpdateWithoutSponsoredTestInputSchema) ]).optional(),
}).strict();

export const TestCatalogUpdateOneRequiredWithoutSponsoredTestNestedInputSchema: z.ZodType<Prisma.TestCatalogUpdateOneRequiredWithoutSponsoredTestNestedInput> = z.object({
  create: z.union([ z.lazy(() => TestCatalogCreateWithoutSponsoredTestInputSchema),z.lazy(() => TestCatalogUncheckedCreateWithoutSponsoredTestInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => TestCatalogCreateOrConnectWithoutSponsoredTestInputSchema).optional(),
  upsert: z.lazy(() => TestCatalogUpsertWithoutSponsoredTestInputSchema).optional(),
  connect: z.lazy(() => TestCatalogWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => TestCatalogUpdateToOneWithWhereWithoutSponsoredTestInputSchema),z.lazy(() => TestCatalogUpdateWithoutSponsoredTestInputSchema),z.lazy(() => TestCatalogUncheckedUpdateWithoutSponsoredTestInputSchema) ]).optional(),
}).strict();

export const LabOrderSponsoredTestConsentUncheckedUpdateManyWithoutSponsoredTestNestedInputSchema: z.ZodType<Prisma.LabOrderSponsoredTestConsentUncheckedUpdateManyWithoutSponsoredTestNestedInput> = z.object({
  create: z.union([ z.lazy(() => LabOrderSponsoredTestConsentCreateWithoutSponsoredTestInputSchema),z.lazy(() => LabOrderSponsoredTestConsentCreateWithoutSponsoredTestInputSchema).array(),z.lazy(() => LabOrderSponsoredTestConsentUncheckedCreateWithoutSponsoredTestInputSchema),z.lazy(() => LabOrderSponsoredTestConsentUncheckedCreateWithoutSponsoredTestInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => LabOrderSponsoredTestConsentCreateOrConnectWithoutSponsoredTestInputSchema),z.lazy(() => LabOrderSponsoredTestConsentCreateOrConnectWithoutSponsoredTestInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => LabOrderSponsoredTestConsentUpsertWithWhereUniqueWithoutSponsoredTestInputSchema),z.lazy(() => LabOrderSponsoredTestConsentUpsertWithWhereUniqueWithoutSponsoredTestInputSchema).array() ]).optional(),
  createMany: z.lazy(() => LabOrderSponsoredTestConsentCreateManySponsoredTestInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => LabOrderSponsoredTestConsentWhereUniqueInputSchema),z.lazy(() => LabOrderSponsoredTestConsentWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => LabOrderSponsoredTestConsentWhereUniqueInputSchema),z.lazy(() => LabOrderSponsoredTestConsentWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => LabOrderSponsoredTestConsentWhereUniqueInputSchema),z.lazy(() => LabOrderSponsoredTestConsentWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => LabOrderSponsoredTestConsentWhereUniqueInputSchema),z.lazy(() => LabOrderSponsoredTestConsentWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => LabOrderSponsoredTestConsentUpdateWithWhereUniqueWithoutSponsoredTestInputSchema),z.lazy(() => LabOrderSponsoredTestConsentUpdateWithWhereUniqueWithoutSponsoredTestInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => LabOrderSponsoredTestConsentUpdateManyWithWhereWithoutSponsoredTestInputSchema),z.lazy(() => LabOrderSponsoredTestConsentUpdateManyWithWhereWithoutSponsoredTestInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => LabOrderSponsoredTestConsentScalarWhereInputSchema),z.lazy(() => LabOrderSponsoredTestConsentScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const BIOMARKERCreateNestedOneWithoutTestBiomarkerInputSchema: z.ZodType<Prisma.BIOMARKERCreateNestedOneWithoutTestBiomarkerInput> = z.object({
  create: z.union([ z.lazy(() => BIOMARKERCreateWithoutTestBiomarkerInputSchema),z.lazy(() => BIOMARKERUncheckedCreateWithoutTestBiomarkerInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => BIOMARKERCreateOrConnectWithoutTestBiomarkerInputSchema).optional(),
  connect: z.lazy(() => BIOMARKERWhereUniqueInputSchema).optional()
}).strict();

export const TestCatalogCreateNestedOneWithoutTestBiomarkerInputSchema: z.ZodType<Prisma.TestCatalogCreateNestedOneWithoutTestBiomarkerInput> = z.object({
  create: z.union([ z.lazy(() => TestCatalogCreateWithoutTestBiomarkerInputSchema),z.lazy(() => TestCatalogUncheckedCreateWithoutTestBiomarkerInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => TestCatalogCreateOrConnectWithoutTestBiomarkerInputSchema).optional(),
  connect: z.lazy(() => TestCatalogWhereUniqueInputSchema).optional()
}).strict();

export const BIOMARKERUpdateOneRequiredWithoutTestBiomarkerNestedInputSchema: z.ZodType<Prisma.BIOMARKERUpdateOneRequiredWithoutTestBiomarkerNestedInput> = z.object({
  create: z.union([ z.lazy(() => BIOMARKERCreateWithoutTestBiomarkerInputSchema),z.lazy(() => BIOMARKERUncheckedCreateWithoutTestBiomarkerInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => BIOMARKERCreateOrConnectWithoutTestBiomarkerInputSchema).optional(),
  upsert: z.lazy(() => BIOMARKERUpsertWithoutTestBiomarkerInputSchema).optional(),
  connect: z.lazy(() => BIOMARKERWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => BIOMARKERUpdateToOneWithWhereWithoutTestBiomarkerInputSchema),z.lazy(() => BIOMARKERUpdateWithoutTestBiomarkerInputSchema),z.lazy(() => BIOMARKERUncheckedUpdateWithoutTestBiomarkerInputSchema) ]).optional(),
}).strict();

export const TestCatalogUpdateOneRequiredWithoutTestBiomarkerNestedInputSchema: z.ZodType<Prisma.TestCatalogUpdateOneRequiredWithoutTestBiomarkerNestedInput> = z.object({
  create: z.union([ z.lazy(() => TestCatalogCreateWithoutTestBiomarkerInputSchema),z.lazy(() => TestCatalogUncheckedCreateWithoutTestBiomarkerInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => TestCatalogCreateOrConnectWithoutTestBiomarkerInputSchema).optional(),
  upsert: z.lazy(() => TestCatalogUpsertWithoutTestBiomarkerInputSchema).optional(),
  connect: z.lazy(() => TestCatalogWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => TestCatalogUpdateToOneWithWhereWithoutTestBiomarkerInputSchema),z.lazy(() => TestCatalogUpdateWithoutTestBiomarkerInputSchema),z.lazy(() => TestCatalogUncheckedUpdateWithoutTestBiomarkerInputSchema) ]).optional(),
}).strict();

export const LabOrderTestCreateNestedManyWithoutTestCatalogInputSchema: z.ZodType<Prisma.LabOrderTestCreateNestedManyWithoutTestCatalogInput> = z.object({
  create: z.union([ z.lazy(() => LabOrderTestCreateWithoutTestCatalogInputSchema),z.lazy(() => LabOrderTestCreateWithoutTestCatalogInputSchema).array(),z.lazy(() => LabOrderTestUncheckedCreateWithoutTestCatalogInputSchema),z.lazy(() => LabOrderTestUncheckedCreateWithoutTestCatalogInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => LabOrderTestCreateOrConnectWithoutTestCatalogInputSchema),z.lazy(() => LabOrderTestCreateOrConnectWithoutTestCatalogInputSchema).array() ]).optional(),
  createMany: z.lazy(() => LabOrderTestCreateManyTestCatalogInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => LabOrderTestWhereUniqueInputSchema),z.lazy(() => LabOrderTestWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const OrganizationFavoriteTestCreateNestedManyWithoutTestCatalogInputSchema: z.ZodType<Prisma.OrganizationFavoriteTestCreateNestedManyWithoutTestCatalogInput> = z.object({
  create: z.union([ z.lazy(() => OrganizationFavoriteTestCreateWithoutTestCatalogInputSchema),z.lazy(() => OrganizationFavoriteTestCreateWithoutTestCatalogInputSchema).array(),z.lazy(() => OrganizationFavoriteTestUncheckedCreateWithoutTestCatalogInputSchema),z.lazy(() => OrganizationFavoriteTestUncheckedCreateWithoutTestCatalogInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => OrganizationFavoriteTestCreateOrConnectWithoutTestCatalogInputSchema),z.lazy(() => OrganizationFavoriteTestCreateOrConnectWithoutTestCatalogInputSchema).array() ]).optional(),
  createMany: z.lazy(() => OrganizationFavoriteTestCreateManyTestCatalogInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => OrganizationFavoriteTestWhereUniqueInputSchema),z.lazy(() => OrganizationFavoriteTestWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const ProviderFavoriteTestCreateNestedManyWithoutTestCatalogInputSchema: z.ZodType<Prisma.ProviderFavoriteTestCreateNestedManyWithoutTestCatalogInput> = z.object({
  create: z.union([ z.lazy(() => ProviderFavoriteTestCreateWithoutTestCatalogInputSchema),z.lazy(() => ProviderFavoriteTestCreateWithoutTestCatalogInputSchema).array(),z.lazy(() => ProviderFavoriteTestUncheckedCreateWithoutTestCatalogInputSchema),z.lazy(() => ProviderFavoriteTestUncheckedCreateWithoutTestCatalogInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => ProviderFavoriteTestCreateOrConnectWithoutTestCatalogInputSchema),z.lazy(() => ProviderFavoriteTestCreateOrConnectWithoutTestCatalogInputSchema).array() ]).optional(),
  createMany: z.lazy(() => ProviderFavoriteTestCreateManyTestCatalogInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => ProviderFavoriteTestWhereUniqueInputSchema),z.lazy(() => ProviderFavoriteTestWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const SponsoredTestCreateNestedManyWithoutTestCatalogInputSchema: z.ZodType<Prisma.SponsoredTestCreateNestedManyWithoutTestCatalogInput> = z.object({
  create: z.union([ z.lazy(() => SponsoredTestCreateWithoutTestCatalogInputSchema),z.lazy(() => SponsoredTestCreateWithoutTestCatalogInputSchema).array(),z.lazy(() => SponsoredTestUncheckedCreateWithoutTestCatalogInputSchema),z.lazy(() => SponsoredTestUncheckedCreateWithoutTestCatalogInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => SponsoredTestCreateOrConnectWithoutTestCatalogInputSchema),z.lazy(() => SponsoredTestCreateOrConnectWithoutTestCatalogInputSchema).array() ]).optional(),
  createMany: z.lazy(() => SponsoredTestCreateManyTestCatalogInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => SponsoredTestWhereUniqueInputSchema),z.lazy(() => SponsoredTestWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const TestBiomarkerCreateNestedManyWithoutTestCatalogInputSchema: z.ZodType<Prisma.TestBiomarkerCreateNestedManyWithoutTestCatalogInput> = z.object({
  create: z.union([ z.lazy(() => TestBiomarkerCreateWithoutTestCatalogInputSchema),z.lazy(() => TestBiomarkerCreateWithoutTestCatalogInputSchema).array(),z.lazy(() => TestBiomarkerUncheckedCreateWithoutTestCatalogInputSchema),z.lazy(() => TestBiomarkerUncheckedCreateWithoutTestCatalogInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => TestBiomarkerCreateOrConnectWithoutTestCatalogInputSchema),z.lazy(() => TestBiomarkerCreateOrConnectWithoutTestCatalogInputSchema).array() ]).optional(),
  createMany: z.lazy(() => TestBiomarkerCreateManyTestCatalogInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => TestBiomarkerWhereUniqueInputSchema),z.lazy(() => TestBiomarkerWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const LabCreateNestedOneWithoutTestCatalogInputSchema: z.ZodType<Prisma.LabCreateNestedOneWithoutTestCatalogInput> = z.object({
  create: z.union([ z.lazy(() => LabCreateWithoutTestCatalogInputSchema),z.lazy(() => LabUncheckedCreateWithoutTestCatalogInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => LabCreateOrConnectWithoutTestCatalogInputSchema).optional(),
  connect: z.lazy(() => LabWhereUniqueInputSchema).optional()
}).strict();

export const TestCptCodeCreateNestedManyWithoutTestCatalogInputSchema: z.ZodType<Prisma.TestCptCodeCreateNestedManyWithoutTestCatalogInput> = z.object({
  create: z.union([ z.lazy(() => TestCptCodeCreateWithoutTestCatalogInputSchema),z.lazy(() => TestCptCodeCreateWithoutTestCatalogInputSchema).array(),z.lazy(() => TestCptCodeUncheckedCreateWithoutTestCatalogInputSchema),z.lazy(() => TestCptCodeUncheckedCreateWithoutTestCatalogInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => TestCptCodeCreateOrConnectWithoutTestCatalogInputSchema),z.lazy(() => TestCptCodeCreateOrConnectWithoutTestCatalogInputSchema).array() ]).optional(),
  createMany: z.lazy(() => TestCptCodeCreateManyTestCatalogInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => TestCptCodeWhereUniqueInputSchema),z.lazy(() => TestCptCodeWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const TestGeneCreateNestedManyWithoutTestCatalogInputSchema: z.ZodType<Prisma.TestGeneCreateNestedManyWithoutTestCatalogInput> = z.object({
  create: z.union([ z.lazy(() => TestGeneCreateWithoutTestCatalogInputSchema),z.lazy(() => TestGeneCreateWithoutTestCatalogInputSchema).array(),z.lazy(() => TestGeneUncheckedCreateWithoutTestCatalogInputSchema),z.lazy(() => TestGeneUncheckedCreateWithoutTestCatalogInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => TestGeneCreateOrConnectWithoutTestCatalogInputSchema),z.lazy(() => TestGeneCreateOrConnectWithoutTestCatalogInputSchema).array() ]).optional(),
  createMany: z.lazy(() => TestGeneCreateManyTestCatalogInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => TestGeneWhereUniqueInputSchema),z.lazy(() => TestGeneWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const TestOrderLoincCreateNestedManyWithoutTestCatalogInputSchema: z.ZodType<Prisma.TestOrderLoincCreateNestedManyWithoutTestCatalogInput> = z.object({
  create: z.union([ z.lazy(() => TestOrderLoincCreateWithoutTestCatalogInputSchema),z.lazy(() => TestOrderLoincCreateWithoutTestCatalogInputSchema).array(),z.lazy(() => TestOrderLoincUncheckedCreateWithoutTestCatalogInputSchema),z.lazy(() => TestOrderLoincUncheckedCreateWithoutTestCatalogInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => TestOrderLoincCreateOrConnectWithoutTestCatalogInputSchema),z.lazy(() => TestOrderLoincCreateOrConnectWithoutTestCatalogInputSchema).array() ]).optional(),
  createMany: z.lazy(() => TestOrderLoincCreateManyTestCatalogInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => TestOrderLoincWhereUniqueInputSchema),z.lazy(() => TestOrderLoincWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const TestResultLoincCreateNestedManyWithoutTestCatalogInputSchema: z.ZodType<Prisma.TestResultLoincCreateNestedManyWithoutTestCatalogInput> = z.object({
  create: z.union([ z.lazy(() => TestResultLoincCreateWithoutTestCatalogInputSchema),z.lazy(() => TestResultLoincCreateWithoutTestCatalogInputSchema).array(),z.lazy(() => TestResultLoincUncheckedCreateWithoutTestCatalogInputSchema),z.lazy(() => TestResultLoincUncheckedCreateWithoutTestCatalogInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => TestResultLoincCreateOrConnectWithoutTestCatalogInputSchema),z.lazy(() => TestResultLoincCreateOrConnectWithoutTestCatalogInputSchema).array() ]).optional(),
  createMany: z.lazy(() => TestResultLoincCreateManyTestCatalogInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => TestResultLoincWhereUniqueInputSchema),z.lazy(() => TestResultLoincWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const LabOrderTestUncheckedCreateNestedManyWithoutTestCatalogInputSchema: z.ZodType<Prisma.LabOrderTestUncheckedCreateNestedManyWithoutTestCatalogInput> = z.object({
  create: z.union([ z.lazy(() => LabOrderTestCreateWithoutTestCatalogInputSchema),z.lazy(() => LabOrderTestCreateWithoutTestCatalogInputSchema).array(),z.lazy(() => LabOrderTestUncheckedCreateWithoutTestCatalogInputSchema),z.lazy(() => LabOrderTestUncheckedCreateWithoutTestCatalogInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => LabOrderTestCreateOrConnectWithoutTestCatalogInputSchema),z.lazy(() => LabOrderTestCreateOrConnectWithoutTestCatalogInputSchema).array() ]).optional(),
  createMany: z.lazy(() => LabOrderTestCreateManyTestCatalogInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => LabOrderTestWhereUniqueInputSchema),z.lazy(() => LabOrderTestWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const OrganizationFavoriteTestUncheckedCreateNestedManyWithoutTestCatalogInputSchema: z.ZodType<Prisma.OrganizationFavoriteTestUncheckedCreateNestedManyWithoutTestCatalogInput> = z.object({
  create: z.union([ z.lazy(() => OrganizationFavoriteTestCreateWithoutTestCatalogInputSchema),z.lazy(() => OrganizationFavoriteTestCreateWithoutTestCatalogInputSchema).array(),z.lazy(() => OrganizationFavoriteTestUncheckedCreateWithoutTestCatalogInputSchema),z.lazy(() => OrganizationFavoriteTestUncheckedCreateWithoutTestCatalogInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => OrganizationFavoriteTestCreateOrConnectWithoutTestCatalogInputSchema),z.lazy(() => OrganizationFavoriteTestCreateOrConnectWithoutTestCatalogInputSchema).array() ]).optional(),
  createMany: z.lazy(() => OrganizationFavoriteTestCreateManyTestCatalogInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => OrganizationFavoriteTestWhereUniqueInputSchema),z.lazy(() => OrganizationFavoriteTestWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const ProviderFavoriteTestUncheckedCreateNestedManyWithoutTestCatalogInputSchema: z.ZodType<Prisma.ProviderFavoriteTestUncheckedCreateNestedManyWithoutTestCatalogInput> = z.object({
  create: z.union([ z.lazy(() => ProviderFavoriteTestCreateWithoutTestCatalogInputSchema),z.lazy(() => ProviderFavoriteTestCreateWithoutTestCatalogInputSchema).array(),z.lazy(() => ProviderFavoriteTestUncheckedCreateWithoutTestCatalogInputSchema),z.lazy(() => ProviderFavoriteTestUncheckedCreateWithoutTestCatalogInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => ProviderFavoriteTestCreateOrConnectWithoutTestCatalogInputSchema),z.lazy(() => ProviderFavoriteTestCreateOrConnectWithoutTestCatalogInputSchema).array() ]).optional(),
  createMany: z.lazy(() => ProviderFavoriteTestCreateManyTestCatalogInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => ProviderFavoriteTestWhereUniqueInputSchema),z.lazy(() => ProviderFavoriteTestWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const SponsoredTestUncheckedCreateNestedManyWithoutTestCatalogInputSchema: z.ZodType<Prisma.SponsoredTestUncheckedCreateNestedManyWithoutTestCatalogInput> = z.object({
  create: z.union([ z.lazy(() => SponsoredTestCreateWithoutTestCatalogInputSchema),z.lazy(() => SponsoredTestCreateWithoutTestCatalogInputSchema).array(),z.lazy(() => SponsoredTestUncheckedCreateWithoutTestCatalogInputSchema),z.lazy(() => SponsoredTestUncheckedCreateWithoutTestCatalogInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => SponsoredTestCreateOrConnectWithoutTestCatalogInputSchema),z.lazy(() => SponsoredTestCreateOrConnectWithoutTestCatalogInputSchema).array() ]).optional(),
  createMany: z.lazy(() => SponsoredTestCreateManyTestCatalogInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => SponsoredTestWhereUniqueInputSchema),z.lazy(() => SponsoredTestWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const TestBiomarkerUncheckedCreateNestedManyWithoutTestCatalogInputSchema: z.ZodType<Prisma.TestBiomarkerUncheckedCreateNestedManyWithoutTestCatalogInput> = z.object({
  create: z.union([ z.lazy(() => TestBiomarkerCreateWithoutTestCatalogInputSchema),z.lazy(() => TestBiomarkerCreateWithoutTestCatalogInputSchema).array(),z.lazy(() => TestBiomarkerUncheckedCreateWithoutTestCatalogInputSchema),z.lazy(() => TestBiomarkerUncheckedCreateWithoutTestCatalogInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => TestBiomarkerCreateOrConnectWithoutTestCatalogInputSchema),z.lazy(() => TestBiomarkerCreateOrConnectWithoutTestCatalogInputSchema).array() ]).optional(),
  createMany: z.lazy(() => TestBiomarkerCreateManyTestCatalogInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => TestBiomarkerWhereUniqueInputSchema),z.lazy(() => TestBiomarkerWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const TestCptCodeUncheckedCreateNestedManyWithoutTestCatalogInputSchema: z.ZodType<Prisma.TestCptCodeUncheckedCreateNestedManyWithoutTestCatalogInput> = z.object({
  create: z.union([ z.lazy(() => TestCptCodeCreateWithoutTestCatalogInputSchema),z.lazy(() => TestCptCodeCreateWithoutTestCatalogInputSchema).array(),z.lazy(() => TestCptCodeUncheckedCreateWithoutTestCatalogInputSchema),z.lazy(() => TestCptCodeUncheckedCreateWithoutTestCatalogInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => TestCptCodeCreateOrConnectWithoutTestCatalogInputSchema),z.lazy(() => TestCptCodeCreateOrConnectWithoutTestCatalogInputSchema).array() ]).optional(),
  createMany: z.lazy(() => TestCptCodeCreateManyTestCatalogInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => TestCptCodeWhereUniqueInputSchema),z.lazy(() => TestCptCodeWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const TestGeneUncheckedCreateNestedManyWithoutTestCatalogInputSchema: z.ZodType<Prisma.TestGeneUncheckedCreateNestedManyWithoutTestCatalogInput> = z.object({
  create: z.union([ z.lazy(() => TestGeneCreateWithoutTestCatalogInputSchema),z.lazy(() => TestGeneCreateWithoutTestCatalogInputSchema).array(),z.lazy(() => TestGeneUncheckedCreateWithoutTestCatalogInputSchema),z.lazy(() => TestGeneUncheckedCreateWithoutTestCatalogInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => TestGeneCreateOrConnectWithoutTestCatalogInputSchema),z.lazy(() => TestGeneCreateOrConnectWithoutTestCatalogInputSchema).array() ]).optional(),
  createMany: z.lazy(() => TestGeneCreateManyTestCatalogInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => TestGeneWhereUniqueInputSchema),z.lazy(() => TestGeneWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const TestOrderLoincUncheckedCreateNestedManyWithoutTestCatalogInputSchema: z.ZodType<Prisma.TestOrderLoincUncheckedCreateNestedManyWithoutTestCatalogInput> = z.object({
  create: z.union([ z.lazy(() => TestOrderLoincCreateWithoutTestCatalogInputSchema),z.lazy(() => TestOrderLoincCreateWithoutTestCatalogInputSchema).array(),z.lazy(() => TestOrderLoincUncheckedCreateWithoutTestCatalogInputSchema),z.lazy(() => TestOrderLoincUncheckedCreateWithoutTestCatalogInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => TestOrderLoincCreateOrConnectWithoutTestCatalogInputSchema),z.lazy(() => TestOrderLoincCreateOrConnectWithoutTestCatalogInputSchema).array() ]).optional(),
  createMany: z.lazy(() => TestOrderLoincCreateManyTestCatalogInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => TestOrderLoincWhereUniqueInputSchema),z.lazy(() => TestOrderLoincWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const TestResultLoincUncheckedCreateNestedManyWithoutTestCatalogInputSchema: z.ZodType<Prisma.TestResultLoincUncheckedCreateNestedManyWithoutTestCatalogInput> = z.object({
  create: z.union([ z.lazy(() => TestResultLoincCreateWithoutTestCatalogInputSchema),z.lazy(() => TestResultLoincCreateWithoutTestCatalogInputSchema).array(),z.lazy(() => TestResultLoincUncheckedCreateWithoutTestCatalogInputSchema),z.lazy(() => TestResultLoincUncheckedCreateWithoutTestCatalogInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => TestResultLoincCreateOrConnectWithoutTestCatalogInputSchema),z.lazy(() => TestResultLoincCreateOrConnectWithoutTestCatalogInputSchema).array() ]).optional(),
  createMany: z.lazy(() => TestResultLoincCreateManyTestCatalogInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => TestResultLoincWhereUniqueInputSchema),z.lazy(() => TestResultLoincWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const LabOrderTestUpdateManyWithoutTestCatalogNestedInputSchema: z.ZodType<Prisma.LabOrderTestUpdateManyWithoutTestCatalogNestedInput> = z.object({
  create: z.union([ z.lazy(() => LabOrderTestCreateWithoutTestCatalogInputSchema),z.lazy(() => LabOrderTestCreateWithoutTestCatalogInputSchema).array(),z.lazy(() => LabOrderTestUncheckedCreateWithoutTestCatalogInputSchema),z.lazy(() => LabOrderTestUncheckedCreateWithoutTestCatalogInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => LabOrderTestCreateOrConnectWithoutTestCatalogInputSchema),z.lazy(() => LabOrderTestCreateOrConnectWithoutTestCatalogInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => LabOrderTestUpsertWithWhereUniqueWithoutTestCatalogInputSchema),z.lazy(() => LabOrderTestUpsertWithWhereUniqueWithoutTestCatalogInputSchema).array() ]).optional(),
  createMany: z.lazy(() => LabOrderTestCreateManyTestCatalogInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => LabOrderTestWhereUniqueInputSchema),z.lazy(() => LabOrderTestWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => LabOrderTestWhereUniqueInputSchema),z.lazy(() => LabOrderTestWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => LabOrderTestWhereUniqueInputSchema),z.lazy(() => LabOrderTestWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => LabOrderTestWhereUniqueInputSchema),z.lazy(() => LabOrderTestWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => LabOrderTestUpdateWithWhereUniqueWithoutTestCatalogInputSchema),z.lazy(() => LabOrderTestUpdateWithWhereUniqueWithoutTestCatalogInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => LabOrderTestUpdateManyWithWhereWithoutTestCatalogInputSchema),z.lazy(() => LabOrderTestUpdateManyWithWhereWithoutTestCatalogInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => LabOrderTestScalarWhereInputSchema),z.lazy(() => LabOrderTestScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const OrganizationFavoriteTestUpdateManyWithoutTestCatalogNestedInputSchema: z.ZodType<Prisma.OrganizationFavoriteTestUpdateManyWithoutTestCatalogNestedInput> = z.object({
  create: z.union([ z.lazy(() => OrganizationFavoriteTestCreateWithoutTestCatalogInputSchema),z.lazy(() => OrganizationFavoriteTestCreateWithoutTestCatalogInputSchema).array(),z.lazy(() => OrganizationFavoriteTestUncheckedCreateWithoutTestCatalogInputSchema),z.lazy(() => OrganizationFavoriteTestUncheckedCreateWithoutTestCatalogInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => OrganizationFavoriteTestCreateOrConnectWithoutTestCatalogInputSchema),z.lazy(() => OrganizationFavoriteTestCreateOrConnectWithoutTestCatalogInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => OrganizationFavoriteTestUpsertWithWhereUniqueWithoutTestCatalogInputSchema),z.lazy(() => OrganizationFavoriteTestUpsertWithWhereUniqueWithoutTestCatalogInputSchema).array() ]).optional(),
  createMany: z.lazy(() => OrganizationFavoriteTestCreateManyTestCatalogInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => OrganizationFavoriteTestWhereUniqueInputSchema),z.lazy(() => OrganizationFavoriteTestWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => OrganizationFavoriteTestWhereUniqueInputSchema),z.lazy(() => OrganizationFavoriteTestWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => OrganizationFavoriteTestWhereUniqueInputSchema),z.lazy(() => OrganizationFavoriteTestWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => OrganizationFavoriteTestWhereUniqueInputSchema),z.lazy(() => OrganizationFavoriteTestWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => OrganizationFavoriteTestUpdateWithWhereUniqueWithoutTestCatalogInputSchema),z.lazy(() => OrganizationFavoriteTestUpdateWithWhereUniqueWithoutTestCatalogInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => OrganizationFavoriteTestUpdateManyWithWhereWithoutTestCatalogInputSchema),z.lazy(() => OrganizationFavoriteTestUpdateManyWithWhereWithoutTestCatalogInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => OrganizationFavoriteTestScalarWhereInputSchema),z.lazy(() => OrganizationFavoriteTestScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const ProviderFavoriteTestUpdateManyWithoutTestCatalogNestedInputSchema: z.ZodType<Prisma.ProviderFavoriteTestUpdateManyWithoutTestCatalogNestedInput> = z.object({
  create: z.union([ z.lazy(() => ProviderFavoriteTestCreateWithoutTestCatalogInputSchema),z.lazy(() => ProviderFavoriteTestCreateWithoutTestCatalogInputSchema).array(),z.lazy(() => ProviderFavoriteTestUncheckedCreateWithoutTestCatalogInputSchema),z.lazy(() => ProviderFavoriteTestUncheckedCreateWithoutTestCatalogInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => ProviderFavoriteTestCreateOrConnectWithoutTestCatalogInputSchema),z.lazy(() => ProviderFavoriteTestCreateOrConnectWithoutTestCatalogInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => ProviderFavoriteTestUpsertWithWhereUniqueWithoutTestCatalogInputSchema),z.lazy(() => ProviderFavoriteTestUpsertWithWhereUniqueWithoutTestCatalogInputSchema).array() ]).optional(),
  createMany: z.lazy(() => ProviderFavoriteTestCreateManyTestCatalogInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => ProviderFavoriteTestWhereUniqueInputSchema),z.lazy(() => ProviderFavoriteTestWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => ProviderFavoriteTestWhereUniqueInputSchema),z.lazy(() => ProviderFavoriteTestWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => ProviderFavoriteTestWhereUniqueInputSchema),z.lazy(() => ProviderFavoriteTestWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => ProviderFavoriteTestWhereUniqueInputSchema),z.lazy(() => ProviderFavoriteTestWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => ProviderFavoriteTestUpdateWithWhereUniqueWithoutTestCatalogInputSchema),z.lazy(() => ProviderFavoriteTestUpdateWithWhereUniqueWithoutTestCatalogInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => ProviderFavoriteTestUpdateManyWithWhereWithoutTestCatalogInputSchema),z.lazy(() => ProviderFavoriteTestUpdateManyWithWhereWithoutTestCatalogInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => ProviderFavoriteTestScalarWhereInputSchema),z.lazy(() => ProviderFavoriteTestScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const SponsoredTestUpdateManyWithoutTestCatalogNestedInputSchema: z.ZodType<Prisma.SponsoredTestUpdateManyWithoutTestCatalogNestedInput> = z.object({
  create: z.union([ z.lazy(() => SponsoredTestCreateWithoutTestCatalogInputSchema),z.lazy(() => SponsoredTestCreateWithoutTestCatalogInputSchema).array(),z.lazy(() => SponsoredTestUncheckedCreateWithoutTestCatalogInputSchema),z.lazy(() => SponsoredTestUncheckedCreateWithoutTestCatalogInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => SponsoredTestCreateOrConnectWithoutTestCatalogInputSchema),z.lazy(() => SponsoredTestCreateOrConnectWithoutTestCatalogInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => SponsoredTestUpsertWithWhereUniqueWithoutTestCatalogInputSchema),z.lazy(() => SponsoredTestUpsertWithWhereUniqueWithoutTestCatalogInputSchema).array() ]).optional(),
  createMany: z.lazy(() => SponsoredTestCreateManyTestCatalogInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => SponsoredTestWhereUniqueInputSchema),z.lazy(() => SponsoredTestWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => SponsoredTestWhereUniqueInputSchema),z.lazy(() => SponsoredTestWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => SponsoredTestWhereUniqueInputSchema),z.lazy(() => SponsoredTestWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => SponsoredTestWhereUniqueInputSchema),z.lazy(() => SponsoredTestWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => SponsoredTestUpdateWithWhereUniqueWithoutTestCatalogInputSchema),z.lazy(() => SponsoredTestUpdateWithWhereUniqueWithoutTestCatalogInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => SponsoredTestUpdateManyWithWhereWithoutTestCatalogInputSchema),z.lazy(() => SponsoredTestUpdateManyWithWhereWithoutTestCatalogInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => SponsoredTestScalarWhereInputSchema),z.lazy(() => SponsoredTestScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const TestBiomarkerUpdateManyWithoutTestCatalogNestedInputSchema: z.ZodType<Prisma.TestBiomarkerUpdateManyWithoutTestCatalogNestedInput> = z.object({
  create: z.union([ z.lazy(() => TestBiomarkerCreateWithoutTestCatalogInputSchema),z.lazy(() => TestBiomarkerCreateWithoutTestCatalogInputSchema).array(),z.lazy(() => TestBiomarkerUncheckedCreateWithoutTestCatalogInputSchema),z.lazy(() => TestBiomarkerUncheckedCreateWithoutTestCatalogInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => TestBiomarkerCreateOrConnectWithoutTestCatalogInputSchema),z.lazy(() => TestBiomarkerCreateOrConnectWithoutTestCatalogInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => TestBiomarkerUpsertWithWhereUniqueWithoutTestCatalogInputSchema),z.lazy(() => TestBiomarkerUpsertWithWhereUniqueWithoutTestCatalogInputSchema).array() ]).optional(),
  createMany: z.lazy(() => TestBiomarkerCreateManyTestCatalogInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => TestBiomarkerWhereUniqueInputSchema),z.lazy(() => TestBiomarkerWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => TestBiomarkerWhereUniqueInputSchema),z.lazy(() => TestBiomarkerWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => TestBiomarkerWhereUniqueInputSchema),z.lazy(() => TestBiomarkerWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => TestBiomarkerWhereUniqueInputSchema),z.lazy(() => TestBiomarkerWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => TestBiomarkerUpdateWithWhereUniqueWithoutTestCatalogInputSchema),z.lazy(() => TestBiomarkerUpdateWithWhereUniqueWithoutTestCatalogInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => TestBiomarkerUpdateManyWithWhereWithoutTestCatalogInputSchema),z.lazy(() => TestBiomarkerUpdateManyWithWhereWithoutTestCatalogInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => TestBiomarkerScalarWhereInputSchema),z.lazy(() => TestBiomarkerScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const LabUpdateOneWithoutTestCatalogNestedInputSchema: z.ZodType<Prisma.LabUpdateOneWithoutTestCatalogNestedInput> = z.object({
  create: z.union([ z.lazy(() => LabCreateWithoutTestCatalogInputSchema),z.lazy(() => LabUncheckedCreateWithoutTestCatalogInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => LabCreateOrConnectWithoutTestCatalogInputSchema).optional(),
  upsert: z.lazy(() => LabUpsertWithoutTestCatalogInputSchema).optional(),
  disconnect: z.union([ z.boolean(),z.lazy(() => LabWhereInputSchema) ]).optional(),
  delete: z.union([ z.boolean(),z.lazy(() => LabWhereInputSchema) ]).optional(),
  connect: z.lazy(() => LabWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => LabUpdateToOneWithWhereWithoutTestCatalogInputSchema),z.lazy(() => LabUpdateWithoutTestCatalogInputSchema),z.lazy(() => LabUncheckedUpdateWithoutTestCatalogInputSchema) ]).optional(),
}).strict();

export const TestCptCodeUpdateManyWithoutTestCatalogNestedInputSchema: z.ZodType<Prisma.TestCptCodeUpdateManyWithoutTestCatalogNestedInput> = z.object({
  create: z.union([ z.lazy(() => TestCptCodeCreateWithoutTestCatalogInputSchema),z.lazy(() => TestCptCodeCreateWithoutTestCatalogInputSchema).array(),z.lazy(() => TestCptCodeUncheckedCreateWithoutTestCatalogInputSchema),z.lazy(() => TestCptCodeUncheckedCreateWithoutTestCatalogInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => TestCptCodeCreateOrConnectWithoutTestCatalogInputSchema),z.lazy(() => TestCptCodeCreateOrConnectWithoutTestCatalogInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => TestCptCodeUpsertWithWhereUniqueWithoutTestCatalogInputSchema),z.lazy(() => TestCptCodeUpsertWithWhereUniqueWithoutTestCatalogInputSchema).array() ]).optional(),
  createMany: z.lazy(() => TestCptCodeCreateManyTestCatalogInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => TestCptCodeWhereUniqueInputSchema),z.lazy(() => TestCptCodeWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => TestCptCodeWhereUniqueInputSchema),z.lazy(() => TestCptCodeWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => TestCptCodeWhereUniqueInputSchema),z.lazy(() => TestCptCodeWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => TestCptCodeWhereUniqueInputSchema),z.lazy(() => TestCptCodeWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => TestCptCodeUpdateWithWhereUniqueWithoutTestCatalogInputSchema),z.lazy(() => TestCptCodeUpdateWithWhereUniqueWithoutTestCatalogInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => TestCptCodeUpdateManyWithWhereWithoutTestCatalogInputSchema),z.lazy(() => TestCptCodeUpdateManyWithWhereWithoutTestCatalogInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => TestCptCodeScalarWhereInputSchema),z.lazy(() => TestCptCodeScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const TestGeneUpdateManyWithoutTestCatalogNestedInputSchema: z.ZodType<Prisma.TestGeneUpdateManyWithoutTestCatalogNestedInput> = z.object({
  create: z.union([ z.lazy(() => TestGeneCreateWithoutTestCatalogInputSchema),z.lazy(() => TestGeneCreateWithoutTestCatalogInputSchema).array(),z.lazy(() => TestGeneUncheckedCreateWithoutTestCatalogInputSchema),z.lazy(() => TestGeneUncheckedCreateWithoutTestCatalogInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => TestGeneCreateOrConnectWithoutTestCatalogInputSchema),z.lazy(() => TestGeneCreateOrConnectWithoutTestCatalogInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => TestGeneUpsertWithWhereUniqueWithoutTestCatalogInputSchema),z.lazy(() => TestGeneUpsertWithWhereUniqueWithoutTestCatalogInputSchema).array() ]).optional(),
  createMany: z.lazy(() => TestGeneCreateManyTestCatalogInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => TestGeneWhereUniqueInputSchema),z.lazy(() => TestGeneWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => TestGeneWhereUniqueInputSchema),z.lazy(() => TestGeneWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => TestGeneWhereUniqueInputSchema),z.lazy(() => TestGeneWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => TestGeneWhereUniqueInputSchema),z.lazy(() => TestGeneWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => TestGeneUpdateWithWhereUniqueWithoutTestCatalogInputSchema),z.lazy(() => TestGeneUpdateWithWhereUniqueWithoutTestCatalogInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => TestGeneUpdateManyWithWhereWithoutTestCatalogInputSchema),z.lazy(() => TestGeneUpdateManyWithWhereWithoutTestCatalogInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => TestGeneScalarWhereInputSchema),z.lazy(() => TestGeneScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const TestOrderLoincUpdateManyWithoutTestCatalogNestedInputSchema: z.ZodType<Prisma.TestOrderLoincUpdateManyWithoutTestCatalogNestedInput> = z.object({
  create: z.union([ z.lazy(() => TestOrderLoincCreateWithoutTestCatalogInputSchema),z.lazy(() => TestOrderLoincCreateWithoutTestCatalogInputSchema).array(),z.lazy(() => TestOrderLoincUncheckedCreateWithoutTestCatalogInputSchema),z.lazy(() => TestOrderLoincUncheckedCreateWithoutTestCatalogInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => TestOrderLoincCreateOrConnectWithoutTestCatalogInputSchema),z.lazy(() => TestOrderLoincCreateOrConnectWithoutTestCatalogInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => TestOrderLoincUpsertWithWhereUniqueWithoutTestCatalogInputSchema),z.lazy(() => TestOrderLoincUpsertWithWhereUniqueWithoutTestCatalogInputSchema).array() ]).optional(),
  createMany: z.lazy(() => TestOrderLoincCreateManyTestCatalogInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => TestOrderLoincWhereUniqueInputSchema),z.lazy(() => TestOrderLoincWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => TestOrderLoincWhereUniqueInputSchema),z.lazy(() => TestOrderLoincWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => TestOrderLoincWhereUniqueInputSchema),z.lazy(() => TestOrderLoincWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => TestOrderLoincWhereUniqueInputSchema),z.lazy(() => TestOrderLoincWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => TestOrderLoincUpdateWithWhereUniqueWithoutTestCatalogInputSchema),z.lazy(() => TestOrderLoincUpdateWithWhereUniqueWithoutTestCatalogInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => TestOrderLoincUpdateManyWithWhereWithoutTestCatalogInputSchema),z.lazy(() => TestOrderLoincUpdateManyWithWhereWithoutTestCatalogInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => TestOrderLoincScalarWhereInputSchema),z.lazy(() => TestOrderLoincScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const TestResultLoincUpdateManyWithoutTestCatalogNestedInputSchema: z.ZodType<Prisma.TestResultLoincUpdateManyWithoutTestCatalogNestedInput> = z.object({
  create: z.union([ z.lazy(() => TestResultLoincCreateWithoutTestCatalogInputSchema),z.lazy(() => TestResultLoincCreateWithoutTestCatalogInputSchema).array(),z.lazy(() => TestResultLoincUncheckedCreateWithoutTestCatalogInputSchema),z.lazy(() => TestResultLoincUncheckedCreateWithoutTestCatalogInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => TestResultLoincCreateOrConnectWithoutTestCatalogInputSchema),z.lazy(() => TestResultLoincCreateOrConnectWithoutTestCatalogInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => TestResultLoincUpsertWithWhereUniqueWithoutTestCatalogInputSchema),z.lazy(() => TestResultLoincUpsertWithWhereUniqueWithoutTestCatalogInputSchema).array() ]).optional(),
  createMany: z.lazy(() => TestResultLoincCreateManyTestCatalogInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => TestResultLoincWhereUniqueInputSchema),z.lazy(() => TestResultLoincWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => TestResultLoincWhereUniqueInputSchema),z.lazy(() => TestResultLoincWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => TestResultLoincWhereUniqueInputSchema),z.lazy(() => TestResultLoincWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => TestResultLoincWhereUniqueInputSchema),z.lazy(() => TestResultLoincWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => TestResultLoincUpdateWithWhereUniqueWithoutTestCatalogInputSchema),z.lazy(() => TestResultLoincUpdateWithWhereUniqueWithoutTestCatalogInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => TestResultLoincUpdateManyWithWhereWithoutTestCatalogInputSchema),z.lazy(() => TestResultLoincUpdateManyWithWhereWithoutTestCatalogInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => TestResultLoincScalarWhereInputSchema),z.lazy(() => TestResultLoincScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const LabOrderTestUncheckedUpdateManyWithoutTestCatalogNestedInputSchema: z.ZodType<Prisma.LabOrderTestUncheckedUpdateManyWithoutTestCatalogNestedInput> = z.object({
  create: z.union([ z.lazy(() => LabOrderTestCreateWithoutTestCatalogInputSchema),z.lazy(() => LabOrderTestCreateWithoutTestCatalogInputSchema).array(),z.lazy(() => LabOrderTestUncheckedCreateWithoutTestCatalogInputSchema),z.lazy(() => LabOrderTestUncheckedCreateWithoutTestCatalogInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => LabOrderTestCreateOrConnectWithoutTestCatalogInputSchema),z.lazy(() => LabOrderTestCreateOrConnectWithoutTestCatalogInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => LabOrderTestUpsertWithWhereUniqueWithoutTestCatalogInputSchema),z.lazy(() => LabOrderTestUpsertWithWhereUniqueWithoutTestCatalogInputSchema).array() ]).optional(),
  createMany: z.lazy(() => LabOrderTestCreateManyTestCatalogInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => LabOrderTestWhereUniqueInputSchema),z.lazy(() => LabOrderTestWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => LabOrderTestWhereUniqueInputSchema),z.lazy(() => LabOrderTestWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => LabOrderTestWhereUniqueInputSchema),z.lazy(() => LabOrderTestWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => LabOrderTestWhereUniqueInputSchema),z.lazy(() => LabOrderTestWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => LabOrderTestUpdateWithWhereUniqueWithoutTestCatalogInputSchema),z.lazy(() => LabOrderTestUpdateWithWhereUniqueWithoutTestCatalogInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => LabOrderTestUpdateManyWithWhereWithoutTestCatalogInputSchema),z.lazy(() => LabOrderTestUpdateManyWithWhereWithoutTestCatalogInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => LabOrderTestScalarWhereInputSchema),z.lazy(() => LabOrderTestScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const OrganizationFavoriteTestUncheckedUpdateManyWithoutTestCatalogNestedInputSchema: z.ZodType<Prisma.OrganizationFavoriteTestUncheckedUpdateManyWithoutTestCatalogNestedInput> = z.object({
  create: z.union([ z.lazy(() => OrganizationFavoriteTestCreateWithoutTestCatalogInputSchema),z.lazy(() => OrganizationFavoriteTestCreateWithoutTestCatalogInputSchema).array(),z.lazy(() => OrganizationFavoriteTestUncheckedCreateWithoutTestCatalogInputSchema),z.lazy(() => OrganizationFavoriteTestUncheckedCreateWithoutTestCatalogInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => OrganizationFavoriteTestCreateOrConnectWithoutTestCatalogInputSchema),z.lazy(() => OrganizationFavoriteTestCreateOrConnectWithoutTestCatalogInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => OrganizationFavoriteTestUpsertWithWhereUniqueWithoutTestCatalogInputSchema),z.lazy(() => OrganizationFavoriteTestUpsertWithWhereUniqueWithoutTestCatalogInputSchema).array() ]).optional(),
  createMany: z.lazy(() => OrganizationFavoriteTestCreateManyTestCatalogInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => OrganizationFavoriteTestWhereUniqueInputSchema),z.lazy(() => OrganizationFavoriteTestWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => OrganizationFavoriteTestWhereUniqueInputSchema),z.lazy(() => OrganizationFavoriteTestWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => OrganizationFavoriteTestWhereUniqueInputSchema),z.lazy(() => OrganizationFavoriteTestWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => OrganizationFavoriteTestWhereUniqueInputSchema),z.lazy(() => OrganizationFavoriteTestWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => OrganizationFavoriteTestUpdateWithWhereUniqueWithoutTestCatalogInputSchema),z.lazy(() => OrganizationFavoriteTestUpdateWithWhereUniqueWithoutTestCatalogInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => OrganizationFavoriteTestUpdateManyWithWhereWithoutTestCatalogInputSchema),z.lazy(() => OrganizationFavoriteTestUpdateManyWithWhereWithoutTestCatalogInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => OrganizationFavoriteTestScalarWhereInputSchema),z.lazy(() => OrganizationFavoriteTestScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const ProviderFavoriteTestUncheckedUpdateManyWithoutTestCatalogNestedInputSchema: z.ZodType<Prisma.ProviderFavoriteTestUncheckedUpdateManyWithoutTestCatalogNestedInput> = z.object({
  create: z.union([ z.lazy(() => ProviderFavoriteTestCreateWithoutTestCatalogInputSchema),z.lazy(() => ProviderFavoriteTestCreateWithoutTestCatalogInputSchema).array(),z.lazy(() => ProviderFavoriteTestUncheckedCreateWithoutTestCatalogInputSchema),z.lazy(() => ProviderFavoriteTestUncheckedCreateWithoutTestCatalogInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => ProviderFavoriteTestCreateOrConnectWithoutTestCatalogInputSchema),z.lazy(() => ProviderFavoriteTestCreateOrConnectWithoutTestCatalogInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => ProviderFavoriteTestUpsertWithWhereUniqueWithoutTestCatalogInputSchema),z.lazy(() => ProviderFavoriteTestUpsertWithWhereUniqueWithoutTestCatalogInputSchema).array() ]).optional(),
  createMany: z.lazy(() => ProviderFavoriteTestCreateManyTestCatalogInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => ProviderFavoriteTestWhereUniqueInputSchema),z.lazy(() => ProviderFavoriteTestWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => ProviderFavoriteTestWhereUniqueInputSchema),z.lazy(() => ProviderFavoriteTestWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => ProviderFavoriteTestWhereUniqueInputSchema),z.lazy(() => ProviderFavoriteTestWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => ProviderFavoriteTestWhereUniqueInputSchema),z.lazy(() => ProviderFavoriteTestWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => ProviderFavoriteTestUpdateWithWhereUniqueWithoutTestCatalogInputSchema),z.lazy(() => ProviderFavoriteTestUpdateWithWhereUniqueWithoutTestCatalogInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => ProviderFavoriteTestUpdateManyWithWhereWithoutTestCatalogInputSchema),z.lazy(() => ProviderFavoriteTestUpdateManyWithWhereWithoutTestCatalogInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => ProviderFavoriteTestScalarWhereInputSchema),z.lazy(() => ProviderFavoriteTestScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const SponsoredTestUncheckedUpdateManyWithoutTestCatalogNestedInputSchema: z.ZodType<Prisma.SponsoredTestUncheckedUpdateManyWithoutTestCatalogNestedInput> = z.object({
  create: z.union([ z.lazy(() => SponsoredTestCreateWithoutTestCatalogInputSchema),z.lazy(() => SponsoredTestCreateWithoutTestCatalogInputSchema).array(),z.lazy(() => SponsoredTestUncheckedCreateWithoutTestCatalogInputSchema),z.lazy(() => SponsoredTestUncheckedCreateWithoutTestCatalogInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => SponsoredTestCreateOrConnectWithoutTestCatalogInputSchema),z.lazy(() => SponsoredTestCreateOrConnectWithoutTestCatalogInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => SponsoredTestUpsertWithWhereUniqueWithoutTestCatalogInputSchema),z.lazy(() => SponsoredTestUpsertWithWhereUniqueWithoutTestCatalogInputSchema).array() ]).optional(),
  createMany: z.lazy(() => SponsoredTestCreateManyTestCatalogInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => SponsoredTestWhereUniqueInputSchema),z.lazy(() => SponsoredTestWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => SponsoredTestWhereUniqueInputSchema),z.lazy(() => SponsoredTestWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => SponsoredTestWhereUniqueInputSchema),z.lazy(() => SponsoredTestWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => SponsoredTestWhereUniqueInputSchema),z.lazy(() => SponsoredTestWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => SponsoredTestUpdateWithWhereUniqueWithoutTestCatalogInputSchema),z.lazy(() => SponsoredTestUpdateWithWhereUniqueWithoutTestCatalogInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => SponsoredTestUpdateManyWithWhereWithoutTestCatalogInputSchema),z.lazy(() => SponsoredTestUpdateManyWithWhereWithoutTestCatalogInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => SponsoredTestScalarWhereInputSchema),z.lazy(() => SponsoredTestScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const TestBiomarkerUncheckedUpdateManyWithoutTestCatalogNestedInputSchema: z.ZodType<Prisma.TestBiomarkerUncheckedUpdateManyWithoutTestCatalogNestedInput> = z.object({
  create: z.union([ z.lazy(() => TestBiomarkerCreateWithoutTestCatalogInputSchema),z.lazy(() => TestBiomarkerCreateWithoutTestCatalogInputSchema).array(),z.lazy(() => TestBiomarkerUncheckedCreateWithoutTestCatalogInputSchema),z.lazy(() => TestBiomarkerUncheckedCreateWithoutTestCatalogInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => TestBiomarkerCreateOrConnectWithoutTestCatalogInputSchema),z.lazy(() => TestBiomarkerCreateOrConnectWithoutTestCatalogInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => TestBiomarkerUpsertWithWhereUniqueWithoutTestCatalogInputSchema),z.lazy(() => TestBiomarkerUpsertWithWhereUniqueWithoutTestCatalogInputSchema).array() ]).optional(),
  createMany: z.lazy(() => TestBiomarkerCreateManyTestCatalogInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => TestBiomarkerWhereUniqueInputSchema),z.lazy(() => TestBiomarkerWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => TestBiomarkerWhereUniqueInputSchema),z.lazy(() => TestBiomarkerWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => TestBiomarkerWhereUniqueInputSchema),z.lazy(() => TestBiomarkerWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => TestBiomarkerWhereUniqueInputSchema),z.lazy(() => TestBiomarkerWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => TestBiomarkerUpdateWithWhereUniqueWithoutTestCatalogInputSchema),z.lazy(() => TestBiomarkerUpdateWithWhereUniqueWithoutTestCatalogInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => TestBiomarkerUpdateManyWithWhereWithoutTestCatalogInputSchema),z.lazy(() => TestBiomarkerUpdateManyWithWhereWithoutTestCatalogInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => TestBiomarkerScalarWhereInputSchema),z.lazy(() => TestBiomarkerScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const TestCptCodeUncheckedUpdateManyWithoutTestCatalogNestedInputSchema: z.ZodType<Prisma.TestCptCodeUncheckedUpdateManyWithoutTestCatalogNestedInput> = z.object({
  create: z.union([ z.lazy(() => TestCptCodeCreateWithoutTestCatalogInputSchema),z.lazy(() => TestCptCodeCreateWithoutTestCatalogInputSchema).array(),z.lazy(() => TestCptCodeUncheckedCreateWithoutTestCatalogInputSchema),z.lazy(() => TestCptCodeUncheckedCreateWithoutTestCatalogInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => TestCptCodeCreateOrConnectWithoutTestCatalogInputSchema),z.lazy(() => TestCptCodeCreateOrConnectWithoutTestCatalogInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => TestCptCodeUpsertWithWhereUniqueWithoutTestCatalogInputSchema),z.lazy(() => TestCptCodeUpsertWithWhereUniqueWithoutTestCatalogInputSchema).array() ]).optional(),
  createMany: z.lazy(() => TestCptCodeCreateManyTestCatalogInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => TestCptCodeWhereUniqueInputSchema),z.lazy(() => TestCptCodeWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => TestCptCodeWhereUniqueInputSchema),z.lazy(() => TestCptCodeWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => TestCptCodeWhereUniqueInputSchema),z.lazy(() => TestCptCodeWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => TestCptCodeWhereUniqueInputSchema),z.lazy(() => TestCptCodeWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => TestCptCodeUpdateWithWhereUniqueWithoutTestCatalogInputSchema),z.lazy(() => TestCptCodeUpdateWithWhereUniqueWithoutTestCatalogInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => TestCptCodeUpdateManyWithWhereWithoutTestCatalogInputSchema),z.lazy(() => TestCptCodeUpdateManyWithWhereWithoutTestCatalogInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => TestCptCodeScalarWhereInputSchema),z.lazy(() => TestCptCodeScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const TestGeneUncheckedUpdateManyWithoutTestCatalogNestedInputSchema: z.ZodType<Prisma.TestGeneUncheckedUpdateManyWithoutTestCatalogNestedInput> = z.object({
  create: z.union([ z.lazy(() => TestGeneCreateWithoutTestCatalogInputSchema),z.lazy(() => TestGeneCreateWithoutTestCatalogInputSchema).array(),z.lazy(() => TestGeneUncheckedCreateWithoutTestCatalogInputSchema),z.lazy(() => TestGeneUncheckedCreateWithoutTestCatalogInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => TestGeneCreateOrConnectWithoutTestCatalogInputSchema),z.lazy(() => TestGeneCreateOrConnectWithoutTestCatalogInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => TestGeneUpsertWithWhereUniqueWithoutTestCatalogInputSchema),z.lazy(() => TestGeneUpsertWithWhereUniqueWithoutTestCatalogInputSchema).array() ]).optional(),
  createMany: z.lazy(() => TestGeneCreateManyTestCatalogInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => TestGeneWhereUniqueInputSchema),z.lazy(() => TestGeneWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => TestGeneWhereUniqueInputSchema),z.lazy(() => TestGeneWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => TestGeneWhereUniqueInputSchema),z.lazy(() => TestGeneWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => TestGeneWhereUniqueInputSchema),z.lazy(() => TestGeneWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => TestGeneUpdateWithWhereUniqueWithoutTestCatalogInputSchema),z.lazy(() => TestGeneUpdateWithWhereUniqueWithoutTestCatalogInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => TestGeneUpdateManyWithWhereWithoutTestCatalogInputSchema),z.lazy(() => TestGeneUpdateManyWithWhereWithoutTestCatalogInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => TestGeneScalarWhereInputSchema),z.lazy(() => TestGeneScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const TestOrderLoincUncheckedUpdateManyWithoutTestCatalogNestedInputSchema: z.ZodType<Prisma.TestOrderLoincUncheckedUpdateManyWithoutTestCatalogNestedInput> = z.object({
  create: z.union([ z.lazy(() => TestOrderLoincCreateWithoutTestCatalogInputSchema),z.lazy(() => TestOrderLoincCreateWithoutTestCatalogInputSchema).array(),z.lazy(() => TestOrderLoincUncheckedCreateWithoutTestCatalogInputSchema),z.lazy(() => TestOrderLoincUncheckedCreateWithoutTestCatalogInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => TestOrderLoincCreateOrConnectWithoutTestCatalogInputSchema),z.lazy(() => TestOrderLoincCreateOrConnectWithoutTestCatalogInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => TestOrderLoincUpsertWithWhereUniqueWithoutTestCatalogInputSchema),z.lazy(() => TestOrderLoincUpsertWithWhereUniqueWithoutTestCatalogInputSchema).array() ]).optional(),
  createMany: z.lazy(() => TestOrderLoincCreateManyTestCatalogInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => TestOrderLoincWhereUniqueInputSchema),z.lazy(() => TestOrderLoincWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => TestOrderLoincWhereUniqueInputSchema),z.lazy(() => TestOrderLoincWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => TestOrderLoincWhereUniqueInputSchema),z.lazy(() => TestOrderLoincWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => TestOrderLoincWhereUniqueInputSchema),z.lazy(() => TestOrderLoincWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => TestOrderLoincUpdateWithWhereUniqueWithoutTestCatalogInputSchema),z.lazy(() => TestOrderLoincUpdateWithWhereUniqueWithoutTestCatalogInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => TestOrderLoincUpdateManyWithWhereWithoutTestCatalogInputSchema),z.lazy(() => TestOrderLoincUpdateManyWithWhereWithoutTestCatalogInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => TestOrderLoincScalarWhereInputSchema),z.lazy(() => TestOrderLoincScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const TestResultLoincUncheckedUpdateManyWithoutTestCatalogNestedInputSchema: z.ZodType<Prisma.TestResultLoincUncheckedUpdateManyWithoutTestCatalogNestedInput> = z.object({
  create: z.union([ z.lazy(() => TestResultLoincCreateWithoutTestCatalogInputSchema),z.lazy(() => TestResultLoincCreateWithoutTestCatalogInputSchema).array(),z.lazy(() => TestResultLoincUncheckedCreateWithoutTestCatalogInputSchema),z.lazy(() => TestResultLoincUncheckedCreateWithoutTestCatalogInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => TestResultLoincCreateOrConnectWithoutTestCatalogInputSchema),z.lazy(() => TestResultLoincCreateOrConnectWithoutTestCatalogInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => TestResultLoincUpsertWithWhereUniqueWithoutTestCatalogInputSchema),z.lazy(() => TestResultLoincUpsertWithWhereUniqueWithoutTestCatalogInputSchema).array() ]).optional(),
  createMany: z.lazy(() => TestResultLoincCreateManyTestCatalogInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => TestResultLoincWhereUniqueInputSchema),z.lazy(() => TestResultLoincWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => TestResultLoincWhereUniqueInputSchema),z.lazy(() => TestResultLoincWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => TestResultLoincWhereUniqueInputSchema),z.lazy(() => TestResultLoincWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => TestResultLoincWhereUniqueInputSchema),z.lazy(() => TestResultLoincWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => TestResultLoincUpdateWithWhereUniqueWithoutTestCatalogInputSchema),z.lazy(() => TestResultLoincUpdateWithWhereUniqueWithoutTestCatalogInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => TestResultLoincUpdateManyWithWhereWithoutTestCatalogInputSchema),z.lazy(() => TestResultLoincUpdateManyWithWhereWithoutTestCatalogInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => TestResultLoincScalarWhereInputSchema),z.lazy(() => TestResultLoincScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const TestCatalogCreateNestedOneWithoutTestCptCodeInputSchema: z.ZodType<Prisma.TestCatalogCreateNestedOneWithoutTestCptCodeInput> = z.object({
  create: z.union([ z.lazy(() => TestCatalogCreateWithoutTestCptCodeInputSchema),z.lazy(() => TestCatalogUncheckedCreateWithoutTestCptCodeInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => TestCatalogCreateOrConnectWithoutTestCptCodeInputSchema).optional(),
  connect: z.lazy(() => TestCatalogWhereUniqueInputSchema).optional()
}).strict();

export const TestCatalogUpdateOneRequiredWithoutTestCptCodeNestedInputSchema: z.ZodType<Prisma.TestCatalogUpdateOneRequiredWithoutTestCptCodeNestedInput> = z.object({
  create: z.union([ z.lazy(() => TestCatalogCreateWithoutTestCptCodeInputSchema),z.lazy(() => TestCatalogUncheckedCreateWithoutTestCptCodeInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => TestCatalogCreateOrConnectWithoutTestCptCodeInputSchema).optional(),
  upsert: z.lazy(() => TestCatalogUpsertWithoutTestCptCodeInputSchema).optional(),
  connect: z.lazy(() => TestCatalogWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => TestCatalogUpdateToOneWithWhereWithoutTestCptCodeInputSchema),z.lazy(() => TestCatalogUpdateWithoutTestCptCodeInputSchema),z.lazy(() => TestCatalogUncheckedUpdateWithoutTestCptCodeInputSchema) ]).optional(),
}).strict();

export const TestCatalogCreateNestedOneWithoutTestGeneInputSchema: z.ZodType<Prisma.TestCatalogCreateNestedOneWithoutTestGeneInput> = z.object({
  create: z.union([ z.lazy(() => TestCatalogCreateWithoutTestGeneInputSchema),z.lazy(() => TestCatalogUncheckedCreateWithoutTestGeneInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => TestCatalogCreateOrConnectWithoutTestGeneInputSchema).optional(),
  connect: z.lazy(() => TestCatalogWhereUniqueInputSchema).optional()
}).strict();

export const TestCatalogUpdateOneRequiredWithoutTestGeneNestedInputSchema: z.ZodType<Prisma.TestCatalogUpdateOneRequiredWithoutTestGeneNestedInput> = z.object({
  create: z.union([ z.lazy(() => TestCatalogCreateWithoutTestGeneInputSchema),z.lazy(() => TestCatalogUncheckedCreateWithoutTestGeneInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => TestCatalogCreateOrConnectWithoutTestGeneInputSchema).optional(),
  upsert: z.lazy(() => TestCatalogUpsertWithoutTestGeneInputSchema).optional(),
  connect: z.lazy(() => TestCatalogWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => TestCatalogUpdateToOneWithWhereWithoutTestGeneInputSchema),z.lazy(() => TestCatalogUpdateWithoutTestGeneInputSchema),z.lazy(() => TestCatalogUncheckedUpdateWithoutTestGeneInputSchema) ]).optional(),
}).strict();

export const LOINCCreateNestedOneWithoutTestOrderLoincInputSchema: z.ZodType<Prisma.LOINCCreateNestedOneWithoutTestOrderLoincInput> = z.object({
  create: z.union([ z.lazy(() => LOINCCreateWithoutTestOrderLoincInputSchema),z.lazy(() => LOINCUncheckedCreateWithoutTestOrderLoincInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => LOINCCreateOrConnectWithoutTestOrderLoincInputSchema).optional(),
  connect: z.lazy(() => LOINCWhereUniqueInputSchema).optional()
}).strict();

export const TestCatalogCreateNestedOneWithoutTestOrderLoincInputSchema: z.ZodType<Prisma.TestCatalogCreateNestedOneWithoutTestOrderLoincInput> = z.object({
  create: z.union([ z.lazy(() => TestCatalogCreateWithoutTestOrderLoincInputSchema),z.lazy(() => TestCatalogUncheckedCreateWithoutTestOrderLoincInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => TestCatalogCreateOrConnectWithoutTestOrderLoincInputSchema).optional(),
  connect: z.lazy(() => TestCatalogWhereUniqueInputSchema).optional()
}).strict();

export const LOINCUpdateOneWithoutTestOrderLoincNestedInputSchema: z.ZodType<Prisma.LOINCUpdateOneWithoutTestOrderLoincNestedInput> = z.object({
  create: z.union([ z.lazy(() => LOINCCreateWithoutTestOrderLoincInputSchema),z.lazy(() => LOINCUncheckedCreateWithoutTestOrderLoincInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => LOINCCreateOrConnectWithoutTestOrderLoincInputSchema).optional(),
  upsert: z.lazy(() => LOINCUpsertWithoutTestOrderLoincInputSchema).optional(),
  disconnect: z.union([ z.boolean(),z.lazy(() => LOINCWhereInputSchema) ]).optional(),
  delete: z.union([ z.boolean(),z.lazy(() => LOINCWhereInputSchema) ]).optional(),
  connect: z.lazy(() => LOINCWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => LOINCUpdateToOneWithWhereWithoutTestOrderLoincInputSchema),z.lazy(() => LOINCUpdateWithoutTestOrderLoincInputSchema),z.lazy(() => LOINCUncheckedUpdateWithoutTestOrderLoincInputSchema) ]).optional(),
}).strict();

export const TestCatalogUpdateOneRequiredWithoutTestOrderLoincNestedInputSchema: z.ZodType<Prisma.TestCatalogUpdateOneRequiredWithoutTestOrderLoincNestedInput> = z.object({
  create: z.union([ z.lazy(() => TestCatalogCreateWithoutTestOrderLoincInputSchema),z.lazy(() => TestCatalogUncheckedCreateWithoutTestOrderLoincInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => TestCatalogCreateOrConnectWithoutTestOrderLoincInputSchema).optional(),
  upsert: z.lazy(() => TestCatalogUpsertWithoutTestOrderLoincInputSchema).optional(),
  connect: z.lazy(() => TestCatalogWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => TestCatalogUpdateToOneWithWhereWithoutTestOrderLoincInputSchema),z.lazy(() => TestCatalogUpdateWithoutTestOrderLoincInputSchema),z.lazy(() => TestCatalogUncheckedUpdateWithoutTestOrderLoincInputSchema) ]).optional(),
}).strict();

export const LOINCCreateNestedOneWithoutTestResultLoincInputSchema: z.ZodType<Prisma.LOINCCreateNestedOneWithoutTestResultLoincInput> = z.object({
  create: z.union([ z.lazy(() => LOINCCreateWithoutTestResultLoincInputSchema),z.lazy(() => LOINCUncheckedCreateWithoutTestResultLoincInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => LOINCCreateOrConnectWithoutTestResultLoincInputSchema).optional(),
  connect: z.lazy(() => LOINCWhereUniqueInputSchema).optional()
}).strict();

export const TestCatalogCreateNestedOneWithoutTestResultLoincInputSchema: z.ZodType<Prisma.TestCatalogCreateNestedOneWithoutTestResultLoincInput> = z.object({
  create: z.union([ z.lazy(() => TestCatalogCreateWithoutTestResultLoincInputSchema),z.lazy(() => TestCatalogUncheckedCreateWithoutTestResultLoincInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => TestCatalogCreateOrConnectWithoutTestResultLoincInputSchema).optional(),
  connect: z.lazy(() => TestCatalogWhereUniqueInputSchema).optional()
}).strict();

export const LOINCUpdateOneWithoutTestResultLoincNestedInputSchema: z.ZodType<Prisma.LOINCUpdateOneWithoutTestResultLoincNestedInput> = z.object({
  create: z.union([ z.lazy(() => LOINCCreateWithoutTestResultLoincInputSchema),z.lazy(() => LOINCUncheckedCreateWithoutTestResultLoincInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => LOINCCreateOrConnectWithoutTestResultLoincInputSchema).optional(),
  upsert: z.lazy(() => LOINCUpsertWithoutTestResultLoincInputSchema).optional(),
  disconnect: z.union([ z.boolean(),z.lazy(() => LOINCWhereInputSchema) ]).optional(),
  delete: z.union([ z.boolean(),z.lazy(() => LOINCWhereInputSchema) ]).optional(),
  connect: z.lazy(() => LOINCWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => LOINCUpdateToOneWithWhereWithoutTestResultLoincInputSchema),z.lazy(() => LOINCUpdateWithoutTestResultLoincInputSchema),z.lazy(() => LOINCUncheckedUpdateWithoutTestResultLoincInputSchema) ]).optional(),
}).strict();

export const TestCatalogUpdateOneRequiredWithoutTestResultLoincNestedInputSchema: z.ZodType<Prisma.TestCatalogUpdateOneRequiredWithoutTestResultLoincNestedInput> = z.object({
  create: z.union([ z.lazy(() => TestCatalogCreateWithoutTestResultLoincInputSchema),z.lazy(() => TestCatalogUncheckedCreateWithoutTestResultLoincInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => TestCatalogCreateOrConnectWithoutTestResultLoincInputSchema).optional(),
  upsert: z.lazy(() => TestCatalogUpsertWithoutTestResultLoincInputSchema).optional(),
  connect: z.lazy(() => TestCatalogWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => TestCatalogUpdateToOneWithWhereWithoutTestResultLoincInputSchema),z.lazy(() => TestCatalogUpdateWithoutTestResultLoincInputSchema),z.lazy(() => TestCatalogUncheckedUpdateWithoutTestResultLoincInputSchema) ]).optional(),
}).strict();

export const AccountCreateNestedOneWithoutUserInputSchema: z.ZodType<Prisma.AccountCreateNestedOneWithoutUserInput> = z.object({
  create: z.union([ z.lazy(() => AccountCreateWithoutUserInputSchema),z.lazy(() => AccountUncheckedCreateWithoutUserInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => AccountCreateOrConnectWithoutUserInputSchema).optional(),
  connect: z.lazy(() => AccountWhereUniqueInputSchema).optional()
}).strict();

export const SessionCreateNestedManyWithoutUserInputSchema: z.ZodType<Prisma.SessionCreateNestedManyWithoutUserInput> = z.object({
  create: z.union([ z.lazy(() => SessionCreateWithoutUserInputSchema),z.lazy(() => SessionCreateWithoutUserInputSchema).array(),z.lazy(() => SessionUncheckedCreateWithoutUserInputSchema),z.lazy(() => SessionUncheckedCreateWithoutUserInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => SessionCreateOrConnectWithoutUserInputSchema),z.lazy(() => SessionCreateOrConnectWithoutUserInputSchema).array() ]).optional(),
  createMany: z.lazy(() => SessionCreateManyUserInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => SessionWhereUniqueInputSchema),z.lazy(() => SessionWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const UserAttributeCreateNestedOneWithoutUserInputSchema: z.ZodType<Prisma.UserAttributeCreateNestedOneWithoutUserInput> = z.object({
  create: z.union([ z.lazy(() => UserAttributeCreateWithoutUserInputSchema),z.lazy(() => UserAttributeUncheckedCreateWithoutUserInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => UserAttributeCreateOrConnectWithoutUserInputSchema).optional(),
  connect: z.lazy(() => UserAttributeWhereUniqueInputSchema).optional()
}).strict();

export const AccountUncheckedCreateNestedOneWithoutUserInputSchema: z.ZodType<Prisma.AccountUncheckedCreateNestedOneWithoutUserInput> = z.object({
  create: z.union([ z.lazy(() => AccountCreateWithoutUserInputSchema),z.lazy(() => AccountUncheckedCreateWithoutUserInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => AccountCreateOrConnectWithoutUserInputSchema).optional(),
  connect: z.lazy(() => AccountWhereUniqueInputSchema).optional()
}).strict();

export const SessionUncheckedCreateNestedManyWithoutUserInputSchema: z.ZodType<Prisma.SessionUncheckedCreateNestedManyWithoutUserInput> = z.object({
  create: z.union([ z.lazy(() => SessionCreateWithoutUserInputSchema),z.lazy(() => SessionCreateWithoutUserInputSchema).array(),z.lazy(() => SessionUncheckedCreateWithoutUserInputSchema),z.lazy(() => SessionUncheckedCreateWithoutUserInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => SessionCreateOrConnectWithoutUserInputSchema),z.lazy(() => SessionCreateOrConnectWithoutUserInputSchema).array() ]).optional(),
  createMany: z.lazy(() => SessionCreateManyUserInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => SessionWhereUniqueInputSchema),z.lazy(() => SessionWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const UserAttributeUncheckedCreateNestedOneWithoutUserInputSchema: z.ZodType<Prisma.UserAttributeUncheckedCreateNestedOneWithoutUserInput> = z.object({
  create: z.union([ z.lazy(() => UserAttributeCreateWithoutUserInputSchema),z.lazy(() => UserAttributeUncheckedCreateWithoutUserInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => UserAttributeCreateOrConnectWithoutUserInputSchema).optional(),
  connect: z.lazy(() => UserAttributeWhereUniqueInputSchema).optional()
}).strict();

export const AccountUpdateOneWithoutUserNestedInputSchema: z.ZodType<Prisma.AccountUpdateOneWithoutUserNestedInput> = z.object({
  create: z.union([ z.lazy(() => AccountCreateWithoutUserInputSchema),z.lazy(() => AccountUncheckedCreateWithoutUserInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => AccountCreateOrConnectWithoutUserInputSchema).optional(),
  upsert: z.lazy(() => AccountUpsertWithoutUserInputSchema).optional(),
  disconnect: z.union([ z.boolean(),z.lazy(() => AccountWhereInputSchema) ]).optional(),
  delete: z.union([ z.boolean(),z.lazy(() => AccountWhereInputSchema) ]).optional(),
  connect: z.lazy(() => AccountWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => AccountUpdateToOneWithWhereWithoutUserInputSchema),z.lazy(() => AccountUpdateWithoutUserInputSchema),z.lazy(() => AccountUncheckedUpdateWithoutUserInputSchema) ]).optional(),
}).strict();

export const SessionUpdateManyWithoutUserNestedInputSchema: z.ZodType<Prisma.SessionUpdateManyWithoutUserNestedInput> = z.object({
  create: z.union([ z.lazy(() => SessionCreateWithoutUserInputSchema),z.lazy(() => SessionCreateWithoutUserInputSchema).array(),z.lazy(() => SessionUncheckedCreateWithoutUserInputSchema),z.lazy(() => SessionUncheckedCreateWithoutUserInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => SessionCreateOrConnectWithoutUserInputSchema),z.lazy(() => SessionCreateOrConnectWithoutUserInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => SessionUpsertWithWhereUniqueWithoutUserInputSchema),z.lazy(() => SessionUpsertWithWhereUniqueWithoutUserInputSchema).array() ]).optional(),
  createMany: z.lazy(() => SessionCreateManyUserInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => SessionWhereUniqueInputSchema),z.lazy(() => SessionWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => SessionWhereUniqueInputSchema),z.lazy(() => SessionWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => SessionWhereUniqueInputSchema),z.lazy(() => SessionWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => SessionWhereUniqueInputSchema),z.lazy(() => SessionWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => SessionUpdateWithWhereUniqueWithoutUserInputSchema),z.lazy(() => SessionUpdateWithWhereUniqueWithoutUserInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => SessionUpdateManyWithWhereWithoutUserInputSchema),z.lazy(() => SessionUpdateManyWithWhereWithoutUserInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => SessionScalarWhereInputSchema),z.lazy(() => SessionScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const UserAttributeUpdateOneWithoutUserNestedInputSchema: z.ZodType<Prisma.UserAttributeUpdateOneWithoutUserNestedInput> = z.object({
  create: z.union([ z.lazy(() => UserAttributeCreateWithoutUserInputSchema),z.lazy(() => UserAttributeUncheckedCreateWithoutUserInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => UserAttributeCreateOrConnectWithoutUserInputSchema).optional(),
  upsert: z.lazy(() => UserAttributeUpsertWithoutUserInputSchema).optional(),
  disconnect: z.union([ z.boolean(),z.lazy(() => UserAttributeWhereInputSchema) ]).optional(),
  delete: z.union([ z.boolean(),z.lazy(() => UserAttributeWhereInputSchema) ]).optional(),
  connect: z.lazy(() => UserAttributeWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => UserAttributeUpdateToOneWithWhereWithoutUserInputSchema),z.lazy(() => UserAttributeUpdateWithoutUserInputSchema),z.lazy(() => UserAttributeUncheckedUpdateWithoutUserInputSchema) ]).optional(),
}).strict();

export const AccountUncheckedUpdateOneWithoutUserNestedInputSchema: z.ZodType<Prisma.AccountUncheckedUpdateOneWithoutUserNestedInput> = z.object({
  create: z.union([ z.lazy(() => AccountCreateWithoutUserInputSchema),z.lazy(() => AccountUncheckedCreateWithoutUserInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => AccountCreateOrConnectWithoutUserInputSchema).optional(),
  upsert: z.lazy(() => AccountUpsertWithoutUserInputSchema).optional(),
  disconnect: z.union([ z.boolean(),z.lazy(() => AccountWhereInputSchema) ]).optional(),
  delete: z.union([ z.boolean(),z.lazy(() => AccountWhereInputSchema) ]).optional(),
  connect: z.lazy(() => AccountWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => AccountUpdateToOneWithWhereWithoutUserInputSchema),z.lazy(() => AccountUpdateWithoutUserInputSchema),z.lazy(() => AccountUncheckedUpdateWithoutUserInputSchema) ]).optional(),
}).strict();

export const SessionUncheckedUpdateManyWithoutUserNestedInputSchema: z.ZodType<Prisma.SessionUncheckedUpdateManyWithoutUserNestedInput> = z.object({
  create: z.union([ z.lazy(() => SessionCreateWithoutUserInputSchema),z.lazy(() => SessionCreateWithoutUserInputSchema).array(),z.lazy(() => SessionUncheckedCreateWithoutUserInputSchema),z.lazy(() => SessionUncheckedCreateWithoutUserInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => SessionCreateOrConnectWithoutUserInputSchema),z.lazy(() => SessionCreateOrConnectWithoutUserInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => SessionUpsertWithWhereUniqueWithoutUserInputSchema),z.lazy(() => SessionUpsertWithWhereUniqueWithoutUserInputSchema).array() ]).optional(),
  createMany: z.lazy(() => SessionCreateManyUserInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => SessionWhereUniqueInputSchema),z.lazy(() => SessionWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => SessionWhereUniqueInputSchema),z.lazy(() => SessionWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => SessionWhereUniqueInputSchema),z.lazy(() => SessionWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => SessionWhereUniqueInputSchema),z.lazy(() => SessionWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => SessionUpdateWithWhereUniqueWithoutUserInputSchema),z.lazy(() => SessionUpdateWithWhereUniqueWithoutUserInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => SessionUpdateManyWithWhereWithoutUserInputSchema),z.lazy(() => SessionUpdateManyWithWhereWithoutUserInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => SessionScalarWhereInputSchema),z.lazy(() => SessionScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const UserAttributeUncheckedUpdateOneWithoutUserNestedInputSchema: z.ZodType<Prisma.UserAttributeUncheckedUpdateOneWithoutUserNestedInput> = z.object({
  create: z.union([ z.lazy(() => UserAttributeCreateWithoutUserInputSchema),z.lazy(() => UserAttributeUncheckedCreateWithoutUserInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => UserAttributeCreateOrConnectWithoutUserInputSchema).optional(),
  upsert: z.lazy(() => UserAttributeUpsertWithoutUserInputSchema).optional(),
  disconnect: z.union([ z.boolean(),z.lazy(() => UserAttributeWhereInputSchema) ]).optional(),
  delete: z.union([ z.boolean(),z.lazy(() => UserAttributeWhereInputSchema) ]).optional(),
  connect: z.lazy(() => UserAttributeWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => UserAttributeUpdateToOneWithWhereWithoutUserInputSchema),z.lazy(() => UserAttributeUpdateWithoutUserInputSchema),z.lazy(() => UserAttributeUncheckedUpdateWithoutUserInputSchema) ]).optional(),
}).strict();

export const AdminCreateNestedOneWithoutUserAttributeInputSchema: z.ZodType<Prisma.AdminCreateNestedOneWithoutUserAttributeInput> = z.object({
  create: z.union([ z.lazy(() => AdminCreateWithoutUserAttributeInputSchema),z.lazy(() => AdminUncheckedCreateWithoutUserAttributeInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => AdminCreateOrConnectWithoutUserAttributeInputSchema).optional(),
  connect: z.lazy(() => AdminWhereUniqueInputSchema).optional()
}).strict();

export const ProviderCreateNestedOneWithoutUserAttributeInputSchema: z.ZodType<Prisma.ProviderCreateNestedOneWithoutUserAttributeInput> = z.object({
  create: z.union([ z.lazy(() => ProviderCreateWithoutUserAttributeInputSchema),z.lazy(() => ProviderUncheckedCreateWithoutUserAttributeInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => ProviderCreateOrConnectWithoutUserAttributeInputSchema).optional(),
  connect: z.lazy(() => ProviderWhereUniqueInputSchema).optional()
}).strict();

export const UserCreateNestedOneWithoutUserAttributeInputSchema: z.ZodType<Prisma.UserCreateNestedOneWithoutUserAttributeInput> = z.object({
  create: z.union([ z.lazy(() => UserCreateWithoutUserAttributeInputSchema),z.lazy(() => UserUncheckedCreateWithoutUserAttributeInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => UserCreateOrConnectWithoutUserAttributeInputSchema).optional(),
  connect: z.lazy(() => UserWhereUniqueInputSchema).optional()
}).strict();

export const AdminUncheckedCreateNestedOneWithoutUserAttributeInputSchema: z.ZodType<Prisma.AdminUncheckedCreateNestedOneWithoutUserAttributeInput> = z.object({
  create: z.union([ z.lazy(() => AdminCreateWithoutUserAttributeInputSchema),z.lazy(() => AdminUncheckedCreateWithoutUserAttributeInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => AdminCreateOrConnectWithoutUserAttributeInputSchema).optional(),
  connect: z.lazy(() => AdminWhereUniqueInputSchema).optional()
}).strict();

export const ProviderUncheckedCreateNestedOneWithoutUserAttributeInputSchema: z.ZodType<Prisma.ProviderUncheckedCreateNestedOneWithoutUserAttributeInput> = z.object({
  create: z.union([ z.lazy(() => ProviderCreateWithoutUserAttributeInputSchema),z.lazy(() => ProviderUncheckedCreateWithoutUserAttributeInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => ProviderCreateOrConnectWithoutUserAttributeInputSchema).optional(),
  connect: z.lazy(() => ProviderWhereUniqueInputSchema).optional()
}).strict();

export const NullableEnumUserAttribute_UserTypeFieldUpdateOperationsInputSchema: z.ZodType<Prisma.NullableEnumUserAttribute_UserTypeFieldUpdateOperationsInput> = z.object({
  set: z.lazy(() => UserAttribute_UserTypeSchema).optional().nullable()
}).strict();

export const AdminUpdateOneWithoutUserAttributeNestedInputSchema: z.ZodType<Prisma.AdminUpdateOneWithoutUserAttributeNestedInput> = z.object({
  create: z.union([ z.lazy(() => AdminCreateWithoutUserAttributeInputSchema),z.lazy(() => AdminUncheckedCreateWithoutUserAttributeInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => AdminCreateOrConnectWithoutUserAttributeInputSchema).optional(),
  upsert: z.lazy(() => AdminUpsertWithoutUserAttributeInputSchema).optional(),
  disconnect: z.union([ z.boolean(),z.lazy(() => AdminWhereInputSchema) ]).optional(),
  delete: z.union([ z.boolean(),z.lazy(() => AdminWhereInputSchema) ]).optional(),
  connect: z.lazy(() => AdminWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => AdminUpdateToOneWithWhereWithoutUserAttributeInputSchema),z.lazy(() => AdminUpdateWithoutUserAttributeInputSchema),z.lazy(() => AdminUncheckedUpdateWithoutUserAttributeInputSchema) ]).optional(),
}).strict();

export const ProviderUpdateOneWithoutUserAttributeNestedInputSchema: z.ZodType<Prisma.ProviderUpdateOneWithoutUserAttributeNestedInput> = z.object({
  create: z.union([ z.lazy(() => ProviderCreateWithoutUserAttributeInputSchema),z.lazy(() => ProviderUncheckedCreateWithoutUserAttributeInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => ProviderCreateOrConnectWithoutUserAttributeInputSchema).optional(),
  upsert: z.lazy(() => ProviderUpsertWithoutUserAttributeInputSchema).optional(),
  disconnect: z.union([ z.boolean(),z.lazy(() => ProviderWhereInputSchema) ]).optional(),
  delete: z.union([ z.boolean(),z.lazy(() => ProviderWhereInputSchema) ]).optional(),
  connect: z.lazy(() => ProviderWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => ProviderUpdateToOneWithWhereWithoutUserAttributeInputSchema),z.lazy(() => ProviderUpdateWithoutUserAttributeInputSchema),z.lazy(() => ProviderUncheckedUpdateWithoutUserAttributeInputSchema) ]).optional(),
}).strict();

export const UserUpdateOneRequiredWithoutUserAttributeNestedInputSchema: z.ZodType<Prisma.UserUpdateOneRequiredWithoutUserAttributeNestedInput> = z.object({
  create: z.union([ z.lazy(() => UserCreateWithoutUserAttributeInputSchema),z.lazy(() => UserUncheckedCreateWithoutUserAttributeInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => UserCreateOrConnectWithoutUserAttributeInputSchema).optional(),
  upsert: z.lazy(() => UserUpsertWithoutUserAttributeInputSchema).optional(),
  connect: z.lazy(() => UserWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => UserUpdateToOneWithWhereWithoutUserAttributeInputSchema),z.lazy(() => UserUpdateWithoutUserAttributeInputSchema),z.lazy(() => UserUncheckedUpdateWithoutUserAttributeInputSchema) ]).optional(),
}).strict();

export const AdminUncheckedUpdateOneWithoutUserAttributeNestedInputSchema: z.ZodType<Prisma.AdminUncheckedUpdateOneWithoutUserAttributeNestedInput> = z.object({
  create: z.union([ z.lazy(() => AdminCreateWithoutUserAttributeInputSchema),z.lazy(() => AdminUncheckedCreateWithoutUserAttributeInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => AdminCreateOrConnectWithoutUserAttributeInputSchema).optional(),
  upsert: z.lazy(() => AdminUpsertWithoutUserAttributeInputSchema).optional(),
  disconnect: z.union([ z.boolean(),z.lazy(() => AdminWhereInputSchema) ]).optional(),
  delete: z.union([ z.boolean(),z.lazy(() => AdminWhereInputSchema) ]).optional(),
  connect: z.lazy(() => AdminWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => AdminUpdateToOneWithWhereWithoutUserAttributeInputSchema),z.lazy(() => AdminUpdateWithoutUserAttributeInputSchema),z.lazy(() => AdminUncheckedUpdateWithoutUserAttributeInputSchema) ]).optional(),
}).strict();

export const ProviderUncheckedUpdateOneWithoutUserAttributeNestedInputSchema: z.ZodType<Prisma.ProviderUncheckedUpdateOneWithoutUserAttributeNestedInput> = z.object({
  create: z.union([ z.lazy(() => ProviderCreateWithoutUserAttributeInputSchema),z.lazy(() => ProviderUncheckedCreateWithoutUserAttributeInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => ProviderCreateOrConnectWithoutUserAttributeInputSchema).optional(),
  upsert: z.lazy(() => ProviderUpsertWithoutUserAttributeInputSchema).optional(),
  disconnect: z.union([ z.boolean(),z.lazy(() => ProviderWhereInputSchema) ]).optional(),
  delete: z.union([ z.boolean(),z.lazy(() => ProviderWhereInputSchema) ]).optional(),
  connect: z.lazy(() => ProviderWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => ProviderUpdateToOneWithWhereWithoutUserAttributeInputSchema),z.lazy(() => ProviderUpdateWithoutUserAttributeInputSchema),z.lazy(() => ProviderUncheckedUpdateWithoutUserAttributeInputSchema) ]).optional(),
}).strict();

export const NestedStringFilterSchema: z.ZodType<Prisma.NestedStringFilter> = z.object({
  equals: z.string().optional(),
  in: z.string().array().optional(),
  notIn: z.string().array().optional(),
  lt: z.string().optional(),
  lte: z.string().optional(),
  gt: z.string().optional(),
  gte: z.string().optional(),
  contains: z.string().optional(),
  startsWith: z.string().optional(),
  endsWith: z.string().optional(),
  search: z.string().optional(),
  not: z.union([ z.string(),z.lazy(() => NestedStringFilterSchema) ]).optional(),
}).strict();

export const NestedStringNullableFilterSchema: z.ZodType<Prisma.NestedStringNullableFilter> = z.object({
  equals: z.string().optional().nullable(),
  in: z.string().array().optional().nullable(),
  notIn: z.string().array().optional().nullable(),
  lt: z.string().optional(),
  lte: z.string().optional(),
  gt: z.string().optional(),
  gte: z.string().optional(),
  contains: z.string().optional(),
  startsWith: z.string().optional(),
  endsWith: z.string().optional(),
  search: z.string().optional(),
  not: z.union([ z.string(),z.lazy(() => NestedStringNullableFilterSchema) ]).optional().nullable(),
}).strict();

export const NestedIntNullableFilterSchema: z.ZodType<Prisma.NestedIntNullableFilter> = z.object({
  equals: z.number().optional().nullable(),
  in: z.number().array().optional().nullable(),
  notIn: z.number().array().optional().nullable(),
  lt: z.number().optional(),
  lte: z.number().optional(),
  gt: z.number().optional(),
  gte: z.number().optional(),
  not: z.union([ z.number(),z.lazy(() => NestedIntNullableFilterSchema) ]).optional().nullable(),
}).strict();

export const NestedDateTimeNullableFilterSchema: z.ZodType<Prisma.NestedDateTimeNullableFilter> = z.object({
  equals: z.date().optional().nullable(),
  in: z.date().array().optional().nullable(),
  notIn: z.date().array().optional().nullable(),
  lt: z.date().optional(),
  lte: z.date().optional(),
  gt: z.date().optional(),
  gte: z.date().optional(),
  not: z.union([ z.date(),z.lazy(() => NestedDateTimeNullableFilterSchema) ]).optional().nullable(),
}).strict();

export const NestedStringWithAggregatesFilterSchema: z.ZodType<Prisma.NestedStringWithAggregatesFilter> = z.object({
  equals: z.string().optional(),
  in: z.string().array().optional(),
  notIn: z.string().array().optional(),
  lt: z.string().optional(),
  lte: z.string().optional(),
  gt: z.string().optional(),
  gte: z.string().optional(),
  contains: z.string().optional(),
  startsWith: z.string().optional(),
  endsWith: z.string().optional(),
  search: z.string().optional(),
  not: z.union([ z.string(),z.lazy(() => NestedStringWithAggregatesFilterSchema) ]).optional(),
  _count: z.lazy(() => NestedIntFilterSchema).optional(),
  _min: z.lazy(() => NestedStringFilterSchema).optional(),
  _max: z.lazy(() => NestedStringFilterSchema).optional()
}).strict();

export const NestedIntFilterSchema: z.ZodType<Prisma.NestedIntFilter> = z.object({
  equals: z.number().optional(),
  in: z.number().array().optional(),
  notIn: z.number().array().optional(),
  lt: z.number().optional(),
  lte: z.number().optional(),
  gt: z.number().optional(),
  gte: z.number().optional(),
  not: z.union([ z.number(),z.lazy(() => NestedIntFilterSchema) ]).optional(),
}).strict();

export const NestedStringNullableWithAggregatesFilterSchema: z.ZodType<Prisma.NestedStringNullableWithAggregatesFilter> = z.object({
  equals: z.string().optional().nullable(),
  in: z.string().array().optional().nullable(),
  notIn: z.string().array().optional().nullable(),
  lt: z.string().optional(),
  lte: z.string().optional(),
  gt: z.string().optional(),
  gte: z.string().optional(),
  contains: z.string().optional(),
  startsWith: z.string().optional(),
  endsWith: z.string().optional(),
  search: z.string().optional(),
  not: z.union([ z.string(),z.lazy(() => NestedStringNullableWithAggregatesFilterSchema) ]).optional().nullable(),
  _count: z.lazy(() => NestedIntNullableFilterSchema).optional(),
  _min: z.lazy(() => NestedStringNullableFilterSchema).optional(),
  _max: z.lazy(() => NestedStringNullableFilterSchema).optional()
}).strict();

export const NestedIntNullableWithAggregatesFilterSchema: z.ZodType<Prisma.NestedIntNullableWithAggregatesFilter> = z.object({
  equals: z.number().optional().nullable(),
  in: z.number().array().optional().nullable(),
  notIn: z.number().array().optional().nullable(),
  lt: z.number().optional(),
  lte: z.number().optional(),
  gt: z.number().optional(),
  gte: z.number().optional(),
  not: z.union([ z.number(),z.lazy(() => NestedIntNullableWithAggregatesFilterSchema) ]).optional().nullable(),
  _count: z.lazy(() => NestedIntNullableFilterSchema).optional(),
  _avg: z.lazy(() => NestedFloatNullableFilterSchema).optional(),
  _sum: z.lazy(() => NestedIntNullableFilterSchema).optional(),
  _min: z.lazy(() => NestedIntNullableFilterSchema).optional(),
  _max: z.lazy(() => NestedIntNullableFilterSchema).optional()
}).strict();

export const NestedFloatNullableFilterSchema: z.ZodType<Prisma.NestedFloatNullableFilter> = z.object({
  equals: z.number().optional().nullable(),
  in: z.number().array().optional().nullable(),
  notIn: z.number().array().optional().nullable(),
  lt: z.number().optional(),
  lte: z.number().optional(),
  gt: z.number().optional(),
  gte: z.number().optional(),
  not: z.union([ z.number(),z.lazy(() => NestedFloatNullableFilterSchema) ]).optional().nullable(),
}).strict();

export const NestedDateTimeNullableWithAggregatesFilterSchema: z.ZodType<Prisma.NestedDateTimeNullableWithAggregatesFilter> = z.object({
  equals: z.date().optional().nullable(),
  in: z.date().array().optional().nullable(),
  notIn: z.date().array().optional().nullable(),
  lt: z.date().optional(),
  lte: z.date().optional(),
  gt: z.date().optional(),
  gte: z.date().optional(),
  not: z.union([ z.date(),z.lazy(() => NestedDateTimeNullableWithAggregatesFilterSchema) ]).optional().nullable(),
  _count: z.lazy(() => NestedIntNullableFilterSchema).optional(),
  _min: z.lazy(() => NestedDateTimeNullableFilterSchema).optional(),
  _max: z.lazy(() => NestedDateTimeNullableFilterSchema).optional()
}).strict();

export const NestedIntWithAggregatesFilterSchema: z.ZodType<Prisma.NestedIntWithAggregatesFilter> = z.object({
  equals: z.number().optional(),
  in: z.number().array().optional(),
  notIn: z.number().array().optional(),
  lt: z.number().optional(),
  lte: z.number().optional(),
  gt: z.number().optional(),
  gte: z.number().optional(),
  not: z.union([ z.number(),z.lazy(() => NestedIntWithAggregatesFilterSchema) ]).optional(),
  _count: z.lazy(() => NestedIntFilterSchema).optional(),
  _avg: z.lazy(() => NestedFloatFilterSchema).optional(),
  _sum: z.lazy(() => NestedIntFilterSchema).optional(),
  _min: z.lazy(() => NestedIntFilterSchema).optional(),
  _max: z.lazy(() => NestedIntFilterSchema).optional()
}).strict();

export const NestedFloatFilterSchema: z.ZodType<Prisma.NestedFloatFilter> = z.object({
  equals: z.number().optional(),
  in: z.number().array().optional(),
  notIn: z.number().array().optional(),
  lt: z.number().optional(),
  lte: z.number().optional(),
  gt: z.number().optional(),
  gte: z.number().optional(),
  not: z.union([ z.number(),z.lazy(() => NestedFloatFilterSchema) ]).optional(),
}).strict();

export const NestedBigIntFilterSchema: z.ZodType<Prisma.NestedBigIntFilter> = z.object({
  equals: z.bigint().optional(),
  in: z.bigint().array().optional(),
  notIn: z.bigint().array().optional(),
  lt: z.bigint().optional(),
  lte: z.bigint().optional(),
  gt: z.bigint().optional(),
  gte: z.bigint().optional(),
  not: z.union([ z.bigint(),z.lazy(() => NestedBigIntFilterSchema) ]).optional(),
}).strict();

export const NestedBigIntWithAggregatesFilterSchema: z.ZodType<Prisma.NestedBigIntWithAggregatesFilter> = z.object({
  equals: z.bigint().optional(),
  in: z.bigint().array().optional(),
  notIn: z.bigint().array().optional(),
  lt: z.bigint().optional(),
  lte: z.bigint().optional(),
  gt: z.bigint().optional(),
  gte: z.bigint().optional(),
  not: z.union([ z.bigint(),z.lazy(() => NestedBigIntWithAggregatesFilterSchema) ]).optional(),
  _count: z.lazy(() => NestedIntFilterSchema).optional(),
  _avg: z.lazy(() => NestedFloatFilterSchema).optional(),
  _sum: z.lazy(() => NestedBigIntFilterSchema).optional(),
  _min: z.lazy(() => NestedBigIntFilterSchema).optional(),
  _max: z.lazy(() => NestedBigIntFilterSchema).optional()
}).strict();

export const NestedDateTimeFilterSchema: z.ZodType<Prisma.NestedDateTimeFilter> = z.object({
  equals: z.date().optional(),
  in: z.date().array().optional(),
  notIn: z.date().array().optional(),
  lt: z.date().optional(),
  lte: z.date().optional(),
  gt: z.date().optional(),
  gte: z.date().optional(),
  not: z.union([ z.date(),z.lazy(() => NestedDateTimeFilterSchema) ]).optional(),
}).strict();

export const NestedDateTimeWithAggregatesFilterSchema: z.ZodType<Prisma.NestedDateTimeWithAggregatesFilter> = z.object({
  equals: z.date().optional(),
  in: z.date().array().optional(),
  notIn: z.date().array().optional(),
  lt: z.date().optional(),
  lte: z.date().optional(),
  gt: z.date().optional(),
  gte: z.date().optional(),
  not: z.union([ z.date(),z.lazy(() => NestedDateTimeWithAggregatesFilterSchema) ]).optional(),
  _count: z.lazy(() => NestedIntFilterSchema).optional(),
  _min: z.lazy(() => NestedDateTimeFilterSchema).optional(),
  _max: z.lazy(() => NestedDateTimeFilterSchema).optional()
}).strict();

export const NestedEnumUserAttribute_UserTypeNullableFilterSchema: z.ZodType<Prisma.NestedEnumUserAttribute_UserTypeNullableFilter> = z.object({
  equals: z.lazy(() => UserAttribute_UserTypeSchema).optional().nullable(),
  in: z.lazy(() => UserAttribute_UserTypeSchema).array().optional().nullable(),
  notIn: z.lazy(() => UserAttribute_UserTypeSchema).array().optional().nullable(),
  not: z.union([ z.lazy(() => UserAttribute_UserTypeSchema),z.lazy(() => NestedEnumUserAttribute_UserTypeNullableFilterSchema) ]).optional().nullable(),
}).strict();

export const NestedEnumUserAttribute_UserTypeNullableWithAggregatesFilterSchema: z.ZodType<Prisma.NestedEnumUserAttribute_UserTypeNullableWithAggregatesFilter> = z.object({
  equals: z.lazy(() => UserAttribute_UserTypeSchema).optional().nullable(),
  in: z.lazy(() => UserAttribute_UserTypeSchema).array().optional().nullable(),
  notIn: z.lazy(() => UserAttribute_UserTypeSchema).array().optional().nullable(),
  not: z.union([ z.lazy(() => UserAttribute_UserTypeSchema),z.lazy(() => NestedEnumUserAttribute_UserTypeNullableWithAggregatesFilterSchema) ]).optional().nullable(),
  _count: z.lazy(() => NestedIntNullableFilterSchema).optional(),
  _min: z.lazy(() => NestedEnumUserAttribute_UserTypeNullableFilterSchema).optional(),
  _max: z.lazy(() => NestedEnumUserAttribute_UserTypeNullableFilterSchema).optional()
}).strict();

export const UserCreateWithoutAccountInputSchema: z.ZodType<Prisma.UserCreateWithoutAccountInput> = z.object({
  id: z.string().optional(),
  name: z.string().optional().nullable(),
  email: z.string().optional().nullable(),
  password: z.string().optional().nullable(),
  emailVerified: z.date().optional().nullable(),
  image: z.string().optional().nullable(),
  Session: z.lazy(() => SessionCreateNestedManyWithoutUserInputSchema).optional(),
  UserAttribute: z.lazy(() => UserAttributeCreateNestedOneWithoutUserInputSchema).optional()
}).strict();

export const UserUncheckedCreateWithoutAccountInputSchema: z.ZodType<Prisma.UserUncheckedCreateWithoutAccountInput> = z.object({
  id: z.string().optional(),
  name: z.string().optional().nullable(),
  email: z.string().optional().nullable(),
  password: z.string().optional().nullable(),
  emailVerified: z.date().optional().nullable(),
  image: z.string().optional().nullable(),
  Session: z.lazy(() => SessionUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  UserAttribute: z.lazy(() => UserAttributeUncheckedCreateNestedOneWithoutUserInputSchema).optional()
}).strict();

export const UserCreateOrConnectWithoutAccountInputSchema: z.ZodType<Prisma.UserCreateOrConnectWithoutAccountInput> = z.object({
  where: z.lazy(() => UserWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => UserCreateWithoutAccountInputSchema),z.lazy(() => UserUncheckedCreateWithoutAccountInputSchema) ]),
}).strict();

export const UserUpsertWithoutAccountInputSchema: z.ZodType<Prisma.UserUpsertWithoutAccountInput> = z.object({
  update: z.union([ z.lazy(() => UserUpdateWithoutAccountInputSchema),z.lazy(() => UserUncheckedUpdateWithoutAccountInputSchema) ]),
  create: z.union([ z.lazy(() => UserCreateWithoutAccountInputSchema),z.lazy(() => UserUncheckedCreateWithoutAccountInputSchema) ]),
  where: z.lazy(() => UserWhereInputSchema).optional()
}).strict();

export const UserUpdateToOneWithWhereWithoutAccountInputSchema: z.ZodType<Prisma.UserUpdateToOneWithWhereWithoutAccountInput> = z.object({
  where: z.lazy(() => UserWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => UserUpdateWithoutAccountInputSchema),z.lazy(() => UserUncheckedUpdateWithoutAccountInputSchema) ]),
}).strict();

export const UserUpdateWithoutAccountInputSchema: z.ZodType<Prisma.UserUpdateWithoutAccountInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  email: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  password: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  emailVerified: z.union([ z.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  image: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Session: z.lazy(() => SessionUpdateManyWithoutUserNestedInputSchema).optional(),
  UserAttribute: z.lazy(() => UserAttributeUpdateOneWithoutUserNestedInputSchema).optional()
}).strict();

export const UserUncheckedUpdateWithoutAccountInputSchema: z.ZodType<Prisma.UserUncheckedUpdateWithoutAccountInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  email: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  password: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  emailVerified: z.union([ z.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  image: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Session: z.lazy(() => SessionUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  UserAttribute: z.lazy(() => UserAttributeUncheckedUpdateOneWithoutUserNestedInputSchema).optional()
}).strict();

export const UserAttributeCreateWithoutAdminInputSchema: z.ZodType<Prisma.UserAttributeCreateWithoutAdminInput> = z.object({
  Id: z.string().optional(),
  UserType: z.lazy(() => UserAttribute_UserTypeSchema).optional().nullable(),
  Provider: z.lazy(() => ProviderCreateNestedOneWithoutUserAttributeInputSchema).optional(),
  User: z.lazy(() => UserCreateNestedOneWithoutUserAttributeInputSchema)
}).strict();

export const UserAttributeUncheckedCreateWithoutAdminInputSchema: z.ZodType<Prisma.UserAttributeUncheckedCreateWithoutAdminInput> = z.object({
  Id: z.string().optional(),
  UserId: z.string(),
  UserType: z.lazy(() => UserAttribute_UserTypeSchema).optional().nullable(),
  Provider: z.lazy(() => ProviderUncheckedCreateNestedOneWithoutUserAttributeInputSchema).optional()
}).strict();

export const UserAttributeCreateOrConnectWithoutAdminInputSchema: z.ZodType<Prisma.UserAttributeCreateOrConnectWithoutAdminInput> = z.object({
  where: z.lazy(() => UserAttributeWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => UserAttributeCreateWithoutAdminInputSchema),z.lazy(() => UserAttributeUncheckedCreateWithoutAdminInputSchema) ]),
}).strict();

export const UserAttributeUpsertWithoutAdminInputSchema: z.ZodType<Prisma.UserAttributeUpsertWithoutAdminInput> = z.object({
  update: z.union([ z.lazy(() => UserAttributeUpdateWithoutAdminInputSchema),z.lazy(() => UserAttributeUncheckedUpdateWithoutAdminInputSchema) ]),
  create: z.union([ z.lazy(() => UserAttributeCreateWithoutAdminInputSchema),z.lazy(() => UserAttributeUncheckedCreateWithoutAdminInputSchema) ]),
  where: z.lazy(() => UserAttributeWhereInputSchema).optional()
}).strict();

export const UserAttributeUpdateToOneWithWhereWithoutAdminInputSchema: z.ZodType<Prisma.UserAttributeUpdateToOneWithWhereWithoutAdminInput> = z.object({
  where: z.lazy(() => UserAttributeWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => UserAttributeUpdateWithoutAdminInputSchema),z.lazy(() => UserAttributeUncheckedUpdateWithoutAdminInputSchema) ]),
}).strict();

export const UserAttributeUpdateWithoutAdminInputSchema: z.ZodType<Prisma.UserAttributeUpdateWithoutAdminInput> = z.object({
  Id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  UserType: z.union([ z.lazy(() => UserAttribute_UserTypeSchema),z.lazy(() => NullableEnumUserAttribute_UserTypeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Provider: z.lazy(() => ProviderUpdateOneWithoutUserAttributeNestedInputSchema).optional(),
  User: z.lazy(() => UserUpdateOneRequiredWithoutUserAttributeNestedInputSchema).optional()
}).strict();

export const UserAttributeUncheckedUpdateWithoutAdminInputSchema: z.ZodType<Prisma.UserAttributeUncheckedUpdateWithoutAdminInput> = z.object({
  Id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  UserId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  UserType: z.union([ z.lazy(() => UserAttribute_UserTypeSchema),z.lazy(() => NullableEnumUserAttribute_UserTypeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Provider: z.lazy(() => ProviderUncheckedUpdateOneWithoutUserAttributeNestedInputSchema).optional()
}).strict();

export const LabOrderAttachmentCreateWithoutAttachmentInputSchema: z.ZodType<Prisma.LabOrderAttachmentCreateWithoutAttachmentInput> = z.object({
  Id: z.string().optional(),
  CreatedAt: z.date().optional().nullable(),
  UpdatedAt: z.date().optional().nullable(),
  LabOrder: z.lazy(() => LabOrderCreateNestedOneWithoutLabOrderAttachmentInputSchema).optional()
}).strict();

export const LabOrderAttachmentUncheckedCreateWithoutAttachmentInputSchema: z.ZodType<Prisma.LabOrderAttachmentUncheckedCreateWithoutAttachmentInput> = z.object({
  Id: z.string().optional(),
  LabOrderId: z.string().optional().nullable(),
  CreatedAt: z.date().optional().nullable(),
  UpdatedAt: z.date().optional().nullable()
}).strict();

export const LabOrderAttachmentCreateOrConnectWithoutAttachmentInputSchema: z.ZodType<Prisma.LabOrderAttachmentCreateOrConnectWithoutAttachmentInput> = z.object({
  where: z.lazy(() => LabOrderAttachmentWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => LabOrderAttachmentCreateWithoutAttachmentInputSchema),z.lazy(() => LabOrderAttachmentUncheckedCreateWithoutAttachmentInputSchema) ]),
}).strict();

export const LabOrderAttachmentCreateManyAttachmentInputEnvelopeSchema: z.ZodType<Prisma.LabOrderAttachmentCreateManyAttachmentInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => LabOrderAttachmentCreateManyAttachmentInputSchema),z.lazy(() => LabOrderAttachmentCreateManyAttachmentInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const LabOrderAttachmentUpsertWithWhereUniqueWithoutAttachmentInputSchema: z.ZodType<Prisma.LabOrderAttachmentUpsertWithWhereUniqueWithoutAttachmentInput> = z.object({
  where: z.lazy(() => LabOrderAttachmentWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => LabOrderAttachmentUpdateWithoutAttachmentInputSchema),z.lazy(() => LabOrderAttachmentUncheckedUpdateWithoutAttachmentInputSchema) ]),
  create: z.union([ z.lazy(() => LabOrderAttachmentCreateWithoutAttachmentInputSchema),z.lazy(() => LabOrderAttachmentUncheckedCreateWithoutAttachmentInputSchema) ]),
}).strict();

export const LabOrderAttachmentUpdateWithWhereUniqueWithoutAttachmentInputSchema: z.ZodType<Prisma.LabOrderAttachmentUpdateWithWhereUniqueWithoutAttachmentInput> = z.object({
  where: z.lazy(() => LabOrderAttachmentWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => LabOrderAttachmentUpdateWithoutAttachmentInputSchema),z.lazy(() => LabOrderAttachmentUncheckedUpdateWithoutAttachmentInputSchema) ]),
}).strict();

export const LabOrderAttachmentUpdateManyWithWhereWithoutAttachmentInputSchema: z.ZodType<Prisma.LabOrderAttachmentUpdateManyWithWhereWithoutAttachmentInput> = z.object({
  where: z.lazy(() => LabOrderAttachmentScalarWhereInputSchema),
  data: z.union([ z.lazy(() => LabOrderAttachmentUpdateManyMutationInputSchema),z.lazy(() => LabOrderAttachmentUncheckedUpdateManyWithoutAttachmentInputSchema) ]),
}).strict();

export const LabOrderAttachmentScalarWhereInputSchema: z.ZodType<Prisma.LabOrderAttachmentScalarWhereInput> = z.object({
  AND: z.union([ z.lazy(() => LabOrderAttachmentScalarWhereInputSchema),z.lazy(() => LabOrderAttachmentScalarWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => LabOrderAttachmentScalarWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => LabOrderAttachmentScalarWhereInputSchema),z.lazy(() => LabOrderAttachmentScalarWhereInputSchema).array() ]).optional(),
  Id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  LabOrderId: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  AttachmentId: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  CreatedAt: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.date() ]).optional().nullable(),
  UpdatedAt: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.date() ]).optional().nullable(),
}).strict();

export const TestBiomarkerCreateWithoutBIOMARKERInputSchema: z.ZodType<Prisma.TestBiomarkerCreateWithoutBIOMARKERInput> = z.object({
  LabTestId: z.string().optional().nullable(),
  TranscriptReference: z.string().optional().nullable(),
  CreatedAt: z.date().optional(),
  UpdatedAt: z.date().optional(),
  TestCatalog: z.lazy(() => TestCatalogCreateNestedOneWithoutTestBiomarkerInputSchema)
}).strict();

export const TestBiomarkerUncheckedCreateWithoutBIOMARKERInputSchema: z.ZodType<Prisma.TestBiomarkerUncheckedCreateWithoutBIOMARKERInput> = z.object({
  Id: z.number().optional(),
  TestId: z.number(),
  LabTestId: z.string().optional().nullable(),
  TranscriptReference: z.string().optional().nullable(),
  CreatedAt: z.date().optional(),
  UpdatedAt: z.date().optional()
}).strict();

export const TestBiomarkerCreateOrConnectWithoutBIOMARKERInputSchema: z.ZodType<Prisma.TestBiomarkerCreateOrConnectWithoutBIOMARKERInput> = z.object({
  where: z.lazy(() => TestBiomarkerWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => TestBiomarkerCreateWithoutBIOMARKERInputSchema),z.lazy(() => TestBiomarkerUncheckedCreateWithoutBIOMARKERInputSchema) ]),
}).strict();

export const TestBiomarkerCreateManyBIOMARKERInputEnvelopeSchema: z.ZodType<Prisma.TestBiomarkerCreateManyBIOMARKERInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => TestBiomarkerCreateManyBIOMARKERInputSchema),z.lazy(() => TestBiomarkerCreateManyBIOMARKERInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const TestBiomarkerUpsertWithWhereUniqueWithoutBIOMARKERInputSchema: z.ZodType<Prisma.TestBiomarkerUpsertWithWhereUniqueWithoutBIOMARKERInput> = z.object({
  where: z.lazy(() => TestBiomarkerWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => TestBiomarkerUpdateWithoutBIOMARKERInputSchema),z.lazy(() => TestBiomarkerUncheckedUpdateWithoutBIOMARKERInputSchema) ]),
  create: z.union([ z.lazy(() => TestBiomarkerCreateWithoutBIOMARKERInputSchema),z.lazy(() => TestBiomarkerUncheckedCreateWithoutBIOMARKERInputSchema) ]),
}).strict();

export const TestBiomarkerUpdateWithWhereUniqueWithoutBIOMARKERInputSchema: z.ZodType<Prisma.TestBiomarkerUpdateWithWhereUniqueWithoutBIOMARKERInput> = z.object({
  where: z.lazy(() => TestBiomarkerWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => TestBiomarkerUpdateWithoutBIOMARKERInputSchema),z.lazy(() => TestBiomarkerUncheckedUpdateWithoutBIOMARKERInputSchema) ]),
}).strict();

export const TestBiomarkerUpdateManyWithWhereWithoutBIOMARKERInputSchema: z.ZodType<Prisma.TestBiomarkerUpdateManyWithWhereWithoutBIOMARKERInput> = z.object({
  where: z.lazy(() => TestBiomarkerScalarWhereInputSchema),
  data: z.union([ z.lazy(() => TestBiomarkerUpdateManyMutationInputSchema),z.lazy(() => TestBiomarkerUncheckedUpdateManyWithoutBIOMARKERInputSchema) ]),
}).strict();

export const TestBiomarkerScalarWhereInputSchema: z.ZodType<Prisma.TestBiomarkerScalarWhereInput> = z.object({
  AND: z.union([ z.lazy(() => TestBiomarkerScalarWhereInputSchema),z.lazy(() => TestBiomarkerScalarWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => TestBiomarkerScalarWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => TestBiomarkerScalarWhereInputSchema),z.lazy(() => TestBiomarkerScalarWhereInputSchema).array() ]).optional(),
  Id: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  TestId: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  LabTestId: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  HGNCId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  TranscriptReference: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  CreatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.date() ]).optional(),
  UpdatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.date() ]).optional(),
}).strict();

export const LabOrderIcdCreateWithoutICDInputSchema: z.ZodType<Prisma.LabOrderIcdCreateWithoutICDInput> = z.object({
  Id: z.string().optional(),
  CreatedAt: z.date().optional().nullable(),
  UpdatedAt: z.date().optional().nullable(),
  LabOrder: z.lazy(() => LabOrderCreateNestedOneWithoutLabOrderIcdInputSchema).optional()
}).strict();

export const LabOrderIcdUncheckedCreateWithoutICDInputSchema: z.ZodType<Prisma.LabOrderIcdUncheckedCreateWithoutICDInput> = z.object({
  Id: z.string().optional(),
  LabOrderId: z.string().optional().nullable(),
  CreatedAt: z.date().optional().nullable(),
  UpdatedAt: z.date().optional().nullable()
}).strict();

export const LabOrderIcdCreateOrConnectWithoutICDInputSchema: z.ZodType<Prisma.LabOrderIcdCreateOrConnectWithoutICDInput> = z.object({
  where: z.lazy(() => LabOrderIcdWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => LabOrderIcdCreateWithoutICDInputSchema),z.lazy(() => LabOrderIcdUncheckedCreateWithoutICDInputSchema) ]),
}).strict();

export const LabOrderIcdCreateManyICDInputEnvelopeSchema: z.ZodType<Prisma.LabOrderIcdCreateManyICDInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => LabOrderIcdCreateManyICDInputSchema),z.lazy(() => LabOrderIcdCreateManyICDInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const LabOrderIcdUpsertWithWhereUniqueWithoutICDInputSchema: z.ZodType<Prisma.LabOrderIcdUpsertWithWhereUniqueWithoutICDInput> = z.object({
  where: z.lazy(() => LabOrderIcdWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => LabOrderIcdUpdateWithoutICDInputSchema),z.lazy(() => LabOrderIcdUncheckedUpdateWithoutICDInputSchema) ]),
  create: z.union([ z.lazy(() => LabOrderIcdCreateWithoutICDInputSchema),z.lazy(() => LabOrderIcdUncheckedCreateWithoutICDInputSchema) ]),
}).strict();

export const LabOrderIcdUpdateWithWhereUniqueWithoutICDInputSchema: z.ZodType<Prisma.LabOrderIcdUpdateWithWhereUniqueWithoutICDInput> = z.object({
  where: z.lazy(() => LabOrderIcdWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => LabOrderIcdUpdateWithoutICDInputSchema),z.lazy(() => LabOrderIcdUncheckedUpdateWithoutICDInputSchema) ]),
}).strict();

export const LabOrderIcdUpdateManyWithWhereWithoutICDInputSchema: z.ZodType<Prisma.LabOrderIcdUpdateManyWithWhereWithoutICDInput> = z.object({
  where: z.lazy(() => LabOrderIcdScalarWhereInputSchema),
  data: z.union([ z.lazy(() => LabOrderIcdUpdateManyMutationInputSchema),z.lazy(() => LabOrderIcdUncheckedUpdateManyWithoutICDInputSchema) ]),
}).strict();

export const LabOrderIcdScalarWhereInputSchema: z.ZodType<Prisma.LabOrderIcdScalarWhereInput> = z.object({
  AND: z.union([ z.lazy(() => LabOrderIcdScalarWhereInputSchema),z.lazy(() => LabOrderIcdScalarWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => LabOrderIcdScalarWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => LabOrderIcdScalarWhereInputSchema),z.lazy(() => LabOrderIcdScalarWhereInputSchema).array() ]).optional(),
  Id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  LabOrderId: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  ICDId: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  CreatedAt: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.date() ]).optional().nullable(),
  UpdatedAt: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.date() ]).optional().nullable(),
}).strict();

export const TestOrderLoincCreateWithoutLOINCInputSchema: z.ZodType<Prisma.TestOrderLoincCreateWithoutLOINCInput> = z.object({
  LabTestId: z.string().optional().nullable(),
  CreatedAt: z.date().optional(),
  UpdatedAt: z.date().optional(),
  TestCatalog: z.lazy(() => TestCatalogCreateNestedOneWithoutTestOrderLoincInputSchema)
}).strict();

export const TestOrderLoincUncheckedCreateWithoutLOINCInputSchema: z.ZodType<Prisma.TestOrderLoincUncheckedCreateWithoutLOINCInput> = z.object({
  Id: z.number().optional(),
  TestId: z.number(),
  LabTestId: z.string().optional().nullable(),
  CreatedAt: z.date().optional(),
  UpdatedAt: z.date().optional()
}).strict();

export const TestOrderLoincCreateOrConnectWithoutLOINCInputSchema: z.ZodType<Prisma.TestOrderLoincCreateOrConnectWithoutLOINCInput> = z.object({
  where: z.lazy(() => TestOrderLoincWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => TestOrderLoincCreateWithoutLOINCInputSchema),z.lazy(() => TestOrderLoincUncheckedCreateWithoutLOINCInputSchema) ]),
}).strict();

export const TestOrderLoincCreateManyLOINCInputEnvelopeSchema: z.ZodType<Prisma.TestOrderLoincCreateManyLOINCInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => TestOrderLoincCreateManyLOINCInputSchema),z.lazy(() => TestOrderLoincCreateManyLOINCInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const TestResultLoincCreateWithoutLOINCInputSchema: z.ZodType<Prisma.TestResultLoincCreateWithoutLOINCInput> = z.object({
  LabTestId: z.string().optional().nullable(),
  ResultCode: z.string().optional().nullable(),
  ResultCodeName: z.string().optional().nullable(),
  UofM: z.string().optional().nullable(),
  CreatedAt: z.date().optional(),
  UpdatedAt: z.date().optional(),
  TestCatalog: z.lazy(() => TestCatalogCreateNestedOneWithoutTestResultLoincInputSchema)
}).strict();

export const TestResultLoincUncheckedCreateWithoutLOINCInputSchema: z.ZodType<Prisma.TestResultLoincUncheckedCreateWithoutLOINCInput> = z.object({
  Id: z.number().optional(),
  TestId: z.number(),
  LabTestId: z.string().optional().nullable(),
  ResultCode: z.string().optional().nullable(),
  ResultCodeName: z.string().optional().nullable(),
  UofM: z.string().optional().nullable(),
  CreatedAt: z.date().optional(),
  UpdatedAt: z.date().optional()
}).strict();

export const TestResultLoincCreateOrConnectWithoutLOINCInputSchema: z.ZodType<Prisma.TestResultLoincCreateOrConnectWithoutLOINCInput> = z.object({
  where: z.lazy(() => TestResultLoincWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => TestResultLoincCreateWithoutLOINCInputSchema),z.lazy(() => TestResultLoincUncheckedCreateWithoutLOINCInputSchema) ]),
}).strict();

export const TestResultLoincCreateManyLOINCInputEnvelopeSchema: z.ZodType<Prisma.TestResultLoincCreateManyLOINCInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => TestResultLoincCreateManyLOINCInputSchema),z.lazy(() => TestResultLoincCreateManyLOINCInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const TestOrderLoincUpsertWithWhereUniqueWithoutLOINCInputSchema: z.ZodType<Prisma.TestOrderLoincUpsertWithWhereUniqueWithoutLOINCInput> = z.object({
  where: z.lazy(() => TestOrderLoincWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => TestOrderLoincUpdateWithoutLOINCInputSchema),z.lazy(() => TestOrderLoincUncheckedUpdateWithoutLOINCInputSchema) ]),
  create: z.union([ z.lazy(() => TestOrderLoincCreateWithoutLOINCInputSchema),z.lazy(() => TestOrderLoincUncheckedCreateWithoutLOINCInputSchema) ]),
}).strict();

export const TestOrderLoincUpdateWithWhereUniqueWithoutLOINCInputSchema: z.ZodType<Prisma.TestOrderLoincUpdateWithWhereUniqueWithoutLOINCInput> = z.object({
  where: z.lazy(() => TestOrderLoincWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => TestOrderLoincUpdateWithoutLOINCInputSchema),z.lazy(() => TestOrderLoincUncheckedUpdateWithoutLOINCInputSchema) ]),
}).strict();

export const TestOrderLoincUpdateManyWithWhereWithoutLOINCInputSchema: z.ZodType<Prisma.TestOrderLoincUpdateManyWithWhereWithoutLOINCInput> = z.object({
  where: z.lazy(() => TestOrderLoincScalarWhereInputSchema),
  data: z.union([ z.lazy(() => TestOrderLoincUpdateManyMutationInputSchema),z.lazy(() => TestOrderLoincUncheckedUpdateManyWithoutLOINCInputSchema) ]),
}).strict();

export const TestOrderLoincScalarWhereInputSchema: z.ZodType<Prisma.TestOrderLoincScalarWhereInput> = z.object({
  AND: z.union([ z.lazy(() => TestOrderLoincScalarWhereInputSchema),z.lazy(() => TestOrderLoincScalarWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => TestOrderLoincScalarWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => TestOrderLoincScalarWhereInputSchema),z.lazy(() => TestOrderLoincScalarWhereInputSchema).array() ]).optional(),
  Id: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  TestId: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  LabTestId: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  OrderLoinc: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  CreatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.date() ]).optional(),
  UpdatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.date() ]).optional(),
}).strict();

export const TestResultLoincUpsertWithWhereUniqueWithoutLOINCInputSchema: z.ZodType<Prisma.TestResultLoincUpsertWithWhereUniqueWithoutLOINCInput> = z.object({
  where: z.lazy(() => TestResultLoincWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => TestResultLoincUpdateWithoutLOINCInputSchema),z.lazy(() => TestResultLoincUncheckedUpdateWithoutLOINCInputSchema) ]),
  create: z.union([ z.lazy(() => TestResultLoincCreateWithoutLOINCInputSchema),z.lazy(() => TestResultLoincUncheckedCreateWithoutLOINCInputSchema) ]),
}).strict();

export const TestResultLoincUpdateWithWhereUniqueWithoutLOINCInputSchema: z.ZodType<Prisma.TestResultLoincUpdateWithWhereUniqueWithoutLOINCInput> = z.object({
  where: z.lazy(() => TestResultLoincWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => TestResultLoincUpdateWithoutLOINCInputSchema),z.lazy(() => TestResultLoincUncheckedUpdateWithoutLOINCInputSchema) ]),
}).strict();

export const TestResultLoincUpdateManyWithWhereWithoutLOINCInputSchema: z.ZodType<Prisma.TestResultLoincUpdateManyWithWhereWithoutLOINCInput> = z.object({
  where: z.lazy(() => TestResultLoincScalarWhereInputSchema),
  data: z.union([ z.lazy(() => TestResultLoincUpdateManyMutationInputSchema),z.lazy(() => TestResultLoincUncheckedUpdateManyWithoutLOINCInputSchema) ]),
}).strict();

export const TestResultLoincScalarWhereInputSchema: z.ZodType<Prisma.TestResultLoincScalarWhereInput> = z.object({
  AND: z.union([ z.lazy(() => TestResultLoincScalarWhereInputSchema),z.lazy(() => TestResultLoincScalarWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => TestResultLoincScalarWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => TestResultLoincScalarWhereInputSchema),z.lazy(() => TestResultLoincScalarWhereInputSchema).array() ]).optional(),
  Id: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  TestId: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  LabTestId: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  ResultCode: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  ResultCodeName: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  UofM: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  ResultLoinc: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  CreatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.date() ]).optional(),
  UpdatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.date() ]).optional(),
}).strict();

export const SponsoredTestCreateWithoutLabInputSchema: z.ZodType<Prisma.SponsoredTestCreateWithoutLabInput> = z.object({
  Id: z.string().optional(),
  LabTestId: z.string().optional().nullable(),
  CasandraTestId: z.string(),
  Category: z.string(),
  SubCategory: z.string().optional().nullable(),
  CreatedAt: z.date().optional().nullable(),
  UpdatedAt: z.date().optional().nullable(),
  LabOrderSponsoredTestConsent: z.lazy(() => LabOrderSponsoredTestConsentCreateNestedManyWithoutSponsoredTestInputSchema).optional(),
  SponsoredProgram: z.lazy(() => SponsoredProgramCreateNestedOneWithoutSponsoredTestInputSchema).optional(),
  TestCatalog: z.lazy(() => TestCatalogCreateNestedOneWithoutSponsoredTestInputSchema)
}).strict();

export const SponsoredTestUncheckedCreateWithoutLabInputSchema: z.ZodType<Prisma.SponsoredTestUncheckedCreateWithoutLabInput> = z.object({
  Id: z.string().optional(),
  TestId: z.number(),
  LabTestId: z.string().optional().nullable(),
  SponsoredProgramId: z.number().optional().nullable(),
  CasandraTestId: z.string(),
  Category: z.string(),
  SubCategory: z.string().optional().nullable(),
  CreatedAt: z.date().optional().nullable(),
  UpdatedAt: z.date().optional().nullable(),
  LabOrderSponsoredTestConsent: z.lazy(() => LabOrderSponsoredTestConsentUncheckedCreateNestedManyWithoutSponsoredTestInputSchema).optional()
}).strict();

export const SponsoredTestCreateOrConnectWithoutLabInputSchema: z.ZodType<Prisma.SponsoredTestCreateOrConnectWithoutLabInput> = z.object({
  where: z.lazy(() => SponsoredTestWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => SponsoredTestCreateWithoutLabInputSchema),z.lazy(() => SponsoredTestUncheckedCreateWithoutLabInputSchema) ]),
}).strict();

export const SponsoredTestCreateManyLabInputEnvelopeSchema: z.ZodType<Prisma.SponsoredTestCreateManyLabInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => SponsoredTestCreateManyLabInputSchema),z.lazy(() => SponsoredTestCreateManyLabInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const TestCatalogCreateWithoutLabInputSchema: z.ZodType<Prisma.TestCatalogCreateWithoutLabInput> = z.object({
  href: z.string().optional().nullable(),
  CasandraTestId: z.string(),
  LabTestId: z.string().optional().nullable(),
  TestName: z.string().optional().nullable(),
  AlternativeName: z.string().optional().nullable(),
  AlternativeName1: z.string().optional().nullable(),
  AlternativeName2: z.string().optional().nullable(),
  AlternativeName3: z.string().optional().nullable(),
  AlternativeName4: z.string().optional().nullable(),
  AlternativeName5: z.string().optional().nullable(),
  TestIncludes: z.string().optional().nullable(),
  SpecimenType: z.string().optional().nullable(),
  SpecialInstructions: z.string().optional().nullable(),
  Methodology: z.string().optional().nullable(),
  TestDescription: z.string().optional().nullable(),
  Diseases: z.string().optional().nullable(),
  Probes: z.string().optional().nullable(),
  ClinicalSignificance: z.string().optional().nullable(),
  SpecimenRequirements: z.string().optional().nullable(),
  Volume: z.string().optional().nullable(),
  MinimumVolume: z.string().optional().nullable(),
  Container: z.string().optional().nullable(),
  Collection: z.string().optional().nullable(),
  StabilityRequirements: z.string().optional().nullable(),
  StorageTransportation: z.string().optional().nullable(),
  PatientPreparation: z.string().optional().nullable(),
  CausesForRejection: z.string().optional().nullable(),
  TestUsage: z.string().optional().nullable(),
  TestLimitations: z.string().optional().nullable(),
  CPTCodes: z.string().optional().nullable(),
  NewYorkApproved: z.string().optional().nullable(),
  LevelOfService: z.string().optional().nullable(),
  TurnAroundTime: z.string().optional().nullable(),
  AssayCategory: z.string().optional().nullable(),
  ReferenceRanges: z.string().optional().nullable(),
  SetupSchedule: z.string().optional().nullable(),
  AlternativeSpecimen: z.string().optional().nullable(),
  LoincCodesText: z.string().optional().nullable(),
  LoincCodesHTML: z.string().optional().nullable(),
  TestCategory: z.string().optional().nullable(),
  TestSubCategory: z.string().optional().nullable(),
  CreatedAt: z.date().optional(),
  UpdatedAt: z.date().optional(),
  LabOrderTest: z.lazy(() => LabOrderTestCreateNestedManyWithoutTestCatalogInputSchema).optional(),
  OrganizationFavoriteTest: z.lazy(() => OrganizationFavoriteTestCreateNestedManyWithoutTestCatalogInputSchema).optional(),
  ProviderFavoriteTest: z.lazy(() => ProviderFavoriteTestCreateNestedManyWithoutTestCatalogInputSchema).optional(),
  SponsoredTest: z.lazy(() => SponsoredTestCreateNestedManyWithoutTestCatalogInputSchema).optional(),
  TestBiomarker: z.lazy(() => TestBiomarkerCreateNestedManyWithoutTestCatalogInputSchema).optional(),
  TestCptCode: z.lazy(() => TestCptCodeCreateNestedManyWithoutTestCatalogInputSchema).optional(),
  TestGene: z.lazy(() => TestGeneCreateNestedManyWithoutTestCatalogInputSchema).optional(),
  TestOrderLoinc: z.lazy(() => TestOrderLoincCreateNestedManyWithoutTestCatalogInputSchema).optional(),
  TestResultLoinc: z.lazy(() => TestResultLoincCreateNestedManyWithoutTestCatalogInputSchema).optional()
}).strict();

export const TestCatalogUncheckedCreateWithoutLabInputSchema: z.ZodType<Prisma.TestCatalogUncheckedCreateWithoutLabInput> = z.object({
  TestId: z.number().optional(),
  href: z.string().optional().nullable(),
  CasandraTestId: z.string(),
  LabTestId: z.string().optional().nullable(),
  TestName: z.string().optional().nullable(),
  AlternativeName: z.string().optional().nullable(),
  AlternativeName1: z.string().optional().nullable(),
  AlternativeName2: z.string().optional().nullable(),
  AlternativeName3: z.string().optional().nullable(),
  AlternativeName4: z.string().optional().nullable(),
  AlternativeName5: z.string().optional().nullable(),
  TestIncludes: z.string().optional().nullable(),
  SpecimenType: z.string().optional().nullable(),
  SpecialInstructions: z.string().optional().nullable(),
  Methodology: z.string().optional().nullable(),
  TestDescription: z.string().optional().nullable(),
  Diseases: z.string().optional().nullable(),
  Probes: z.string().optional().nullable(),
  ClinicalSignificance: z.string().optional().nullable(),
  SpecimenRequirements: z.string().optional().nullable(),
  Volume: z.string().optional().nullable(),
  MinimumVolume: z.string().optional().nullable(),
  Container: z.string().optional().nullable(),
  Collection: z.string().optional().nullable(),
  StabilityRequirements: z.string().optional().nullable(),
  StorageTransportation: z.string().optional().nullable(),
  PatientPreparation: z.string().optional().nullable(),
  CausesForRejection: z.string().optional().nullable(),
  TestUsage: z.string().optional().nullable(),
  TestLimitations: z.string().optional().nullable(),
  CPTCodes: z.string().optional().nullable(),
  NewYorkApproved: z.string().optional().nullable(),
  LevelOfService: z.string().optional().nullable(),
  TurnAroundTime: z.string().optional().nullable(),
  AssayCategory: z.string().optional().nullable(),
  ReferenceRanges: z.string().optional().nullable(),
  SetupSchedule: z.string().optional().nullable(),
  AlternativeSpecimen: z.string().optional().nullable(),
  LoincCodesText: z.string().optional().nullable(),
  LoincCodesHTML: z.string().optional().nullable(),
  TestCategory: z.string().optional().nullable(),
  TestSubCategory: z.string().optional().nullable(),
  CreatedAt: z.date().optional(),
  UpdatedAt: z.date().optional(),
  LabOrderTest: z.lazy(() => LabOrderTestUncheckedCreateNestedManyWithoutTestCatalogInputSchema).optional(),
  OrganizationFavoriteTest: z.lazy(() => OrganizationFavoriteTestUncheckedCreateNestedManyWithoutTestCatalogInputSchema).optional(),
  ProviderFavoriteTest: z.lazy(() => ProviderFavoriteTestUncheckedCreateNestedManyWithoutTestCatalogInputSchema).optional(),
  SponsoredTest: z.lazy(() => SponsoredTestUncheckedCreateNestedManyWithoutTestCatalogInputSchema).optional(),
  TestBiomarker: z.lazy(() => TestBiomarkerUncheckedCreateNestedManyWithoutTestCatalogInputSchema).optional(),
  TestCptCode: z.lazy(() => TestCptCodeUncheckedCreateNestedManyWithoutTestCatalogInputSchema).optional(),
  TestGene: z.lazy(() => TestGeneUncheckedCreateNestedManyWithoutTestCatalogInputSchema).optional(),
  TestOrderLoinc: z.lazy(() => TestOrderLoincUncheckedCreateNestedManyWithoutTestCatalogInputSchema).optional(),
  TestResultLoinc: z.lazy(() => TestResultLoincUncheckedCreateNestedManyWithoutTestCatalogInputSchema).optional()
}).strict();

export const TestCatalogCreateOrConnectWithoutLabInputSchema: z.ZodType<Prisma.TestCatalogCreateOrConnectWithoutLabInput> = z.object({
  where: z.lazy(() => TestCatalogWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => TestCatalogCreateWithoutLabInputSchema),z.lazy(() => TestCatalogUncheckedCreateWithoutLabInputSchema) ]),
}).strict();

export const TestCatalogCreateManyLabInputEnvelopeSchema: z.ZodType<Prisma.TestCatalogCreateManyLabInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => TestCatalogCreateManyLabInputSchema),z.lazy(() => TestCatalogCreateManyLabInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const SponsoredTestUpsertWithWhereUniqueWithoutLabInputSchema: z.ZodType<Prisma.SponsoredTestUpsertWithWhereUniqueWithoutLabInput> = z.object({
  where: z.lazy(() => SponsoredTestWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => SponsoredTestUpdateWithoutLabInputSchema),z.lazy(() => SponsoredTestUncheckedUpdateWithoutLabInputSchema) ]),
  create: z.union([ z.lazy(() => SponsoredTestCreateWithoutLabInputSchema),z.lazy(() => SponsoredTestUncheckedCreateWithoutLabInputSchema) ]),
}).strict();

export const SponsoredTestUpdateWithWhereUniqueWithoutLabInputSchema: z.ZodType<Prisma.SponsoredTestUpdateWithWhereUniqueWithoutLabInput> = z.object({
  where: z.lazy(() => SponsoredTestWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => SponsoredTestUpdateWithoutLabInputSchema),z.lazy(() => SponsoredTestUncheckedUpdateWithoutLabInputSchema) ]),
}).strict();

export const SponsoredTestUpdateManyWithWhereWithoutLabInputSchema: z.ZodType<Prisma.SponsoredTestUpdateManyWithWhereWithoutLabInput> = z.object({
  where: z.lazy(() => SponsoredTestScalarWhereInputSchema),
  data: z.union([ z.lazy(() => SponsoredTestUpdateManyMutationInputSchema),z.lazy(() => SponsoredTestUncheckedUpdateManyWithoutLabInputSchema) ]),
}).strict();

export const SponsoredTestScalarWhereInputSchema: z.ZodType<Prisma.SponsoredTestScalarWhereInput> = z.object({
  AND: z.union([ z.lazy(() => SponsoredTestScalarWhereInputSchema),z.lazy(() => SponsoredTestScalarWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => SponsoredTestScalarWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => SponsoredTestScalarWhereInputSchema),z.lazy(() => SponsoredTestScalarWhereInputSchema).array() ]).optional(),
  Id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  TestId: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  LabTestId: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  SponsoredProgramId: z.union([ z.lazy(() => IntNullableFilterSchema),z.number() ]).optional().nullable(),
  LabId: z.union([ z.lazy(() => IntNullableFilterSchema),z.number() ]).optional().nullable(),
  CasandraTestId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  Category: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  SubCategory: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  CreatedAt: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.date() ]).optional().nullable(),
  UpdatedAt: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.date() ]).optional().nullable(),
}).strict();

export const TestCatalogUpsertWithWhereUniqueWithoutLabInputSchema: z.ZodType<Prisma.TestCatalogUpsertWithWhereUniqueWithoutLabInput> = z.object({
  where: z.lazy(() => TestCatalogWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => TestCatalogUpdateWithoutLabInputSchema),z.lazy(() => TestCatalogUncheckedUpdateWithoutLabInputSchema) ]),
  create: z.union([ z.lazy(() => TestCatalogCreateWithoutLabInputSchema),z.lazy(() => TestCatalogUncheckedCreateWithoutLabInputSchema) ]),
}).strict();

export const TestCatalogUpdateWithWhereUniqueWithoutLabInputSchema: z.ZodType<Prisma.TestCatalogUpdateWithWhereUniqueWithoutLabInput> = z.object({
  where: z.lazy(() => TestCatalogWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => TestCatalogUpdateWithoutLabInputSchema),z.lazy(() => TestCatalogUncheckedUpdateWithoutLabInputSchema) ]),
}).strict();

export const TestCatalogUpdateManyWithWhereWithoutLabInputSchema: z.ZodType<Prisma.TestCatalogUpdateManyWithWhereWithoutLabInput> = z.object({
  where: z.lazy(() => TestCatalogScalarWhereInputSchema),
  data: z.union([ z.lazy(() => TestCatalogUpdateManyMutationInputSchema),z.lazy(() => TestCatalogUncheckedUpdateManyWithoutLabInputSchema) ]),
}).strict();

export const TestCatalogScalarWhereInputSchema: z.ZodType<Prisma.TestCatalogScalarWhereInput> = z.object({
  AND: z.union([ z.lazy(() => TestCatalogScalarWhereInputSchema),z.lazy(() => TestCatalogScalarWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => TestCatalogScalarWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => TestCatalogScalarWhereInputSchema),z.lazy(() => TestCatalogScalarWhereInputSchema).array() ]).optional(),
  TestId: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  LabId: z.union([ z.lazy(() => IntNullableFilterSchema),z.number() ]).optional().nullable(),
  href: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  CasandraTestId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  LabTestId: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  TestName: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  AlternativeName: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  AlternativeName1: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  AlternativeName2: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  AlternativeName3: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  AlternativeName4: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  AlternativeName5: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  TestIncludes: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  SpecimenType: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  SpecialInstructions: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  Methodology: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  TestDescription: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  Diseases: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  Probes: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  ClinicalSignificance: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  SpecimenRequirements: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  Volume: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  MinimumVolume: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  Container: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  Collection: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  StabilityRequirements: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  StorageTransportation: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  PatientPreparation: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  CausesForRejection: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  TestUsage: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  TestLimitations: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  CPTCodes: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  NewYorkApproved: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  LevelOfService: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  TurnAroundTime: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  AssayCategory: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  ReferenceRanges: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  SetupSchedule: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  AlternativeSpecimen: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  LoincCodesText: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  LoincCodesHTML: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  TestCategory: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  TestSubCategory: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  CreatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.date() ]).optional(),
  UpdatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.date() ]).optional(),
}).strict();

export const ProviderCreateWithoutOrderingProviderLabOrderInputSchema: z.ZodType<Prisma.ProviderCreateWithoutOrderingProviderLabOrderInput> = z.object({
  Id: z.string().optional(),
  href: z.string().optional().nullable(),
  NPI: z.string().optional().nullable(),
  Name: z.string().optional().nullable(),
  Email: z.string().optional().nullable(),
  Credentials: z.string().optional().nullable(),
  Specialty: z.string().optional().nullable(),
  Aboutme: z.string().optional().nullable(),
  Gender: z.string().optional().nullable(),
  ProviderType: z.string().optional().nullable(),
  Affiliation: z.string().optional().nullable(),
  ProceduresAndResearch: z.string().optional().nullable(),
  SpecialInterests: z.string().optional().nullable(),
  TreatingProviderLabOrder: z.lazy(() => LabOrderCreateNestedManyWithoutTreatingProviderInputSchema).optional(),
  UserAttribute: z.lazy(() => UserAttributeCreateNestedOneWithoutProviderInputSchema).optional(),
  ProviderEducation: z.lazy(() => ProviderEducationCreateNestedManyWithoutProviderInputSchema).optional(),
  ProviderFavoriteTest: z.lazy(() => ProviderFavoriteTestCreateNestedManyWithoutProviderInputSchema).optional(),
  ProviderOrganization: z.lazy(() => ProviderOrganizationCreateNestedManyWithoutProviderInputSchema).optional()
}).strict();

export const ProviderUncheckedCreateWithoutOrderingProviderLabOrderInputSchema: z.ZodType<Prisma.ProviderUncheckedCreateWithoutOrderingProviderLabOrderInput> = z.object({
  Id: z.string().optional(),
  href: z.string().optional().nullable(),
  NPI: z.string().optional().nullable(),
  Name: z.string().optional().nullable(),
  Email: z.string().optional().nullable(),
  Credentials: z.string().optional().nullable(),
  Specialty: z.string().optional().nullable(),
  Aboutme: z.string().optional().nullable(),
  Gender: z.string().optional().nullable(),
  ProviderType: z.string().optional().nullable(),
  Affiliation: z.string().optional().nullable(),
  ProceduresAndResearch: z.string().optional().nullable(),
  SpecialInterests: z.string().optional().nullable(),
  UserAttributeId: z.string().optional().nullable(),
  TreatingProviderLabOrder: z.lazy(() => LabOrderUncheckedCreateNestedManyWithoutTreatingProviderInputSchema).optional(),
  ProviderEducation: z.lazy(() => ProviderEducationUncheckedCreateNestedManyWithoutProviderInputSchema).optional(),
  ProviderFavoriteTest: z.lazy(() => ProviderFavoriteTestUncheckedCreateNestedManyWithoutProviderInputSchema).optional(),
  ProviderOrganization: z.lazy(() => ProviderOrganizationUncheckedCreateNestedManyWithoutProviderInputSchema).optional()
}).strict();

export const ProviderCreateOrConnectWithoutOrderingProviderLabOrderInputSchema: z.ZodType<Prisma.ProviderCreateOrConnectWithoutOrderingProviderLabOrderInput> = z.object({
  where: z.lazy(() => ProviderWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => ProviderCreateWithoutOrderingProviderLabOrderInputSchema),z.lazy(() => ProviderUncheckedCreateWithoutOrderingProviderLabOrderInputSchema) ]),
}).strict();

export const ProviderCreateWithoutTreatingProviderLabOrderInputSchema: z.ZodType<Prisma.ProviderCreateWithoutTreatingProviderLabOrderInput> = z.object({
  Id: z.string().optional(),
  href: z.string().optional().nullable(),
  NPI: z.string().optional().nullable(),
  Name: z.string().optional().nullable(),
  Email: z.string().optional().nullable(),
  Credentials: z.string().optional().nullable(),
  Specialty: z.string().optional().nullable(),
  Aboutme: z.string().optional().nullable(),
  Gender: z.string().optional().nullable(),
  ProviderType: z.string().optional().nullable(),
  Affiliation: z.string().optional().nullable(),
  ProceduresAndResearch: z.string().optional().nullable(),
  SpecialInterests: z.string().optional().nullable(),
  OrderingProviderLabOrder: z.lazy(() => LabOrderCreateNestedManyWithoutOrderingProviderInputSchema).optional(),
  UserAttribute: z.lazy(() => UserAttributeCreateNestedOneWithoutProviderInputSchema).optional(),
  ProviderEducation: z.lazy(() => ProviderEducationCreateNestedManyWithoutProviderInputSchema).optional(),
  ProviderFavoriteTest: z.lazy(() => ProviderFavoriteTestCreateNestedManyWithoutProviderInputSchema).optional(),
  ProviderOrganization: z.lazy(() => ProviderOrganizationCreateNestedManyWithoutProviderInputSchema).optional()
}).strict();

export const ProviderUncheckedCreateWithoutTreatingProviderLabOrderInputSchema: z.ZodType<Prisma.ProviderUncheckedCreateWithoutTreatingProviderLabOrderInput> = z.object({
  Id: z.string().optional(),
  href: z.string().optional().nullable(),
  NPI: z.string().optional().nullable(),
  Name: z.string().optional().nullable(),
  Email: z.string().optional().nullable(),
  Credentials: z.string().optional().nullable(),
  Specialty: z.string().optional().nullable(),
  Aboutme: z.string().optional().nullable(),
  Gender: z.string().optional().nullable(),
  ProviderType: z.string().optional().nullable(),
  Affiliation: z.string().optional().nullable(),
  ProceduresAndResearch: z.string().optional().nullable(),
  SpecialInterests: z.string().optional().nullable(),
  UserAttributeId: z.string().optional().nullable(),
  OrderingProviderLabOrder: z.lazy(() => LabOrderUncheckedCreateNestedManyWithoutOrderingProviderInputSchema).optional(),
  ProviderEducation: z.lazy(() => ProviderEducationUncheckedCreateNestedManyWithoutProviderInputSchema).optional(),
  ProviderFavoriteTest: z.lazy(() => ProviderFavoriteTestUncheckedCreateNestedManyWithoutProviderInputSchema).optional(),
  ProviderOrganization: z.lazy(() => ProviderOrganizationUncheckedCreateNestedManyWithoutProviderInputSchema).optional()
}).strict();

export const ProviderCreateOrConnectWithoutTreatingProviderLabOrderInputSchema: z.ZodType<Prisma.ProviderCreateOrConnectWithoutTreatingProviderLabOrderInput> = z.object({
  where: z.lazy(() => ProviderWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => ProviderCreateWithoutTreatingProviderLabOrderInputSchema),z.lazy(() => ProviderUncheckedCreateWithoutTreatingProviderLabOrderInputSchema) ]),
}).strict();

export const PatientCreateWithoutLabOrderInputSchema: z.ZodType<Prisma.PatientCreateWithoutLabOrderInput> = z.object({
  Id: z.string().optional(),
  FirstName: z.string().optional().nullable(),
  LastName: z.string().optional().nullable(),
  DateOfBirth: z.date().optional().nullable(),
  Gender: z.string().optional().nullable(),
  Email: z.string().optional().nullable(),
  Mobile: z.string().optional().nullable(),
  CreatedAt: z.date().optional().nullable(),
  UpdatedAt: z.date().optional().nullable(),
  PatientOrganization: z.lazy(() => PatientOrganizationCreateNestedManyWithoutPatientInputSchema).optional()
}).strict();

export const PatientUncheckedCreateWithoutLabOrderInputSchema: z.ZodType<Prisma.PatientUncheckedCreateWithoutLabOrderInput> = z.object({
  Id: z.string().optional(),
  FirstName: z.string().optional().nullable(),
  LastName: z.string().optional().nullable(),
  DateOfBirth: z.date().optional().nullable(),
  Gender: z.string().optional().nullable(),
  Email: z.string().optional().nullable(),
  Mobile: z.string().optional().nullable(),
  CreatedAt: z.date().optional().nullable(),
  UpdatedAt: z.date().optional().nullable(),
  PatientOrganization: z.lazy(() => PatientOrganizationUncheckedCreateNestedManyWithoutPatientInputSchema).optional()
}).strict();

export const PatientCreateOrConnectWithoutLabOrderInputSchema: z.ZodType<Prisma.PatientCreateOrConnectWithoutLabOrderInput> = z.object({
  where: z.lazy(() => PatientWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => PatientCreateWithoutLabOrderInputSchema),z.lazy(() => PatientUncheckedCreateWithoutLabOrderInputSchema) ]),
}).strict();

export const OrganizationCreateWithoutLabOrderInputSchema: z.ZodType<Prisma.OrganizationCreateWithoutLabOrderInput> = z.object({
  Id: z.string(),
  href: z.string().optional().nullable(),
  Level: z.number().optional().nullable(),
  ParentOrgName: z.string().optional().nullable(),
  OrgName: z.string().optional().nullable(),
  OrgType: z.string().optional().nullable(),
  OrgSpecialty: z.string().optional().nullable(),
  OrgAddress: z.string().optional().nullable(),
  OrgCity: z.string().optional().nullable(),
  OrgState: z.string().optional().nullable(),
  OrgZip: z.string().optional().nullable(),
  Organization: z.lazy(() => OrganizationCreateNestedOneWithoutChildOrganizationInputSchema).optional(),
  ChildOrganization: z.lazy(() => OrganizationCreateNestedManyWithoutOrganizationInputSchema).optional(),
  OrganizationFavoriteTest: z.lazy(() => OrganizationFavoriteTestCreateNestedManyWithoutOrganizationInputSchema).optional(),
  PatientOrganization: z.lazy(() => PatientOrganizationCreateNestedManyWithoutOrganizationInputSchema).optional(),
  ProviderOrganization: z.lazy(() => ProviderOrganizationCreateNestedManyWithoutOrganizationInputSchema).optional()
}).strict();

export const OrganizationUncheckedCreateWithoutLabOrderInputSchema: z.ZodType<Prisma.OrganizationUncheckedCreateWithoutLabOrderInput> = z.object({
  Id: z.string(),
  href: z.string().optional().nullable(),
  ParentId: z.string().optional().nullable(),
  Level: z.number().optional().nullable(),
  ParentOrgName: z.string().optional().nullable(),
  OrgName: z.string().optional().nullable(),
  OrgType: z.string().optional().nullable(),
  OrgSpecialty: z.string().optional().nullable(),
  OrgAddress: z.string().optional().nullable(),
  OrgCity: z.string().optional().nullable(),
  OrgState: z.string().optional().nullable(),
  OrgZip: z.string().optional().nullable(),
  ChildOrganization: z.lazy(() => OrganizationUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  OrganizationFavoriteTest: z.lazy(() => OrganizationFavoriteTestUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  PatientOrganization: z.lazy(() => PatientOrganizationUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  ProviderOrganization: z.lazy(() => ProviderOrganizationUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional()
}).strict();

export const OrganizationCreateOrConnectWithoutLabOrderInputSchema: z.ZodType<Prisma.OrganizationCreateOrConnectWithoutLabOrderInput> = z.object({
  where: z.lazy(() => OrganizationWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => OrganizationCreateWithoutLabOrderInputSchema),z.lazy(() => OrganizationUncheckedCreateWithoutLabOrderInputSchema) ]),
}).strict();

export const LabOrderAttachmentCreateWithoutLabOrderInputSchema: z.ZodType<Prisma.LabOrderAttachmentCreateWithoutLabOrderInput> = z.object({
  Id: z.string().optional(),
  CreatedAt: z.date().optional().nullable(),
  UpdatedAt: z.date().optional().nullable(),
  Attachment: z.lazy(() => AttachmentCreateNestedOneWithoutLabOrderAttachmentInputSchema).optional()
}).strict();

export const LabOrderAttachmentUncheckedCreateWithoutLabOrderInputSchema: z.ZodType<Prisma.LabOrderAttachmentUncheckedCreateWithoutLabOrderInput> = z.object({
  Id: z.string().optional(),
  AttachmentId: z.string().optional().nullable(),
  CreatedAt: z.date().optional().nullable(),
  UpdatedAt: z.date().optional().nullable()
}).strict();

export const LabOrderAttachmentCreateOrConnectWithoutLabOrderInputSchema: z.ZodType<Prisma.LabOrderAttachmentCreateOrConnectWithoutLabOrderInput> = z.object({
  where: z.lazy(() => LabOrderAttachmentWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => LabOrderAttachmentCreateWithoutLabOrderInputSchema),z.lazy(() => LabOrderAttachmentUncheckedCreateWithoutLabOrderInputSchema) ]),
}).strict();

export const LabOrderAttachmentCreateManyLabOrderInputEnvelopeSchema: z.ZodType<Prisma.LabOrderAttachmentCreateManyLabOrderInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => LabOrderAttachmentCreateManyLabOrderInputSchema),z.lazy(() => LabOrderAttachmentCreateManyLabOrderInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const LabOrderBillingCreateWithoutLabOrderInputSchema: z.ZodType<Prisma.LabOrderBillingCreateWithoutLabOrderInput> = z.object({
  Id: z.string().optional(),
  BillToId: z.string().optional().nullable(),
  HealthPalnId: z.string().optional().nullable(),
  PatientStatus: z.string().optional().nullable(),
  SponoseredTestCouponCode: z.string().optional().nullable(),
  CreatedAt: z.date().optional().nullable(),
  UpdatedAt: z.date().optional().nullable()
}).strict();

export const LabOrderBillingUncheckedCreateWithoutLabOrderInputSchema: z.ZodType<Prisma.LabOrderBillingUncheckedCreateWithoutLabOrderInput> = z.object({
  Id: z.string().optional(),
  BillToId: z.string().optional().nullable(),
  HealthPalnId: z.string().optional().nullable(),
  PatientStatus: z.string().optional().nullable(),
  SponoseredTestCouponCode: z.string().optional().nullable(),
  CreatedAt: z.date().optional().nullable(),
  UpdatedAt: z.date().optional().nullable()
}).strict();

export const LabOrderBillingCreateOrConnectWithoutLabOrderInputSchema: z.ZodType<Prisma.LabOrderBillingCreateOrConnectWithoutLabOrderInput> = z.object({
  where: z.lazy(() => LabOrderBillingWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => LabOrderBillingCreateWithoutLabOrderInputSchema),z.lazy(() => LabOrderBillingUncheckedCreateWithoutLabOrderInputSchema) ]),
}).strict();

export const LabOrderBillingCreateManyLabOrderInputEnvelopeSchema: z.ZodType<Prisma.LabOrderBillingCreateManyLabOrderInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => LabOrderBillingCreateManyLabOrderInputSchema),z.lazy(() => LabOrderBillingCreateManyLabOrderInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const LabOrderIcdCreateWithoutLabOrderInputSchema: z.ZodType<Prisma.LabOrderIcdCreateWithoutLabOrderInput> = z.object({
  Id: z.string().optional(),
  CreatedAt: z.date().optional().nullable(),
  UpdatedAt: z.date().optional().nullable(),
  ICD: z.lazy(() => ICDCreateNestedOneWithoutLabOrderIcdInputSchema).optional()
}).strict();

export const LabOrderIcdUncheckedCreateWithoutLabOrderInputSchema: z.ZodType<Prisma.LabOrderIcdUncheckedCreateWithoutLabOrderInput> = z.object({
  Id: z.string().optional(),
  ICDId: z.string().optional().nullable(),
  CreatedAt: z.date().optional().nullable(),
  UpdatedAt: z.date().optional().nullable()
}).strict();

export const LabOrderIcdCreateOrConnectWithoutLabOrderInputSchema: z.ZodType<Prisma.LabOrderIcdCreateOrConnectWithoutLabOrderInput> = z.object({
  where: z.lazy(() => LabOrderIcdWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => LabOrderIcdCreateWithoutLabOrderInputSchema),z.lazy(() => LabOrderIcdUncheckedCreateWithoutLabOrderInputSchema) ]),
}).strict();

export const LabOrderIcdCreateManyLabOrderInputEnvelopeSchema: z.ZodType<Prisma.LabOrderIcdCreateManyLabOrderInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => LabOrderIcdCreateManyLabOrderInputSchema),z.lazy(() => LabOrderIcdCreateManyLabOrderInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const LabOrderSpecimenCreateWithoutLabOrderInputSchema: z.ZodType<Prisma.LabOrderSpecimenCreateWithoutLabOrderInput> = z.object({
  Id: z.string().optional(),
  SpecimenType: z.string().optional().nullable(),
  SpecimenCount: z.string().optional().nullable(),
  CollectedDate: z.date().optional().nullable(),
  CollectedTime: z.string().optional().nullable(),
  SpecimenID: z.string().optional().nullable(),
  BodySite: z.string().optional().nullable(),
  TumorType: z.string().optional().nullable(),
  Fixative: z.string().optional().nullable(),
  FixativeDuration: z.string().optional().nullable(),
  ColdIschemicTime: z.string().optional().nullable(),
  CreatedAt: z.date().optional().nullable(),
  UpdatedAt: z.date().optional().nullable()
}).strict();

export const LabOrderSpecimenUncheckedCreateWithoutLabOrderInputSchema: z.ZodType<Prisma.LabOrderSpecimenUncheckedCreateWithoutLabOrderInput> = z.object({
  Id: z.string().optional(),
  SpecimenType: z.string().optional().nullable(),
  SpecimenCount: z.string().optional().nullable(),
  CollectedDate: z.date().optional().nullable(),
  CollectedTime: z.string().optional().nullable(),
  SpecimenID: z.string().optional().nullable(),
  BodySite: z.string().optional().nullable(),
  TumorType: z.string().optional().nullable(),
  Fixative: z.string().optional().nullable(),
  FixativeDuration: z.string().optional().nullable(),
  ColdIschemicTime: z.string().optional().nullable(),
  CreatedAt: z.date().optional().nullable(),
  UpdatedAt: z.date().optional().nullable()
}).strict();

export const LabOrderSpecimenCreateOrConnectWithoutLabOrderInputSchema: z.ZodType<Prisma.LabOrderSpecimenCreateOrConnectWithoutLabOrderInput> = z.object({
  where: z.lazy(() => LabOrderSpecimenWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => LabOrderSpecimenCreateWithoutLabOrderInputSchema),z.lazy(() => LabOrderSpecimenUncheckedCreateWithoutLabOrderInputSchema) ]),
}).strict();

export const LabOrderSpecimenCreateManyLabOrderInputEnvelopeSchema: z.ZodType<Prisma.LabOrderSpecimenCreateManyLabOrderInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => LabOrderSpecimenCreateManyLabOrderInputSchema),z.lazy(() => LabOrderSpecimenCreateManyLabOrderInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const LabOrderSponsoredTestConsentCreateWithoutLabOrderInputSchema: z.ZodType<Prisma.LabOrderSponsoredTestConsentCreateWithoutLabOrderInput> = z.object({
  Id: z.string().optional(),
  ProviderName: z.string().optional().nullable(),
  ProviderNPI: z.string().optional().nullable(),
  ConsentAt: z.date().optional().nullable(),
  CreatedAt: z.date().optional().nullable(),
  UpdatedAt: z.date().optional().nullable(),
  SponsoredTest: z.lazy(() => SponsoredTestCreateNestedOneWithoutLabOrderSponsoredTestConsentInputSchema).optional()
}).strict();

export const LabOrderSponsoredTestConsentUncheckedCreateWithoutLabOrderInputSchema: z.ZodType<Prisma.LabOrderSponsoredTestConsentUncheckedCreateWithoutLabOrderInput> = z.object({
  Id: z.string().optional(),
  SponsoredCasandraTestId: z.string().optional().nullable(),
  ProviderName: z.string().optional().nullable(),
  ProviderNPI: z.string().optional().nullable(),
  ConsentAt: z.date().optional().nullable(),
  CreatedAt: z.date().optional().nullable(),
  UpdatedAt: z.date().optional().nullable()
}).strict();

export const LabOrderSponsoredTestConsentCreateOrConnectWithoutLabOrderInputSchema: z.ZodType<Prisma.LabOrderSponsoredTestConsentCreateOrConnectWithoutLabOrderInput> = z.object({
  where: z.lazy(() => LabOrderSponsoredTestConsentWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => LabOrderSponsoredTestConsentCreateWithoutLabOrderInputSchema),z.lazy(() => LabOrderSponsoredTestConsentUncheckedCreateWithoutLabOrderInputSchema) ]),
}).strict();

export const LabOrderSponsoredTestConsentCreateManyLabOrderInputEnvelopeSchema: z.ZodType<Prisma.LabOrderSponsoredTestConsentCreateManyLabOrderInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => LabOrderSponsoredTestConsentCreateManyLabOrderInputSchema),z.lazy(() => LabOrderSponsoredTestConsentCreateManyLabOrderInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const LabOrderStatusCreateWithoutLabOrderInputSchema: z.ZodType<Prisma.LabOrderStatusCreateWithoutLabOrderInput> = z.object({
  Id: z.string().optional(),
  Status: z.string().optional().nullable(),
  StatusDate: z.date().optional().nullable(),
  CreatedAt: z.date().optional().nullable(),
  UpdatedAt: z.date().optional().nullable()
}).strict();

export const LabOrderStatusUncheckedCreateWithoutLabOrderInputSchema: z.ZodType<Prisma.LabOrderStatusUncheckedCreateWithoutLabOrderInput> = z.object({
  Id: z.string().optional(),
  Status: z.string().optional().nullable(),
  StatusDate: z.date().optional().nullable(),
  CreatedAt: z.date().optional().nullable(),
  UpdatedAt: z.date().optional().nullable()
}).strict();

export const LabOrderStatusCreateOrConnectWithoutLabOrderInputSchema: z.ZodType<Prisma.LabOrderStatusCreateOrConnectWithoutLabOrderInput> = z.object({
  where: z.lazy(() => LabOrderStatusWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => LabOrderStatusCreateWithoutLabOrderInputSchema),z.lazy(() => LabOrderStatusUncheckedCreateWithoutLabOrderInputSchema) ]),
}).strict();

export const LabOrderStatusCreateManyLabOrderInputEnvelopeSchema: z.ZodType<Prisma.LabOrderStatusCreateManyLabOrderInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => LabOrderStatusCreateManyLabOrderInputSchema),z.lazy(() => LabOrderStatusCreateManyLabOrderInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const LabOrderTestCreateWithoutLabOrderInputSchema: z.ZodType<Prisma.LabOrderTestCreateWithoutLabOrderInput> = z.object({
  Id: z.string().optional(),
  CreatedAt: z.date().optional().nullable(),
  UpdatedAt: z.date().optional().nullable(),
  TestCatalog: z.lazy(() => TestCatalogCreateNestedOneWithoutLabOrderTestInputSchema).optional()
}).strict();

export const LabOrderTestUncheckedCreateWithoutLabOrderInputSchema: z.ZodType<Prisma.LabOrderTestUncheckedCreateWithoutLabOrderInput> = z.object({
  Id: z.string().optional(),
  TestId: z.number().optional().nullable(),
  CreatedAt: z.date().optional().nullable(),
  UpdatedAt: z.date().optional().nullable()
}).strict();

export const LabOrderTestCreateOrConnectWithoutLabOrderInputSchema: z.ZodType<Prisma.LabOrderTestCreateOrConnectWithoutLabOrderInput> = z.object({
  where: z.lazy(() => LabOrderTestWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => LabOrderTestCreateWithoutLabOrderInputSchema),z.lazy(() => LabOrderTestUncheckedCreateWithoutLabOrderInputSchema) ]),
}).strict();

export const LabOrderTestCreateManyLabOrderInputEnvelopeSchema: z.ZodType<Prisma.LabOrderTestCreateManyLabOrderInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => LabOrderTestCreateManyLabOrderInputSchema),z.lazy(() => LabOrderTestCreateManyLabOrderInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const ProviderUpsertWithoutOrderingProviderLabOrderInputSchema: z.ZodType<Prisma.ProviderUpsertWithoutOrderingProviderLabOrderInput> = z.object({
  update: z.union([ z.lazy(() => ProviderUpdateWithoutOrderingProviderLabOrderInputSchema),z.lazy(() => ProviderUncheckedUpdateWithoutOrderingProviderLabOrderInputSchema) ]),
  create: z.union([ z.lazy(() => ProviderCreateWithoutOrderingProviderLabOrderInputSchema),z.lazy(() => ProviderUncheckedCreateWithoutOrderingProviderLabOrderInputSchema) ]),
  where: z.lazy(() => ProviderWhereInputSchema).optional()
}).strict();

export const ProviderUpdateToOneWithWhereWithoutOrderingProviderLabOrderInputSchema: z.ZodType<Prisma.ProviderUpdateToOneWithWhereWithoutOrderingProviderLabOrderInput> = z.object({
  where: z.lazy(() => ProviderWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => ProviderUpdateWithoutOrderingProviderLabOrderInputSchema),z.lazy(() => ProviderUncheckedUpdateWithoutOrderingProviderLabOrderInputSchema) ]),
}).strict();

export const ProviderUpdateWithoutOrderingProviderLabOrderInputSchema: z.ZodType<Prisma.ProviderUpdateWithoutOrderingProviderLabOrderInput> = z.object({
  Id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  href: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  NPI: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Email: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Credentials: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Specialty: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Aboutme: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Gender: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  ProviderType: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Affiliation: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  ProceduresAndResearch: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  SpecialInterests: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  TreatingProviderLabOrder: z.lazy(() => LabOrderUpdateManyWithoutTreatingProviderNestedInputSchema).optional(),
  UserAttribute: z.lazy(() => UserAttributeUpdateOneWithoutProviderNestedInputSchema).optional(),
  ProviderEducation: z.lazy(() => ProviderEducationUpdateManyWithoutProviderNestedInputSchema).optional(),
  ProviderFavoriteTest: z.lazy(() => ProviderFavoriteTestUpdateManyWithoutProviderNestedInputSchema).optional(),
  ProviderOrganization: z.lazy(() => ProviderOrganizationUpdateManyWithoutProviderNestedInputSchema).optional()
}).strict();

export const ProviderUncheckedUpdateWithoutOrderingProviderLabOrderInputSchema: z.ZodType<Prisma.ProviderUncheckedUpdateWithoutOrderingProviderLabOrderInput> = z.object({
  Id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  href: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  NPI: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Email: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Credentials: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Specialty: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Aboutme: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Gender: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  ProviderType: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Affiliation: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  ProceduresAndResearch: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  SpecialInterests: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  UserAttributeId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  TreatingProviderLabOrder: z.lazy(() => LabOrderUncheckedUpdateManyWithoutTreatingProviderNestedInputSchema).optional(),
  ProviderEducation: z.lazy(() => ProviderEducationUncheckedUpdateManyWithoutProviderNestedInputSchema).optional(),
  ProviderFavoriteTest: z.lazy(() => ProviderFavoriteTestUncheckedUpdateManyWithoutProviderNestedInputSchema).optional(),
  ProviderOrganization: z.lazy(() => ProviderOrganizationUncheckedUpdateManyWithoutProviderNestedInputSchema).optional()
}).strict();

export const ProviderUpsertWithoutTreatingProviderLabOrderInputSchema: z.ZodType<Prisma.ProviderUpsertWithoutTreatingProviderLabOrderInput> = z.object({
  update: z.union([ z.lazy(() => ProviderUpdateWithoutTreatingProviderLabOrderInputSchema),z.lazy(() => ProviderUncheckedUpdateWithoutTreatingProviderLabOrderInputSchema) ]),
  create: z.union([ z.lazy(() => ProviderCreateWithoutTreatingProviderLabOrderInputSchema),z.lazy(() => ProviderUncheckedCreateWithoutTreatingProviderLabOrderInputSchema) ]),
  where: z.lazy(() => ProviderWhereInputSchema).optional()
}).strict();

export const ProviderUpdateToOneWithWhereWithoutTreatingProviderLabOrderInputSchema: z.ZodType<Prisma.ProviderUpdateToOneWithWhereWithoutTreatingProviderLabOrderInput> = z.object({
  where: z.lazy(() => ProviderWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => ProviderUpdateWithoutTreatingProviderLabOrderInputSchema),z.lazy(() => ProviderUncheckedUpdateWithoutTreatingProviderLabOrderInputSchema) ]),
}).strict();

export const ProviderUpdateWithoutTreatingProviderLabOrderInputSchema: z.ZodType<Prisma.ProviderUpdateWithoutTreatingProviderLabOrderInput> = z.object({
  Id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  href: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  NPI: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Email: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Credentials: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Specialty: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Aboutme: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Gender: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  ProviderType: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Affiliation: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  ProceduresAndResearch: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  SpecialInterests: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  OrderingProviderLabOrder: z.lazy(() => LabOrderUpdateManyWithoutOrderingProviderNestedInputSchema).optional(),
  UserAttribute: z.lazy(() => UserAttributeUpdateOneWithoutProviderNestedInputSchema).optional(),
  ProviderEducation: z.lazy(() => ProviderEducationUpdateManyWithoutProviderNestedInputSchema).optional(),
  ProviderFavoriteTest: z.lazy(() => ProviderFavoriteTestUpdateManyWithoutProviderNestedInputSchema).optional(),
  ProviderOrganization: z.lazy(() => ProviderOrganizationUpdateManyWithoutProviderNestedInputSchema).optional()
}).strict();

export const ProviderUncheckedUpdateWithoutTreatingProviderLabOrderInputSchema: z.ZodType<Prisma.ProviderUncheckedUpdateWithoutTreatingProviderLabOrderInput> = z.object({
  Id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  href: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  NPI: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Email: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Credentials: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Specialty: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Aboutme: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Gender: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  ProviderType: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Affiliation: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  ProceduresAndResearch: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  SpecialInterests: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  UserAttributeId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  OrderingProviderLabOrder: z.lazy(() => LabOrderUncheckedUpdateManyWithoutOrderingProviderNestedInputSchema).optional(),
  ProviderEducation: z.lazy(() => ProviderEducationUncheckedUpdateManyWithoutProviderNestedInputSchema).optional(),
  ProviderFavoriteTest: z.lazy(() => ProviderFavoriteTestUncheckedUpdateManyWithoutProviderNestedInputSchema).optional(),
  ProviderOrganization: z.lazy(() => ProviderOrganizationUncheckedUpdateManyWithoutProviderNestedInputSchema).optional()
}).strict();

export const PatientUpsertWithoutLabOrderInputSchema: z.ZodType<Prisma.PatientUpsertWithoutLabOrderInput> = z.object({
  update: z.union([ z.lazy(() => PatientUpdateWithoutLabOrderInputSchema),z.lazy(() => PatientUncheckedUpdateWithoutLabOrderInputSchema) ]),
  create: z.union([ z.lazy(() => PatientCreateWithoutLabOrderInputSchema),z.lazy(() => PatientUncheckedCreateWithoutLabOrderInputSchema) ]),
  where: z.lazy(() => PatientWhereInputSchema).optional()
}).strict();

export const PatientUpdateToOneWithWhereWithoutLabOrderInputSchema: z.ZodType<Prisma.PatientUpdateToOneWithWhereWithoutLabOrderInput> = z.object({
  where: z.lazy(() => PatientWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => PatientUpdateWithoutLabOrderInputSchema),z.lazy(() => PatientUncheckedUpdateWithoutLabOrderInputSchema) ]),
}).strict();

export const PatientUpdateWithoutLabOrderInputSchema: z.ZodType<Prisma.PatientUpdateWithoutLabOrderInput> = z.object({
  Id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  FirstName: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  LastName: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  DateOfBirth: z.union([ z.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Gender: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Email: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Mobile: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  CreatedAt: z.union([ z.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  UpdatedAt: z.union([ z.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  PatientOrganization: z.lazy(() => PatientOrganizationUpdateManyWithoutPatientNestedInputSchema).optional()
}).strict();

export const PatientUncheckedUpdateWithoutLabOrderInputSchema: z.ZodType<Prisma.PatientUncheckedUpdateWithoutLabOrderInput> = z.object({
  Id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  FirstName: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  LastName: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  DateOfBirth: z.union([ z.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Gender: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Email: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Mobile: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  CreatedAt: z.union([ z.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  UpdatedAt: z.union([ z.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  PatientOrganization: z.lazy(() => PatientOrganizationUncheckedUpdateManyWithoutPatientNestedInputSchema).optional()
}).strict();

export const OrganizationUpsertWithoutLabOrderInputSchema: z.ZodType<Prisma.OrganizationUpsertWithoutLabOrderInput> = z.object({
  update: z.union([ z.lazy(() => OrganizationUpdateWithoutLabOrderInputSchema),z.lazy(() => OrganizationUncheckedUpdateWithoutLabOrderInputSchema) ]),
  create: z.union([ z.lazy(() => OrganizationCreateWithoutLabOrderInputSchema),z.lazy(() => OrganizationUncheckedCreateWithoutLabOrderInputSchema) ]),
  where: z.lazy(() => OrganizationWhereInputSchema).optional()
}).strict();

export const OrganizationUpdateToOneWithWhereWithoutLabOrderInputSchema: z.ZodType<Prisma.OrganizationUpdateToOneWithWhereWithoutLabOrderInput> = z.object({
  where: z.lazy(() => OrganizationWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => OrganizationUpdateWithoutLabOrderInputSchema),z.lazy(() => OrganizationUncheckedUpdateWithoutLabOrderInputSchema) ]),
}).strict();

export const OrganizationUpdateWithoutLabOrderInputSchema: z.ZodType<Prisma.OrganizationUpdateWithoutLabOrderInput> = z.object({
  Id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  href: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Level: z.union([ z.number(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  ParentOrgName: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  OrgName: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  OrgType: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  OrgSpecialty: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  OrgAddress: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  OrgCity: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  OrgState: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  OrgZip: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Organization: z.lazy(() => OrganizationUpdateOneWithoutChildOrganizationNestedInputSchema).optional(),
  ChildOrganization: z.lazy(() => OrganizationUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  OrganizationFavoriteTest: z.lazy(() => OrganizationFavoriteTestUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  PatientOrganization: z.lazy(() => PatientOrganizationUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  ProviderOrganization: z.lazy(() => ProviderOrganizationUpdateManyWithoutOrganizationNestedInputSchema).optional()
}).strict();

export const OrganizationUncheckedUpdateWithoutLabOrderInputSchema: z.ZodType<Prisma.OrganizationUncheckedUpdateWithoutLabOrderInput> = z.object({
  Id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  href: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  ParentId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Level: z.union([ z.number(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  ParentOrgName: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  OrgName: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  OrgType: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  OrgSpecialty: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  OrgAddress: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  OrgCity: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  OrgState: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  OrgZip: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  ChildOrganization: z.lazy(() => OrganizationUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  OrganizationFavoriteTest: z.lazy(() => OrganizationFavoriteTestUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  PatientOrganization: z.lazy(() => PatientOrganizationUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  ProviderOrganization: z.lazy(() => ProviderOrganizationUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional()
}).strict();

export const LabOrderAttachmentUpsertWithWhereUniqueWithoutLabOrderInputSchema: z.ZodType<Prisma.LabOrderAttachmentUpsertWithWhereUniqueWithoutLabOrderInput> = z.object({
  where: z.lazy(() => LabOrderAttachmentWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => LabOrderAttachmentUpdateWithoutLabOrderInputSchema),z.lazy(() => LabOrderAttachmentUncheckedUpdateWithoutLabOrderInputSchema) ]),
  create: z.union([ z.lazy(() => LabOrderAttachmentCreateWithoutLabOrderInputSchema),z.lazy(() => LabOrderAttachmentUncheckedCreateWithoutLabOrderInputSchema) ]),
}).strict();

export const LabOrderAttachmentUpdateWithWhereUniqueWithoutLabOrderInputSchema: z.ZodType<Prisma.LabOrderAttachmentUpdateWithWhereUniqueWithoutLabOrderInput> = z.object({
  where: z.lazy(() => LabOrderAttachmentWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => LabOrderAttachmentUpdateWithoutLabOrderInputSchema),z.lazy(() => LabOrderAttachmentUncheckedUpdateWithoutLabOrderInputSchema) ]),
}).strict();

export const LabOrderAttachmentUpdateManyWithWhereWithoutLabOrderInputSchema: z.ZodType<Prisma.LabOrderAttachmentUpdateManyWithWhereWithoutLabOrderInput> = z.object({
  where: z.lazy(() => LabOrderAttachmentScalarWhereInputSchema),
  data: z.union([ z.lazy(() => LabOrderAttachmentUpdateManyMutationInputSchema),z.lazy(() => LabOrderAttachmentUncheckedUpdateManyWithoutLabOrderInputSchema) ]),
}).strict();

export const LabOrderBillingUpsertWithWhereUniqueWithoutLabOrderInputSchema: z.ZodType<Prisma.LabOrderBillingUpsertWithWhereUniqueWithoutLabOrderInput> = z.object({
  where: z.lazy(() => LabOrderBillingWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => LabOrderBillingUpdateWithoutLabOrderInputSchema),z.lazy(() => LabOrderBillingUncheckedUpdateWithoutLabOrderInputSchema) ]),
  create: z.union([ z.lazy(() => LabOrderBillingCreateWithoutLabOrderInputSchema),z.lazy(() => LabOrderBillingUncheckedCreateWithoutLabOrderInputSchema) ]),
}).strict();

export const LabOrderBillingUpdateWithWhereUniqueWithoutLabOrderInputSchema: z.ZodType<Prisma.LabOrderBillingUpdateWithWhereUniqueWithoutLabOrderInput> = z.object({
  where: z.lazy(() => LabOrderBillingWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => LabOrderBillingUpdateWithoutLabOrderInputSchema),z.lazy(() => LabOrderBillingUncheckedUpdateWithoutLabOrderInputSchema) ]),
}).strict();

export const LabOrderBillingUpdateManyWithWhereWithoutLabOrderInputSchema: z.ZodType<Prisma.LabOrderBillingUpdateManyWithWhereWithoutLabOrderInput> = z.object({
  where: z.lazy(() => LabOrderBillingScalarWhereInputSchema),
  data: z.union([ z.lazy(() => LabOrderBillingUpdateManyMutationInputSchema),z.lazy(() => LabOrderBillingUncheckedUpdateManyWithoutLabOrderInputSchema) ]),
}).strict();

export const LabOrderBillingScalarWhereInputSchema: z.ZodType<Prisma.LabOrderBillingScalarWhereInput> = z.object({
  AND: z.union([ z.lazy(() => LabOrderBillingScalarWhereInputSchema),z.lazy(() => LabOrderBillingScalarWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => LabOrderBillingScalarWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => LabOrderBillingScalarWhereInputSchema),z.lazy(() => LabOrderBillingScalarWhereInputSchema).array() ]).optional(),
  Id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  LabOrderId: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  BillToId: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  HealthPalnId: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  PatientStatus: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  SponoseredTestCouponCode: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  CreatedAt: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.date() ]).optional().nullable(),
  UpdatedAt: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.date() ]).optional().nullable(),
}).strict();

export const LabOrderIcdUpsertWithWhereUniqueWithoutLabOrderInputSchema: z.ZodType<Prisma.LabOrderIcdUpsertWithWhereUniqueWithoutLabOrderInput> = z.object({
  where: z.lazy(() => LabOrderIcdWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => LabOrderIcdUpdateWithoutLabOrderInputSchema),z.lazy(() => LabOrderIcdUncheckedUpdateWithoutLabOrderInputSchema) ]),
  create: z.union([ z.lazy(() => LabOrderIcdCreateWithoutLabOrderInputSchema),z.lazy(() => LabOrderIcdUncheckedCreateWithoutLabOrderInputSchema) ]),
}).strict();

export const LabOrderIcdUpdateWithWhereUniqueWithoutLabOrderInputSchema: z.ZodType<Prisma.LabOrderIcdUpdateWithWhereUniqueWithoutLabOrderInput> = z.object({
  where: z.lazy(() => LabOrderIcdWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => LabOrderIcdUpdateWithoutLabOrderInputSchema),z.lazy(() => LabOrderIcdUncheckedUpdateWithoutLabOrderInputSchema) ]),
}).strict();

export const LabOrderIcdUpdateManyWithWhereWithoutLabOrderInputSchema: z.ZodType<Prisma.LabOrderIcdUpdateManyWithWhereWithoutLabOrderInput> = z.object({
  where: z.lazy(() => LabOrderIcdScalarWhereInputSchema),
  data: z.union([ z.lazy(() => LabOrderIcdUpdateManyMutationInputSchema),z.lazy(() => LabOrderIcdUncheckedUpdateManyWithoutLabOrderInputSchema) ]),
}).strict();

export const LabOrderSpecimenUpsertWithWhereUniqueWithoutLabOrderInputSchema: z.ZodType<Prisma.LabOrderSpecimenUpsertWithWhereUniqueWithoutLabOrderInput> = z.object({
  where: z.lazy(() => LabOrderSpecimenWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => LabOrderSpecimenUpdateWithoutLabOrderInputSchema),z.lazy(() => LabOrderSpecimenUncheckedUpdateWithoutLabOrderInputSchema) ]),
  create: z.union([ z.lazy(() => LabOrderSpecimenCreateWithoutLabOrderInputSchema),z.lazy(() => LabOrderSpecimenUncheckedCreateWithoutLabOrderInputSchema) ]),
}).strict();

export const LabOrderSpecimenUpdateWithWhereUniqueWithoutLabOrderInputSchema: z.ZodType<Prisma.LabOrderSpecimenUpdateWithWhereUniqueWithoutLabOrderInput> = z.object({
  where: z.lazy(() => LabOrderSpecimenWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => LabOrderSpecimenUpdateWithoutLabOrderInputSchema),z.lazy(() => LabOrderSpecimenUncheckedUpdateWithoutLabOrderInputSchema) ]),
}).strict();

export const LabOrderSpecimenUpdateManyWithWhereWithoutLabOrderInputSchema: z.ZodType<Prisma.LabOrderSpecimenUpdateManyWithWhereWithoutLabOrderInput> = z.object({
  where: z.lazy(() => LabOrderSpecimenScalarWhereInputSchema),
  data: z.union([ z.lazy(() => LabOrderSpecimenUpdateManyMutationInputSchema),z.lazy(() => LabOrderSpecimenUncheckedUpdateManyWithoutLabOrderInputSchema) ]),
}).strict();

export const LabOrderSpecimenScalarWhereInputSchema: z.ZodType<Prisma.LabOrderSpecimenScalarWhereInput> = z.object({
  AND: z.union([ z.lazy(() => LabOrderSpecimenScalarWhereInputSchema),z.lazy(() => LabOrderSpecimenScalarWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => LabOrderSpecimenScalarWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => LabOrderSpecimenScalarWhereInputSchema),z.lazy(() => LabOrderSpecimenScalarWhereInputSchema).array() ]).optional(),
  Id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  LabOrderId: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  SpecimenType: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  SpecimenCount: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  CollectedDate: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.date() ]).optional().nullable(),
  CollectedTime: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  SpecimenID: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  BodySite: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  TumorType: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  Fixative: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  FixativeDuration: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  ColdIschemicTime: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  CreatedAt: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.date() ]).optional().nullable(),
  UpdatedAt: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.date() ]).optional().nullable(),
}).strict();

export const LabOrderSponsoredTestConsentUpsertWithWhereUniqueWithoutLabOrderInputSchema: z.ZodType<Prisma.LabOrderSponsoredTestConsentUpsertWithWhereUniqueWithoutLabOrderInput> = z.object({
  where: z.lazy(() => LabOrderSponsoredTestConsentWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => LabOrderSponsoredTestConsentUpdateWithoutLabOrderInputSchema),z.lazy(() => LabOrderSponsoredTestConsentUncheckedUpdateWithoutLabOrderInputSchema) ]),
  create: z.union([ z.lazy(() => LabOrderSponsoredTestConsentCreateWithoutLabOrderInputSchema),z.lazy(() => LabOrderSponsoredTestConsentUncheckedCreateWithoutLabOrderInputSchema) ]),
}).strict();

export const LabOrderSponsoredTestConsentUpdateWithWhereUniqueWithoutLabOrderInputSchema: z.ZodType<Prisma.LabOrderSponsoredTestConsentUpdateWithWhereUniqueWithoutLabOrderInput> = z.object({
  where: z.lazy(() => LabOrderSponsoredTestConsentWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => LabOrderSponsoredTestConsentUpdateWithoutLabOrderInputSchema),z.lazy(() => LabOrderSponsoredTestConsentUncheckedUpdateWithoutLabOrderInputSchema) ]),
}).strict();

export const LabOrderSponsoredTestConsentUpdateManyWithWhereWithoutLabOrderInputSchema: z.ZodType<Prisma.LabOrderSponsoredTestConsentUpdateManyWithWhereWithoutLabOrderInput> = z.object({
  where: z.lazy(() => LabOrderSponsoredTestConsentScalarWhereInputSchema),
  data: z.union([ z.lazy(() => LabOrderSponsoredTestConsentUpdateManyMutationInputSchema),z.lazy(() => LabOrderSponsoredTestConsentUncheckedUpdateManyWithoutLabOrderInputSchema) ]),
}).strict();

export const LabOrderSponsoredTestConsentScalarWhereInputSchema: z.ZodType<Prisma.LabOrderSponsoredTestConsentScalarWhereInput> = z.object({
  AND: z.union([ z.lazy(() => LabOrderSponsoredTestConsentScalarWhereInputSchema),z.lazy(() => LabOrderSponsoredTestConsentScalarWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => LabOrderSponsoredTestConsentScalarWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => LabOrderSponsoredTestConsentScalarWhereInputSchema),z.lazy(() => LabOrderSponsoredTestConsentScalarWhereInputSchema).array() ]).optional(),
  Id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  LabOrderId: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  SponsoredCasandraTestId: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  ProviderName: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  ProviderNPI: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  ConsentAt: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.date() ]).optional().nullable(),
  CreatedAt: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.date() ]).optional().nullable(),
  UpdatedAt: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.date() ]).optional().nullable(),
}).strict();

export const LabOrderStatusUpsertWithWhereUniqueWithoutLabOrderInputSchema: z.ZodType<Prisma.LabOrderStatusUpsertWithWhereUniqueWithoutLabOrderInput> = z.object({
  where: z.lazy(() => LabOrderStatusWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => LabOrderStatusUpdateWithoutLabOrderInputSchema),z.lazy(() => LabOrderStatusUncheckedUpdateWithoutLabOrderInputSchema) ]),
  create: z.union([ z.lazy(() => LabOrderStatusCreateWithoutLabOrderInputSchema),z.lazy(() => LabOrderStatusUncheckedCreateWithoutLabOrderInputSchema) ]),
}).strict();

export const LabOrderStatusUpdateWithWhereUniqueWithoutLabOrderInputSchema: z.ZodType<Prisma.LabOrderStatusUpdateWithWhereUniqueWithoutLabOrderInput> = z.object({
  where: z.lazy(() => LabOrderStatusWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => LabOrderStatusUpdateWithoutLabOrderInputSchema),z.lazy(() => LabOrderStatusUncheckedUpdateWithoutLabOrderInputSchema) ]),
}).strict();

export const LabOrderStatusUpdateManyWithWhereWithoutLabOrderInputSchema: z.ZodType<Prisma.LabOrderStatusUpdateManyWithWhereWithoutLabOrderInput> = z.object({
  where: z.lazy(() => LabOrderStatusScalarWhereInputSchema),
  data: z.union([ z.lazy(() => LabOrderStatusUpdateManyMutationInputSchema),z.lazy(() => LabOrderStatusUncheckedUpdateManyWithoutLabOrderInputSchema) ]),
}).strict();

export const LabOrderStatusScalarWhereInputSchema: z.ZodType<Prisma.LabOrderStatusScalarWhereInput> = z.object({
  AND: z.union([ z.lazy(() => LabOrderStatusScalarWhereInputSchema),z.lazy(() => LabOrderStatusScalarWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => LabOrderStatusScalarWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => LabOrderStatusScalarWhereInputSchema),z.lazy(() => LabOrderStatusScalarWhereInputSchema).array() ]).optional(),
  Id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  LabOrderId: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  Status: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  StatusDate: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.date() ]).optional().nullable(),
  CreatedAt: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.date() ]).optional().nullable(),
  UpdatedAt: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.date() ]).optional().nullable(),
}).strict();

export const LabOrderTestUpsertWithWhereUniqueWithoutLabOrderInputSchema: z.ZodType<Prisma.LabOrderTestUpsertWithWhereUniqueWithoutLabOrderInput> = z.object({
  where: z.lazy(() => LabOrderTestWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => LabOrderTestUpdateWithoutLabOrderInputSchema),z.lazy(() => LabOrderTestUncheckedUpdateWithoutLabOrderInputSchema) ]),
  create: z.union([ z.lazy(() => LabOrderTestCreateWithoutLabOrderInputSchema),z.lazy(() => LabOrderTestUncheckedCreateWithoutLabOrderInputSchema) ]),
}).strict();

export const LabOrderTestUpdateWithWhereUniqueWithoutLabOrderInputSchema: z.ZodType<Prisma.LabOrderTestUpdateWithWhereUniqueWithoutLabOrderInput> = z.object({
  where: z.lazy(() => LabOrderTestWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => LabOrderTestUpdateWithoutLabOrderInputSchema),z.lazy(() => LabOrderTestUncheckedUpdateWithoutLabOrderInputSchema) ]),
}).strict();

export const LabOrderTestUpdateManyWithWhereWithoutLabOrderInputSchema: z.ZodType<Prisma.LabOrderTestUpdateManyWithWhereWithoutLabOrderInput> = z.object({
  where: z.lazy(() => LabOrderTestScalarWhereInputSchema),
  data: z.union([ z.lazy(() => LabOrderTestUpdateManyMutationInputSchema),z.lazy(() => LabOrderTestUncheckedUpdateManyWithoutLabOrderInputSchema) ]),
}).strict();

export const LabOrderTestScalarWhereInputSchema: z.ZodType<Prisma.LabOrderTestScalarWhereInput> = z.object({
  AND: z.union([ z.lazy(() => LabOrderTestScalarWhereInputSchema),z.lazy(() => LabOrderTestScalarWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => LabOrderTestScalarWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => LabOrderTestScalarWhereInputSchema),z.lazy(() => LabOrderTestScalarWhereInputSchema).array() ]).optional(),
  Id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  LabOrderId: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  TestId: z.union([ z.lazy(() => IntNullableFilterSchema),z.number() ]).optional().nullable(),
  CreatedAt: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.date() ]).optional().nullable(),
  UpdatedAt: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.date() ]).optional().nullable(),
}).strict();

export const LabOrderCreateWithoutLabOrderAttachmentInputSchema: z.ZodType<Prisma.LabOrderCreateWithoutLabOrderAttachmentInput> = z.object({
  Id: z.string().optional(),
  OrderNumber: z.string().optional().nullable(),
  AccessionNumber: z.string().optional().nullable(),
  PatientMRN: z.string().optional().nullable(),
  PatientMobile: z.string().optional().nullable(),
  PatientEmail: z.string().optional().nullable(),
  OrderDate: z.date().optional().nullable(),
  OrderNotes: z.string().optional().nullable(),
  CreatedAt: z.date().optional().nullable(),
  UpdatedAt: z.date().optional().nullable(),
  OrderingProvider: z.lazy(() => ProviderCreateNestedOneWithoutOrderingProviderLabOrderInputSchema).optional(),
  TreatingProvider: z.lazy(() => ProviderCreateNestedOneWithoutTreatingProviderLabOrderInputSchema).optional(),
  Patient: z.lazy(() => PatientCreateNestedOneWithoutLabOrderInputSchema).optional(),
  Organization: z.lazy(() => OrganizationCreateNestedOneWithoutLabOrderInputSchema).optional(),
  LabOrderBilling: z.lazy(() => LabOrderBillingCreateNestedManyWithoutLabOrderInputSchema).optional(),
  LabOrderIcd: z.lazy(() => LabOrderIcdCreateNestedManyWithoutLabOrderInputSchema).optional(),
  LabOrderSpecimen: z.lazy(() => LabOrderSpecimenCreateNestedManyWithoutLabOrderInputSchema).optional(),
  LabOrderSponsoredTestConsent: z.lazy(() => LabOrderSponsoredTestConsentCreateNestedManyWithoutLabOrderInputSchema).optional(),
  LabOrderStatus: z.lazy(() => LabOrderStatusCreateNestedManyWithoutLabOrderInputSchema).optional(),
  LabOrderTest: z.lazy(() => LabOrderTestCreateNestedManyWithoutLabOrderInputSchema).optional()
}).strict();

export const LabOrderUncheckedCreateWithoutLabOrderAttachmentInputSchema: z.ZodType<Prisma.LabOrderUncheckedCreateWithoutLabOrderAttachmentInput> = z.object({
  Id: z.string().optional(),
  OrderNumber: z.string().optional().nullable(),
  AccessionNumber: z.string().optional().nullable(),
  OrderingProviderId: z.string().optional().nullable(),
  TreatingProviderId: z.string().optional().nullable(),
  PatientId: z.string().optional().nullable(),
  PatientMRN: z.string().optional().nullable(),
  PatientMobile: z.string().optional().nullable(),
  PatientEmail: z.string().optional().nullable(),
  OrganizationId: z.string().optional().nullable(),
  OrderDate: z.date().optional().nullable(),
  OrderNotes: z.string().optional().nullable(),
  CreatedAt: z.date().optional().nullable(),
  UpdatedAt: z.date().optional().nullable(),
  LabOrderBilling: z.lazy(() => LabOrderBillingUncheckedCreateNestedManyWithoutLabOrderInputSchema).optional(),
  LabOrderIcd: z.lazy(() => LabOrderIcdUncheckedCreateNestedManyWithoutLabOrderInputSchema).optional(),
  LabOrderSpecimen: z.lazy(() => LabOrderSpecimenUncheckedCreateNestedManyWithoutLabOrderInputSchema).optional(),
  LabOrderSponsoredTestConsent: z.lazy(() => LabOrderSponsoredTestConsentUncheckedCreateNestedManyWithoutLabOrderInputSchema).optional(),
  LabOrderStatus: z.lazy(() => LabOrderStatusUncheckedCreateNestedManyWithoutLabOrderInputSchema).optional(),
  LabOrderTest: z.lazy(() => LabOrderTestUncheckedCreateNestedManyWithoutLabOrderInputSchema).optional()
}).strict();

export const LabOrderCreateOrConnectWithoutLabOrderAttachmentInputSchema: z.ZodType<Prisma.LabOrderCreateOrConnectWithoutLabOrderAttachmentInput> = z.object({
  where: z.lazy(() => LabOrderWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => LabOrderCreateWithoutLabOrderAttachmentInputSchema),z.lazy(() => LabOrderUncheckedCreateWithoutLabOrderAttachmentInputSchema) ]),
}).strict();

export const AttachmentCreateWithoutLabOrderAttachmentInputSchema: z.ZodType<Prisma.AttachmentCreateWithoutLabOrderAttachmentInput> = z.object({
  Id: z.string().optional(),
  AttachmentType: z.string().optional().nullable(),
  AttachmentUrl: z.string().optional().nullable(),
  CreatedAt: z.date().optional().nullable(),
  UpdatedAt: z.date().optional().nullable()
}).strict();

export const AttachmentUncheckedCreateWithoutLabOrderAttachmentInputSchema: z.ZodType<Prisma.AttachmentUncheckedCreateWithoutLabOrderAttachmentInput> = z.object({
  Id: z.string().optional(),
  AttachmentType: z.string().optional().nullable(),
  AttachmentUrl: z.string().optional().nullable(),
  CreatedAt: z.date().optional().nullable(),
  UpdatedAt: z.date().optional().nullable()
}).strict();

export const AttachmentCreateOrConnectWithoutLabOrderAttachmentInputSchema: z.ZodType<Prisma.AttachmentCreateOrConnectWithoutLabOrderAttachmentInput> = z.object({
  where: z.lazy(() => AttachmentWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => AttachmentCreateWithoutLabOrderAttachmentInputSchema),z.lazy(() => AttachmentUncheckedCreateWithoutLabOrderAttachmentInputSchema) ]),
}).strict();

export const LabOrderUpsertWithoutLabOrderAttachmentInputSchema: z.ZodType<Prisma.LabOrderUpsertWithoutLabOrderAttachmentInput> = z.object({
  update: z.union([ z.lazy(() => LabOrderUpdateWithoutLabOrderAttachmentInputSchema),z.lazy(() => LabOrderUncheckedUpdateWithoutLabOrderAttachmentInputSchema) ]),
  create: z.union([ z.lazy(() => LabOrderCreateWithoutLabOrderAttachmentInputSchema),z.lazy(() => LabOrderUncheckedCreateWithoutLabOrderAttachmentInputSchema) ]),
  where: z.lazy(() => LabOrderWhereInputSchema).optional()
}).strict();

export const LabOrderUpdateToOneWithWhereWithoutLabOrderAttachmentInputSchema: z.ZodType<Prisma.LabOrderUpdateToOneWithWhereWithoutLabOrderAttachmentInput> = z.object({
  where: z.lazy(() => LabOrderWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => LabOrderUpdateWithoutLabOrderAttachmentInputSchema),z.lazy(() => LabOrderUncheckedUpdateWithoutLabOrderAttachmentInputSchema) ]),
}).strict();

export const LabOrderUpdateWithoutLabOrderAttachmentInputSchema: z.ZodType<Prisma.LabOrderUpdateWithoutLabOrderAttachmentInput> = z.object({
  Id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  OrderNumber: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  AccessionNumber: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  PatientMRN: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  PatientMobile: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  PatientEmail: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  OrderDate: z.union([ z.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  OrderNotes: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  CreatedAt: z.union([ z.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  UpdatedAt: z.union([ z.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  OrderingProvider: z.lazy(() => ProviderUpdateOneWithoutOrderingProviderLabOrderNestedInputSchema).optional(),
  TreatingProvider: z.lazy(() => ProviderUpdateOneWithoutTreatingProviderLabOrderNestedInputSchema).optional(),
  Patient: z.lazy(() => PatientUpdateOneWithoutLabOrderNestedInputSchema).optional(),
  Organization: z.lazy(() => OrganizationUpdateOneWithoutLabOrderNestedInputSchema).optional(),
  LabOrderBilling: z.lazy(() => LabOrderBillingUpdateManyWithoutLabOrderNestedInputSchema).optional(),
  LabOrderIcd: z.lazy(() => LabOrderIcdUpdateManyWithoutLabOrderNestedInputSchema).optional(),
  LabOrderSpecimen: z.lazy(() => LabOrderSpecimenUpdateManyWithoutLabOrderNestedInputSchema).optional(),
  LabOrderSponsoredTestConsent: z.lazy(() => LabOrderSponsoredTestConsentUpdateManyWithoutLabOrderNestedInputSchema).optional(),
  LabOrderStatus: z.lazy(() => LabOrderStatusUpdateManyWithoutLabOrderNestedInputSchema).optional(),
  LabOrderTest: z.lazy(() => LabOrderTestUpdateManyWithoutLabOrderNestedInputSchema).optional()
}).strict();

export const LabOrderUncheckedUpdateWithoutLabOrderAttachmentInputSchema: z.ZodType<Prisma.LabOrderUncheckedUpdateWithoutLabOrderAttachmentInput> = z.object({
  Id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  OrderNumber: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  AccessionNumber: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  OrderingProviderId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  TreatingProviderId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  PatientId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  PatientMRN: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  PatientMobile: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  PatientEmail: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  OrganizationId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  OrderDate: z.union([ z.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  OrderNotes: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  CreatedAt: z.union([ z.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  UpdatedAt: z.union([ z.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  LabOrderBilling: z.lazy(() => LabOrderBillingUncheckedUpdateManyWithoutLabOrderNestedInputSchema).optional(),
  LabOrderIcd: z.lazy(() => LabOrderIcdUncheckedUpdateManyWithoutLabOrderNestedInputSchema).optional(),
  LabOrderSpecimen: z.lazy(() => LabOrderSpecimenUncheckedUpdateManyWithoutLabOrderNestedInputSchema).optional(),
  LabOrderSponsoredTestConsent: z.lazy(() => LabOrderSponsoredTestConsentUncheckedUpdateManyWithoutLabOrderNestedInputSchema).optional(),
  LabOrderStatus: z.lazy(() => LabOrderStatusUncheckedUpdateManyWithoutLabOrderNestedInputSchema).optional(),
  LabOrderTest: z.lazy(() => LabOrderTestUncheckedUpdateManyWithoutLabOrderNestedInputSchema).optional()
}).strict();

export const AttachmentUpsertWithoutLabOrderAttachmentInputSchema: z.ZodType<Prisma.AttachmentUpsertWithoutLabOrderAttachmentInput> = z.object({
  update: z.union([ z.lazy(() => AttachmentUpdateWithoutLabOrderAttachmentInputSchema),z.lazy(() => AttachmentUncheckedUpdateWithoutLabOrderAttachmentInputSchema) ]),
  create: z.union([ z.lazy(() => AttachmentCreateWithoutLabOrderAttachmentInputSchema),z.lazy(() => AttachmentUncheckedCreateWithoutLabOrderAttachmentInputSchema) ]),
  where: z.lazy(() => AttachmentWhereInputSchema).optional()
}).strict();

export const AttachmentUpdateToOneWithWhereWithoutLabOrderAttachmentInputSchema: z.ZodType<Prisma.AttachmentUpdateToOneWithWhereWithoutLabOrderAttachmentInput> = z.object({
  where: z.lazy(() => AttachmentWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => AttachmentUpdateWithoutLabOrderAttachmentInputSchema),z.lazy(() => AttachmentUncheckedUpdateWithoutLabOrderAttachmentInputSchema) ]),
}).strict();

export const AttachmentUpdateWithoutLabOrderAttachmentInputSchema: z.ZodType<Prisma.AttachmentUpdateWithoutLabOrderAttachmentInput> = z.object({
  Id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  AttachmentType: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  AttachmentUrl: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  CreatedAt: z.union([ z.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  UpdatedAt: z.union([ z.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const AttachmentUncheckedUpdateWithoutLabOrderAttachmentInputSchema: z.ZodType<Prisma.AttachmentUncheckedUpdateWithoutLabOrderAttachmentInput> = z.object({
  Id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  AttachmentType: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  AttachmentUrl: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  CreatedAt: z.union([ z.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  UpdatedAt: z.union([ z.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const LabOrderCreateWithoutLabOrderBillingInputSchema: z.ZodType<Prisma.LabOrderCreateWithoutLabOrderBillingInput> = z.object({
  Id: z.string().optional(),
  OrderNumber: z.string().optional().nullable(),
  AccessionNumber: z.string().optional().nullable(),
  PatientMRN: z.string().optional().nullable(),
  PatientMobile: z.string().optional().nullable(),
  PatientEmail: z.string().optional().nullable(),
  OrderDate: z.date().optional().nullable(),
  OrderNotes: z.string().optional().nullable(),
  CreatedAt: z.date().optional().nullable(),
  UpdatedAt: z.date().optional().nullable(),
  OrderingProvider: z.lazy(() => ProviderCreateNestedOneWithoutOrderingProviderLabOrderInputSchema).optional(),
  TreatingProvider: z.lazy(() => ProviderCreateNestedOneWithoutTreatingProviderLabOrderInputSchema).optional(),
  Patient: z.lazy(() => PatientCreateNestedOneWithoutLabOrderInputSchema).optional(),
  Organization: z.lazy(() => OrganizationCreateNestedOneWithoutLabOrderInputSchema).optional(),
  LabOrderAttachment: z.lazy(() => LabOrderAttachmentCreateNestedManyWithoutLabOrderInputSchema).optional(),
  LabOrderIcd: z.lazy(() => LabOrderIcdCreateNestedManyWithoutLabOrderInputSchema).optional(),
  LabOrderSpecimen: z.lazy(() => LabOrderSpecimenCreateNestedManyWithoutLabOrderInputSchema).optional(),
  LabOrderSponsoredTestConsent: z.lazy(() => LabOrderSponsoredTestConsentCreateNestedManyWithoutLabOrderInputSchema).optional(),
  LabOrderStatus: z.lazy(() => LabOrderStatusCreateNestedManyWithoutLabOrderInputSchema).optional(),
  LabOrderTest: z.lazy(() => LabOrderTestCreateNestedManyWithoutLabOrderInputSchema).optional()
}).strict();

export const LabOrderUncheckedCreateWithoutLabOrderBillingInputSchema: z.ZodType<Prisma.LabOrderUncheckedCreateWithoutLabOrderBillingInput> = z.object({
  Id: z.string().optional(),
  OrderNumber: z.string().optional().nullable(),
  AccessionNumber: z.string().optional().nullable(),
  OrderingProviderId: z.string().optional().nullable(),
  TreatingProviderId: z.string().optional().nullable(),
  PatientId: z.string().optional().nullable(),
  PatientMRN: z.string().optional().nullable(),
  PatientMobile: z.string().optional().nullable(),
  PatientEmail: z.string().optional().nullable(),
  OrganizationId: z.string().optional().nullable(),
  OrderDate: z.date().optional().nullable(),
  OrderNotes: z.string().optional().nullable(),
  CreatedAt: z.date().optional().nullable(),
  UpdatedAt: z.date().optional().nullable(),
  LabOrderAttachment: z.lazy(() => LabOrderAttachmentUncheckedCreateNestedManyWithoutLabOrderInputSchema).optional(),
  LabOrderIcd: z.lazy(() => LabOrderIcdUncheckedCreateNestedManyWithoutLabOrderInputSchema).optional(),
  LabOrderSpecimen: z.lazy(() => LabOrderSpecimenUncheckedCreateNestedManyWithoutLabOrderInputSchema).optional(),
  LabOrderSponsoredTestConsent: z.lazy(() => LabOrderSponsoredTestConsentUncheckedCreateNestedManyWithoutLabOrderInputSchema).optional(),
  LabOrderStatus: z.lazy(() => LabOrderStatusUncheckedCreateNestedManyWithoutLabOrderInputSchema).optional(),
  LabOrderTest: z.lazy(() => LabOrderTestUncheckedCreateNestedManyWithoutLabOrderInputSchema).optional()
}).strict();

export const LabOrderCreateOrConnectWithoutLabOrderBillingInputSchema: z.ZodType<Prisma.LabOrderCreateOrConnectWithoutLabOrderBillingInput> = z.object({
  where: z.lazy(() => LabOrderWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => LabOrderCreateWithoutLabOrderBillingInputSchema),z.lazy(() => LabOrderUncheckedCreateWithoutLabOrderBillingInputSchema) ]),
}).strict();

export const LabOrderUpsertWithoutLabOrderBillingInputSchema: z.ZodType<Prisma.LabOrderUpsertWithoutLabOrderBillingInput> = z.object({
  update: z.union([ z.lazy(() => LabOrderUpdateWithoutLabOrderBillingInputSchema),z.lazy(() => LabOrderUncheckedUpdateWithoutLabOrderBillingInputSchema) ]),
  create: z.union([ z.lazy(() => LabOrderCreateWithoutLabOrderBillingInputSchema),z.lazy(() => LabOrderUncheckedCreateWithoutLabOrderBillingInputSchema) ]),
  where: z.lazy(() => LabOrderWhereInputSchema).optional()
}).strict();

export const LabOrderUpdateToOneWithWhereWithoutLabOrderBillingInputSchema: z.ZodType<Prisma.LabOrderUpdateToOneWithWhereWithoutLabOrderBillingInput> = z.object({
  where: z.lazy(() => LabOrderWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => LabOrderUpdateWithoutLabOrderBillingInputSchema),z.lazy(() => LabOrderUncheckedUpdateWithoutLabOrderBillingInputSchema) ]),
}).strict();

export const LabOrderUpdateWithoutLabOrderBillingInputSchema: z.ZodType<Prisma.LabOrderUpdateWithoutLabOrderBillingInput> = z.object({
  Id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  OrderNumber: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  AccessionNumber: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  PatientMRN: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  PatientMobile: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  PatientEmail: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  OrderDate: z.union([ z.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  OrderNotes: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  CreatedAt: z.union([ z.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  UpdatedAt: z.union([ z.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  OrderingProvider: z.lazy(() => ProviderUpdateOneWithoutOrderingProviderLabOrderNestedInputSchema).optional(),
  TreatingProvider: z.lazy(() => ProviderUpdateOneWithoutTreatingProviderLabOrderNestedInputSchema).optional(),
  Patient: z.lazy(() => PatientUpdateOneWithoutLabOrderNestedInputSchema).optional(),
  Organization: z.lazy(() => OrganizationUpdateOneWithoutLabOrderNestedInputSchema).optional(),
  LabOrderAttachment: z.lazy(() => LabOrderAttachmentUpdateManyWithoutLabOrderNestedInputSchema).optional(),
  LabOrderIcd: z.lazy(() => LabOrderIcdUpdateManyWithoutLabOrderNestedInputSchema).optional(),
  LabOrderSpecimen: z.lazy(() => LabOrderSpecimenUpdateManyWithoutLabOrderNestedInputSchema).optional(),
  LabOrderSponsoredTestConsent: z.lazy(() => LabOrderSponsoredTestConsentUpdateManyWithoutLabOrderNestedInputSchema).optional(),
  LabOrderStatus: z.lazy(() => LabOrderStatusUpdateManyWithoutLabOrderNestedInputSchema).optional(),
  LabOrderTest: z.lazy(() => LabOrderTestUpdateManyWithoutLabOrderNestedInputSchema).optional()
}).strict();

export const LabOrderUncheckedUpdateWithoutLabOrderBillingInputSchema: z.ZodType<Prisma.LabOrderUncheckedUpdateWithoutLabOrderBillingInput> = z.object({
  Id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  OrderNumber: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  AccessionNumber: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  OrderingProviderId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  TreatingProviderId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  PatientId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  PatientMRN: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  PatientMobile: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  PatientEmail: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  OrganizationId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  OrderDate: z.union([ z.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  OrderNotes: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  CreatedAt: z.union([ z.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  UpdatedAt: z.union([ z.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  LabOrderAttachment: z.lazy(() => LabOrderAttachmentUncheckedUpdateManyWithoutLabOrderNestedInputSchema).optional(),
  LabOrderIcd: z.lazy(() => LabOrderIcdUncheckedUpdateManyWithoutLabOrderNestedInputSchema).optional(),
  LabOrderSpecimen: z.lazy(() => LabOrderSpecimenUncheckedUpdateManyWithoutLabOrderNestedInputSchema).optional(),
  LabOrderSponsoredTestConsent: z.lazy(() => LabOrderSponsoredTestConsentUncheckedUpdateManyWithoutLabOrderNestedInputSchema).optional(),
  LabOrderStatus: z.lazy(() => LabOrderStatusUncheckedUpdateManyWithoutLabOrderNestedInputSchema).optional(),
  LabOrderTest: z.lazy(() => LabOrderTestUncheckedUpdateManyWithoutLabOrderNestedInputSchema).optional()
}).strict();

export const LabOrderCreateWithoutLabOrderIcdInputSchema: z.ZodType<Prisma.LabOrderCreateWithoutLabOrderIcdInput> = z.object({
  Id: z.string().optional(),
  OrderNumber: z.string().optional().nullable(),
  AccessionNumber: z.string().optional().nullable(),
  PatientMRN: z.string().optional().nullable(),
  PatientMobile: z.string().optional().nullable(),
  PatientEmail: z.string().optional().nullable(),
  OrderDate: z.date().optional().nullable(),
  OrderNotes: z.string().optional().nullable(),
  CreatedAt: z.date().optional().nullable(),
  UpdatedAt: z.date().optional().nullable(),
  OrderingProvider: z.lazy(() => ProviderCreateNestedOneWithoutOrderingProviderLabOrderInputSchema).optional(),
  TreatingProvider: z.lazy(() => ProviderCreateNestedOneWithoutTreatingProviderLabOrderInputSchema).optional(),
  Patient: z.lazy(() => PatientCreateNestedOneWithoutLabOrderInputSchema).optional(),
  Organization: z.lazy(() => OrganizationCreateNestedOneWithoutLabOrderInputSchema).optional(),
  LabOrderAttachment: z.lazy(() => LabOrderAttachmentCreateNestedManyWithoutLabOrderInputSchema).optional(),
  LabOrderBilling: z.lazy(() => LabOrderBillingCreateNestedManyWithoutLabOrderInputSchema).optional(),
  LabOrderSpecimen: z.lazy(() => LabOrderSpecimenCreateNestedManyWithoutLabOrderInputSchema).optional(),
  LabOrderSponsoredTestConsent: z.lazy(() => LabOrderSponsoredTestConsentCreateNestedManyWithoutLabOrderInputSchema).optional(),
  LabOrderStatus: z.lazy(() => LabOrderStatusCreateNestedManyWithoutLabOrderInputSchema).optional(),
  LabOrderTest: z.lazy(() => LabOrderTestCreateNestedManyWithoutLabOrderInputSchema).optional()
}).strict();

export const LabOrderUncheckedCreateWithoutLabOrderIcdInputSchema: z.ZodType<Prisma.LabOrderUncheckedCreateWithoutLabOrderIcdInput> = z.object({
  Id: z.string().optional(),
  OrderNumber: z.string().optional().nullable(),
  AccessionNumber: z.string().optional().nullable(),
  OrderingProviderId: z.string().optional().nullable(),
  TreatingProviderId: z.string().optional().nullable(),
  PatientId: z.string().optional().nullable(),
  PatientMRN: z.string().optional().nullable(),
  PatientMobile: z.string().optional().nullable(),
  PatientEmail: z.string().optional().nullable(),
  OrganizationId: z.string().optional().nullable(),
  OrderDate: z.date().optional().nullable(),
  OrderNotes: z.string().optional().nullable(),
  CreatedAt: z.date().optional().nullable(),
  UpdatedAt: z.date().optional().nullable(),
  LabOrderAttachment: z.lazy(() => LabOrderAttachmentUncheckedCreateNestedManyWithoutLabOrderInputSchema).optional(),
  LabOrderBilling: z.lazy(() => LabOrderBillingUncheckedCreateNestedManyWithoutLabOrderInputSchema).optional(),
  LabOrderSpecimen: z.lazy(() => LabOrderSpecimenUncheckedCreateNestedManyWithoutLabOrderInputSchema).optional(),
  LabOrderSponsoredTestConsent: z.lazy(() => LabOrderSponsoredTestConsentUncheckedCreateNestedManyWithoutLabOrderInputSchema).optional(),
  LabOrderStatus: z.lazy(() => LabOrderStatusUncheckedCreateNestedManyWithoutLabOrderInputSchema).optional(),
  LabOrderTest: z.lazy(() => LabOrderTestUncheckedCreateNestedManyWithoutLabOrderInputSchema).optional()
}).strict();

export const LabOrderCreateOrConnectWithoutLabOrderIcdInputSchema: z.ZodType<Prisma.LabOrderCreateOrConnectWithoutLabOrderIcdInput> = z.object({
  where: z.lazy(() => LabOrderWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => LabOrderCreateWithoutLabOrderIcdInputSchema),z.lazy(() => LabOrderUncheckedCreateWithoutLabOrderIcdInputSchema) ]),
}).strict();

export const ICDCreateWithoutLabOrderIcdInputSchema: z.ZodType<Prisma.ICDCreateWithoutLabOrderIcdInput> = z.object({
  Id: z.string().optional(),
  Code: z.string().optional().nullable(),
  ShortDescription: z.string().optional().nullable(),
  CreatedAt: z.date().optional().nullable(),
  UpdatedAt: z.date().optional().nullable()
}).strict();

export const ICDUncheckedCreateWithoutLabOrderIcdInputSchema: z.ZodType<Prisma.ICDUncheckedCreateWithoutLabOrderIcdInput> = z.object({
  Id: z.string().optional(),
  Code: z.string().optional().nullable(),
  ShortDescription: z.string().optional().nullable(),
  CreatedAt: z.date().optional().nullable(),
  UpdatedAt: z.date().optional().nullable()
}).strict();

export const ICDCreateOrConnectWithoutLabOrderIcdInputSchema: z.ZodType<Prisma.ICDCreateOrConnectWithoutLabOrderIcdInput> = z.object({
  where: z.lazy(() => ICDWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => ICDCreateWithoutLabOrderIcdInputSchema),z.lazy(() => ICDUncheckedCreateWithoutLabOrderIcdInputSchema) ]),
}).strict();

export const LabOrderUpsertWithoutLabOrderIcdInputSchema: z.ZodType<Prisma.LabOrderUpsertWithoutLabOrderIcdInput> = z.object({
  update: z.union([ z.lazy(() => LabOrderUpdateWithoutLabOrderIcdInputSchema),z.lazy(() => LabOrderUncheckedUpdateWithoutLabOrderIcdInputSchema) ]),
  create: z.union([ z.lazy(() => LabOrderCreateWithoutLabOrderIcdInputSchema),z.lazy(() => LabOrderUncheckedCreateWithoutLabOrderIcdInputSchema) ]),
  where: z.lazy(() => LabOrderWhereInputSchema).optional()
}).strict();

export const LabOrderUpdateToOneWithWhereWithoutLabOrderIcdInputSchema: z.ZodType<Prisma.LabOrderUpdateToOneWithWhereWithoutLabOrderIcdInput> = z.object({
  where: z.lazy(() => LabOrderWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => LabOrderUpdateWithoutLabOrderIcdInputSchema),z.lazy(() => LabOrderUncheckedUpdateWithoutLabOrderIcdInputSchema) ]),
}).strict();

export const LabOrderUpdateWithoutLabOrderIcdInputSchema: z.ZodType<Prisma.LabOrderUpdateWithoutLabOrderIcdInput> = z.object({
  Id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  OrderNumber: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  AccessionNumber: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  PatientMRN: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  PatientMobile: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  PatientEmail: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  OrderDate: z.union([ z.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  OrderNotes: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  CreatedAt: z.union([ z.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  UpdatedAt: z.union([ z.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  OrderingProvider: z.lazy(() => ProviderUpdateOneWithoutOrderingProviderLabOrderNestedInputSchema).optional(),
  TreatingProvider: z.lazy(() => ProviderUpdateOneWithoutTreatingProviderLabOrderNestedInputSchema).optional(),
  Patient: z.lazy(() => PatientUpdateOneWithoutLabOrderNestedInputSchema).optional(),
  Organization: z.lazy(() => OrganizationUpdateOneWithoutLabOrderNestedInputSchema).optional(),
  LabOrderAttachment: z.lazy(() => LabOrderAttachmentUpdateManyWithoutLabOrderNestedInputSchema).optional(),
  LabOrderBilling: z.lazy(() => LabOrderBillingUpdateManyWithoutLabOrderNestedInputSchema).optional(),
  LabOrderSpecimen: z.lazy(() => LabOrderSpecimenUpdateManyWithoutLabOrderNestedInputSchema).optional(),
  LabOrderSponsoredTestConsent: z.lazy(() => LabOrderSponsoredTestConsentUpdateManyWithoutLabOrderNestedInputSchema).optional(),
  LabOrderStatus: z.lazy(() => LabOrderStatusUpdateManyWithoutLabOrderNestedInputSchema).optional(),
  LabOrderTest: z.lazy(() => LabOrderTestUpdateManyWithoutLabOrderNestedInputSchema).optional()
}).strict();

export const LabOrderUncheckedUpdateWithoutLabOrderIcdInputSchema: z.ZodType<Prisma.LabOrderUncheckedUpdateWithoutLabOrderIcdInput> = z.object({
  Id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  OrderNumber: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  AccessionNumber: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  OrderingProviderId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  TreatingProviderId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  PatientId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  PatientMRN: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  PatientMobile: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  PatientEmail: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  OrganizationId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  OrderDate: z.union([ z.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  OrderNotes: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  CreatedAt: z.union([ z.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  UpdatedAt: z.union([ z.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  LabOrderAttachment: z.lazy(() => LabOrderAttachmentUncheckedUpdateManyWithoutLabOrderNestedInputSchema).optional(),
  LabOrderBilling: z.lazy(() => LabOrderBillingUncheckedUpdateManyWithoutLabOrderNestedInputSchema).optional(),
  LabOrderSpecimen: z.lazy(() => LabOrderSpecimenUncheckedUpdateManyWithoutLabOrderNestedInputSchema).optional(),
  LabOrderSponsoredTestConsent: z.lazy(() => LabOrderSponsoredTestConsentUncheckedUpdateManyWithoutLabOrderNestedInputSchema).optional(),
  LabOrderStatus: z.lazy(() => LabOrderStatusUncheckedUpdateManyWithoutLabOrderNestedInputSchema).optional(),
  LabOrderTest: z.lazy(() => LabOrderTestUncheckedUpdateManyWithoutLabOrderNestedInputSchema).optional()
}).strict();

export const ICDUpsertWithoutLabOrderIcdInputSchema: z.ZodType<Prisma.ICDUpsertWithoutLabOrderIcdInput> = z.object({
  update: z.union([ z.lazy(() => ICDUpdateWithoutLabOrderIcdInputSchema),z.lazy(() => ICDUncheckedUpdateWithoutLabOrderIcdInputSchema) ]),
  create: z.union([ z.lazy(() => ICDCreateWithoutLabOrderIcdInputSchema),z.lazy(() => ICDUncheckedCreateWithoutLabOrderIcdInputSchema) ]),
  where: z.lazy(() => ICDWhereInputSchema).optional()
}).strict();

export const ICDUpdateToOneWithWhereWithoutLabOrderIcdInputSchema: z.ZodType<Prisma.ICDUpdateToOneWithWhereWithoutLabOrderIcdInput> = z.object({
  where: z.lazy(() => ICDWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => ICDUpdateWithoutLabOrderIcdInputSchema),z.lazy(() => ICDUncheckedUpdateWithoutLabOrderIcdInputSchema) ]),
}).strict();

export const ICDUpdateWithoutLabOrderIcdInputSchema: z.ZodType<Prisma.ICDUpdateWithoutLabOrderIcdInput> = z.object({
  Id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  Code: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  ShortDescription: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  CreatedAt: z.union([ z.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  UpdatedAt: z.union([ z.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const ICDUncheckedUpdateWithoutLabOrderIcdInputSchema: z.ZodType<Prisma.ICDUncheckedUpdateWithoutLabOrderIcdInput> = z.object({
  Id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  Code: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  ShortDescription: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  CreatedAt: z.union([ z.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  UpdatedAt: z.union([ z.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const LabOrderCreateWithoutLabOrderSpecimenInputSchema: z.ZodType<Prisma.LabOrderCreateWithoutLabOrderSpecimenInput> = z.object({
  Id: z.string().optional(),
  OrderNumber: z.string().optional().nullable(),
  AccessionNumber: z.string().optional().nullable(),
  PatientMRN: z.string().optional().nullable(),
  PatientMobile: z.string().optional().nullable(),
  PatientEmail: z.string().optional().nullable(),
  OrderDate: z.date().optional().nullable(),
  OrderNotes: z.string().optional().nullable(),
  CreatedAt: z.date().optional().nullable(),
  UpdatedAt: z.date().optional().nullable(),
  OrderingProvider: z.lazy(() => ProviderCreateNestedOneWithoutOrderingProviderLabOrderInputSchema).optional(),
  TreatingProvider: z.lazy(() => ProviderCreateNestedOneWithoutTreatingProviderLabOrderInputSchema).optional(),
  Patient: z.lazy(() => PatientCreateNestedOneWithoutLabOrderInputSchema).optional(),
  Organization: z.lazy(() => OrganizationCreateNestedOneWithoutLabOrderInputSchema).optional(),
  LabOrderAttachment: z.lazy(() => LabOrderAttachmentCreateNestedManyWithoutLabOrderInputSchema).optional(),
  LabOrderBilling: z.lazy(() => LabOrderBillingCreateNestedManyWithoutLabOrderInputSchema).optional(),
  LabOrderIcd: z.lazy(() => LabOrderIcdCreateNestedManyWithoutLabOrderInputSchema).optional(),
  LabOrderSponsoredTestConsent: z.lazy(() => LabOrderSponsoredTestConsentCreateNestedManyWithoutLabOrderInputSchema).optional(),
  LabOrderStatus: z.lazy(() => LabOrderStatusCreateNestedManyWithoutLabOrderInputSchema).optional(),
  LabOrderTest: z.lazy(() => LabOrderTestCreateNestedManyWithoutLabOrderInputSchema).optional()
}).strict();

export const LabOrderUncheckedCreateWithoutLabOrderSpecimenInputSchema: z.ZodType<Prisma.LabOrderUncheckedCreateWithoutLabOrderSpecimenInput> = z.object({
  Id: z.string().optional(),
  OrderNumber: z.string().optional().nullable(),
  AccessionNumber: z.string().optional().nullable(),
  OrderingProviderId: z.string().optional().nullable(),
  TreatingProviderId: z.string().optional().nullable(),
  PatientId: z.string().optional().nullable(),
  PatientMRN: z.string().optional().nullable(),
  PatientMobile: z.string().optional().nullable(),
  PatientEmail: z.string().optional().nullable(),
  OrganizationId: z.string().optional().nullable(),
  OrderDate: z.date().optional().nullable(),
  OrderNotes: z.string().optional().nullable(),
  CreatedAt: z.date().optional().nullable(),
  UpdatedAt: z.date().optional().nullable(),
  LabOrderAttachment: z.lazy(() => LabOrderAttachmentUncheckedCreateNestedManyWithoutLabOrderInputSchema).optional(),
  LabOrderBilling: z.lazy(() => LabOrderBillingUncheckedCreateNestedManyWithoutLabOrderInputSchema).optional(),
  LabOrderIcd: z.lazy(() => LabOrderIcdUncheckedCreateNestedManyWithoutLabOrderInputSchema).optional(),
  LabOrderSponsoredTestConsent: z.lazy(() => LabOrderSponsoredTestConsentUncheckedCreateNestedManyWithoutLabOrderInputSchema).optional(),
  LabOrderStatus: z.lazy(() => LabOrderStatusUncheckedCreateNestedManyWithoutLabOrderInputSchema).optional(),
  LabOrderTest: z.lazy(() => LabOrderTestUncheckedCreateNestedManyWithoutLabOrderInputSchema).optional()
}).strict();

export const LabOrderCreateOrConnectWithoutLabOrderSpecimenInputSchema: z.ZodType<Prisma.LabOrderCreateOrConnectWithoutLabOrderSpecimenInput> = z.object({
  where: z.lazy(() => LabOrderWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => LabOrderCreateWithoutLabOrderSpecimenInputSchema),z.lazy(() => LabOrderUncheckedCreateWithoutLabOrderSpecimenInputSchema) ]),
}).strict();

export const LabOrderUpsertWithoutLabOrderSpecimenInputSchema: z.ZodType<Prisma.LabOrderUpsertWithoutLabOrderSpecimenInput> = z.object({
  update: z.union([ z.lazy(() => LabOrderUpdateWithoutLabOrderSpecimenInputSchema),z.lazy(() => LabOrderUncheckedUpdateWithoutLabOrderSpecimenInputSchema) ]),
  create: z.union([ z.lazy(() => LabOrderCreateWithoutLabOrderSpecimenInputSchema),z.lazy(() => LabOrderUncheckedCreateWithoutLabOrderSpecimenInputSchema) ]),
  where: z.lazy(() => LabOrderWhereInputSchema).optional()
}).strict();

export const LabOrderUpdateToOneWithWhereWithoutLabOrderSpecimenInputSchema: z.ZodType<Prisma.LabOrderUpdateToOneWithWhereWithoutLabOrderSpecimenInput> = z.object({
  where: z.lazy(() => LabOrderWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => LabOrderUpdateWithoutLabOrderSpecimenInputSchema),z.lazy(() => LabOrderUncheckedUpdateWithoutLabOrderSpecimenInputSchema) ]),
}).strict();

export const LabOrderUpdateWithoutLabOrderSpecimenInputSchema: z.ZodType<Prisma.LabOrderUpdateWithoutLabOrderSpecimenInput> = z.object({
  Id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  OrderNumber: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  AccessionNumber: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  PatientMRN: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  PatientMobile: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  PatientEmail: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  OrderDate: z.union([ z.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  OrderNotes: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  CreatedAt: z.union([ z.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  UpdatedAt: z.union([ z.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  OrderingProvider: z.lazy(() => ProviderUpdateOneWithoutOrderingProviderLabOrderNestedInputSchema).optional(),
  TreatingProvider: z.lazy(() => ProviderUpdateOneWithoutTreatingProviderLabOrderNestedInputSchema).optional(),
  Patient: z.lazy(() => PatientUpdateOneWithoutLabOrderNestedInputSchema).optional(),
  Organization: z.lazy(() => OrganizationUpdateOneWithoutLabOrderNestedInputSchema).optional(),
  LabOrderAttachment: z.lazy(() => LabOrderAttachmentUpdateManyWithoutLabOrderNestedInputSchema).optional(),
  LabOrderBilling: z.lazy(() => LabOrderBillingUpdateManyWithoutLabOrderNestedInputSchema).optional(),
  LabOrderIcd: z.lazy(() => LabOrderIcdUpdateManyWithoutLabOrderNestedInputSchema).optional(),
  LabOrderSponsoredTestConsent: z.lazy(() => LabOrderSponsoredTestConsentUpdateManyWithoutLabOrderNestedInputSchema).optional(),
  LabOrderStatus: z.lazy(() => LabOrderStatusUpdateManyWithoutLabOrderNestedInputSchema).optional(),
  LabOrderTest: z.lazy(() => LabOrderTestUpdateManyWithoutLabOrderNestedInputSchema).optional()
}).strict();

export const LabOrderUncheckedUpdateWithoutLabOrderSpecimenInputSchema: z.ZodType<Prisma.LabOrderUncheckedUpdateWithoutLabOrderSpecimenInput> = z.object({
  Id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  OrderNumber: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  AccessionNumber: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  OrderingProviderId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  TreatingProviderId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  PatientId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  PatientMRN: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  PatientMobile: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  PatientEmail: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  OrganizationId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  OrderDate: z.union([ z.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  OrderNotes: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  CreatedAt: z.union([ z.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  UpdatedAt: z.union([ z.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  LabOrderAttachment: z.lazy(() => LabOrderAttachmentUncheckedUpdateManyWithoutLabOrderNestedInputSchema).optional(),
  LabOrderBilling: z.lazy(() => LabOrderBillingUncheckedUpdateManyWithoutLabOrderNestedInputSchema).optional(),
  LabOrderIcd: z.lazy(() => LabOrderIcdUncheckedUpdateManyWithoutLabOrderNestedInputSchema).optional(),
  LabOrderSponsoredTestConsent: z.lazy(() => LabOrderSponsoredTestConsentUncheckedUpdateManyWithoutLabOrderNestedInputSchema).optional(),
  LabOrderStatus: z.lazy(() => LabOrderStatusUncheckedUpdateManyWithoutLabOrderNestedInputSchema).optional(),
  LabOrderTest: z.lazy(() => LabOrderTestUncheckedUpdateManyWithoutLabOrderNestedInputSchema).optional()
}).strict();

export const SponsoredTestCreateWithoutLabOrderSponsoredTestConsentInputSchema: z.ZodType<Prisma.SponsoredTestCreateWithoutLabOrderSponsoredTestConsentInput> = z.object({
  Id: z.string().optional(),
  LabTestId: z.string().optional().nullable(),
  CasandraTestId: z.string(),
  Category: z.string(),
  SubCategory: z.string().optional().nullable(),
  CreatedAt: z.date().optional().nullable(),
  UpdatedAt: z.date().optional().nullable(),
  Lab: z.lazy(() => LabCreateNestedOneWithoutSponsoredTestInputSchema).optional(),
  SponsoredProgram: z.lazy(() => SponsoredProgramCreateNestedOneWithoutSponsoredTestInputSchema).optional(),
  TestCatalog: z.lazy(() => TestCatalogCreateNestedOneWithoutSponsoredTestInputSchema)
}).strict();

export const SponsoredTestUncheckedCreateWithoutLabOrderSponsoredTestConsentInputSchema: z.ZodType<Prisma.SponsoredTestUncheckedCreateWithoutLabOrderSponsoredTestConsentInput> = z.object({
  Id: z.string().optional(),
  TestId: z.number(),
  LabTestId: z.string().optional().nullable(),
  SponsoredProgramId: z.number().optional().nullable(),
  LabId: z.number().optional().nullable(),
  CasandraTestId: z.string(),
  Category: z.string(),
  SubCategory: z.string().optional().nullable(),
  CreatedAt: z.date().optional().nullable(),
  UpdatedAt: z.date().optional().nullable()
}).strict();

export const SponsoredTestCreateOrConnectWithoutLabOrderSponsoredTestConsentInputSchema: z.ZodType<Prisma.SponsoredTestCreateOrConnectWithoutLabOrderSponsoredTestConsentInput> = z.object({
  where: z.lazy(() => SponsoredTestWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => SponsoredTestCreateWithoutLabOrderSponsoredTestConsentInputSchema),z.lazy(() => SponsoredTestUncheckedCreateWithoutLabOrderSponsoredTestConsentInputSchema) ]),
}).strict();

export const LabOrderCreateWithoutLabOrderSponsoredTestConsentInputSchema: z.ZodType<Prisma.LabOrderCreateWithoutLabOrderSponsoredTestConsentInput> = z.object({
  Id: z.string().optional(),
  OrderNumber: z.string().optional().nullable(),
  AccessionNumber: z.string().optional().nullable(),
  PatientMRN: z.string().optional().nullable(),
  PatientMobile: z.string().optional().nullable(),
  PatientEmail: z.string().optional().nullable(),
  OrderDate: z.date().optional().nullable(),
  OrderNotes: z.string().optional().nullable(),
  CreatedAt: z.date().optional().nullable(),
  UpdatedAt: z.date().optional().nullable(),
  OrderingProvider: z.lazy(() => ProviderCreateNestedOneWithoutOrderingProviderLabOrderInputSchema).optional(),
  TreatingProvider: z.lazy(() => ProviderCreateNestedOneWithoutTreatingProviderLabOrderInputSchema).optional(),
  Patient: z.lazy(() => PatientCreateNestedOneWithoutLabOrderInputSchema).optional(),
  Organization: z.lazy(() => OrganizationCreateNestedOneWithoutLabOrderInputSchema).optional(),
  LabOrderAttachment: z.lazy(() => LabOrderAttachmentCreateNestedManyWithoutLabOrderInputSchema).optional(),
  LabOrderBilling: z.lazy(() => LabOrderBillingCreateNestedManyWithoutLabOrderInputSchema).optional(),
  LabOrderIcd: z.lazy(() => LabOrderIcdCreateNestedManyWithoutLabOrderInputSchema).optional(),
  LabOrderSpecimen: z.lazy(() => LabOrderSpecimenCreateNestedManyWithoutLabOrderInputSchema).optional(),
  LabOrderStatus: z.lazy(() => LabOrderStatusCreateNestedManyWithoutLabOrderInputSchema).optional(),
  LabOrderTest: z.lazy(() => LabOrderTestCreateNestedManyWithoutLabOrderInputSchema).optional()
}).strict();

export const LabOrderUncheckedCreateWithoutLabOrderSponsoredTestConsentInputSchema: z.ZodType<Prisma.LabOrderUncheckedCreateWithoutLabOrderSponsoredTestConsentInput> = z.object({
  Id: z.string().optional(),
  OrderNumber: z.string().optional().nullable(),
  AccessionNumber: z.string().optional().nullable(),
  OrderingProviderId: z.string().optional().nullable(),
  TreatingProviderId: z.string().optional().nullable(),
  PatientId: z.string().optional().nullable(),
  PatientMRN: z.string().optional().nullable(),
  PatientMobile: z.string().optional().nullable(),
  PatientEmail: z.string().optional().nullable(),
  OrganizationId: z.string().optional().nullable(),
  OrderDate: z.date().optional().nullable(),
  OrderNotes: z.string().optional().nullable(),
  CreatedAt: z.date().optional().nullable(),
  UpdatedAt: z.date().optional().nullable(),
  LabOrderAttachment: z.lazy(() => LabOrderAttachmentUncheckedCreateNestedManyWithoutLabOrderInputSchema).optional(),
  LabOrderBilling: z.lazy(() => LabOrderBillingUncheckedCreateNestedManyWithoutLabOrderInputSchema).optional(),
  LabOrderIcd: z.lazy(() => LabOrderIcdUncheckedCreateNestedManyWithoutLabOrderInputSchema).optional(),
  LabOrderSpecimen: z.lazy(() => LabOrderSpecimenUncheckedCreateNestedManyWithoutLabOrderInputSchema).optional(),
  LabOrderStatus: z.lazy(() => LabOrderStatusUncheckedCreateNestedManyWithoutLabOrderInputSchema).optional(),
  LabOrderTest: z.lazy(() => LabOrderTestUncheckedCreateNestedManyWithoutLabOrderInputSchema).optional()
}).strict();

export const LabOrderCreateOrConnectWithoutLabOrderSponsoredTestConsentInputSchema: z.ZodType<Prisma.LabOrderCreateOrConnectWithoutLabOrderSponsoredTestConsentInput> = z.object({
  where: z.lazy(() => LabOrderWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => LabOrderCreateWithoutLabOrderSponsoredTestConsentInputSchema),z.lazy(() => LabOrderUncheckedCreateWithoutLabOrderSponsoredTestConsentInputSchema) ]),
}).strict();

export const SponsoredTestUpsertWithoutLabOrderSponsoredTestConsentInputSchema: z.ZodType<Prisma.SponsoredTestUpsertWithoutLabOrderSponsoredTestConsentInput> = z.object({
  update: z.union([ z.lazy(() => SponsoredTestUpdateWithoutLabOrderSponsoredTestConsentInputSchema),z.lazy(() => SponsoredTestUncheckedUpdateWithoutLabOrderSponsoredTestConsentInputSchema) ]),
  create: z.union([ z.lazy(() => SponsoredTestCreateWithoutLabOrderSponsoredTestConsentInputSchema),z.lazy(() => SponsoredTestUncheckedCreateWithoutLabOrderSponsoredTestConsentInputSchema) ]),
  where: z.lazy(() => SponsoredTestWhereInputSchema).optional()
}).strict();

export const SponsoredTestUpdateToOneWithWhereWithoutLabOrderSponsoredTestConsentInputSchema: z.ZodType<Prisma.SponsoredTestUpdateToOneWithWhereWithoutLabOrderSponsoredTestConsentInput> = z.object({
  where: z.lazy(() => SponsoredTestWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => SponsoredTestUpdateWithoutLabOrderSponsoredTestConsentInputSchema),z.lazy(() => SponsoredTestUncheckedUpdateWithoutLabOrderSponsoredTestConsentInputSchema) ]),
}).strict();

export const SponsoredTestUpdateWithoutLabOrderSponsoredTestConsentInputSchema: z.ZodType<Prisma.SponsoredTestUpdateWithoutLabOrderSponsoredTestConsentInput> = z.object({
  Id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  LabTestId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  CasandraTestId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  Category: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  SubCategory: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  CreatedAt: z.union([ z.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  UpdatedAt: z.union([ z.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Lab: z.lazy(() => LabUpdateOneWithoutSponsoredTestNestedInputSchema).optional(),
  SponsoredProgram: z.lazy(() => SponsoredProgramUpdateOneWithoutSponsoredTestNestedInputSchema).optional(),
  TestCatalog: z.lazy(() => TestCatalogUpdateOneRequiredWithoutSponsoredTestNestedInputSchema).optional()
}).strict();

export const SponsoredTestUncheckedUpdateWithoutLabOrderSponsoredTestConsentInputSchema: z.ZodType<Prisma.SponsoredTestUncheckedUpdateWithoutLabOrderSponsoredTestConsentInput> = z.object({
  Id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  TestId: z.union([ z.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  LabTestId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  SponsoredProgramId: z.union([ z.number(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  LabId: z.union([ z.number(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  CasandraTestId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  Category: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  SubCategory: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  CreatedAt: z.union([ z.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  UpdatedAt: z.union([ z.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const LabOrderUpsertWithoutLabOrderSponsoredTestConsentInputSchema: z.ZodType<Prisma.LabOrderUpsertWithoutLabOrderSponsoredTestConsentInput> = z.object({
  update: z.union([ z.lazy(() => LabOrderUpdateWithoutLabOrderSponsoredTestConsentInputSchema),z.lazy(() => LabOrderUncheckedUpdateWithoutLabOrderSponsoredTestConsentInputSchema) ]),
  create: z.union([ z.lazy(() => LabOrderCreateWithoutLabOrderSponsoredTestConsentInputSchema),z.lazy(() => LabOrderUncheckedCreateWithoutLabOrderSponsoredTestConsentInputSchema) ]),
  where: z.lazy(() => LabOrderWhereInputSchema).optional()
}).strict();

export const LabOrderUpdateToOneWithWhereWithoutLabOrderSponsoredTestConsentInputSchema: z.ZodType<Prisma.LabOrderUpdateToOneWithWhereWithoutLabOrderSponsoredTestConsentInput> = z.object({
  where: z.lazy(() => LabOrderWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => LabOrderUpdateWithoutLabOrderSponsoredTestConsentInputSchema),z.lazy(() => LabOrderUncheckedUpdateWithoutLabOrderSponsoredTestConsentInputSchema) ]),
}).strict();

export const LabOrderUpdateWithoutLabOrderSponsoredTestConsentInputSchema: z.ZodType<Prisma.LabOrderUpdateWithoutLabOrderSponsoredTestConsentInput> = z.object({
  Id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  OrderNumber: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  AccessionNumber: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  PatientMRN: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  PatientMobile: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  PatientEmail: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  OrderDate: z.union([ z.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  OrderNotes: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  CreatedAt: z.union([ z.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  UpdatedAt: z.union([ z.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  OrderingProvider: z.lazy(() => ProviderUpdateOneWithoutOrderingProviderLabOrderNestedInputSchema).optional(),
  TreatingProvider: z.lazy(() => ProviderUpdateOneWithoutTreatingProviderLabOrderNestedInputSchema).optional(),
  Patient: z.lazy(() => PatientUpdateOneWithoutLabOrderNestedInputSchema).optional(),
  Organization: z.lazy(() => OrganizationUpdateOneWithoutLabOrderNestedInputSchema).optional(),
  LabOrderAttachment: z.lazy(() => LabOrderAttachmentUpdateManyWithoutLabOrderNestedInputSchema).optional(),
  LabOrderBilling: z.lazy(() => LabOrderBillingUpdateManyWithoutLabOrderNestedInputSchema).optional(),
  LabOrderIcd: z.lazy(() => LabOrderIcdUpdateManyWithoutLabOrderNestedInputSchema).optional(),
  LabOrderSpecimen: z.lazy(() => LabOrderSpecimenUpdateManyWithoutLabOrderNestedInputSchema).optional(),
  LabOrderStatus: z.lazy(() => LabOrderStatusUpdateManyWithoutLabOrderNestedInputSchema).optional(),
  LabOrderTest: z.lazy(() => LabOrderTestUpdateManyWithoutLabOrderNestedInputSchema).optional()
}).strict();

export const LabOrderUncheckedUpdateWithoutLabOrderSponsoredTestConsentInputSchema: z.ZodType<Prisma.LabOrderUncheckedUpdateWithoutLabOrderSponsoredTestConsentInput> = z.object({
  Id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  OrderNumber: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  AccessionNumber: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  OrderingProviderId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  TreatingProviderId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  PatientId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  PatientMRN: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  PatientMobile: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  PatientEmail: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  OrganizationId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  OrderDate: z.union([ z.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  OrderNotes: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  CreatedAt: z.union([ z.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  UpdatedAt: z.union([ z.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  LabOrderAttachment: z.lazy(() => LabOrderAttachmentUncheckedUpdateManyWithoutLabOrderNestedInputSchema).optional(),
  LabOrderBilling: z.lazy(() => LabOrderBillingUncheckedUpdateManyWithoutLabOrderNestedInputSchema).optional(),
  LabOrderIcd: z.lazy(() => LabOrderIcdUncheckedUpdateManyWithoutLabOrderNestedInputSchema).optional(),
  LabOrderSpecimen: z.lazy(() => LabOrderSpecimenUncheckedUpdateManyWithoutLabOrderNestedInputSchema).optional(),
  LabOrderStatus: z.lazy(() => LabOrderStatusUncheckedUpdateManyWithoutLabOrderNestedInputSchema).optional(),
  LabOrderTest: z.lazy(() => LabOrderTestUncheckedUpdateManyWithoutLabOrderNestedInputSchema).optional()
}).strict();

export const LabOrderCreateWithoutLabOrderStatusInputSchema: z.ZodType<Prisma.LabOrderCreateWithoutLabOrderStatusInput> = z.object({
  Id: z.string().optional(),
  OrderNumber: z.string().optional().nullable(),
  AccessionNumber: z.string().optional().nullable(),
  PatientMRN: z.string().optional().nullable(),
  PatientMobile: z.string().optional().nullable(),
  PatientEmail: z.string().optional().nullable(),
  OrderDate: z.date().optional().nullable(),
  OrderNotes: z.string().optional().nullable(),
  CreatedAt: z.date().optional().nullable(),
  UpdatedAt: z.date().optional().nullable(),
  OrderingProvider: z.lazy(() => ProviderCreateNestedOneWithoutOrderingProviderLabOrderInputSchema).optional(),
  TreatingProvider: z.lazy(() => ProviderCreateNestedOneWithoutTreatingProviderLabOrderInputSchema).optional(),
  Patient: z.lazy(() => PatientCreateNestedOneWithoutLabOrderInputSchema).optional(),
  Organization: z.lazy(() => OrganizationCreateNestedOneWithoutLabOrderInputSchema).optional(),
  LabOrderAttachment: z.lazy(() => LabOrderAttachmentCreateNestedManyWithoutLabOrderInputSchema).optional(),
  LabOrderBilling: z.lazy(() => LabOrderBillingCreateNestedManyWithoutLabOrderInputSchema).optional(),
  LabOrderIcd: z.lazy(() => LabOrderIcdCreateNestedManyWithoutLabOrderInputSchema).optional(),
  LabOrderSpecimen: z.lazy(() => LabOrderSpecimenCreateNestedManyWithoutLabOrderInputSchema).optional(),
  LabOrderSponsoredTestConsent: z.lazy(() => LabOrderSponsoredTestConsentCreateNestedManyWithoutLabOrderInputSchema).optional(),
  LabOrderTest: z.lazy(() => LabOrderTestCreateNestedManyWithoutLabOrderInputSchema).optional()
}).strict();

export const LabOrderUncheckedCreateWithoutLabOrderStatusInputSchema: z.ZodType<Prisma.LabOrderUncheckedCreateWithoutLabOrderStatusInput> = z.object({
  Id: z.string().optional(),
  OrderNumber: z.string().optional().nullable(),
  AccessionNumber: z.string().optional().nullable(),
  OrderingProviderId: z.string().optional().nullable(),
  TreatingProviderId: z.string().optional().nullable(),
  PatientId: z.string().optional().nullable(),
  PatientMRN: z.string().optional().nullable(),
  PatientMobile: z.string().optional().nullable(),
  PatientEmail: z.string().optional().nullable(),
  OrganizationId: z.string().optional().nullable(),
  OrderDate: z.date().optional().nullable(),
  OrderNotes: z.string().optional().nullable(),
  CreatedAt: z.date().optional().nullable(),
  UpdatedAt: z.date().optional().nullable(),
  LabOrderAttachment: z.lazy(() => LabOrderAttachmentUncheckedCreateNestedManyWithoutLabOrderInputSchema).optional(),
  LabOrderBilling: z.lazy(() => LabOrderBillingUncheckedCreateNestedManyWithoutLabOrderInputSchema).optional(),
  LabOrderIcd: z.lazy(() => LabOrderIcdUncheckedCreateNestedManyWithoutLabOrderInputSchema).optional(),
  LabOrderSpecimen: z.lazy(() => LabOrderSpecimenUncheckedCreateNestedManyWithoutLabOrderInputSchema).optional(),
  LabOrderSponsoredTestConsent: z.lazy(() => LabOrderSponsoredTestConsentUncheckedCreateNestedManyWithoutLabOrderInputSchema).optional(),
  LabOrderTest: z.lazy(() => LabOrderTestUncheckedCreateNestedManyWithoutLabOrderInputSchema).optional()
}).strict();

export const LabOrderCreateOrConnectWithoutLabOrderStatusInputSchema: z.ZodType<Prisma.LabOrderCreateOrConnectWithoutLabOrderStatusInput> = z.object({
  where: z.lazy(() => LabOrderWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => LabOrderCreateWithoutLabOrderStatusInputSchema),z.lazy(() => LabOrderUncheckedCreateWithoutLabOrderStatusInputSchema) ]),
}).strict();

export const LabOrderUpsertWithoutLabOrderStatusInputSchema: z.ZodType<Prisma.LabOrderUpsertWithoutLabOrderStatusInput> = z.object({
  update: z.union([ z.lazy(() => LabOrderUpdateWithoutLabOrderStatusInputSchema),z.lazy(() => LabOrderUncheckedUpdateWithoutLabOrderStatusInputSchema) ]),
  create: z.union([ z.lazy(() => LabOrderCreateWithoutLabOrderStatusInputSchema),z.lazy(() => LabOrderUncheckedCreateWithoutLabOrderStatusInputSchema) ]),
  where: z.lazy(() => LabOrderWhereInputSchema).optional()
}).strict();

export const LabOrderUpdateToOneWithWhereWithoutLabOrderStatusInputSchema: z.ZodType<Prisma.LabOrderUpdateToOneWithWhereWithoutLabOrderStatusInput> = z.object({
  where: z.lazy(() => LabOrderWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => LabOrderUpdateWithoutLabOrderStatusInputSchema),z.lazy(() => LabOrderUncheckedUpdateWithoutLabOrderStatusInputSchema) ]),
}).strict();

export const LabOrderUpdateWithoutLabOrderStatusInputSchema: z.ZodType<Prisma.LabOrderUpdateWithoutLabOrderStatusInput> = z.object({
  Id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  OrderNumber: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  AccessionNumber: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  PatientMRN: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  PatientMobile: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  PatientEmail: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  OrderDate: z.union([ z.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  OrderNotes: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  CreatedAt: z.union([ z.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  UpdatedAt: z.union([ z.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  OrderingProvider: z.lazy(() => ProviderUpdateOneWithoutOrderingProviderLabOrderNestedInputSchema).optional(),
  TreatingProvider: z.lazy(() => ProviderUpdateOneWithoutTreatingProviderLabOrderNestedInputSchema).optional(),
  Patient: z.lazy(() => PatientUpdateOneWithoutLabOrderNestedInputSchema).optional(),
  Organization: z.lazy(() => OrganizationUpdateOneWithoutLabOrderNestedInputSchema).optional(),
  LabOrderAttachment: z.lazy(() => LabOrderAttachmentUpdateManyWithoutLabOrderNestedInputSchema).optional(),
  LabOrderBilling: z.lazy(() => LabOrderBillingUpdateManyWithoutLabOrderNestedInputSchema).optional(),
  LabOrderIcd: z.lazy(() => LabOrderIcdUpdateManyWithoutLabOrderNestedInputSchema).optional(),
  LabOrderSpecimen: z.lazy(() => LabOrderSpecimenUpdateManyWithoutLabOrderNestedInputSchema).optional(),
  LabOrderSponsoredTestConsent: z.lazy(() => LabOrderSponsoredTestConsentUpdateManyWithoutLabOrderNestedInputSchema).optional(),
  LabOrderTest: z.lazy(() => LabOrderTestUpdateManyWithoutLabOrderNestedInputSchema).optional()
}).strict();

export const LabOrderUncheckedUpdateWithoutLabOrderStatusInputSchema: z.ZodType<Prisma.LabOrderUncheckedUpdateWithoutLabOrderStatusInput> = z.object({
  Id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  OrderNumber: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  AccessionNumber: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  OrderingProviderId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  TreatingProviderId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  PatientId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  PatientMRN: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  PatientMobile: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  PatientEmail: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  OrganizationId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  OrderDate: z.union([ z.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  OrderNotes: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  CreatedAt: z.union([ z.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  UpdatedAt: z.union([ z.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  LabOrderAttachment: z.lazy(() => LabOrderAttachmentUncheckedUpdateManyWithoutLabOrderNestedInputSchema).optional(),
  LabOrderBilling: z.lazy(() => LabOrderBillingUncheckedUpdateManyWithoutLabOrderNestedInputSchema).optional(),
  LabOrderIcd: z.lazy(() => LabOrderIcdUncheckedUpdateManyWithoutLabOrderNestedInputSchema).optional(),
  LabOrderSpecimen: z.lazy(() => LabOrderSpecimenUncheckedUpdateManyWithoutLabOrderNestedInputSchema).optional(),
  LabOrderSponsoredTestConsent: z.lazy(() => LabOrderSponsoredTestConsentUncheckedUpdateManyWithoutLabOrderNestedInputSchema).optional(),
  LabOrderTest: z.lazy(() => LabOrderTestUncheckedUpdateManyWithoutLabOrderNestedInputSchema).optional()
}).strict();

export const LabOrderCreateWithoutLabOrderTestInputSchema: z.ZodType<Prisma.LabOrderCreateWithoutLabOrderTestInput> = z.object({
  Id: z.string().optional(),
  OrderNumber: z.string().optional().nullable(),
  AccessionNumber: z.string().optional().nullable(),
  PatientMRN: z.string().optional().nullable(),
  PatientMobile: z.string().optional().nullable(),
  PatientEmail: z.string().optional().nullable(),
  OrderDate: z.date().optional().nullable(),
  OrderNotes: z.string().optional().nullable(),
  CreatedAt: z.date().optional().nullable(),
  UpdatedAt: z.date().optional().nullable(),
  OrderingProvider: z.lazy(() => ProviderCreateNestedOneWithoutOrderingProviderLabOrderInputSchema).optional(),
  TreatingProvider: z.lazy(() => ProviderCreateNestedOneWithoutTreatingProviderLabOrderInputSchema).optional(),
  Patient: z.lazy(() => PatientCreateNestedOneWithoutLabOrderInputSchema).optional(),
  Organization: z.lazy(() => OrganizationCreateNestedOneWithoutLabOrderInputSchema).optional(),
  LabOrderAttachment: z.lazy(() => LabOrderAttachmentCreateNestedManyWithoutLabOrderInputSchema).optional(),
  LabOrderBilling: z.lazy(() => LabOrderBillingCreateNestedManyWithoutLabOrderInputSchema).optional(),
  LabOrderIcd: z.lazy(() => LabOrderIcdCreateNestedManyWithoutLabOrderInputSchema).optional(),
  LabOrderSpecimen: z.lazy(() => LabOrderSpecimenCreateNestedManyWithoutLabOrderInputSchema).optional(),
  LabOrderSponsoredTestConsent: z.lazy(() => LabOrderSponsoredTestConsentCreateNestedManyWithoutLabOrderInputSchema).optional(),
  LabOrderStatus: z.lazy(() => LabOrderStatusCreateNestedManyWithoutLabOrderInputSchema).optional()
}).strict();

export const LabOrderUncheckedCreateWithoutLabOrderTestInputSchema: z.ZodType<Prisma.LabOrderUncheckedCreateWithoutLabOrderTestInput> = z.object({
  Id: z.string().optional(),
  OrderNumber: z.string().optional().nullable(),
  AccessionNumber: z.string().optional().nullable(),
  OrderingProviderId: z.string().optional().nullable(),
  TreatingProviderId: z.string().optional().nullable(),
  PatientId: z.string().optional().nullable(),
  PatientMRN: z.string().optional().nullable(),
  PatientMobile: z.string().optional().nullable(),
  PatientEmail: z.string().optional().nullable(),
  OrganizationId: z.string().optional().nullable(),
  OrderDate: z.date().optional().nullable(),
  OrderNotes: z.string().optional().nullable(),
  CreatedAt: z.date().optional().nullable(),
  UpdatedAt: z.date().optional().nullable(),
  LabOrderAttachment: z.lazy(() => LabOrderAttachmentUncheckedCreateNestedManyWithoutLabOrderInputSchema).optional(),
  LabOrderBilling: z.lazy(() => LabOrderBillingUncheckedCreateNestedManyWithoutLabOrderInputSchema).optional(),
  LabOrderIcd: z.lazy(() => LabOrderIcdUncheckedCreateNestedManyWithoutLabOrderInputSchema).optional(),
  LabOrderSpecimen: z.lazy(() => LabOrderSpecimenUncheckedCreateNestedManyWithoutLabOrderInputSchema).optional(),
  LabOrderSponsoredTestConsent: z.lazy(() => LabOrderSponsoredTestConsentUncheckedCreateNestedManyWithoutLabOrderInputSchema).optional(),
  LabOrderStatus: z.lazy(() => LabOrderStatusUncheckedCreateNestedManyWithoutLabOrderInputSchema).optional()
}).strict();

export const LabOrderCreateOrConnectWithoutLabOrderTestInputSchema: z.ZodType<Prisma.LabOrderCreateOrConnectWithoutLabOrderTestInput> = z.object({
  where: z.lazy(() => LabOrderWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => LabOrderCreateWithoutLabOrderTestInputSchema),z.lazy(() => LabOrderUncheckedCreateWithoutLabOrderTestInputSchema) ]),
}).strict();

export const TestCatalogCreateWithoutLabOrderTestInputSchema: z.ZodType<Prisma.TestCatalogCreateWithoutLabOrderTestInput> = z.object({
  href: z.string().optional().nullable(),
  CasandraTestId: z.string(),
  LabTestId: z.string().optional().nullable(),
  TestName: z.string().optional().nullable(),
  AlternativeName: z.string().optional().nullable(),
  AlternativeName1: z.string().optional().nullable(),
  AlternativeName2: z.string().optional().nullable(),
  AlternativeName3: z.string().optional().nullable(),
  AlternativeName4: z.string().optional().nullable(),
  AlternativeName5: z.string().optional().nullable(),
  TestIncludes: z.string().optional().nullable(),
  SpecimenType: z.string().optional().nullable(),
  SpecialInstructions: z.string().optional().nullable(),
  Methodology: z.string().optional().nullable(),
  TestDescription: z.string().optional().nullable(),
  Diseases: z.string().optional().nullable(),
  Probes: z.string().optional().nullable(),
  ClinicalSignificance: z.string().optional().nullable(),
  SpecimenRequirements: z.string().optional().nullable(),
  Volume: z.string().optional().nullable(),
  MinimumVolume: z.string().optional().nullable(),
  Container: z.string().optional().nullable(),
  Collection: z.string().optional().nullable(),
  StabilityRequirements: z.string().optional().nullable(),
  StorageTransportation: z.string().optional().nullable(),
  PatientPreparation: z.string().optional().nullable(),
  CausesForRejection: z.string().optional().nullable(),
  TestUsage: z.string().optional().nullable(),
  TestLimitations: z.string().optional().nullable(),
  CPTCodes: z.string().optional().nullable(),
  NewYorkApproved: z.string().optional().nullable(),
  LevelOfService: z.string().optional().nullable(),
  TurnAroundTime: z.string().optional().nullable(),
  AssayCategory: z.string().optional().nullable(),
  ReferenceRanges: z.string().optional().nullable(),
  SetupSchedule: z.string().optional().nullable(),
  AlternativeSpecimen: z.string().optional().nullable(),
  LoincCodesText: z.string().optional().nullable(),
  LoincCodesHTML: z.string().optional().nullable(),
  TestCategory: z.string().optional().nullable(),
  TestSubCategory: z.string().optional().nullable(),
  CreatedAt: z.date().optional(),
  UpdatedAt: z.date().optional(),
  OrganizationFavoriteTest: z.lazy(() => OrganizationFavoriteTestCreateNestedManyWithoutTestCatalogInputSchema).optional(),
  ProviderFavoriteTest: z.lazy(() => ProviderFavoriteTestCreateNestedManyWithoutTestCatalogInputSchema).optional(),
  SponsoredTest: z.lazy(() => SponsoredTestCreateNestedManyWithoutTestCatalogInputSchema).optional(),
  TestBiomarker: z.lazy(() => TestBiomarkerCreateNestedManyWithoutTestCatalogInputSchema).optional(),
  Lab: z.lazy(() => LabCreateNestedOneWithoutTestCatalogInputSchema).optional(),
  TestCptCode: z.lazy(() => TestCptCodeCreateNestedManyWithoutTestCatalogInputSchema).optional(),
  TestGene: z.lazy(() => TestGeneCreateNestedManyWithoutTestCatalogInputSchema).optional(),
  TestOrderLoinc: z.lazy(() => TestOrderLoincCreateNestedManyWithoutTestCatalogInputSchema).optional(),
  TestResultLoinc: z.lazy(() => TestResultLoincCreateNestedManyWithoutTestCatalogInputSchema).optional()
}).strict();

export const TestCatalogUncheckedCreateWithoutLabOrderTestInputSchema: z.ZodType<Prisma.TestCatalogUncheckedCreateWithoutLabOrderTestInput> = z.object({
  TestId: z.number().optional(),
  LabId: z.number().optional().nullable(),
  href: z.string().optional().nullable(),
  CasandraTestId: z.string(),
  LabTestId: z.string().optional().nullable(),
  TestName: z.string().optional().nullable(),
  AlternativeName: z.string().optional().nullable(),
  AlternativeName1: z.string().optional().nullable(),
  AlternativeName2: z.string().optional().nullable(),
  AlternativeName3: z.string().optional().nullable(),
  AlternativeName4: z.string().optional().nullable(),
  AlternativeName5: z.string().optional().nullable(),
  TestIncludes: z.string().optional().nullable(),
  SpecimenType: z.string().optional().nullable(),
  SpecialInstructions: z.string().optional().nullable(),
  Methodology: z.string().optional().nullable(),
  TestDescription: z.string().optional().nullable(),
  Diseases: z.string().optional().nullable(),
  Probes: z.string().optional().nullable(),
  ClinicalSignificance: z.string().optional().nullable(),
  SpecimenRequirements: z.string().optional().nullable(),
  Volume: z.string().optional().nullable(),
  MinimumVolume: z.string().optional().nullable(),
  Container: z.string().optional().nullable(),
  Collection: z.string().optional().nullable(),
  StabilityRequirements: z.string().optional().nullable(),
  StorageTransportation: z.string().optional().nullable(),
  PatientPreparation: z.string().optional().nullable(),
  CausesForRejection: z.string().optional().nullable(),
  TestUsage: z.string().optional().nullable(),
  TestLimitations: z.string().optional().nullable(),
  CPTCodes: z.string().optional().nullable(),
  NewYorkApproved: z.string().optional().nullable(),
  LevelOfService: z.string().optional().nullable(),
  TurnAroundTime: z.string().optional().nullable(),
  AssayCategory: z.string().optional().nullable(),
  ReferenceRanges: z.string().optional().nullable(),
  SetupSchedule: z.string().optional().nullable(),
  AlternativeSpecimen: z.string().optional().nullable(),
  LoincCodesText: z.string().optional().nullable(),
  LoincCodesHTML: z.string().optional().nullable(),
  TestCategory: z.string().optional().nullable(),
  TestSubCategory: z.string().optional().nullable(),
  CreatedAt: z.date().optional(),
  UpdatedAt: z.date().optional(),
  OrganizationFavoriteTest: z.lazy(() => OrganizationFavoriteTestUncheckedCreateNestedManyWithoutTestCatalogInputSchema).optional(),
  ProviderFavoriteTest: z.lazy(() => ProviderFavoriteTestUncheckedCreateNestedManyWithoutTestCatalogInputSchema).optional(),
  SponsoredTest: z.lazy(() => SponsoredTestUncheckedCreateNestedManyWithoutTestCatalogInputSchema).optional(),
  TestBiomarker: z.lazy(() => TestBiomarkerUncheckedCreateNestedManyWithoutTestCatalogInputSchema).optional(),
  TestCptCode: z.lazy(() => TestCptCodeUncheckedCreateNestedManyWithoutTestCatalogInputSchema).optional(),
  TestGene: z.lazy(() => TestGeneUncheckedCreateNestedManyWithoutTestCatalogInputSchema).optional(),
  TestOrderLoinc: z.lazy(() => TestOrderLoincUncheckedCreateNestedManyWithoutTestCatalogInputSchema).optional(),
  TestResultLoinc: z.lazy(() => TestResultLoincUncheckedCreateNestedManyWithoutTestCatalogInputSchema).optional()
}).strict();

export const TestCatalogCreateOrConnectWithoutLabOrderTestInputSchema: z.ZodType<Prisma.TestCatalogCreateOrConnectWithoutLabOrderTestInput> = z.object({
  where: z.lazy(() => TestCatalogWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => TestCatalogCreateWithoutLabOrderTestInputSchema),z.lazy(() => TestCatalogUncheckedCreateWithoutLabOrderTestInputSchema) ]),
}).strict();

export const LabOrderUpsertWithoutLabOrderTestInputSchema: z.ZodType<Prisma.LabOrderUpsertWithoutLabOrderTestInput> = z.object({
  update: z.union([ z.lazy(() => LabOrderUpdateWithoutLabOrderTestInputSchema),z.lazy(() => LabOrderUncheckedUpdateWithoutLabOrderTestInputSchema) ]),
  create: z.union([ z.lazy(() => LabOrderCreateWithoutLabOrderTestInputSchema),z.lazy(() => LabOrderUncheckedCreateWithoutLabOrderTestInputSchema) ]),
  where: z.lazy(() => LabOrderWhereInputSchema).optional()
}).strict();

export const LabOrderUpdateToOneWithWhereWithoutLabOrderTestInputSchema: z.ZodType<Prisma.LabOrderUpdateToOneWithWhereWithoutLabOrderTestInput> = z.object({
  where: z.lazy(() => LabOrderWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => LabOrderUpdateWithoutLabOrderTestInputSchema),z.lazy(() => LabOrderUncheckedUpdateWithoutLabOrderTestInputSchema) ]),
}).strict();

export const LabOrderUpdateWithoutLabOrderTestInputSchema: z.ZodType<Prisma.LabOrderUpdateWithoutLabOrderTestInput> = z.object({
  Id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  OrderNumber: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  AccessionNumber: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  PatientMRN: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  PatientMobile: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  PatientEmail: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  OrderDate: z.union([ z.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  OrderNotes: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  CreatedAt: z.union([ z.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  UpdatedAt: z.union([ z.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  OrderingProvider: z.lazy(() => ProviderUpdateOneWithoutOrderingProviderLabOrderNestedInputSchema).optional(),
  TreatingProvider: z.lazy(() => ProviderUpdateOneWithoutTreatingProviderLabOrderNestedInputSchema).optional(),
  Patient: z.lazy(() => PatientUpdateOneWithoutLabOrderNestedInputSchema).optional(),
  Organization: z.lazy(() => OrganizationUpdateOneWithoutLabOrderNestedInputSchema).optional(),
  LabOrderAttachment: z.lazy(() => LabOrderAttachmentUpdateManyWithoutLabOrderNestedInputSchema).optional(),
  LabOrderBilling: z.lazy(() => LabOrderBillingUpdateManyWithoutLabOrderNestedInputSchema).optional(),
  LabOrderIcd: z.lazy(() => LabOrderIcdUpdateManyWithoutLabOrderNestedInputSchema).optional(),
  LabOrderSpecimen: z.lazy(() => LabOrderSpecimenUpdateManyWithoutLabOrderNestedInputSchema).optional(),
  LabOrderSponsoredTestConsent: z.lazy(() => LabOrderSponsoredTestConsentUpdateManyWithoutLabOrderNestedInputSchema).optional(),
  LabOrderStatus: z.lazy(() => LabOrderStatusUpdateManyWithoutLabOrderNestedInputSchema).optional()
}).strict();

export const LabOrderUncheckedUpdateWithoutLabOrderTestInputSchema: z.ZodType<Prisma.LabOrderUncheckedUpdateWithoutLabOrderTestInput> = z.object({
  Id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  OrderNumber: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  AccessionNumber: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  OrderingProviderId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  TreatingProviderId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  PatientId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  PatientMRN: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  PatientMobile: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  PatientEmail: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  OrganizationId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  OrderDate: z.union([ z.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  OrderNotes: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  CreatedAt: z.union([ z.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  UpdatedAt: z.union([ z.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  LabOrderAttachment: z.lazy(() => LabOrderAttachmentUncheckedUpdateManyWithoutLabOrderNestedInputSchema).optional(),
  LabOrderBilling: z.lazy(() => LabOrderBillingUncheckedUpdateManyWithoutLabOrderNestedInputSchema).optional(),
  LabOrderIcd: z.lazy(() => LabOrderIcdUncheckedUpdateManyWithoutLabOrderNestedInputSchema).optional(),
  LabOrderSpecimen: z.lazy(() => LabOrderSpecimenUncheckedUpdateManyWithoutLabOrderNestedInputSchema).optional(),
  LabOrderSponsoredTestConsent: z.lazy(() => LabOrderSponsoredTestConsentUncheckedUpdateManyWithoutLabOrderNestedInputSchema).optional(),
  LabOrderStatus: z.lazy(() => LabOrderStatusUncheckedUpdateManyWithoutLabOrderNestedInputSchema).optional()
}).strict();

export const TestCatalogUpsertWithoutLabOrderTestInputSchema: z.ZodType<Prisma.TestCatalogUpsertWithoutLabOrderTestInput> = z.object({
  update: z.union([ z.lazy(() => TestCatalogUpdateWithoutLabOrderTestInputSchema),z.lazy(() => TestCatalogUncheckedUpdateWithoutLabOrderTestInputSchema) ]),
  create: z.union([ z.lazy(() => TestCatalogCreateWithoutLabOrderTestInputSchema),z.lazy(() => TestCatalogUncheckedCreateWithoutLabOrderTestInputSchema) ]),
  where: z.lazy(() => TestCatalogWhereInputSchema).optional()
}).strict();

export const TestCatalogUpdateToOneWithWhereWithoutLabOrderTestInputSchema: z.ZodType<Prisma.TestCatalogUpdateToOneWithWhereWithoutLabOrderTestInput> = z.object({
  where: z.lazy(() => TestCatalogWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => TestCatalogUpdateWithoutLabOrderTestInputSchema),z.lazy(() => TestCatalogUncheckedUpdateWithoutLabOrderTestInputSchema) ]),
}).strict();

export const TestCatalogUpdateWithoutLabOrderTestInputSchema: z.ZodType<Prisma.TestCatalogUpdateWithoutLabOrderTestInput> = z.object({
  href: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  CasandraTestId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  LabTestId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  TestName: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  AlternativeName: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  AlternativeName1: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  AlternativeName2: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  AlternativeName3: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  AlternativeName4: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  AlternativeName5: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  TestIncludes: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  SpecimenType: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  SpecialInstructions: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Methodology: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  TestDescription: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Diseases: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Probes: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  ClinicalSignificance: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  SpecimenRequirements: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Volume: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  MinimumVolume: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Container: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Collection: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  StabilityRequirements: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  StorageTransportation: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  PatientPreparation: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  CausesForRejection: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  TestUsage: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  TestLimitations: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  CPTCodes: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  NewYorkApproved: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  LevelOfService: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  TurnAroundTime: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  AssayCategory: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  ReferenceRanges: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  SetupSchedule: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  AlternativeSpecimen: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  LoincCodesText: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  LoincCodesHTML: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  TestCategory: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  TestSubCategory: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  CreatedAt: z.union([ z.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  UpdatedAt: z.union([ z.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  OrganizationFavoriteTest: z.lazy(() => OrganizationFavoriteTestUpdateManyWithoutTestCatalogNestedInputSchema).optional(),
  ProviderFavoriteTest: z.lazy(() => ProviderFavoriteTestUpdateManyWithoutTestCatalogNestedInputSchema).optional(),
  SponsoredTest: z.lazy(() => SponsoredTestUpdateManyWithoutTestCatalogNestedInputSchema).optional(),
  TestBiomarker: z.lazy(() => TestBiomarkerUpdateManyWithoutTestCatalogNestedInputSchema).optional(),
  Lab: z.lazy(() => LabUpdateOneWithoutTestCatalogNestedInputSchema).optional(),
  TestCptCode: z.lazy(() => TestCptCodeUpdateManyWithoutTestCatalogNestedInputSchema).optional(),
  TestGene: z.lazy(() => TestGeneUpdateManyWithoutTestCatalogNestedInputSchema).optional(),
  TestOrderLoinc: z.lazy(() => TestOrderLoincUpdateManyWithoutTestCatalogNestedInputSchema).optional(),
  TestResultLoinc: z.lazy(() => TestResultLoincUpdateManyWithoutTestCatalogNestedInputSchema).optional()
}).strict();

export const TestCatalogUncheckedUpdateWithoutLabOrderTestInputSchema: z.ZodType<Prisma.TestCatalogUncheckedUpdateWithoutLabOrderTestInput> = z.object({
  TestId: z.union([ z.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  LabId: z.union([ z.number(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  href: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  CasandraTestId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  LabTestId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  TestName: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  AlternativeName: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  AlternativeName1: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  AlternativeName2: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  AlternativeName3: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  AlternativeName4: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  AlternativeName5: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  TestIncludes: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  SpecimenType: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  SpecialInstructions: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Methodology: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  TestDescription: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Diseases: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Probes: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  ClinicalSignificance: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  SpecimenRequirements: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Volume: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  MinimumVolume: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Container: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Collection: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  StabilityRequirements: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  StorageTransportation: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  PatientPreparation: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  CausesForRejection: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  TestUsage: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  TestLimitations: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  CPTCodes: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  NewYorkApproved: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  LevelOfService: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  TurnAroundTime: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  AssayCategory: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  ReferenceRanges: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  SetupSchedule: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  AlternativeSpecimen: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  LoincCodesText: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  LoincCodesHTML: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  TestCategory: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  TestSubCategory: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  CreatedAt: z.union([ z.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  UpdatedAt: z.union([ z.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  OrganizationFavoriteTest: z.lazy(() => OrganizationFavoriteTestUncheckedUpdateManyWithoutTestCatalogNestedInputSchema).optional(),
  ProviderFavoriteTest: z.lazy(() => ProviderFavoriteTestUncheckedUpdateManyWithoutTestCatalogNestedInputSchema).optional(),
  SponsoredTest: z.lazy(() => SponsoredTestUncheckedUpdateManyWithoutTestCatalogNestedInputSchema).optional(),
  TestBiomarker: z.lazy(() => TestBiomarkerUncheckedUpdateManyWithoutTestCatalogNestedInputSchema).optional(),
  TestCptCode: z.lazy(() => TestCptCodeUncheckedUpdateManyWithoutTestCatalogNestedInputSchema).optional(),
  TestGene: z.lazy(() => TestGeneUncheckedUpdateManyWithoutTestCatalogNestedInputSchema).optional(),
  TestOrderLoinc: z.lazy(() => TestOrderLoincUncheckedUpdateManyWithoutTestCatalogNestedInputSchema).optional(),
  TestResultLoinc: z.lazy(() => TestResultLoincUncheckedUpdateManyWithoutTestCatalogNestedInputSchema).optional()
}).strict();

export const LabOrderCreateWithoutOrganizationInputSchema: z.ZodType<Prisma.LabOrderCreateWithoutOrganizationInput> = z.object({
  Id: z.string().optional(),
  OrderNumber: z.string().optional().nullable(),
  AccessionNumber: z.string().optional().nullable(),
  PatientMRN: z.string().optional().nullable(),
  PatientMobile: z.string().optional().nullable(),
  PatientEmail: z.string().optional().nullable(),
  OrderDate: z.date().optional().nullable(),
  OrderNotes: z.string().optional().nullable(),
  CreatedAt: z.date().optional().nullable(),
  UpdatedAt: z.date().optional().nullable(),
  OrderingProvider: z.lazy(() => ProviderCreateNestedOneWithoutOrderingProviderLabOrderInputSchema).optional(),
  TreatingProvider: z.lazy(() => ProviderCreateNestedOneWithoutTreatingProviderLabOrderInputSchema).optional(),
  Patient: z.lazy(() => PatientCreateNestedOneWithoutLabOrderInputSchema).optional(),
  LabOrderAttachment: z.lazy(() => LabOrderAttachmentCreateNestedManyWithoutLabOrderInputSchema).optional(),
  LabOrderBilling: z.lazy(() => LabOrderBillingCreateNestedManyWithoutLabOrderInputSchema).optional(),
  LabOrderIcd: z.lazy(() => LabOrderIcdCreateNestedManyWithoutLabOrderInputSchema).optional(),
  LabOrderSpecimen: z.lazy(() => LabOrderSpecimenCreateNestedManyWithoutLabOrderInputSchema).optional(),
  LabOrderSponsoredTestConsent: z.lazy(() => LabOrderSponsoredTestConsentCreateNestedManyWithoutLabOrderInputSchema).optional(),
  LabOrderStatus: z.lazy(() => LabOrderStatusCreateNestedManyWithoutLabOrderInputSchema).optional(),
  LabOrderTest: z.lazy(() => LabOrderTestCreateNestedManyWithoutLabOrderInputSchema).optional()
}).strict();

export const LabOrderUncheckedCreateWithoutOrganizationInputSchema: z.ZodType<Prisma.LabOrderUncheckedCreateWithoutOrganizationInput> = z.object({
  Id: z.string().optional(),
  OrderNumber: z.string().optional().nullable(),
  AccessionNumber: z.string().optional().nullable(),
  OrderingProviderId: z.string().optional().nullable(),
  TreatingProviderId: z.string().optional().nullable(),
  PatientId: z.string().optional().nullable(),
  PatientMRN: z.string().optional().nullable(),
  PatientMobile: z.string().optional().nullable(),
  PatientEmail: z.string().optional().nullable(),
  OrderDate: z.date().optional().nullable(),
  OrderNotes: z.string().optional().nullable(),
  CreatedAt: z.date().optional().nullable(),
  UpdatedAt: z.date().optional().nullable(),
  LabOrderAttachment: z.lazy(() => LabOrderAttachmentUncheckedCreateNestedManyWithoutLabOrderInputSchema).optional(),
  LabOrderBilling: z.lazy(() => LabOrderBillingUncheckedCreateNestedManyWithoutLabOrderInputSchema).optional(),
  LabOrderIcd: z.lazy(() => LabOrderIcdUncheckedCreateNestedManyWithoutLabOrderInputSchema).optional(),
  LabOrderSpecimen: z.lazy(() => LabOrderSpecimenUncheckedCreateNestedManyWithoutLabOrderInputSchema).optional(),
  LabOrderSponsoredTestConsent: z.lazy(() => LabOrderSponsoredTestConsentUncheckedCreateNestedManyWithoutLabOrderInputSchema).optional(),
  LabOrderStatus: z.lazy(() => LabOrderStatusUncheckedCreateNestedManyWithoutLabOrderInputSchema).optional(),
  LabOrderTest: z.lazy(() => LabOrderTestUncheckedCreateNestedManyWithoutLabOrderInputSchema).optional()
}).strict();

export const LabOrderCreateOrConnectWithoutOrganizationInputSchema: z.ZodType<Prisma.LabOrderCreateOrConnectWithoutOrganizationInput> = z.object({
  where: z.lazy(() => LabOrderWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => LabOrderCreateWithoutOrganizationInputSchema),z.lazy(() => LabOrderUncheckedCreateWithoutOrganizationInputSchema) ]),
}).strict();

export const LabOrderCreateManyOrganizationInputEnvelopeSchema: z.ZodType<Prisma.LabOrderCreateManyOrganizationInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => LabOrderCreateManyOrganizationInputSchema),z.lazy(() => LabOrderCreateManyOrganizationInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const OrganizationCreateWithoutChildOrganizationInputSchema: z.ZodType<Prisma.OrganizationCreateWithoutChildOrganizationInput> = z.object({
  Id: z.string(),
  href: z.string().optional().nullable(),
  Level: z.number().optional().nullable(),
  ParentOrgName: z.string().optional().nullable(),
  OrgName: z.string().optional().nullable(),
  OrgType: z.string().optional().nullable(),
  OrgSpecialty: z.string().optional().nullable(),
  OrgAddress: z.string().optional().nullable(),
  OrgCity: z.string().optional().nullable(),
  OrgState: z.string().optional().nullable(),
  OrgZip: z.string().optional().nullable(),
  LabOrder: z.lazy(() => LabOrderCreateNestedManyWithoutOrganizationInputSchema).optional(),
  Organization: z.lazy(() => OrganizationCreateNestedOneWithoutChildOrganizationInputSchema).optional(),
  OrganizationFavoriteTest: z.lazy(() => OrganizationFavoriteTestCreateNestedManyWithoutOrganizationInputSchema).optional(),
  PatientOrganization: z.lazy(() => PatientOrganizationCreateNestedManyWithoutOrganizationInputSchema).optional(),
  ProviderOrganization: z.lazy(() => ProviderOrganizationCreateNestedManyWithoutOrganizationInputSchema).optional()
}).strict();

export const OrganizationUncheckedCreateWithoutChildOrganizationInputSchema: z.ZodType<Prisma.OrganizationUncheckedCreateWithoutChildOrganizationInput> = z.object({
  Id: z.string(),
  href: z.string().optional().nullable(),
  ParentId: z.string().optional().nullable(),
  Level: z.number().optional().nullable(),
  ParentOrgName: z.string().optional().nullable(),
  OrgName: z.string().optional().nullable(),
  OrgType: z.string().optional().nullable(),
  OrgSpecialty: z.string().optional().nullable(),
  OrgAddress: z.string().optional().nullable(),
  OrgCity: z.string().optional().nullable(),
  OrgState: z.string().optional().nullable(),
  OrgZip: z.string().optional().nullable(),
  LabOrder: z.lazy(() => LabOrderUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  OrganizationFavoriteTest: z.lazy(() => OrganizationFavoriteTestUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  PatientOrganization: z.lazy(() => PatientOrganizationUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  ProviderOrganization: z.lazy(() => ProviderOrganizationUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional()
}).strict();

export const OrganizationCreateOrConnectWithoutChildOrganizationInputSchema: z.ZodType<Prisma.OrganizationCreateOrConnectWithoutChildOrganizationInput> = z.object({
  where: z.lazy(() => OrganizationWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => OrganizationCreateWithoutChildOrganizationInputSchema),z.lazy(() => OrganizationUncheckedCreateWithoutChildOrganizationInputSchema) ]),
}).strict();

export const OrganizationCreateWithoutOrganizationInputSchema: z.ZodType<Prisma.OrganizationCreateWithoutOrganizationInput> = z.object({
  Id: z.string(),
  href: z.string().optional().nullable(),
  Level: z.number().optional().nullable(),
  ParentOrgName: z.string().optional().nullable(),
  OrgName: z.string().optional().nullable(),
  OrgType: z.string().optional().nullable(),
  OrgSpecialty: z.string().optional().nullable(),
  OrgAddress: z.string().optional().nullable(),
  OrgCity: z.string().optional().nullable(),
  OrgState: z.string().optional().nullable(),
  OrgZip: z.string().optional().nullable(),
  LabOrder: z.lazy(() => LabOrderCreateNestedManyWithoutOrganizationInputSchema).optional(),
  ChildOrganization: z.lazy(() => OrganizationCreateNestedManyWithoutOrganizationInputSchema).optional(),
  OrganizationFavoriteTest: z.lazy(() => OrganizationFavoriteTestCreateNestedManyWithoutOrganizationInputSchema).optional(),
  PatientOrganization: z.lazy(() => PatientOrganizationCreateNestedManyWithoutOrganizationInputSchema).optional(),
  ProviderOrganization: z.lazy(() => ProviderOrganizationCreateNestedManyWithoutOrganizationInputSchema).optional()
}).strict();

export const OrganizationUncheckedCreateWithoutOrganizationInputSchema: z.ZodType<Prisma.OrganizationUncheckedCreateWithoutOrganizationInput> = z.object({
  Id: z.string(),
  href: z.string().optional().nullable(),
  Level: z.number().optional().nullable(),
  ParentOrgName: z.string().optional().nullable(),
  OrgName: z.string().optional().nullable(),
  OrgType: z.string().optional().nullable(),
  OrgSpecialty: z.string().optional().nullable(),
  OrgAddress: z.string().optional().nullable(),
  OrgCity: z.string().optional().nullable(),
  OrgState: z.string().optional().nullable(),
  OrgZip: z.string().optional().nullable(),
  LabOrder: z.lazy(() => LabOrderUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  ChildOrganization: z.lazy(() => OrganizationUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  OrganizationFavoriteTest: z.lazy(() => OrganizationFavoriteTestUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  PatientOrganization: z.lazy(() => PatientOrganizationUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  ProviderOrganization: z.lazy(() => ProviderOrganizationUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional()
}).strict();

export const OrganizationCreateOrConnectWithoutOrganizationInputSchema: z.ZodType<Prisma.OrganizationCreateOrConnectWithoutOrganizationInput> = z.object({
  where: z.lazy(() => OrganizationWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => OrganizationCreateWithoutOrganizationInputSchema),z.lazy(() => OrganizationUncheckedCreateWithoutOrganizationInputSchema) ]),
}).strict();

export const OrganizationCreateManyOrganizationInputEnvelopeSchema: z.ZodType<Prisma.OrganizationCreateManyOrganizationInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => OrganizationCreateManyOrganizationInputSchema),z.lazy(() => OrganizationCreateManyOrganizationInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const OrganizationFavoriteTestCreateWithoutOrganizationInputSchema: z.ZodType<Prisma.OrganizationFavoriteTestCreateWithoutOrganizationInput> = z.object({
  Id: z.string().optional(),
  ParentId: z.string().optional().nullable(),
  ParentName: z.string().optional().nullable(),
  Level: z.number().optional().nullable(),
  CreatedAt: z.date().optional().nullable(),
  UpdatedAt: z.date().optional().nullable(),
  TestCatalog: z.lazy(() => TestCatalogCreateNestedOneWithoutOrganizationFavoriteTestInputSchema).optional()
}).strict();

export const OrganizationFavoriteTestUncheckedCreateWithoutOrganizationInputSchema: z.ZodType<Prisma.OrganizationFavoriteTestUncheckedCreateWithoutOrganizationInput> = z.object({
  Id: z.string().optional(),
  ParentId: z.string().optional().nullable(),
  ParentName: z.string().optional().nullable(),
  Level: z.number().optional().nullable(),
  TestId: z.number().optional().nullable(),
  CreatedAt: z.date().optional().nullable(),
  UpdatedAt: z.date().optional().nullable()
}).strict();

export const OrganizationFavoriteTestCreateOrConnectWithoutOrganizationInputSchema: z.ZodType<Prisma.OrganizationFavoriteTestCreateOrConnectWithoutOrganizationInput> = z.object({
  where: z.lazy(() => OrganizationFavoriteTestWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => OrganizationFavoriteTestCreateWithoutOrganizationInputSchema),z.lazy(() => OrganizationFavoriteTestUncheckedCreateWithoutOrganizationInputSchema) ]),
}).strict();

export const OrganizationFavoriteTestCreateManyOrganizationInputEnvelopeSchema: z.ZodType<Prisma.OrganizationFavoriteTestCreateManyOrganizationInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => OrganizationFavoriteTestCreateManyOrganizationInputSchema),z.lazy(() => OrganizationFavoriteTestCreateManyOrganizationInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const PatientOrganizationCreateWithoutOrganizationInputSchema: z.ZodType<Prisma.PatientOrganizationCreateWithoutOrganizationInput> = z.object({
  Id: z.string().optional(),
  MRN: z.string().optional().nullable(),
  Mobile: z.string().optional().nullable(),
  Email: z.string().optional().nullable(),
  Patient: z.lazy(() => PatientCreateNestedOneWithoutPatientOrganizationInputSchema)
}).strict();

export const PatientOrganizationUncheckedCreateWithoutOrganizationInputSchema: z.ZodType<Prisma.PatientOrganizationUncheckedCreateWithoutOrganizationInput> = z.object({
  Id: z.string().optional(),
  PatientId: z.string(),
  MRN: z.string().optional().nullable(),
  Mobile: z.string().optional().nullable(),
  Email: z.string().optional().nullable()
}).strict();

export const PatientOrganizationCreateOrConnectWithoutOrganizationInputSchema: z.ZodType<Prisma.PatientOrganizationCreateOrConnectWithoutOrganizationInput> = z.object({
  where: z.lazy(() => PatientOrganizationWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => PatientOrganizationCreateWithoutOrganizationInputSchema),z.lazy(() => PatientOrganizationUncheckedCreateWithoutOrganizationInputSchema) ]),
}).strict();

export const PatientOrganizationCreateManyOrganizationInputEnvelopeSchema: z.ZodType<Prisma.PatientOrganizationCreateManyOrganizationInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => PatientOrganizationCreateManyOrganizationInputSchema),z.lazy(() => PatientOrganizationCreateManyOrganizationInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const ProviderOrganizationCreateWithoutOrganizationInputSchema: z.ZodType<Prisma.ProviderOrganizationCreateWithoutOrganizationInput> = z.object({
  Id: z.string().optional(),
  ProviderNPI: z.string().optional().nullable(),
  Name: z.string().optional().nullable(),
  ParentOrgName: z.string().optional().nullable(),
  OrgName: z.string().optional().nullable(),
  OrgAddress: z.string().optional().nullable(),
  OrgCity: z.string().optional().nullable(),
  OrgState: z.string().optional().nullable(),
  OrgZip: z.string().optional().nullable(),
  Provider: z.lazy(() => ProviderCreateNestedOneWithoutProviderOrganizationInputSchema)
}).strict();

export const ProviderOrganizationUncheckedCreateWithoutOrganizationInputSchema: z.ZodType<Prisma.ProviderOrganizationUncheckedCreateWithoutOrganizationInput> = z.object({
  Id: z.string().optional(),
  ProviderId: z.string(),
  ProviderNPI: z.string().optional().nullable(),
  Name: z.string().optional().nullable(),
  ParentOrgName: z.string().optional().nullable(),
  OrgName: z.string().optional().nullable(),
  OrgAddress: z.string().optional().nullable(),
  OrgCity: z.string().optional().nullable(),
  OrgState: z.string().optional().nullable(),
  OrgZip: z.string().optional().nullable()
}).strict();

export const ProviderOrganizationCreateOrConnectWithoutOrganizationInputSchema: z.ZodType<Prisma.ProviderOrganizationCreateOrConnectWithoutOrganizationInput> = z.object({
  where: z.lazy(() => ProviderOrganizationWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => ProviderOrganizationCreateWithoutOrganizationInputSchema),z.lazy(() => ProviderOrganizationUncheckedCreateWithoutOrganizationInputSchema) ]),
}).strict();

export const ProviderOrganizationCreateManyOrganizationInputEnvelopeSchema: z.ZodType<Prisma.ProviderOrganizationCreateManyOrganizationInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => ProviderOrganizationCreateManyOrganizationInputSchema),z.lazy(() => ProviderOrganizationCreateManyOrganizationInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const LabOrderUpsertWithWhereUniqueWithoutOrganizationInputSchema: z.ZodType<Prisma.LabOrderUpsertWithWhereUniqueWithoutOrganizationInput> = z.object({
  where: z.lazy(() => LabOrderWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => LabOrderUpdateWithoutOrganizationInputSchema),z.lazy(() => LabOrderUncheckedUpdateWithoutOrganizationInputSchema) ]),
  create: z.union([ z.lazy(() => LabOrderCreateWithoutOrganizationInputSchema),z.lazy(() => LabOrderUncheckedCreateWithoutOrganizationInputSchema) ]),
}).strict();

export const LabOrderUpdateWithWhereUniqueWithoutOrganizationInputSchema: z.ZodType<Prisma.LabOrderUpdateWithWhereUniqueWithoutOrganizationInput> = z.object({
  where: z.lazy(() => LabOrderWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => LabOrderUpdateWithoutOrganizationInputSchema),z.lazy(() => LabOrderUncheckedUpdateWithoutOrganizationInputSchema) ]),
}).strict();

export const LabOrderUpdateManyWithWhereWithoutOrganizationInputSchema: z.ZodType<Prisma.LabOrderUpdateManyWithWhereWithoutOrganizationInput> = z.object({
  where: z.lazy(() => LabOrderScalarWhereInputSchema),
  data: z.union([ z.lazy(() => LabOrderUpdateManyMutationInputSchema),z.lazy(() => LabOrderUncheckedUpdateManyWithoutOrganizationInputSchema) ]),
}).strict();

export const LabOrderScalarWhereInputSchema: z.ZodType<Prisma.LabOrderScalarWhereInput> = z.object({
  AND: z.union([ z.lazy(() => LabOrderScalarWhereInputSchema),z.lazy(() => LabOrderScalarWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => LabOrderScalarWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => LabOrderScalarWhereInputSchema),z.lazy(() => LabOrderScalarWhereInputSchema).array() ]).optional(),
  Id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  OrderNumber: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  AccessionNumber: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  OrderingProviderId: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  TreatingProviderId: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  PatientId: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  PatientMRN: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  PatientMobile: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  PatientEmail: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  OrganizationId: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  OrderDate: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.date() ]).optional().nullable(),
  OrderNotes: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  CreatedAt: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.date() ]).optional().nullable(),
  UpdatedAt: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.date() ]).optional().nullable(),
}).strict();

export const OrganizationUpsertWithoutChildOrganizationInputSchema: z.ZodType<Prisma.OrganizationUpsertWithoutChildOrganizationInput> = z.object({
  update: z.union([ z.lazy(() => OrganizationUpdateWithoutChildOrganizationInputSchema),z.lazy(() => OrganizationUncheckedUpdateWithoutChildOrganizationInputSchema) ]),
  create: z.union([ z.lazy(() => OrganizationCreateWithoutChildOrganizationInputSchema),z.lazy(() => OrganizationUncheckedCreateWithoutChildOrganizationInputSchema) ]),
  where: z.lazy(() => OrganizationWhereInputSchema).optional()
}).strict();

export const OrganizationUpdateToOneWithWhereWithoutChildOrganizationInputSchema: z.ZodType<Prisma.OrganizationUpdateToOneWithWhereWithoutChildOrganizationInput> = z.object({
  where: z.lazy(() => OrganizationWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => OrganizationUpdateWithoutChildOrganizationInputSchema),z.lazy(() => OrganizationUncheckedUpdateWithoutChildOrganizationInputSchema) ]),
}).strict();

export const OrganizationUpdateWithoutChildOrganizationInputSchema: z.ZodType<Prisma.OrganizationUpdateWithoutChildOrganizationInput> = z.object({
  Id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  href: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Level: z.union([ z.number(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  ParentOrgName: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  OrgName: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  OrgType: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  OrgSpecialty: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  OrgAddress: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  OrgCity: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  OrgState: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  OrgZip: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  LabOrder: z.lazy(() => LabOrderUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  Organization: z.lazy(() => OrganizationUpdateOneWithoutChildOrganizationNestedInputSchema).optional(),
  OrganizationFavoriteTest: z.lazy(() => OrganizationFavoriteTestUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  PatientOrganization: z.lazy(() => PatientOrganizationUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  ProviderOrganization: z.lazy(() => ProviderOrganizationUpdateManyWithoutOrganizationNestedInputSchema).optional()
}).strict();

export const OrganizationUncheckedUpdateWithoutChildOrganizationInputSchema: z.ZodType<Prisma.OrganizationUncheckedUpdateWithoutChildOrganizationInput> = z.object({
  Id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  href: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  ParentId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Level: z.union([ z.number(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  ParentOrgName: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  OrgName: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  OrgType: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  OrgSpecialty: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  OrgAddress: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  OrgCity: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  OrgState: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  OrgZip: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  LabOrder: z.lazy(() => LabOrderUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  OrganizationFavoriteTest: z.lazy(() => OrganizationFavoriteTestUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  PatientOrganization: z.lazy(() => PatientOrganizationUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  ProviderOrganization: z.lazy(() => ProviderOrganizationUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional()
}).strict();

export const OrganizationUpsertWithWhereUniqueWithoutOrganizationInputSchema: z.ZodType<Prisma.OrganizationUpsertWithWhereUniqueWithoutOrganizationInput> = z.object({
  where: z.lazy(() => OrganizationWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => OrganizationUpdateWithoutOrganizationInputSchema),z.lazy(() => OrganizationUncheckedUpdateWithoutOrganizationInputSchema) ]),
  create: z.union([ z.lazy(() => OrganizationCreateWithoutOrganizationInputSchema),z.lazy(() => OrganizationUncheckedCreateWithoutOrganizationInputSchema) ]),
}).strict();

export const OrganizationUpdateWithWhereUniqueWithoutOrganizationInputSchema: z.ZodType<Prisma.OrganizationUpdateWithWhereUniqueWithoutOrganizationInput> = z.object({
  where: z.lazy(() => OrganizationWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => OrganizationUpdateWithoutOrganizationInputSchema),z.lazy(() => OrganizationUncheckedUpdateWithoutOrganizationInputSchema) ]),
}).strict();

export const OrganizationUpdateManyWithWhereWithoutOrganizationInputSchema: z.ZodType<Prisma.OrganizationUpdateManyWithWhereWithoutOrganizationInput> = z.object({
  where: z.lazy(() => OrganizationScalarWhereInputSchema),
  data: z.union([ z.lazy(() => OrganizationUpdateManyMutationInputSchema),z.lazy(() => OrganizationUncheckedUpdateManyWithoutOrganizationInputSchema) ]),
}).strict();

export const OrganizationScalarWhereInputSchema: z.ZodType<Prisma.OrganizationScalarWhereInput> = z.object({
  AND: z.union([ z.lazy(() => OrganizationScalarWhereInputSchema),z.lazy(() => OrganizationScalarWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => OrganizationScalarWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => OrganizationScalarWhereInputSchema),z.lazy(() => OrganizationScalarWhereInputSchema).array() ]).optional(),
  Id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  href: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  ParentId: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  Level: z.union([ z.lazy(() => IntNullableFilterSchema),z.number() ]).optional().nullable(),
  ParentOrgName: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  OrgName: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  OrgType: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  OrgSpecialty: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  OrgAddress: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  OrgCity: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  OrgState: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  OrgZip: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
}).strict();

export const OrganizationFavoriteTestUpsertWithWhereUniqueWithoutOrganizationInputSchema: z.ZodType<Prisma.OrganizationFavoriteTestUpsertWithWhereUniqueWithoutOrganizationInput> = z.object({
  where: z.lazy(() => OrganizationFavoriteTestWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => OrganizationFavoriteTestUpdateWithoutOrganizationInputSchema),z.lazy(() => OrganizationFavoriteTestUncheckedUpdateWithoutOrganizationInputSchema) ]),
  create: z.union([ z.lazy(() => OrganizationFavoriteTestCreateWithoutOrganizationInputSchema),z.lazy(() => OrganizationFavoriteTestUncheckedCreateWithoutOrganizationInputSchema) ]),
}).strict();

export const OrganizationFavoriteTestUpdateWithWhereUniqueWithoutOrganizationInputSchema: z.ZodType<Prisma.OrganizationFavoriteTestUpdateWithWhereUniqueWithoutOrganizationInput> = z.object({
  where: z.lazy(() => OrganizationFavoriteTestWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => OrganizationFavoriteTestUpdateWithoutOrganizationInputSchema),z.lazy(() => OrganizationFavoriteTestUncheckedUpdateWithoutOrganizationInputSchema) ]),
}).strict();

export const OrganizationFavoriteTestUpdateManyWithWhereWithoutOrganizationInputSchema: z.ZodType<Prisma.OrganizationFavoriteTestUpdateManyWithWhereWithoutOrganizationInput> = z.object({
  where: z.lazy(() => OrganizationFavoriteTestScalarWhereInputSchema),
  data: z.union([ z.lazy(() => OrganizationFavoriteTestUpdateManyMutationInputSchema),z.lazy(() => OrganizationFavoriteTestUncheckedUpdateManyWithoutOrganizationInputSchema) ]),
}).strict();

export const OrganizationFavoriteTestScalarWhereInputSchema: z.ZodType<Prisma.OrganizationFavoriteTestScalarWhereInput> = z.object({
  AND: z.union([ z.lazy(() => OrganizationFavoriteTestScalarWhereInputSchema),z.lazy(() => OrganizationFavoriteTestScalarWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => OrganizationFavoriteTestScalarWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => OrganizationFavoriteTestScalarWhereInputSchema),z.lazy(() => OrganizationFavoriteTestScalarWhereInputSchema).array() ]).optional(),
  Id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  OrganizationId: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  ParentId: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  ParentName: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  Level: z.union([ z.lazy(() => IntNullableFilterSchema),z.number() ]).optional().nullable(),
  TestId: z.union([ z.lazy(() => IntNullableFilterSchema),z.number() ]).optional().nullable(),
  CreatedAt: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.date() ]).optional().nullable(),
  UpdatedAt: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.date() ]).optional().nullable(),
}).strict();

export const PatientOrganizationUpsertWithWhereUniqueWithoutOrganizationInputSchema: z.ZodType<Prisma.PatientOrganizationUpsertWithWhereUniqueWithoutOrganizationInput> = z.object({
  where: z.lazy(() => PatientOrganizationWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => PatientOrganizationUpdateWithoutOrganizationInputSchema),z.lazy(() => PatientOrganizationUncheckedUpdateWithoutOrganizationInputSchema) ]),
  create: z.union([ z.lazy(() => PatientOrganizationCreateWithoutOrganizationInputSchema),z.lazy(() => PatientOrganizationUncheckedCreateWithoutOrganizationInputSchema) ]),
}).strict();

export const PatientOrganizationUpdateWithWhereUniqueWithoutOrganizationInputSchema: z.ZodType<Prisma.PatientOrganizationUpdateWithWhereUniqueWithoutOrganizationInput> = z.object({
  where: z.lazy(() => PatientOrganizationWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => PatientOrganizationUpdateWithoutOrganizationInputSchema),z.lazy(() => PatientOrganizationUncheckedUpdateWithoutOrganizationInputSchema) ]),
}).strict();

export const PatientOrganizationUpdateManyWithWhereWithoutOrganizationInputSchema: z.ZodType<Prisma.PatientOrganizationUpdateManyWithWhereWithoutOrganizationInput> = z.object({
  where: z.lazy(() => PatientOrganizationScalarWhereInputSchema),
  data: z.union([ z.lazy(() => PatientOrganizationUpdateManyMutationInputSchema),z.lazy(() => PatientOrganizationUncheckedUpdateManyWithoutOrganizationInputSchema) ]),
}).strict();

export const PatientOrganizationScalarWhereInputSchema: z.ZodType<Prisma.PatientOrganizationScalarWhereInput> = z.object({
  AND: z.union([ z.lazy(() => PatientOrganizationScalarWhereInputSchema),z.lazy(() => PatientOrganizationScalarWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => PatientOrganizationScalarWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => PatientOrganizationScalarWhereInputSchema),z.lazy(() => PatientOrganizationScalarWhereInputSchema).array() ]).optional(),
  Id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  PatientId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  OrganizationId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  MRN: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  Mobile: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  Email: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
}).strict();

export const ProviderOrganizationUpsertWithWhereUniqueWithoutOrganizationInputSchema: z.ZodType<Prisma.ProviderOrganizationUpsertWithWhereUniqueWithoutOrganizationInput> = z.object({
  where: z.lazy(() => ProviderOrganizationWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => ProviderOrganizationUpdateWithoutOrganizationInputSchema),z.lazy(() => ProviderOrganizationUncheckedUpdateWithoutOrganizationInputSchema) ]),
  create: z.union([ z.lazy(() => ProviderOrganizationCreateWithoutOrganizationInputSchema),z.lazy(() => ProviderOrganizationUncheckedCreateWithoutOrganizationInputSchema) ]),
}).strict();

export const ProviderOrganizationUpdateWithWhereUniqueWithoutOrganizationInputSchema: z.ZodType<Prisma.ProviderOrganizationUpdateWithWhereUniqueWithoutOrganizationInput> = z.object({
  where: z.lazy(() => ProviderOrganizationWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => ProviderOrganizationUpdateWithoutOrganizationInputSchema),z.lazy(() => ProviderOrganizationUncheckedUpdateWithoutOrganizationInputSchema) ]),
}).strict();

export const ProviderOrganizationUpdateManyWithWhereWithoutOrganizationInputSchema: z.ZodType<Prisma.ProviderOrganizationUpdateManyWithWhereWithoutOrganizationInput> = z.object({
  where: z.lazy(() => ProviderOrganizationScalarWhereInputSchema),
  data: z.union([ z.lazy(() => ProviderOrganizationUpdateManyMutationInputSchema),z.lazy(() => ProviderOrganizationUncheckedUpdateManyWithoutOrganizationInputSchema) ]),
}).strict();

export const ProviderOrganizationScalarWhereInputSchema: z.ZodType<Prisma.ProviderOrganizationScalarWhereInput> = z.object({
  AND: z.union([ z.lazy(() => ProviderOrganizationScalarWhereInputSchema),z.lazy(() => ProviderOrganizationScalarWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => ProviderOrganizationScalarWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => ProviderOrganizationScalarWhereInputSchema),z.lazy(() => ProviderOrganizationScalarWhereInputSchema).array() ]).optional(),
  Id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  ProviderId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  OrganizationId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  ProviderNPI: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  Name: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  ParentOrgName: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  OrgName: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  OrgAddress: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  OrgCity: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  OrgState: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  OrgZip: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
}).strict();

export const OrganizationCreateWithoutOrganizationFavoriteTestInputSchema: z.ZodType<Prisma.OrganizationCreateWithoutOrganizationFavoriteTestInput> = z.object({
  Id: z.string(),
  href: z.string().optional().nullable(),
  Level: z.number().optional().nullable(),
  ParentOrgName: z.string().optional().nullable(),
  OrgName: z.string().optional().nullable(),
  OrgType: z.string().optional().nullable(),
  OrgSpecialty: z.string().optional().nullable(),
  OrgAddress: z.string().optional().nullable(),
  OrgCity: z.string().optional().nullable(),
  OrgState: z.string().optional().nullable(),
  OrgZip: z.string().optional().nullable(),
  LabOrder: z.lazy(() => LabOrderCreateNestedManyWithoutOrganizationInputSchema).optional(),
  Organization: z.lazy(() => OrganizationCreateNestedOneWithoutChildOrganizationInputSchema).optional(),
  ChildOrganization: z.lazy(() => OrganizationCreateNestedManyWithoutOrganizationInputSchema).optional(),
  PatientOrganization: z.lazy(() => PatientOrganizationCreateNestedManyWithoutOrganizationInputSchema).optional(),
  ProviderOrganization: z.lazy(() => ProviderOrganizationCreateNestedManyWithoutOrganizationInputSchema).optional()
}).strict();

export const OrganizationUncheckedCreateWithoutOrganizationFavoriteTestInputSchema: z.ZodType<Prisma.OrganizationUncheckedCreateWithoutOrganizationFavoriteTestInput> = z.object({
  Id: z.string(),
  href: z.string().optional().nullable(),
  ParentId: z.string().optional().nullable(),
  Level: z.number().optional().nullable(),
  ParentOrgName: z.string().optional().nullable(),
  OrgName: z.string().optional().nullable(),
  OrgType: z.string().optional().nullable(),
  OrgSpecialty: z.string().optional().nullable(),
  OrgAddress: z.string().optional().nullable(),
  OrgCity: z.string().optional().nullable(),
  OrgState: z.string().optional().nullable(),
  OrgZip: z.string().optional().nullable(),
  LabOrder: z.lazy(() => LabOrderUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  ChildOrganization: z.lazy(() => OrganizationUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  PatientOrganization: z.lazy(() => PatientOrganizationUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  ProviderOrganization: z.lazy(() => ProviderOrganizationUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional()
}).strict();

export const OrganizationCreateOrConnectWithoutOrganizationFavoriteTestInputSchema: z.ZodType<Prisma.OrganizationCreateOrConnectWithoutOrganizationFavoriteTestInput> = z.object({
  where: z.lazy(() => OrganizationWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => OrganizationCreateWithoutOrganizationFavoriteTestInputSchema),z.lazy(() => OrganizationUncheckedCreateWithoutOrganizationFavoriteTestInputSchema) ]),
}).strict();

export const TestCatalogCreateWithoutOrganizationFavoriteTestInputSchema: z.ZodType<Prisma.TestCatalogCreateWithoutOrganizationFavoriteTestInput> = z.object({
  href: z.string().optional().nullable(),
  CasandraTestId: z.string(),
  LabTestId: z.string().optional().nullable(),
  TestName: z.string().optional().nullable(),
  AlternativeName: z.string().optional().nullable(),
  AlternativeName1: z.string().optional().nullable(),
  AlternativeName2: z.string().optional().nullable(),
  AlternativeName3: z.string().optional().nullable(),
  AlternativeName4: z.string().optional().nullable(),
  AlternativeName5: z.string().optional().nullable(),
  TestIncludes: z.string().optional().nullable(),
  SpecimenType: z.string().optional().nullable(),
  SpecialInstructions: z.string().optional().nullable(),
  Methodology: z.string().optional().nullable(),
  TestDescription: z.string().optional().nullable(),
  Diseases: z.string().optional().nullable(),
  Probes: z.string().optional().nullable(),
  ClinicalSignificance: z.string().optional().nullable(),
  SpecimenRequirements: z.string().optional().nullable(),
  Volume: z.string().optional().nullable(),
  MinimumVolume: z.string().optional().nullable(),
  Container: z.string().optional().nullable(),
  Collection: z.string().optional().nullable(),
  StabilityRequirements: z.string().optional().nullable(),
  StorageTransportation: z.string().optional().nullable(),
  PatientPreparation: z.string().optional().nullable(),
  CausesForRejection: z.string().optional().nullable(),
  TestUsage: z.string().optional().nullable(),
  TestLimitations: z.string().optional().nullable(),
  CPTCodes: z.string().optional().nullable(),
  NewYorkApproved: z.string().optional().nullable(),
  LevelOfService: z.string().optional().nullable(),
  TurnAroundTime: z.string().optional().nullable(),
  AssayCategory: z.string().optional().nullable(),
  ReferenceRanges: z.string().optional().nullable(),
  SetupSchedule: z.string().optional().nullable(),
  AlternativeSpecimen: z.string().optional().nullable(),
  LoincCodesText: z.string().optional().nullable(),
  LoincCodesHTML: z.string().optional().nullable(),
  TestCategory: z.string().optional().nullable(),
  TestSubCategory: z.string().optional().nullable(),
  CreatedAt: z.date().optional(),
  UpdatedAt: z.date().optional(),
  LabOrderTest: z.lazy(() => LabOrderTestCreateNestedManyWithoutTestCatalogInputSchema).optional(),
  ProviderFavoriteTest: z.lazy(() => ProviderFavoriteTestCreateNestedManyWithoutTestCatalogInputSchema).optional(),
  SponsoredTest: z.lazy(() => SponsoredTestCreateNestedManyWithoutTestCatalogInputSchema).optional(),
  TestBiomarker: z.lazy(() => TestBiomarkerCreateNestedManyWithoutTestCatalogInputSchema).optional(),
  Lab: z.lazy(() => LabCreateNestedOneWithoutTestCatalogInputSchema).optional(),
  TestCptCode: z.lazy(() => TestCptCodeCreateNestedManyWithoutTestCatalogInputSchema).optional(),
  TestGene: z.lazy(() => TestGeneCreateNestedManyWithoutTestCatalogInputSchema).optional(),
  TestOrderLoinc: z.lazy(() => TestOrderLoincCreateNestedManyWithoutTestCatalogInputSchema).optional(),
  TestResultLoinc: z.lazy(() => TestResultLoincCreateNestedManyWithoutTestCatalogInputSchema).optional()
}).strict();

export const TestCatalogUncheckedCreateWithoutOrganizationFavoriteTestInputSchema: z.ZodType<Prisma.TestCatalogUncheckedCreateWithoutOrganizationFavoriteTestInput> = z.object({
  TestId: z.number().optional(),
  LabId: z.number().optional().nullable(),
  href: z.string().optional().nullable(),
  CasandraTestId: z.string(),
  LabTestId: z.string().optional().nullable(),
  TestName: z.string().optional().nullable(),
  AlternativeName: z.string().optional().nullable(),
  AlternativeName1: z.string().optional().nullable(),
  AlternativeName2: z.string().optional().nullable(),
  AlternativeName3: z.string().optional().nullable(),
  AlternativeName4: z.string().optional().nullable(),
  AlternativeName5: z.string().optional().nullable(),
  TestIncludes: z.string().optional().nullable(),
  SpecimenType: z.string().optional().nullable(),
  SpecialInstructions: z.string().optional().nullable(),
  Methodology: z.string().optional().nullable(),
  TestDescription: z.string().optional().nullable(),
  Diseases: z.string().optional().nullable(),
  Probes: z.string().optional().nullable(),
  ClinicalSignificance: z.string().optional().nullable(),
  SpecimenRequirements: z.string().optional().nullable(),
  Volume: z.string().optional().nullable(),
  MinimumVolume: z.string().optional().nullable(),
  Container: z.string().optional().nullable(),
  Collection: z.string().optional().nullable(),
  StabilityRequirements: z.string().optional().nullable(),
  StorageTransportation: z.string().optional().nullable(),
  PatientPreparation: z.string().optional().nullable(),
  CausesForRejection: z.string().optional().nullable(),
  TestUsage: z.string().optional().nullable(),
  TestLimitations: z.string().optional().nullable(),
  CPTCodes: z.string().optional().nullable(),
  NewYorkApproved: z.string().optional().nullable(),
  LevelOfService: z.string().optional().nullable(),
  TurnAroundTime: z.string().optional().nullable(),
  AssayCategory: z.string().optional().nullable(),
  ReferenceRanges: z.string().optional().nullable(),
  SetupSchedule: z.string().optional().nullable(),
  AlternativeSpecimen: z.string().optional().nullable(),
  LoincCodesText: z.string().optional().nullable(),
  LoincCodesHTML: z.string().optional().nullable(),
  TestCategory: z.string().optional().nullable(),
  TestSubCategory: z.string().optional().nullable(),
  CreatedAt: z.date().optional(),
  UpdatedAt: z.date().optional(),
  LabOrderTest: z.lazy(() => LabOrderTestUncheckedCreateNestedManyWithoutTestCatalogInputSchema).optional(),
  ProviderFavoriteTest: z.lazy(() => ProviderFavoriteTestUncheckedCreateNestedManyWithoutTestCatalogInputSchema).optional(),
  SponsoredTest: z.lazy(() => SponsoredTestUncheckedCreateNestedManyWithoutTestCatalogInputSchema).optional(),
  TestBiomarker: z.lazy(() => TestBiomarkerUncheckedCreateNestedManyWithoutTestCatalogInputSchema).optional(),
  TestCptCode: z.lazy(() => TestCptCodeUncheckedCreateNestedManyWithoutTestCatalogInputSchema).optional(),
  TestGene: z.lazy(() => TestGeneUncheckedCreateNestedManyWithoutTestCatalogInputSchema).optional(),
  TestOrderLoinc: z.lazy(() => TestOrderLoincUncheckedCreateNestedManyWithoutTestCatalogInputSchema).optional(),
  TestResultLoinc: z.lazy(() => TestResultLoincUncheckedCreateNestedManyWithoutTestCatalogInputSchema).optional()
}).strict();

export const TestCatalogCreateOrConnectWithoutOrganizationFavoriteTestInputSchema: z.ZodType<Prisma.TestCatalogCreateOrConnectWithoutOrganizationFavoriteTestInput> = z.object({
  where: z.lazy(() => TestCatalogWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => TestCatalogCreateWithoutOrganizationFavoriteTestInputSchema),z.lazy(() => TestCatalogUncheckedCreateWithoutOrganizationFavoriteTestInputSchema) ]),
}).strict();

export const OrganizationUpsertWithoutOrganizationFavoriteTestInputSchema: z.ZodType<Prisma.OrganizationUpsertWithoutOrganizationFavoriteTestInput> = z.object({
  update: z.union([ z.lazy(() => OrganizationUpdateWithoutOrganizationFavoriteTestInputSchema),z.lazy(() => OrganizationUncheckedUpdateWithoutOrganizationFavoriteTestInputSchema) ]),
  create: z.union([ z.lazy(() => OrganizationCreateWithoutOrganizationFavoriteTestInputSchema),z.lazy(() => OrganizationUncheckedCreateWithoutOrganizationFavoriteTestInputSchema) ]),
  where: z.lazy(() => OrganizationWhereInputSchema).optional()
}).strict();

export const OrganizationUpdateToOneWithWhereWithoutOrganizationFavoriteTestInputSchema: z.ZodType<Prisma.OrganizationUpdateToOneWithWhereWithoutOrganizationFavoriteTestInput> = z.object({
  where: z.lazy(() => OrganizationWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => OrganizationUpdateWithoutOrganizationFavoriteTestInputSchema),z.lazy(() => OrganizationUncheckedUpdateWithoutOrganizationFavoriteTestInputSchema) ]),
}).strict();

export const OrganizationUpdateWithoutOrganizationFavoriteTestInputSchema: z.ZodType<Prisma.OrganizationUpdateWithoutOrganizationFavoriteTestInput> = z.object({
  Id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  href: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Level: z.union([ z.number(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  ParentOrgName: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  OrgName: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  OrgType: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  OrgSpecialty: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  OrgAddress: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  OrgCity: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  OrgState: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  OrgZip: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  LabOrder: z.lazy(() => LabOrderUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  Organization: z.lazy(() => OrganizationUpdateOneWithoutChildOrganizationNestedInputSchema).optional(),
  ChildOrganization: z.lazy(() => OrganizationUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  PatientOrganization: z.lazy(() => PatientOrganizationUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  ProviderOrganization: z.lazy(() => ProviderOrganizationUpdateManyWithoutOrganizationNestedInputSchema).optional()
}).strict();

export const OrganizationUncheckedUpdateWithoutOrganizationFavoriteTestInputSchema: z.ZodType<Prisma.OrganizationUncheckedUpdateWithoutOrganizationFavoriteTestInput> = z.object({
  Id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  href: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  ParentId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Level: z.union([ z.number(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  ParentOrgName: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  OrgName: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  OrgType: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  OrgSpecialty: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  OrgAddress: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  OrgCity: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  OrgState: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  OrgZip: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  LabOrder: z.lazy(() => LabOrderUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  ChildOrganization: z.lazy(() => OrganizationUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  PatientOrganization: z.lazy(() => PatientOrganizationUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  ProviderOrganization: z.lazy(() => ProviderOrganizationUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional()
}).strict();

export const TestCatalogUpsertWithoutOrganizationFavoriteTestInputSchema: z.ZodType<Prisma.TestCatalogUpsertWithoutOrganizationFavoriteTestInput> = z.object({
  update: z.union([ z.lazy(() => TestCatalogUpdateWithoutOrganizationFavoriteTestInputSchema),z.lazy(() => TestCatalogUncheckedUpdateWithoutOrganizationFavoriteTestInputSchema) ]),
  create: z.union([ z.lazy(() => TestCatalogCreateWithoutOrganizationFavoriteTestInputSchema),z.lazy(() => TestCatalogUncheckedCreateWithoutOrganizationFavoriteTestInputSchema) ]),
  where: z.lazy(() => TestCatalogWhereInputSchema).optional()
}).strict();

export const TestCatalogUpdateToOneWithWhereWithoutOrganizationFavoriteTestInputSchema: z.ZodType<Prisma.TestCatalogUpdateToOneWithWhereWithoutOrganizationFavoriteTestInput> = z.object({
  where: z.lazy(() => TestCatalogWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => TestCatalogUpdateWithoutOrganizationFavoriteTestInputSchema),z.lazy(() => TestCatalogUncheckedUpdateWithoutOrganizationFavoriteTestInputSchema) ]),
}).strict();

export const TestCatalogUpdateWithoutOrganizationFavoriteTestInputSchema: z.ZodType<Prisma.TestCatalogUpdateWithoutOrganizationFavoriteTestInput> = z.object({
  href: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  CasandraTestId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  LabTestId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  TestName: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  AlternativeName: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  AlternativeName1: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  AlternativeName2: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  AlternativeName3: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  AlternativeName4: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  AlternativeName5: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  TestIncludes: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  SpecimenType: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  SpecialInstructions: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Methodology: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  TestDescription: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Diseases: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Probes: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  ClinicalSignificance: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  SpecimenRequirements: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Volume: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  MinimumVolume: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Container: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Collection: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  StabilityRequirements: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  StorageTransportation: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  PatientPreparation: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  CausesForRejection: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  TestUsage: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  TestLimitations: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  CPTCodes: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  NewYorkApproved: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  LevelOfService: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  TurnAroundTime: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  AssayCategory: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  ReferenceRanges: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  SetupSchedule: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  AlternativeSpecimen: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  LoincCodesText: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  LoincCodesHTML: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  TestCategory: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  TestSubCategory: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  CreatedAt: z.union([ z.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  UpdatedAt: z.union([ z.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  LabOrderTest: z.lazy(() => LabOrderTestUpdateManyWithoutTestCatalogNestedInputSchema).optional(),
  ProviderFavoriteTest: z.lazy(() => ProviderFavoriteTestUpdateManyWithoutTestCatalogNestedInputSchema).optional(),
  SponsoredTest: z.lazy(() => SponsoredTestUpdateManyWithoutTestCatalogNestedInputSchema).optional(),
  TestBiomarker: z.lazy(() => TestBiomarkerUpdateManyWithoutTestCatalogNestedInputSchema).optional(),
  Lab: z.lazy(() => LabUpdateOneWithoutTestCatalogNestedInputSchema).optional(),
  TestCptCode: z.lazy(() => TestCptCodeUpdateManyWithoutTestCatalogNestedInputSchema).optional(),
  TestGene: z.lazy(() => TestGeneUpdateManyWithoutTestCatalogNestedInputSchema).optional(),
  TestOrderLoinc: z.lazy(() => TestOrderLoincUpdateManyWithoutTestCatalogNestedInputSchema).optional(),
  TestResultLoinc: z.lazy(() => TestResultLoincUpdateManyWithoutTestCatalogNestedInputSchema).optional()
}).strict();

export const TestCatalogUncheckedUpdateWithoutOrganizationFavoriteTestInputSchema: z.ZodType<Prisma.TestCatalogUncheckedUpdateWithoutOrganizationFavoriteTestInput> = z.object({
  TestId: z.union([ z.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  LabId: z.union([ z.number(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  href: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  CasandraTestId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  LabTestId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  TestName: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  AlternativeName: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  AlternativeName1: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  AlternativeName2: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  AlternativeName3: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  AlternativeName4: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  AlternativeName5: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  TestIncludes: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  SpecimenType: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  SpecialInstructions: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Methodology: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  TestDescription: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Diseases: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Probes: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  ClinicalSignificance: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  SpecimenRequirements: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Volume: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  MinimumVolume: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Container: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Collection: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  StabilityRequirements: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  StorageTransportation: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  PatientPreparation: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  CausesForRejection: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  TestUsage: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  TestLimitations: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  CPTCodes: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  NewYorkApproved: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  LevelOfService: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  TurnAroundTime: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  AssayCategory: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  ReferenceRanges: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  SetupSchedule: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  AlternativeSpecimen: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  LoincCodesText: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  LoincCodesHTML: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  TestCategory: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  TestSubCategory: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  CreatedAt: z.union([ z.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  UpdatedAt: z.union([ z.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  LabOrderTest: z.lazy(() => LabOrderTestUncheckedUpdateManyWithoutTestCatalogNestedInputSchema).optional(),
  ProviderFavoriteTest: z.lazy(() => ProviderFavoriteTestUncheckedUpdateManyWithoutTestCatalogNestedInputSchema).optional(),
  SponsoredTest: z.lazy(() => SponsoredTestUncheckedUpdateManyWithoutTestCatalogNestedInputSchema).optional(),
  TestBiomarker: z.lazy(() => TestBiomarkerUncheckedUpdateManyWithoutTestCatalogNestedInputSchema).optional(),
  TestCptCode: z.lazy(() => TestCptCodeUncheckedUpdateManyWithoutTestCatalogNestedInputSchema).optional(),
  TestGene: z.lazy(() => TestGeneUncheckedUpdateManyWithoutTestCatalogNestedInputSchema).optional(),
  TestOrderLoinc: z.lazy(() => TestOrderLoincUncheckedUpdateManyWithoutTestCatalogNestedInputSchema).optional(),
  TestResultLoinc: z.lazy(() => TestResultLoincUncheckedUpdateManyWithoutTestCatalogNestedInputSchema).optional()
}).strict();

export const LabOrderCreateWithoutPatientInputSchema: z.ZodType<Prisma.LabOrderCreateWithoutPatientInput> = z.object({
  Id: z.string().optional(),
  OrderNumber: z.string().optional().nullable(),
  AccessionNumber: z.string().optional().nullable(),
  PatientMRN: z.string().optional().nullable(),
  PatientMobile: z.string().optional().nullable(),
  PatientEmail: z.string().optional().nullable(),
  OrderDate: z.date().optional().nullable(),
  OrderNotes: z.string().optional().nullable(),
  CreatedAt: z.date().optional().nullable(),
  UpdatedAt: z.date().optional().nullable(),
  OrderingProvider: z.lazy(() => ProviderCreateNestedOneWithoutOrderingProviderLabOrderInputSchema).optional(),
  TreatingProvider: z.lazy(() => ProviderCreateNestedOneWithoutTreatingProviderLabOrderInputSchema).optional(),
  Organization: z.lazy(() => OrganizationCreateNestedOneWithoutLabOrderInputSchema).optional(),
  LabOrderAttachment: z.lazy(() => LabOrderAttachmentCreateNestedManyWithoutLabOrderInputSchema).optional(),
  LabOrderBilling: z.lazy(() => LabOrderBillingCreateNestedManyWithoutLabOrderInputSchema).optional(),
  LabOrderIcd: z.lazy(() => LabOrderIcdCreateNestedManyWithoutLabOrderInputSchema).optional(),
  LabOrderSpecimen: z.lazy(() => LabOrderSpecimenCreateNestedManyWithoutLabOrderInputSchema).optional(),
  LabOrderSponsoredTestConsent: z.lazy(() => LabOrderSponsoredTestConsentCreateNestedManyWithoutLabOrderInputSchema).optional(),
  LabOrderStatus: z.lazy(() => LabOrderStatusCreateNestedManyWithoutLabOrderInputSchema).optional(),
  LabOrderTest: z.lazy(() => LabOrderTestCreateNestedManyWithoutLabOrderInputSchema).optional()
}).strict();

export const LabOrderUncheckedCreateWithoutPatientInputSchema: z.ZodType<Prisma.LabOrderUncheckedCreateWithoutPatientInput> = z.object({
  Id: z.string().optional(),
  OrderNumber: z.string().optional().nullable(),
  AccessionNumber: z.string().optional().nullable(),
  OrderingProviderId: z.string().optional().nullable(),
  TreatingProviderId: z.string().optional().nullable(),
  PatientMRN: z.string().optional().nullable(),
  PatientMobile: z.string().optional().nullable(),
  PatientEmail: z.string().optional().nullable(),
  OrganizationId: z.string().optional().nullable(),
  OrderDate: z.date().optional().nullable(),
  OrderNotes: z.string().optional().nullable(),
  CreatedAt: z.date().optional().nullable(),
  UpdatedAt: z.date().optional().nullable(),
  LabOrderAttachment: z.lazy(() => LabOrderAttachmentUncheckedCreateNestedManyWithoutLabOrderInputSchema).optional(),
  LabOrderBilling: z.lazy(() => LabOrderBillingUncheckedCreateNestedManyWithoutLabOrderInputSchema).optional(),
  LabOrderIcd: z.lazy(() => LabOrderIcdUncheckedCreateNestedManyWithoutLabOrderInputSchema).optional(),
  LabOrderSpecimen: z.lazy(() => LabOrderSpecimenUncheckedCreateNestedManyWithoutLabOrderInputSchema).optional(),
  LabOrderSponsoredTestConsent: z.lazy(() => LabOrderSponsoredTestConsentUncheckedCreateNestedManyWithoutLabOrderInputSchema).optional(),
  LabOrderStatus: z.lazy(() => LabOrderStatusUncheckedCreateNestedManyWithoutLabOrderInputSchema).optional(),
  LabOrderTest: z.lazy(() => LabOrderTestUncheckedCreateNestedManyWithoutLabOrderInputSchema).optional()
}).strict();

export const LabOrderCreateOrConnectWithoutPatientInputSchema: z.ZodType<Prisma.LabOrderCreateOrConnectWithoutPatientInput> = z.object({
  where: z.lazy(() => LabOrderWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => LabOrderCreateWithoutPatientInputSchema),z.lazy(() => LabOrderUncheckedCreateWithoutPatientInputSchema) ]),
}).strict();

export const LabOrderCreateManyPatientInputEnvelopeSchema: z.ZodType<Prisma.LabOrderCreateManyPatientInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => LabOrderCreateManyPatientInputSchema),z.lazy(() => LabOrderCreateManyPatientInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const PatientOrganizationCreateWithoutPatientInputSchema: z.ZodType<Prisma.PatientOrganizationCreateWithoutPatientInput> = z.object({
  Id: z.string().optional(),
  MRN: z.string().optional().nullable(),
  Mobile: z.string().optional().nullable(),
  Email: z.string().optional().nullable(),
  Organization: z.lazy(() => OrganizationCreateNestedOneWithoutPatientOrganizationInputSchema)
}).strict();

export const PatientOrganizationUncheckedCreateWithoutPatientInputSchema: z.ZodType<Prisma.PatientOrganizationUncheckedCreateWithoutPatientInput> = z.object({
  Id: z.string().optional(),
  OrganizationId: z.string(),
  MRN: z.string().optional().nullable(),
  Mobile: z.string().optional().nullable(),
  Email: z.string().optional().nullable()
}).strict();

export const PatientOrganizationCreateOrConnectWithoutPatientInputSchema: z.ZodType<Prisma.PatientOrganizationCreateOrConnectWithoutPatientInput> = z.object({
  where: z.lazy(() => PatientOrganizationWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => PatientOrganizationCreateWithoutPatientInputSchema),z.lazy(() => PatientOrganizationUncheckedCreateWithoutPatientInputSchema) ]),
}).strict();

export const PatientOrganizationCreateManyPatientInputEnvelopeSchema: z.ZodType<Prisma.PatientOrganizationCreateManyPatientInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => PatientOrganizationCreateManyPatientInputSchema),z.lazy(() => PatientOrganizationCreateManyPatientInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const LabOrderUpsertWithWhereUniqueWithoutPatientInputSchema: z.ZodType<Prisma.LabOrderUpsertWithWhereUniqueWithoutPatientInput> = z.object({
  where: z.lazy(() => LabOrderWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => LabOrderUpdateWithoutPatientInputSchema),z.lazy(() => LabOrderUncheckedUpdateWithoutPatientInputSchema) ]),
  create: z.union([ z.lazy(() => LabOrderCreateWithoutPatientInputSchema),z.lazy(() => LabOrderUncheckedCreateWithoutPatientInputSchema) ]),
}).strict();

export const LabOrderUpdateWithWhereUniqueWithoutPatientInputSchema: z.ZodType<Prisma.LabOrderUpdateWithWhereUniqueWithoutPatientInput> = z.object({
  where: z.lazy(() => LabOrderWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => LabOrderUpdateWithoutPatientInputSchema),z.lazy(() => LabOrderUncheckedUpdateWithoutPatientInputSchema) ]),
}).strict();

export const LabOrderUpdateManyWithWhereWithoutPatientInputSchema: z.ZodType<Prisma.LabOrderUpdateManyWithWhereWithoutPatientInput> = z.object({
  where: z.lazy(() => LabOrderScalarWhereInputSchema),
  data: z.union([ z.lazy(() => LabOrderUpdateManyMutationInputSchema),z.lazy(() => LabOrderUncheckedUpdateManyWithoutPatientInputSchema) ]),
}).strict();

export const PatientOrganizationUpsertWithWhereUniqueWithoutPatientInputSchema: z.ZodType<Prisma.PatientOrganizationUpsertWithWhereUniqueWithoutPatientInput> = z.object({
  where: z.lazy(() => PatientOrganizationWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => PatientOrganizationUpdateWithoutPatientInputSchema),z.lazy(() => PatientOrganizationUncheckedUpdateWithoutPatientInputSchema) ]),
  create: z.union([ z.lazy(() => PatientOrganizationCreateWithoutPatientInputSchema),z.lazy(() => PatientOrganizationUncheckedCreateWithoutPatientInputSchema) ]),
}).strict();

export const PatientOrganizationUpdateWithWhereUniqueWithoutPatientInputSchema: z.ZodType<Prisma.PatientOrganizationUpdateWithWhereUniqueWithoutPatientInput> = z.object({
  where: z.lazy(() => PatientOrganizationWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => PatientOrganizationUpdateWithoutPatientInputSchema),z.lazy(() => PatientOrganizationUncheckedUpdateWithoutPatientInputSchema) ]),
}).strict();

export const PatientOrganizationUpdateManyWithWhereWithoutPatientInputSchema: z.ZodType<Prisma.PatientOrganizationUpdateManyWithWhereWithoutPatientInput> = z.object({
  where: z.lazy(() => PatientOrganizationScalarWhereInputSchema),
  data: z.union([ z.lazy(() => PatientOrganizationUpdateManyMutationInputSchema),z.lazy(() => PatientOrganizationUncheckedUpdateManyWithoutPatientInputSchema) ]),
}).strict();

export const OrganizationCreateWithoutPatientOrganizationInputSchema: z.ZodType<Prisma.OrganizationCreateWithoutPatientOrganizationInput> = z.object({
  Id: z.string(),
  href: z.string().optional().nullable(),
  Level: z.number().optional().nullable(),
  ParentOrgName: z.string().optional().nullable(),
  OrgName: z.string().optional().nullable(),
  OrgType: z.string().optional().nullable(),
  OrgSpecialty: z.string().optional().nullable(),
  OrgAddress: z.string().optional().nullable(),
  OrgCity: z.string().optional().nullable(),
  OrgState: z.string().optional().nullable(),
  OrgZip: z.string().optional().nullable(),
  LabOrder: z.lazy(() => LabOrderCreateNestedManyWithoutOrganizationInputSchema).optional(),
  Organization: z.lazy(() => OrganizationCreateNestedOneWithoutChildOrganizationInputSchema).optional(),
  ChildOrganization: z.lazy(() => OrganizationCreateNestedManyWithoutOrganizationInputSchema).optional(),
  OrganizationFavoriteTest: z.lazy(() => OrganizationFavoriteTestCreateNestedManyWithoutOrganizationInputSchema).optional(),
  ProviderOrganization: z.lazy(() => ProviderOrganizationCreateNestedManyWithoutOrganizationInputSchema).optional()
}).strict();

export const OrganizationUncheckedCreateWithoutPatientOrganizationInputSchema: z.ZodType<Prisma.OrganizationUncheckedCreateWithoutPatientOrganizationInput> = z.object({
  Id: z.string(),
  href: z.string().optional().nullable(),
  ParentId: z.string().optional().nullable(),
  Level: z.number().optional().nullable(),
  ParentOrgName: z.string().optional().nullable(),
  OrgName: z.string().optional().nullable(),
  OrgType: z.string().optional().nullable(),
  OrgSpecialty: z.string().optional().nullable(),
  OrgAddress: z.string().optional().nullable(),
  OrgCity: z.string().optional().nullable(),
  OrgState: z.string().optional().nullable(),
  OrgZip: z.string().optional().nullable(),
  LabOrder: z.lazy(() => LabOrderUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  ChildOrganization: z.lazy(() => OrganizationUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  OrganizationFavoriteTest: z.lazy(() => OrganizationFavoriteTestUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  ProviderOrganization: z.lazy(() => ProviderOrganizationUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional()
}).strict();

export const OrganizationCreateOrConnectWithoutPatientOrganizationInputSchema: z.ZodType<Prisma.OrganizationCreateOrConnectWithoutPatientOrganizationInput> = z.object({
  where: z.lazy(() => OrganizationWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => OrganizationCreateWithoutPatientOrganizationInputSchema),z.lazy(() => OrganizationUncheckedCreateWithoutPatientOrganizationInputSchema) ]),
}).strict();

export const PatientCreateWithoutPatientOrganizationInputSchema: z.ZodType<Prisma.PatientCreateWithoutPatientOrganizationInput> = z.object({
  Id: z.string().optional(),
  FirstName: z.string().optional().nullable(),
  LastName: z.string().optional().nullable(),
  DateOfBirth: z.date().optional().nullable(),
  Gender: z.string().optional().nullable(),
  Email: z.string().optional().nullable(),
  Mobile: z.string().optional().nullable(),
  CreatedAt: z.date().optional().nullable(),
  UpdatedAt: z.date().optional().nullable(),
  LabOrder: z.lazy(() => LabOrderCreateNestedManyWithoutPatientInputSchema).optional()
}).strict();

export const PatientUncheckedCreateWithoutPatientOrganizationInputSchema: z.ZodType<Prisma.PatientUncheckedCreateWithoutPatientOrganizationInput> = z.object({
  Id: z.string().optional(),
  FirstName: z.string().optional().nullable(),
  LastName: z.string().optional().nullable(),
  DateOfBirth: z.date().optional().nullable(),
  Gender: z.string().optional().nullable(),
  Email: z.string().optional().nullable(),
  Mobile: z.string().optional().nullable(),
  CreatedAt: z.date().optional().nullable(),
  UpdatedAt: z.date().optional().nullable(),
  LabOrder: z.lazy(() => LabOrderUncheckedCreateNestedManyWithoutPatientInputSchema).optional()
}).strict();

export const PatientCreateOrConnectWithoutPatientOrganizationInputSchema: z.ZodType<Prisma.PatientCreateOrConnectWithoutPatientOrganizationInput> = z.object({
  where: z.lazy(() => PatientWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => PatientCreateWithoutPatientOrganizationInputSchema),z.lazy(() => PatientUncheckedCreateWithoutPatientOrganizationInputSchema) ]),
}).strict();

export const OrganizationUpsertWithoutPatientOrganizationInputSchema: z.ZodType<Prisma.OrganizationUpsertWithoutPatientOrganizationInput> = z.object({
  update: z.union([ z.lazy(() => OrganizationUpdateWithoutPatientOrganizationInputSchema),z.lazy(() => OrganizationUncheckedUpdateWithoutPatientOrganizationInputSchema) ]),
  create: z.union([ z.lazy(() => OrganizationCreateWithoutPatientOrganizationInputSchema),z.lazy(() => OrganizationUncheckedCreateWithoutPatientOrganizationInputSchema) ]),
  where: z.lazy(() => OrganizationWhereInputSchema).optional()
}).strict();

export const OrganizationUpdateToOneWithWhereWithoutPatientOrganizationInputSchema: z.ZodType<Prisma.OrganizationUpdateToOneWithWhereWithoutPatientOrganizationInput> = z.object({
  where: z.lazy(() => OrganizationWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => OrganizationUpdateWithoutPatientOrganizationInputSchema),z.lazy(() => OrganizationUncheckedUpdateWithoutPatientOrganizationInputSchema) ]),
}).strict();

export const OrganizationUpdateWithoutPatientOrganizationInputSchema: z.ZodType<Prisma.OrganizationUpdateWithoutPatientOrganizationInput> = z.object({
  Id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  href: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Level: z.union([ z.number(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  ParentOrgName: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  OrgName: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  OrgType: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  OrgSpecialty: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  OrgAddress: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  OrgCity: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  OrgState: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  OrgZip: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  LabOrder: z.lazy(() => LabOrderUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  Organization: z.lazy(() => OrganizationUpdateOneWithoutChildOrganizationNestedInputSchema).optional(),
  ChildOrganization: z.lazy(() => OrganizationUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  OrganizationFavoriteTest: z.lazy(() => OrganizationFavoriteTestUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  ProviderOrganization: z.lazy(() => ProviderOrganizationUpdateManyWithoutOrganizationNestedInputSchema).optional()
}).strict();

export const OrganizationUncheckedUpdateWithoutPatientOrganizationInputSchema: z.ZodType<Prisma.OrganizationUncheckedUpdateWithoutPatientOrganizationInput> = z.object({
  Id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  href: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  ParentId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Level: z.union([ z.number(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  ParentOrgName: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  OrgName: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  OrgType: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  OrgSpecialty: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  OrgAddress: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  OrgCity: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  OrgState: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  OrgZip: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  LabOrder: z.lazy(() => LabOrderUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  ChildOrganization: z.lazy(() => OrganizationUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  OrganizationFavoriteTest: z.lazy(() => OrganizationFavoriteTestUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  ProviderOrganization: z.lazy(() => ProviderOrganizationUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional()
}).strict();

export const PatientUpsertWithoutPatientOrganizationInputSchema: z.ZodType<Prisma.PatientUpsertWithoutPatientOrganizationInput> = z.object({
  update: z.union([ z.lazy(() => PatientUpdateWithoutPatientOrganizationInputSchema),z.lazy(() => PatientUncheckedUpdateWithoutPatientOrganizationInputSchema) ]),
  create: z.union([ z.lazy(() => PatientCreateWithoutPatientOrganizationInputSchema),z.lazy(() => PatientUncheckedCreateWithoutPatientOrganizationInputSchema) ]),
  where: z.lazy(() => PatientWhereInputSchema).optional()
}).strict();

export const PatientUpdateToOneWithWhereWithoutPatientOrganizationInputSchema: z.ZodType<Prisma.PatientUpdateToOneWithWhereWithoutPatientOrganizationInput> = z.object({
  where: z.lazy(() => PatientWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => PatientUpdateWithoutPatientOrganizationInputSchema),z.lazy(() => PatientUncheckedUpdateWithoutPatientOrganizationInputSchema) ]),
}).strict();

export const PatientUpdateWithoutPatientOrganizationInputSchema: z.ZodType<Prisma.PatientUpdateWithoutPatientOrganizationInput> = z.object({
  Id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  FirstName: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  LastName: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  DateOfBirth: z.union([ z.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Gender: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Email: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Mobile: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  CreatedAt: z.union([ z.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  UpdatedAt: z.union([ z.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  LabOrder: z.lazy(() => LabOrderUpdateManyWithoutPatientNestedInputSchema).optional()
}).strict();

export const PatientUncheckedUpdateWithoutPatientOrganizationInputSchema: z.ZodType<Prisma.PatientUncheckedUpdateWithoutPatientOrganizationInput> = z.object({
  Id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  FirstName: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  LastName: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  DateOfBirth: z.union([ z.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Gender: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Email: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Mobile: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  CreatedAt: z.union([ z.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  UpdatedAt: z.union([ z.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  LabOrder: z.lazy(() => LabOrderUncheckedUpdateManyWithoutPatientNestedInputSchema).optional()
}).strict();

export const LabOrderCreateWithoutOrderingProviderInputSchema: z.ZodType<Prisma.LabOrderCreateWithoutOrderingProviderInput> = z.object({
  Id: z.string().optional(),
  OrderNumber: z.string().optional().nullable(),
  AccessionNumber: z.string().optional().nullable(),
  PatientMRN: z.string().optional().nullable(),
  PatientMobile: z.string().optional().nullable(),
  PatientEmail: z.string().optional().nullable(),
  OrderDate: z.date().optional().nullable(),
  OrderNotes: z.string().optional().nullable(),
  CreatedAt: z.date().optional().nullable(),
  UpdatedAt: z.date().optional().nullable(),
  TreatingProvider: z.lazy(() => ProviderCreateNestedOneWithoutTreatingProviderLabOrderInputSchema).optional(),
  Patient: z.lazy(() => PatientCreateNestedOneWithoutLabOrderInputSchema).optional(),
  Organization: z.lazy(() => OrganizationCreateNestedOneWithoutLabOrderInputSchema).optional(),
  LabOrderAttachment: z.lazy(() => LabOrderAttachmentCreateNestedManyWithoutLabOrderInputSchema).optional(),
  LabOrderBilling: z.lazy(() => LabOrderBillingCreateNestedManyWithoutLabOrderInputSchema).optional(),
  LabOrderIcd: z.lazy(() => LabOrderIcdCreateNestedManyWithoutLabOrderInputSchema).optional(),
  LabOrderSpecimen: z.lazy(() => LabOrderSpecimenCreateNestedManyWithoutLabOrderInputSchema).optional(),
  LabOrderSponsoredTestConsent: z.lazy(() => LabOrderSponsoredTestConsentCreateNestedManyWithoutLabOrderInputSchema).optional(),
  LabOrderStatus: z.lazy(() => LabOrderStatusCreateNestedManyWithoutLabOrderInputSchema).optional(),
  LabOrderTest: z.lazy(() => LabOrderTestCreateNestedManyWithoutLabOrderInputSchema).optional()
}).strict();

export const LabOrderUncheckedCreateWithoutOrderingProviderInputSchema: z.ZodType<Prisma.LabOrderUncheckedCreateWithoutOrderingProviderInput> = z.object({
  Id: z.string().optional(),
  OrderNumber: z.string().optional().nullable(),
  AccessionNumber: z.string().optional().nullable(),
  TreatingProviderId: z.string().optional().nullable(),
  PatientId: z.string().optional().nullable(),
  PatientMRN: z.string().optional().nullable(),
  PatientMobile: z.string().optional().nullable(),
  PatientEmail: z.string().optional().nullable(),
  OrganizationId: z.string().optional().nullable(),
  OrderDate: z.date().optional().nullable(),
  OrderNotes: z.string().optional().nullable(),
  CreatedAt: z.date().optional().nullable(),
  UpdatedAt: z.date().optional().nullable(),
  LabOrderAttachment: z.lazy(() => LabOrderAttachmentUncheckedCreateNestedManyWithoutLabOrderInputSchema).optional(),
  LabOrderBilling: z.lazy(() => LabOrderBillingUncheckedCreateNestedManyWithoutLabOrderInputSchema).optional(),
  LabOrderIcd: z.lazy(() => LabOrderIcdUncheckedCreateNestedManyWithoutLabOrderInputSchema).optional(),
  LabOrderSpecimen: z.lazy(() => LabOrderSpecimenUncheckedCreateNestedManyWithoutLabOrderInputSchema).optional(),
  LabOrderSponsoredTestConsent: z.lazy(() => LabOrderSponsoredTestConsentUncheckedCreateNestedManyWithoutLabOrderInputSchema).optional(),
  LabOrderStatus: z.lazy(() => LabOrderStatusUncheckedCreateNestedManyWithoutLabOrderInputSchema).optional(),
  LabOrderTest: z.lazy(() => LabOrderTestUncheckedCreateNestedManyWithoutLabOrderInputSchema).optional()
}).strict();

export const LabOrderCreateOrConnectWithoutOrderingProviderInputSchema: z.ZodType<Prisma.LabOrderCreateOrConnectWithoutOrderingProviderInput> = z.object({
  where: z.lazy(() => LabOrderWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => LabOrderCreateWithoutOrderingProviderInputSchema),z.lazy(() => LabOrderUncheckedCreateWithoutOrderingProviderInputSchema) ]),
}).strict();

export const LabOrderCreateManyOrderingProviderInputEnvelopeSchema: z.ZodType<Prisma.LabOrderCreateManyOrderingProviderInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => LabOrderCreateManyOrderingProviderInputSchema),z.lazy(() => LabOrderCreateManyOrderingProviderInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const LabOrderCreateWithoutTreatingProviderInputSchema: z.ZodType<Prisma.LabOrderCreateWithoutTreatingProviderInput> = z.object({
  Id: z.string().optional(),
  OrderNumber: z.string().optional().nullable(),
  AccessionNumber: z.string().optional().nullable(),
  PatientMRN: z.string().optional().nullable(),
  PatientMobile: z.string().optional().nullable(),
  PatientEmail: z.string().optional().nullable(),
  OrderDate: z.date().optional().nullable(),
  OrderNotes: z.string().optional().nullable(),
  CreatedAt: z.date().optional().nullable(),
  UpdatedAt: z.date().optional().nullable(),
  OrderingProvider: z.lazy(() => ProviderCreateNestedOneWithoutOrderingProviderLabOrderInputSchema).optional(),
  Patient: z.lazy(() => PatientCreateNestedOneWithoutLabOrderInputSchema).optional(),
  Organization: z.lazy(() => OrganizationCreateNestedOneWithoutLabOrderInputSchema).optional(),
  LabOrderAttachment: z.lazy(() => LabOrderAttachmentCreateNestedManyWithoutLabOrderInputSchema).optional(),
  LabOrderBilling: z.lazy(() => LabOrderBillingCreateNestedManyWithoutLabOrderInputSchema).optional(),
  LabOrderIcd: z.lazy(() => LabOrderIcdCreateNestedManyWithoutLabOrderInputSchema).optional(),
  LabOrderSpecimen: z.lazy(() => LabOrderSpecimenCreateNestedManyWithoutLabOrderInputSchema).optional(),
  LabOrderSponsoredTestConsent: z.lazy(() => LabOrderSponsoredTestConsentCreateNestedManyWithoutLabOrderInputSchema).optional(),
  LabOrderStatus: z.lazy(() => LabOrderStatusCreateNestedManyWithoutLabOrderInputSchema).optional(),
  LabOrderTest: z.lazy(() => LabOrderTestCreateNestedManyWithoutLabOrderInputSchema).optional()
}).strict();

export const LabOrderUncheckedCreateWithoutTreatingProviderInputSchema: z.ZodType<Prisma.LabOrderUncheckedCreateWithoutTreatingProviderInput> = z.object({
  Id: z.string().optional(),
  OrderNumber: z.string().optional().nullable(),
  AccessionNumber: z.string().optional().nullable(),
  OrderingProviderId: z.string().optional().nullable(),
  PatientId: z.string().optional().nullable(),
  PatientMRN: z.string().optional().nullable(),
  PatientMobile: z.string().optional().nullable(),
  PatientEmail: z.string().optional().nullable(),
  OrganizationId: z.string().optional().nullable(),
  OrderDate: z.date().optional().nullable(),
  OrderNotes: z.string().optional().nullable(),
  CreatedAt: z.date().optional().nullable(),
  UpdatedAt: z.date().optional().nullable(),
  LabOrderAttachment: z.lazy(() => LabOrderAttachmentUncheckedCreateNestedManyWithoutLabOrderInputSchema).optional(),
  LabOrderBilling: z.lazy(() => LabOrderBillingUncheckedCreateNestedManyWithoutLabOrderInputSchema).optional(),
  LabOrderIcd: z.lazy(() => LabOrderIcdUncheckedCreateNestedManyWithoutLabOrderInputSchema).optional(),
  LabOrderSpecimen: z.lazy(() => LabOrderSpecimenUncheckedCreateNestedManyWithoutLabOrderInputSchema).optional(),
  LabOrderSponsoredTestConsent: z.lazy(() => LabOrderSponsoredTestConsentUncheckedCreateNestedManyWithoutLabOrderInputSchema).optional(),
  LabOrderStatus: z.lazy(() => LabOrderStatusUncheckedCreateNestedManyWithoutLabOrderInputSchema).optional(),
  LabOrderTest: z.lazy(() => LabOrderTestUncheckedCreateNestedManyWithoutLabOrderInputSchema).optional()
}).strict();

export const LabOrderCreateOrConnectWithoutTreatingProviderInputSchema: z.ZodType<Prisma.LabOrderCreateOrConnectWithoutTreatingProviderInput> = z.object({
  where: z.lazy(() => LabOrderWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => LabOrderCreateWithoutTreatingProviderInputSchema),z.lazy(() => LabOrderUncheckedCreateWithoutTreatingProviderInputSchema) ]),
}).strict();

export const LabOrderCreateManyTreatingProviderInputEnvelopeSchema: z.ZodType<Prisma.LabOrderCreateManyTreatingProviderInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => LabOrderCreateManyTreatingProviderInputSchema),z.lazy(() => LabOrderCreateManyTreatingProviderInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const UserAttributeCreateWithoutProviderInputSchema: z.ZodType<Prisma.UserAttributeCreateWithoutProviderInput> = z.object({
  Id: z.string().optional(),
  UserType: z.lazy(() => UserAttribute_UserTypeSchema).optional().nullable(),
  Admin: z.lazy(() => AdminCreateNestedOneWithoutUserAttributeInputSchema).optional(),
  User: z.lazy(() => UserCreateNestedOneWithoutUserAttributeInputSchema)
}).strict();

export const UserAttributeUncheckedCreateWithoutProviderInputSchema: z.ZodType<Prisma.UserAttributeUncheckedCreateWithoutProviderInput> = z.object({
  Id: z.string().optional(),
  UserId: z.string(),
  UserType: z.lazy(() => UserAttribute_UserTypeSchema).optional().nullable(),
  Admin: z.lazy(() => AdminUncheckedCreateNestedOneWithoutUserAttributeInputSchema).optional()
}).strict();

export const UserAttributeCreateOrConnectWithoutProviderInputSchema: z.ZodType<Prisma.UserAttributeCreateOrConnectWithoutProviderInput> = z.object({
  where: z.lazy(() => UserAttributeWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => UserAttributeCreateWithoutProviderInputSchema),z.lazy(() => UserAttributeUncheckedCreateWithoutProviderInputSchema) ]),
}).strict();

export const ProviderEducationCreateWithoutProviderInputSchema: z.ZodType<Prisma.ProviderEducationCreateWithoutProviderInput> = z.object({
  Id: z.string().optional(),
  ProviderNPI: z.string().optional().nullable(),
  Name: z.string().optional().nullable(),
  EducationType: z.string().optional().nullable(),
  SchoolName: z.string().optional().nullable(),
  AreaOfEducation: z.string().optional().nullable()
}).strict();

export const ProviderEducationUncheckedCreateWithoutProviderInputSchema: z.ZodType<Prisma.ProviderEducationUncheckedCreateWithoutProviderInput> = z.object({
  Id: z.string().optional(),
  ProviderNPI: z.string().optional().nullable(),
  Name: z.string().optional().nullable(),
  EducationType: z.string().optional().nullable(),
  SchoolName: z.string().optional().nullable(),
  AreaOfEducation: z.string().optional().nullable()
}).strict();

export const ProviderEducationCreateOrConnectWithoutProviderInputSchema: z.ZodType<Prisma.ProviderEducationCreateOrConnectWithoutProviderInput> = z.object({
  where: z.lazy(() => ProviderEducationWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => ProviderEducationCreateWithoutProviderInputSchema),z.lazy(() => ProviderEducationUncheckedCreateWithoutProviderInputSchema) ]),
}).strict();

export const ProviderEducationCreateManyProviderInputEnvelopeSchema: z.ZodType<Prisma.ProviderEducationCreateManyProviderInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => ProviderEducationCreateManyProviderInputSchema),z.lazy(() => ProviderEducationCreateManyProviderInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const ProviderFavoriteTestCreateWithoutProviderInputSchema: z.ZodType<Prisma.ProviderFavoriteTestCreateWithoutProviderInput> = z.object({
  Id: z.string().optional(),
  ParentId: z.string().optional().nullable(),
  ParentName: z.string().optional().nullable(),
  Level: z.number().optional().nullable(),
  CreatedAt: z.date().optional().nullable(),
  UpdatedAt: z.date().optional().nullable(),
  TestCatalog: z.lazy(() => TestCatalogCreateNestedOneWithoutProviderFavoriteTestInputSchema).optional()
}).strict();

export const ProviderFavoriteTestUncheckedCreateWithoutProviderInputSchema: z.ZodType<Prisma.ProviderFavoriteTestUncheckedCreateWithoutProviderInput> = z.object({
  Id: z.string().optional(),
  ParentId: z.string().optional().nullable(),
  ParentName: z.string().optional().nullable(),
  Level: z.number().optional().nullable(),
  TestId: z.number().optional().nullable(),
  CreatedAt: z.date().optional().nullable(),
  UpdatedAt: z.date().optional().nullable()
}).strict();

export const ProviderFavoriteTestCreateOrConnectWithoutProviderInputSchema: z.ZodType<Prisma.ProviderFavoriteTestCreateOrConnectWithoutProviderInput> = z.object({
  where: z.lazy(() => ProviderFavoriteTestWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => ProviderFavoriteTestCreateWithoutProviderInputSchema),z.lazy(() => ProviderFavoriteTestUncheckedCreateWithoutProviderInputSchema) ]),
}).strict();

export const ProviderFavoriteTestCreateManyProviderInputEnvelopeSchema: z.ZodType<Prisma.ProviderFavoriteTestCreateManyProviderInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => ProviderFavoriteTestCreateManyProviderInputSchema),z.lazy(() => ProviderFavoriteTestCreateManyProviderInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const ProviderOrganizationCreateWithoutProviderInputSchema: z.ZodType<Prisma.ProviderOrganizationCreateWithoutProviderInput> = z.object({
  Id: z.string().optional(),
  ProviderNPI: z.string().optional().nullable(),
  Name: z.string().optional().nullable(),
  ParentOrgName: z.string().optional().nullable(),
  OrgName: z.string().optional().nullable(),
  OrgAddress: z.string().optional().nullable(),
  OrgCity: z.string().optional().nullable(),
  OrgState: z.string().optional().nullable(),
  OrgZip: z.string().optional().nullable(),
  Organization: z.lazy(() => OrganizationCreateNestedOneWithoutProviderOrganizationInputSchema)
}).strict();

export const ProviderOrganizationUncheckedCreateWithoutProviderInputSchema: z.ZodType<Prisma.ProviderOrganizationUncheckedCreateWithoutProviderInput> = z.object({
  Id: z.string().optional(),
  OrganizationId: z.string(),
  ProviderNPI: z.string().optional().nullable(),
  Name: z.string().optional().nullable(),
  ParentOrgName: z.string().optional().nullable(),
  OrgName: z.string().optional().nullable(),
  OrgAddress: z.string().optional().nullable(),
  OrgCity: z.string().optional().nullable(),
  OrgState: z.string().optional().nullable(),
  OrgZip: z.string().optional().nullable()
}).strict();

export const ProviderOrganizationCreateOrConnectWithoutProviderInputSchema: z.ZodType<Prisma.ProviderOrganizationCreateOrConnectWithoutProviderInput> = z.object({
  where: z.lazy(() => ProviderOrganizationWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => ProviderOrganizationCreateWithoutProviderInputSchema),z.lazy(() => ProviderOrganizationUncheckedCreateWithoutProviderInputSchema) ]),
}).strict();

export const ProviderOrganizationCreateManyProviderInputEnvelopeSchema: z.ZodType<Prisma.ProviderOrganizationCreateManyProviderInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => ProviderOrganizationCreateManyProviderInputSchema),z.lazy(() => ProviderOrganizationCreateManyProviderInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const LabOrderUpsertWithWhereUniqueWithoutOrderingProviderInputSchema: z.ZodType<Prisma.LabOrderUpsertWithWhereUniqueWithoutOrderingProviderInput> = z.object({
  where: z.lazy(() => LabOrderWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => LabOrderUpdateWithoutOrderingProviderInputSchema),z.lazy(() => LabOrderUncheckedUpdateWithoutOrderingProviderInputSchema) ]),
  create: z.union([ z.lazy(() => LabOrderCreateWithoutOrderingProviderInputSchema),z.lazy(() => LabOrderUncheckedCreateWithoutOrderingProviderInputSchema) ]),
}).strict();

export const LabOrderUpdateWithWhereUniqueWithoutOrderingProviderInputSchema: z.ZodType<Prisma.LabOrderUpdateWithWhereUniqueWithoutOrderingProviderInput> = z.object({
  where: z.lazy(() => LabOrderWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => LabOrderUpdateWithoutOrderingProviderInputSchema),z.lazy(() => LabOrderUncheckedUpdateWithoutOrderingProviderInputSchema) ]),
}).strict();

export const LabOrderUpdateManyWithWhereWithoutOrderingProviderInputSchema: z.ZodType<Prisma.LabOrderUpdateManyWithWhereWithoutOrderingProviderInput> = z.object({
  where: z.lazy(() => LabOrderScalarWhereInputSchema),
  data: z.union([ z.lazy(() => LabOrderUpdateManyMutationInputSchema),z.lazy(() => LabOrderUncheckedUpdateManyWithoutOrderingProviderInputSchema) ]),
}).strict();

export const LabOrderUpsertWithWhereUniqueWithoutTreatingProviderInputSchema: z.ZodType<Prisma.LabOrderUpsertWithWhereUniqueWithoutTreatingProviderInput> = z.object({
  where: z.lazy(() => LabOrderWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => LabOrderUpdateWithoutTreatingProviderInputSchema),z.lazy(() => LabOrderUncheckedUpdateWithoutTreatingProviderInputSchema) ]),
  create: z.union([ z.lazy(() => LabOrderCreateWithoutTreatingProviderInputSchema),z.lazy(() => LabOrderUncheckedCreateWithoutTreatingProviderInputSchema) ]),
}).strict();

export const LabOrderUpdateWithWhereUniqueWithoutTreatingProviderInputSchema: z.ZodType<Prisma.LabOrderUpdateWithWhereUniqueWithoutTreatingProviderInput> = z.object({
  where: z.lazy(() => LabOrderWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => LabOrderUpdateWithoutTreatingProviderInputSchema),z.lazy(() => LabOrderUncheckedUpdateWithoutTreatingProviderInputSchema) ]),
}).strict();

export const LabOrderUpdateManyWithWhereWithoutTreatingProviderInputSchema: z.ZodType<Prisma.LabOrderUpdateManyWithWhereWithoutTreatingProviderInput> = z.object({
  where: z.lazy(() => LabOrderScalarWhereInputSchema),
  data: z.union([ z.lazy(() => LabOrderUpdateManyMutationInputSchema),z.lazy(() => LabOrderUncheckedUpdateManyWithoutTreatingProviderInputSchema) ]),
}).strict();

export const UserAttributeUpsertWithoutProviderInputSchema: z.ZodType<Prisma.UserAttributeUpsertWithoutProviderInput> = z.object({
  update: z.union([ z.lazy(() => UserAttributeUpdateWithoutProviderInputSchema),z.lazy(() => UserAttributeUncheckedUpdateWithoutProviderInputSchema) ]),
  create: z.union([ z.lazy(() => UserAttributeCreateWithoutProviderInputSchema),z.lazy(() => UserAttributeUncheckedCreateWithoutProviderInputSchema) ]),
  where: z.lazy(() => UserAttributeWhereInputSchema).optional()
}).strict();

export const UserAttributeUpdateToOneWithWhereWithoutProviderInputSchema: z.ZodType<Prisma.UserAttributeUpdateToOneWithWhereWithoutProviderInput> = z.object({
  where: z.lazy(() => UserAttributeWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => UserAttributeUpdateWithoutProviderInputSchema),z.lazy(() => UserAttributeUncheckedUpdateWithoutProviderInputSchema) ]),
}).strict();

export const UserAttributeUpdateWithoutProviderInputSchema: z.ZodType<Prisma.UserAttributeUpdateWithoutProviderInput> = z.object({
  Id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  UserType: z.union([ z.lazy(() => UserAttribute_UserTypeSchema),z.lazy(() => NullableEnumUserAttribute_UserTypeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Admin: z.lazy(() => AdminUpdateOneWithoutUserAttributeNestedInputSchema).optional(),
  User: z.lazy(() => UserUpdateOneRequiredWithoutUserAttributeNestedInputSchema).optional()
}).strict();

export const UserAttributeUncheckedUpdateWithoutProviderInputSchema: z.ZodType<Prisma.UserAttributeUncheckedUpdateWithoutProviderInput> = z.object({
  Id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  UserId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  UserType: z.union([ z.lazy(() => UserAttribute_UserTypeSchema),z.lazy(() => NullableEnumUserAttribute_UserTypeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Admin: z.lazy(() => AdminUncheckedUpdateOneWithoutUserAttributeNestedInputSchema).optional()
}).strict();

export const ProviderEducationUpsertWithWhereUniqueWithoutProviderInputSchema: z.ZodType<Prisma.ProviderEducationUpsertWithWhereUniqueWithoutProviderInput> = z.object({
  where: z.lazy(() => ProviderEducationWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => ProviderEducationUpdateWithoutProviderInputSchema),z.lazy(() => ProviderEducationUncheckedUpdateWithoutProviderInputSchema) ]),
  create: z.union([ z.lazy(() => ProviderEducationCreateWithoutProviderInputSchema),z.lazy(() => ProviderEducationUncheckedCreateWithoutProviderInputSchema) ]),
}).strict();

export const ProviderEducationUpdateWithWhereUniqueWithoutProviderInputSchema: z.ZodType<Prisma.ProviderEducationUpdateWithWhereUniqueWithoutProviderInput> = z.object({
  where: z.lazy(() => ProviderEducationWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => ProviderEducationUpdateWithoutProviderInputSchema),z.lazy(() => ProviderEducationUncheckedUpdateWithoutProviderInputSchema) ]),
}).strict();

export const ProviderEducationUpdateManyWithWhereWithoutProviderInputSchema: z.ZodType<Prisma.ProviderEducationUpdateManyWithWhereWithoutProviderInput> = z.object({
  where: z.lazy(() => ProviderEducationScalarWhereInputSchema),
  data: z.union([ z.lazy(() => ProviderEducationUpdateManyMutationInputSchema),z.lazy(() => ProviderEducationUncheckedUpdateManyWithoutProviderInputSchema) ]),
}).strict();

export const ProviderEducationScalarWhereInputSchema: z.ZodType<Prisma.ProviderEducationScalarWhereInput> = z.object({
  AND: z.union([ z.lazy(() => ProviderEducationScalarWhereInputSchema),z.lazy(() => ProviderEducationScalarWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => ProviderEducationScalarWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => ProviderEducationScalarWhereInputSchema),z.lazy(() => ProviderEducationScalarWhereInputSchema).array() ]).optional(),
  Id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  ProviderId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  ProviderNPI: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  Name: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  EducationType: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  SchoolName: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  AreaOfEducation: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
}).strict();

export const ProviderFavoriteTestUpsertWithWhereUniqueWithoutProviderInputSchema: z.ZodType<Prisma.ProviderFavoriteTestUpsertWithWhereUniqueWithoutProviderInput> = z.object({
  where: z.lazy(() => ProviderFavoriteTestWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => ProviderFavoriteTestUpdateWithoutProviderInputSchema),z.lazy(() => ProviderFavoriteTestUncheckedUpdateWithoutProviderInputSchema) ]),
  create: z.union([ z.lazy(() => ProviderFavoriteTestCreateWithoutProviderInputSchema),z.lazy(() => ProviderFavoriteTestUncheckedCreateWithoutProviderInputSchema) ]),
}).strict();

export const ProviderFavoriteTestUpdateWithWhereUniqueWithoutProviderInputSchema: z.ZodType<Prisma.ProviderFavoriteTestUpdateWithWhereUniqueWithoutProviderInput> = z.object({
  where: z.lazy(() => ProviderFavoriteTestWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => ProviderFavoriteTestUpdateWithoutProviderInputSchema),z.lazy(() => ProviderFavoriteTestUncheckedUpdateWithoutProviderInputSchema) ]),
}).strict();

export const ProviderFavoriteTestUpdateManyWithWhereWithoutProviderInputSchema: z.ZodType<Prisma.ProviderFavoriteTestUpdateManyWithWhereWithoutProviderInput> = z.object({
  where: z.lazy(() => ProviderFavoriteTestScalarWhereInputSchema),
  data: z.union([ z.lazy(() => ProviderFavoriteTestUpdateManyMutationInputSchema),z.lazy(() => ProviderFavoriteTestUncheckedUpdateManyWithoutProviderInputSchema) ]),
}).strict();

export const ProviderFavoriteTestScalarWhereInputSchema: z.ZodType<Prisma.ProviderFavoriteTestScalarWhereInput> = z.object({
  AND: z.union([ z.lazy(() => ProviderFavoriteTestScalarWhereInputSchema),z.lazy(() => ProviderFavoriteTestScalarWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => ProviderFavoriteTestScalarWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => ProviderFavoriteTestScalarWhereInputSchema),z.lazy(() => ProviderFavoriteTestScalarWhereInputSchema).array() ]).optional(),
  Id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  ProviderId: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  ParentId: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  ParentName: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  Level: z.union([ z.lazy(() => IntNullableFilterSchema),z.number() ]).optional().nullable(),
  TestId: z.union([ z.lazy(() => IntNullableFilterSchema),z.number() ]).optional().nullable(),
  CreatedAt: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.date() ]).optional().nullable(),
  UpdatedAt: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.date() ]).optional().nullable(),
}).strict();

export const ProviderOrganizationUpsertWithWhereUniqueWithoutProviderInputSchema: z.ZodType<Prisma.ProviderOrganizationUpsertWithWhereUniqueWithoutProviderInput> = z.object({
  where: z.lazy(() => ProviderOrganizationWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => ProviderOrganizationUpdateWithoutProviderInputSchema),z.lazy(() => ProviderOrganizationUncheckedUpdateWithoutProviderInputSchema) ]),
  create: z.union([ z.lazy(() => ProviderOrganizationCreateWithoutProviderInputSchema),z.lazy(() => ProviderOrganizationUncheckedCreateWithoutProviderInputSchema) ]),
}).strict();

export const ProviderOrganizationUpdateWithWhereUniqueWithoutProviderInputSchema: z.ZodType<Prisma.ProviderOrganizationUpdateWithWhereUniqueWithoutProviderInput> = z.object({
  where: z.lazy(() => ProviderOrganizationWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => ProviderOrganizationUpdateWithoutProviderInputSchema),z.lazy(() => ProviderOrganizationUncheckedUpdateWithoutProviderInputSchema) ]),
}).strict();

export const ProviderOrganizationUpdateManyWithWhereWithoutProviderInputSchema: z.ZodType<Prisma.ProviderOrganizationUpdateManyWithWhereWithoutProviderInput> = z.object({
  where: z.lazy(() => ProviderOrganizationScalarWhereInputSchema),
  data: z.union([ z.lazy(() => ProviderOrganizationUpdateManyMutationInputSchema),z.lazy(() => ProviderOrganizationUncheckedUpdateManyWithoutProviderInputSchema) ]),
}).strict();

export const ProviderCreateWithoutProviderEducationInputSchema: z.ZodType<Prisma.ProviderCreateWithoutProviderEducationInput> = z.object({
  Id: z.string().optional(),
  href: z.string().optional().nullable(),
  NPI: z.string().optional().nullable(),
  Name: z.string().optional().nullable(),
  Email: z.string().optional().nullable(),
  Credentials: z.string().optional().nullable(),
  Specialty: z.string().optional().nullable(),
  Aboutme: z.string().optional().nullable(),
  Gender: z.string().optional().nullable(),
  ProviderType: z.string().optional().nullable(),
  Affiliation: z.string().optional().nullable(),
  ProceduresAndResearch: z.string().optional().nullable(),
  SpecialInterests: z.string().optional().nullable(),
  OrderingProviderLabOrder: z.lazy(() => LabOrderCreateNestedManyWithoutOrderingProviderInputSchema).optional(),
  TreatingProviderLabOrder: z.lazy(() => LabOrderCreateNestedManyWithoutTreatingProviderInputSchema).optional(),
  UserAttribute: z.lazy(() => UserAttributeCreateNestedOneWithoutProviderInputSchema).optional(),
  ProviderFavoriteTest: z.lazy(() => ProviderFavoriteTestCreateNestedManyWithoutProviderInputSchema).optional(),
  ProviderOrganization: z.lazy(() => ProviderOrganizationCreateNestedManyWithoutProviderInputSchema).optional()
}).strict();

export const ProviderUncheckedCreateWithoutProviderEducationInputSchema: z.ZodType<Prisma.ProviderUncheckedCreateWithoutProviderEducationInput> = z.object({
  Id: z.string().optional(),
  href: z.string().optional().nullable(),
  NPI: z.string().optional().nullable(),
  Name: z.string().optional().nullable(),
  Email: z.string().optional().nullable(),
  Credentials: z.string().optional().nullable(),
  Specialty: z.string().optional().nullable(),
  Aboutme: z.string().optional().nullable(),
  Gender: z.string().optional().nullable(),
  ProviderType: z.string().optional().nullable(),
  Affiliation: z.string().optional().nullable(),
  ProceduresAndResearch: z.string().optional().nullable(),
  SpecialInterests: z.string().optional().nullable(),
  UserAttributeId: z.string().optional().nullable(),
  OrderingProviderLabOrder: z.lazy(() => LabOrderUncheckedCreateNestedManyWithoutOrderingProviderInputSchema).optional(),
  TreatingProviderLabOrder: z.lazy(() => LabOrderUncheckedCreateNestedManyWithoutTreatingProviderInputSchema).optional(),
  ProviderFavoriteTest: z.lazy(() => ProviderFavoriteTestUncheckedCreateNestedManyWithoutProviderInputSchema).optional(),
  ProviderOrganization: z.lazy(() => ProviderOrganizationUncheckedCreateNestedManyWithoutProviderInputSchema).optional()
}).strict();

export const ProviderCreateOrConnectWithoutProviderEducationInputSchema: z.ZodType<Prisma.ProviderCreateOrConnectWithoutProviderEducationInput> = z.object({
  where: z.lazy(() => ProviderWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => ProviderCreateWithoutProviderEducationInputSchema),z.lazy(() => ProviderUncheckedCreateWithoutProviderEducationInputSchema) ]),
}).strict();

export const ProviderUpsertWithoutProviderEducationInputSchema: z.ZodType<Prisma.ProviderUpsertWithoutProviderEducationInput> = z.object({
  update: z.union([ z.lazy(() => ProviderUpdateWithoutProviderEducationInputSchema),z.lazy(() => ProviderUncheckedUpdateWithoutProviderEducationInputSchema) ]),
  create: z.union([ z.lazy(() => ProviderCreateWithoutProviderEducationInputSchema),z.lazy(() => ProviderUncheckedCreateWithoutProviderEducationInputSchema) ]),
  where: z.lazy(() => ProviderWhereInputSchema).optional()
}).strict();

export const ProviderUpdateToOneWithWhereWithoutProviderEducationInputSchema: z.ZodType<Prisma.ProviderUpdateToOneWithWhereWithoutProviderEducationInput> = z.object({
  where: z.lazy(() => ProviderWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => ProviderUpdateWithoutProviderEducationInputSchema),z.lazy(() => ProviderUncheckedUpdateWithoutProviderEducationInputSchema) ]),
}).strict();

export const ProviderUpdateWithoutProviderEducationInputSchema: z.ZodType<Prisma.ProviderUpdateWithoutProviderEducationInput> = z.object({
  Id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  href: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  NPI: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Email: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Credentials: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Specialty: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Aboutme: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Gender: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  ProviderType: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Affiliation: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  ProceduresAndResearch: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  SpecialInterests: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  OrderingProviderLabOrder: z.lazy(() => LabOrderUpdateManyWithoutOrderingProviderNestedInputSchema).optional(),
  TreatingProviderLabOrder: z.lazy(() => LabOrderUpdateManyWithoutTreatingProviderNestedInputSchema).optional(),
  UserAttribute: z.lazy(() => UserAttributeUpdateOneWithoutProviderNestedInputSchema).optional(),
  ProviderFavoriteTest: z.lazy(() => ProviderFavoriteTestUpdateManyWithoutProviderNestedInputSchema).optional(),
  ProviderOrganization: z.lazy(() => ProviderOrganizationUpdateManyWithoutProviderNestedInputSchema).optional()
}).strict();

export const ProviderUncheckedUpdateWithoutProviderEducationInputSchema: z.ZodType<Prisma.ProviderUncheckedUpdateWithoutProviderEducationInput> = z.object({
  Id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  href: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  NPI: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Email: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Credentials: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Specialty: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Aboutme: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Gender: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  ProviderType: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Affiliation: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  ProceduresAndResearch: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  SpecialInterests: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  UserAttributeId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  OrderingProviderLabOrder: z.lazy(() => LabOrderUncheckedUpdateManyWithoutOrderingProviderNestedInputSchema).optional(),
  TreatingProviderLabOrder: z.lazy(() => LabOrderUncheckedUpdateManyWithoutTreatingProviderNestedInputSchema).optional(),
  ProviderFavoriteTest: z.lazy(() => ProviderFavoriteTestUncheckedUpdateManyWithoutProviderNestedInputSchema).optional(),
  ProviderOrganization: z.lazy(() => ProviderOrganizationUncheckedUpdateManyWithoutProviderNestedInputSchema).optional()
}).strict();

export const ProviderCreateWithoutProviderFavoriteTestInputSchema: z.ZodType<Prisma.ProviderCreateWithoutProviderFavoriteTestInput> = z.object({
  Id: z.string().optional(),
  href: z.string().optional().nullable(),
  NPI: z.string().optional().nullable(),
  Name: z.string().optional().nullable(),
  Email: z.string().optional().nullable(),
  Credentials: z.string().optional().nullable(),
  Specialty: z.string().optional().nullable(),
  Aboutme: z.string().optional().nullable(),
  Gender: z.string().optional().nullable(),
  ProviderType: z.string().optional().nullable(),
  Affiliation: z.string().optional().nullable(),
  ProceduresAndResearch: z.string().optional().nullable(),
  SpecialInterests: z.string().optional().nullable(),
  OrderingProviderLabOrder: z.lazy(() => LabOrderCreateNestedManyWithoutOrderingProviderInputSchema).optional(),
  TreatingProviderLabOrder: z.lazy(() => LabOrderCreateNestedManyWithoutTreatingProviderInputSchema).optional(),
  UserAttribute: z.lazy(() => UserAttributeCreateNestedOneWithoutProviderInputSchema).optional(),
  ProviderEducation: z.lazy(() => ProviderEducationCreateNestedManyWithoutProviderInputSchema).optional(),
  ProviderOrganization: z.lazy(() => ProviderOrganizationCreateNestedManyWithoutProviderInputSchema).optional()
}).strict();

export const ProviderUncheckedCreateWithoutProviderFavoriteTestInputSchema: z.ZodType<Prisma.ProviderUncheckedCreateWithoutProviderFavoriteTestInput> = z.object({
  Id: z.string().optional(),
  href: z.string().optional().nullable(),
  NPI: z.string().optional().nullable(),
  Name: z.string().optional().nullable(),
  Email: z.string().optional().nullable(),
  Credentials: z.string().optional().nullable(),
  Specialty: z.string().optional().nullable(),
  Aboutme: z.string().optional().nullable(),
  Gender: z.string().optional().nullable(),
  ProviderType: z.string().optional().nullable(),
  Affiliation: z.string().optional().nullable(),
  ProceduresAndResearch: z.string().optional().nullable(),
  SpecialInterests: z.string().optional().nullable(),
  UserAttributeId: z.string().optional().nullable(),
  OrderingProviderLabOrder: z.lazy(() => LabOrderUncheckedCreateNestedManyWithoutOrderingProviderInputSchema).optional(),
  TreatingProviderLabOrder: z.lazy(() => LabOrderUncheckedCreateNestedManyWithoutTreatingProviderInputSchema).optional(),
  ProviderEducation: z.lazy(() => ProviderEducationUncheckedCreateNestedManyWithoutProviderInputSchema).optional(),
  ProviderOrganization: z.lazy(() => ProviderOrganizationUncheckedCreateNestedManyWithoutProviderInputSchema).optional()
}).strict();

export const ProviderCreateOrConnectWithoutProviderFavoriteTestInputSchema: z.ZodType<Prisma.ProviderCreateOrConnectWithoutProviderFavoriteTestInput> = z.object({
  where: z.lazy(() => ProviderWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => ProviderCreateWithoutProviderFavoriteTestInputSchema),z.lazy(() => ProviderUncheckedCreateWithoutProviderFavoriteTestInputSchema) ]),
}).strict();

export const TestCatalogCreateWithoutProviderFavoriteTestInputSchema: z.ZodType<Prisma.TestCatalogCreateWithoutProviderFavoriteTestInput> = z.object({
  href: z.string().optional().nullable(),
  CasandraTestId: z.string(),
  LabTestId: z.string().optional().nullable(),
  TestName: z.string().optional().nullable(),
  AlternativeName: z.string().optional().nullable(),
  AlternativeName1: z.string().optional().nullable(),
  AlternativeName2: z.string().optional().nullable(),
  AlternativeName3: z.string().optional().nullable(),
  AlternativeName4: z.string().optional().nullable(),
  AlternativeName5: z.string().optional().nullable(),
  TestIncludes: z.string().optional().nullable(),
  SpecimenType: z.string().optional().nullable(),
  SpecialInstructions: z.string().optional().nullable(),
  Methodology: z.string().optional().nullable(),
  TestDescription: z.string().optional().nullable(),
  Diseases: z.string().optional().nullable(),
  Probes: z.string().optional().nullable(),
  ClinicalSignificance: z.string().optional().nullable(),
  SpecimenRequirements: z.string().optional().nullable(),
  Volume: z.string().optional().nullable(),
  MinimumVolume: z.string().optional().nullable(),
  Container: z.string().optional().nullable(),
  Collection: z.string().optional().nullable(),
  StabilityRequirements: z.string().optional().nullable(),
  StorageTransportation: z.string().optional().nullable(),
  PatientPreparation: z.string().optional().nullable(),
  CausesForRejection: z.string().optional().nullable(),
  TestUsage: z.string().optional().nullable(),
  TestLimitations: z.string().optional().nullable(),
  CPTCodes: z.string().optional().nullable(),
  NewYorkApproved: z.string().optional().nullable(),
  LevelOfService: z.string().optional().nullable(),
  TurnAroundTime: z.string().optional().nullable(),
  AssayCategory: z.string().optional().nullable(),
  ReferenceRanges: z.string().optional().nullable(),
  SetupSchedule: z.string().optional().nullable(),
  AlternativeSpecimen: z.string().optional().nullable(),
  LoincCodesText: z.string().optional().nullable(),
  LoincCodesHTML: z.string().optional().nullable(),
  TestCategory: z.string().optional().nullable(),
  TestSubCategory: z.string().optional().nullable(),
  CreatedAt: z.date().optional(),
  UpdatedAt: z.date().optional(),
  LabOrderTest: z.lazy(() => LabOrderTestCreateNestedManyWithoutTestCatalogInputSchema).optional(),
  OrganizationFavoriteTest: z.lazy(() => OrganizationFavoriteTestCreateNestedManyWithoutTestCatalogInputSchema).optional(),
  SponsoredTest: z.lazy(() => SponsoredTestCreateNestedManyWithoutTestCatalogInputSchema).optional(),
  TestBiomarker: z.lazy(() => TestBiomarkerCreateNestedManyWithoutTestCatalogInputSchema).optional(),
  Lab: z.lazy(() => LabCreateNestedOneWithoutTestCatalogInputSchema).optional(),
  TestCptCode: z.lazy(() => TestCptCodeCreateNestedManyWithoutTestCatalogInputSchema).optional(),
  TestGene: z.lazy(() => TestGeneCreateNestedManyWithoutTestCatalogInputSchema).optional(),
  TestOrderLoinc: z.lazy(() => TestOrderLoincCreateNestedManyWithoutTestCatalogInputSchema).optional(),
  TestResultLoinc: z.lazy(() => TestResultLoincCreateNestedManyWithoutTestCatalogInputSchema).optional()
}).strict();

export const TestCatalogUncheckedCreateWithoutProviderFavoriteTestInputSchema: z.ZodType<Prisma.TestCatalogUncheckedCreateWithoutProviderFavoriteTestInput> = z.object({
  TestId: z.number().optional(),
  LabId: z.number().optional().nullable(),
  href: z.string().optional().nullable(),
  CasandraTestId: z.string(),
  LabTestId: z.string().optional().nullable(),
  TestName: z.string().optional().nullable(),
  AlternativeName: z.string().optional().nullable(),
  AlternativeName1: z.string().optional().nullable(),
  AlternativeName2: z.string().optional().nullable(),
  AlternativeName3: z.string().optional().nullable(),
  AlternativeName4: z.string().optional().nullable(),
  AlternativeName5: z.string().optional().nullable(),
  TestIncludes: z.string().optional().nullable(),
  SpecimenType: z.string().optional().nullable(),
  SpecialInstructions: z.string().optional().nullable(),
  Methodology: z.string().optional().nullable(),
  TestDescription: z.string().optional().nullable(),
  Diseases: z.string().optional().nullable(),
  Probes: z.string().optional().nullable(),
  ClinicalSignificance: z.string().optional().nullable(),
  SpecimenRequirements: z.string().optional().nullable(),
  Volume: z.string().optional().nullable(),
  MinimumVolume: z.string().optional().nullable(),
  Container: z.string().optional().nullable(),
  Collection: z.string().optional().nullable(),
  StabilityRequirements: z.string().optional().nullable(),
  StorageTransportation: z.string().optional().nullable(),
  PatientPreparation: z.string().optional().nullable(),
  CausesForRejection: z.string().optional().nullable(),
  TestUsage: z.string().optional().nullable(),
  TestLimitations: z.string().optional().nullable(),
  CPTCodes: z.string().optional().nullable(),
  NewYorkApproved: z.string().optional().nullable(),
  LevelOfService: z.string().optional().nullable(),
  TurnAroundTime: z.string().optional().nullable(),
  AssayCategory: z.string().optional().nullable(),
  ReferenceRanges: z.string().optional().nullable(),
  SetupSchedule: z.string().optional().nullable(),
  AlternativeSpecimen: z.string().optional().nullable(),
  LoincCodesText: z.string().optional().nullable(),
  LoincCodesHTML: z.string().optional().nullable(),
  TestCategory: z.string().optional().nullable(),
  TestSubCategory: z.string().optional().nullable(),
  CreatedAt: z.date().optional(),
  UpdatedAt: z.date().optional(),
  LabOrderTest: z.lazy(() => LabOrderTestUncheckedCreateNestedManyWithoutTestCatalogInputSchema).optional(),
  OrganizationFavoriteTest: z.lazy(() => OrganizationFavoriteTestUncheckedCreateNestedManyWithoutTestCatalogInputSchema).optional(),
  SponsoredTest: z.lazy(() => SponsoredTestUncheckedCreateNestedManyWithoutTestCatalogInputSchema).optional(),
  TestBiomarker: z.lazy(() => TestBiomarkerUncheckedCreateNestedManyWithoutTestCatalogInputSchema).optional(),
  TestCptCode: z.lazy(() => TestCptCodeUncheckedCreateNestedManyWithoutTestCatalogInputSchema).optional(),
  TestGene: z.lazy(() => TestGeneUncheckedCreateNestedManyWithoutTestCatalogInputSchema).optional(),
  TestOrderLoinc: z.lazy(() => TestOrderLoincUncheckedCreateNestedManyWithoutTestCatalogInputSchema).optional(),
  TestResultLoinc: z.lazy(() => TestResultLoincUncheckedCreateNestedManyWithoutTestCatalogInputSchema).optional()
}).strict();

export const TestCatalogCreateOrConnectWithoutProviderFavoriteTestInputSchema: z.ZodType<Prisma.TestCatalogCreateOrConnectWithoutProviderFavoriteTestInput> = z.object({
  where: z.lazy(() => TestCatalogWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => TestCatalogCreateWithoutProviderFavoriteTestInputSchema),z.lazy(() => TestCatalogUncheckedCreateWithoutProviderFavoriteTestInputSchema) ]),
}).strict();

export const ProviderUpsertWithoutProviderFavoriteTestInputSchema: z.ZodType<Prisma.ProviderUpsertWithoutProviderFavoriteTestInput> = z.object({
  update: z.union([ z.lazy(() => ProviderUpdateWithoutProviderFavoriteTestInputSchema),z.lazy(() => ProviderUncheckedUpdateWithoutProviderFavoriteTestInputSchema) ]),
  create: z.union([ z.lazy(() => ProviderCreateWithoutProviderFavoriteTestInputSchema),z.lazy(() => ProviderUncheckedCreateWithoutProviderFavoriteTestInputSchema) ]),
  where: z.lazy(() => ProviderWhereInputSchema).optional()
}).strict();

export const ProviderUpdateToOneWithWhereWithoutProviderFavoriteTestInputSchema: z.ZodType<Prisma.ProviderUpdateToOneWithWhereWithoutProviderFavoriteTestInput> = z.object({
  where: z.lazy(() => ProviderWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => ProviderUpdateWithoutProviderFavoriteTestInputSchema),z.lazy(() => ProviderUncheckedUpdateWithoutProviderFavoriteTestInputSchema) ]),
}).strict();

export const ProviderUpdateWithoutProviderFavoriteTestInputSchema: z.ZodType<Prisma.ProviderUpdateWithoutProviderFavoriteTestInput> = z.object({
  Id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  href: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  NPI: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Email: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Credentials: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Specialty: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Aboutme: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Gender: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  ProviderType: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Affiliation: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  ProceduresAndResearch: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  SpecialInterests: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  OrderingProviderLabOrder: z.lazy(() => LabOrderUpdateManyWithoutOrderingProviderNestedInputSchema).optional(),
  TreatingProviderLabOrder: z.lazy(() => LabOrderUpdateManyWithoutTreatingProviderNestedInputSchema).optional(),
  UserAttribute: z.lazy(() => UserAttributeUpdateOneWithoutProviderNestedInputSchema).optional(),
  ProviderEducation: z.lazy(() => ProviderEducationUpdateManyWithoutProviderNestedInputSchema).optional(),
  ProviderOrganization: z.lazy(() => ProviderOrganizationUpdateManyWithoutProviderNestedInputSchema).optional()
}).strict();

export const ProviderUncheckedUpdateWithoutProviderFavoriteTestInputSchema: z.ZodType<Prisma.ProviderUncheckedUpdateWithoutProviderFavoriteTestInput> = z.object({
  Id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  href: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  NPI: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Email: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Credentials: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Specialty: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Aboutme: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Gender: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  ProviderType: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Affiliation: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  ProceduresAndResearch: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  SpecialInterests: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  UserAttributeId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  OrderingProviderLabOrder: z.lazy(() => LabOrderUncheckedUpdateManyWithoutOrderingProviderNestedInputSchema).optional(),
  TreatingProviderLabOrder: z.lazy(() => LabOrderUncheckedUpdateManyWithoutTreatingProviderNestedInputSchema).optional(),
  ProviderEducation: z.lazy(() => ProviderEducationUncheckedUpdateManyWithoutProviderNestedInputSchema).optional(),
  ProviderOrganization: z.lazy(() => ProviderOrganizationUncheckedUpdateManyWithoutProviderNestedInputSchema).optional()
}).strict();

export const TestCatalogUpsertWithoutProviderFavoriteTestInputSchema: z.ZodType<Prisma.TestCatalogUpsertWithoutProviderFavoriteTestInput> = z.object({
  update: z.union([ z.lazy(() => TestCatalogUpdateWithoutProviderFavoriteTestInputSchema),z.lazy(() => TestCatalogUncheckedUpdateWithoutProviderFavoriteTestInputSchema) ]),
  create: z.union([ z.lazy(() => TestCatalogCreateWithoutProviderFavoriteTestInputSchema),z.lazy(() => TestCatalogUncheckedCreateWithoutProviderFavoriteTestInputSchema) ]),
  where: z.lazy(() => TestCatalogWhereInputSchema).optional()
}).strict();

export const TestCatalogUpdateToOneWithWhereWithoutProviderFavoriteTestInputSchema: z.ZodType<Prisma.TestCatalogUpdateToOneWithWhereWithoutProviderFavoriteTestInput> = z.object({
  where: z.lazy(() => TestCatalogWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => TestCatalogUpdateWithoutProviderFavoriteTestInputSchema),z.lazy(() => TestCatalogUncheckedUpdateWithoutProviderFavoriteTestInputSchema) ]),
}).strict();

export const TestCatalogUpdateWithoutProviderFavoriteTestInputSchema: z.ZodType<Prisma.TestCatalogUpdateWithoutProviderFavoriteTestInput> = z.object({
  href: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  CasandraTestId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  LabTestId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  TestName: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  AlternativeName: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  AlternativeName1: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  AlternativeName2: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  AlternativeName3: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  AlternativeName4: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  AlternativeName5: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  TestIncludes: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  SpecimenType: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  SpecialInstructions: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Methodology: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  TestDescription: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Diseases: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Probes: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  ClinicalSignificance: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  SpecimenRequirements: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Volume: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  MinimumVolume: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Container: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Collection: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  StabilityRequirements: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  StorageTransportation: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  PatientPreparation: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  CausesForRejection: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  TestUsage: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  TestLimitations: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  CPTCodes: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  NewYorkApproved: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  LevelOfService: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  TurnAroundTime: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  AssayCategory: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  ReferenceRanges: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  SetupSchedule: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  AlternativeSpecimen: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  LoincCodesText: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  LoincCodesHTML: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  TestCategory: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  TestSubCategory: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  CreatedAt: z.union([ z.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  UpdatedAt: z.union([ z.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  LabOrderTest: z.lazy(() => LabOrderTestUpdateManyWithoutTestCatalogNestedInputSchema).optional(),
  OrganizationFavoriteTest: z.lazy(() => OrganizationFavoriteTestUpdateManyWithoutTestCatalogNestedInputSchema).optional(),
  SponsoredTest: z.lazy(() => SponsoredTestUpdateManyWithoutTestCatalogNestedInputSchema).optional(),
  TestBiomarker: z.lazy(() => TestBiomarkerUpdateManyWithoutTestCatalogNestedInputSchema).optional(),
  Lab: z.lazy(() => LabUpdateOneWithoutTestCatalogNestedInputSchema).optional(),
  TestCptCode: z.lazy(() => TestCptCodeUpdateManyWithoutTestCatalogNestedInputSchema).optional(),
  TestGene: z.lazy(() => TestGeneUpdateManyWithoutTestCatalogNestedInputSchema).optional(),
  TestOrderLoinc: z.lazy(() => TestOrderLoincUpdateManyWithoutTestCatalogNestedInputSchema).optional(),
  TestResultLoinc: z.lazy(() => TestResultLoincUpdateManyWithoutTestCatalogNestedInputSchema).optional()
}).strict();

export const TestCatalogUncheckedUpdateWithoutProviderFavoriteTestInputSchema: z.ZodType<Prisma.TestCatalogUncheckedUpdateWithoutProviderFavoriteTestInput> = z.object({
  TestId: z.union([ z.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  LabId: z.union([ z.number(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  href: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  CasandraTestId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  LabTestId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  TestName: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  AlternativeName: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  AlternativeName1: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  AlternativeName2: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  AlternativeName3: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  AlternativeName4: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  AlternativeName5: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  TestIncludes: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  SpecimenType: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  SpecialInstructions: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Methodology: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  TestDescription: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Diseases: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Probes: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  ClinicalSignificance: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  SpecimenRequirements: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Volume: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  MinimumVolume: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Container: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Collection: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  StabilityRequirements: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  StorageTransportation: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  PatientPreparation: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  CausesForRejection: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  TestUsage: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  TestLimitations: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  CPTCodes: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  NewYorkApproved: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  LevelOfService: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  TurnAroundTime: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  AssayCategory: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  ReferenceRanges: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  SetupSchedule: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  AlternativeSpecimen: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  LoincCodesText: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  LoincCodesHTML: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  TestCategory: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  TestSubCategory: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  CreatedAt: z.union([ z.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  UpdatedAt: z.union([ z.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  LabOrderTest: z.lazy(() => LabOrderTestUncheckedUpdateManyWithoutTestCatalogNestedInputSchema).optional(),
  OrganizationFavoriteTest: z.lazy(() => OrganizationFavoriteTestUncheckedUpdateManyWithoutTestCatalogNestedInputSchema).optional(),
  SponsoredTest: z.lazy(() => SponsoredTestUncheckedUpdateManyWithoutTestCatalogNestedInputSchema).optional(),
  TestBiomarker: z.lazy(() => TestBiomarkerUncheckedUpdateManyWithoutTestCatalogNestedInputSchema).optional(),
  TestCptCode: z.lazy(() => TestCptCodeUncheckedUpdateManyWithoutTestCatalogNestedInputSchema).optional(),
  TestGene: z.lazy(() => TestGeneUncheckedUpdateManyWithoutTestCatalogNestedInputSchema).optional(),
  TestOrderLoinc: z.lazy(() => TestOrderLoincUncheckedUpdateManyWithoutTestCatalogNestedInputSchema).optional(),
  TestResultLoinc: z.lazy(() => TestResultLoincUncheckedUpdateManyWithoutTestCatalogNestedInputSchema).optional()
}).strict();

export const OrganizationCreateWithoutProviderOrganizationInputSchema: z.ZodType<Prisma.OrganizationCreateWithoutProviderOrganizationInput> = z.object({
  Id: z.string(),
  href: z.string().optional().nullable(),
  Level: z.number().optional().nullable(),
  ParentOrgName: z.string().optional().nullable(),
  OrgName: z.string().optional().nullable(),
  OrgType: z.string().optional().nullable(),
  OrgSpecialty: z.string().optional().nullable(),
  OrgAddress: z.string().optional().nullable(),
  OrgCity: z.string().optional().nullable(),
  OrgState: z.string().optional().nullable(),
  OrgZip: z.string().optional().nullable(),
  LabOrder: z.lazy(() => LabOrderCreateNestedManyWithoutOrganizationInputSchema).optional(),
  Organization: z.lazy(() => OrganizationCreateNestedOneWithoutChildOrganizationInputSchema).optional(),
  ChildOrganization: z.lazy(() => OrganizationCreateNestedManyWithoutOrganizationInputSchema).optional(),
  OrganizationFavoriteTest: z.lazy(() => OrganizationFavoriteTestCreateNestedManyWithoutOrganizationInputSchema).optional(),
  PatientOrganization: z.lazy(() => PatientOrganizationCreateNestedManyWithoutOrganizationInputSchema).optional()
}).strict();

export const OrganizationUncheckedCreateWithoutProviderOrganizationInputSchema: z.ZodType<Prisma.OrganizationUncheckedCreateWithoutProviderOrganizationInput> = z.object({
  Id: z.string(),
  href: z.string().optional().nullable(),
  ParentId: z.string().optional().nullable(),
  Level: z.number().optional().nullable(),
  ParentOrgName: z.string().optional().nullable(),
  OrgName: z.string().optional().nullable(),
  OrgType: z.string().optional().nullable(),
  OrgSpecialty: z.string().optional().nullable(),
  OrgAddress: z.string().optional().nullable(),
  OrgCity: z.string().optional().nullable(),
  OrgState: z.string().optional().nullable(),
  OrgZip: z.string().optional().nullable(),
  LabOrder: z.lazy(() => LabOrderUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  ChildOrganization: z.lazy(() => OrganizationUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  OrganizationFavoriteTest: z.lazy(() => OrganizationFavoriteTestUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  PatientOrganization: z.lazy(() => PatientOrganizationUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional()
}).strict();

export const OrganizationCreateOrConnectWithoutProviderOrganizationInputSchema: z.ZodType<Prisma.OrganizationCreateOrConnectWithoutProviderOrganizationInput> = z.object({
  where: z.lazy(() => OrganizationWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => OrganizationCreateWithoutProviderOrganizationInputSchema),z.lazy(() => OrganizationUncheckedCreateWithoutProviderOrganizationInputSchema) ]),
}).strict();

export const ProviderCreateWithoutProviderOrganizationInputSchema: z.ZodType<Prisma.ProviderCreateWithoutProviderOrganizationInput> = z.object({
  Id: z.string().optional(),
  href: z.string().optional().nullable(),
  NPI: z.string().optional().nullable(),
  Name: z.string().optional().nullable(),
  Email: z.string().optional().nullable(),
  Credentials: z.string().optional().nullable(),
  Specialty: z.string().optional().nullable(),
  Aboutme: z.string().optional().nullable(),
  Gender: z.string().optional().nullable(),
  ProviderType: z.string().optional().nullable(),
  Affiliation: z.string().optional().nullable(),
  ProceduresAndResearch: z.string().optional().nullable(),
  SpecialInterests: z.string().optional().nullable(),
  OrderingProviderLabOrder: z.lazy(() => LabOrderCreateNestedManyWithoutOrderingProviderInputSchema).optional(),
  TreatingProviderLabOrder: z.lazy(() => LabOrderCreateNestedManyWithoutTreatingProviderInputSchema).optional(),
  UserAttribute: z.lazy(() => UserAttributeCreateNestedOneWithoutProviderInputSchema).optional(),
  ProviderEducation: z.lazy(() => ProviderEducationCreateNestedManyWithoutProviderInputSchema).optional(),
  ProviderFavoriteTest: z.lazy(() => ProviderFavoriteTestCreateNestedManyWithoutProviderInputSchema).optional()
}).strict();

export const ProviderUncheckedCreateWithoutProviderOrganizationInputSchema: z.ZodType<Prisma.ProviderUncheckedCreateWithoutProviderOrganizationInput> = z.object({
  Id: z.string().optional(),
  href: z.string().optional().nullable(),
  NPI: z.string().optional().nullable(),
  Name: z.string().optional().nullable(),
  Email: z.string().optional().nullable(),
  Credentials: z.string().optional().nullable(),
  Specialty: z.string().optional().nullable(),
  Aboutme: z.string().optional().nullable(),
  Gender: z.string().optional().nullable(),
  ProviderType: z.string().optional().nullable(),
  Affiliation: z.string().optional().nullable(),
  ProceduresAndResearch: z.string().optional().nullable(),
  SpecialInterests: z.string().optional().nullable(),
  UserAttributeId: z.string().optional().nullable(),
  OrderingProviderLabOrder: z.lazy(() => LabOrderUncheckedCreateNestedManyWithoutOrderingProviderInputSchema).optional(),
  TreatingProviderLabOrder: z.lazy(() => LabOrderUncheckedCreateNestedManyWithoutTreatingProviderInputSchema).optional(),
  ProviderEducation: z.lazy(() => ProviderEducationUncheckedCreateNestedManyWithoutProviderInputSchema).optional(),
  ProviderFavoriteTest: z.lazy(() => ProviderFavoriteTestUncheckedCreateNestedManyWithoutProviderInputSchema).optional()
}).strict();

export const ProviderCreateOrConnectWithoutProviderOrganizationInputSchema: z.ZodType<Prisma.ProviderCreateOrConnectWithoutProviderOrganizationInput> = z.object({
  where: z.lazy(() => ProviderWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => ProviderCreateWithoutProviderOrganizationInputSchema),z.lazy(() => ProviderUncheckedCreateWithoutProviderOrganizationInputSchema) ]),
}).strict();

export const OrganizationUpsertWithoutProviderOrganizationInputSchema: z.ZodType<Prisma.OrganizationUpsertWithoutProviderOrganizationInput> = z.object({
  update: z.union([ z.lazy(() => OrganizationUpdateWithoutProviderOrganizationInputSchema),z.lazy(() => OrganizationUncheckedUpdateWithoutProviderOrganizationInputSchema) ]),
  create: z.union([ z.lazy(() => OrganizationCreateWithoutProviderOrganizationInputSchema),z.lazy(() => OrganizationUncheckedCreateWithoutProviderOrganizationInputSchema) ]),
  where: z.lazy(() => OrganizationWhereInputSchema).optional()
}).strict();

export const OrganizationUpdateToOneWithWhereWithoutProviderOrganizationInputSchema: z.ZodType<Prisma.OrganizationUpdateToOneWithWhereWithoutProviderOrganizationInput> = z.object({
  where: z.lazy(() => OrganizationWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => OrganizationUpdateWithoutProviderOrganizationInputSchema),z.lazy(() => OrganizationUncheckedUpdateWithoutProviderOrganizationInputSchema) ]),
}).strict();

export const OrganizationUpdateWithoutProviderOrganizationInputSchema: z.ZodType<Prisma.OrganizationUpdateWithoutProviderOrganizationInput> = z.object({
  Id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  href: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Level: z.union([ z.number(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  ParentOrgName: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  OrgName: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  OrgType: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  OrgSpecialty: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  OrgAddress: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  OrgCity: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  OrgState: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  OrgZip: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  LabOrder: z.lazy(() => LabOrderUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  Organization: z.lazy(() => OrganizationUpdateOneWithoutChildOrganizationNestedInputSchema).optional(),
  ChildOrganization: z.lazy(() => OrganizationUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  OrganizationFavoriteTest: z.lazy(() => OrganizationFavoriteTestUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  PatientOrganization: z.lazy(() => PatientOrganizationUpdateManyWithoutOrganizationNestedInputSchema).optional()
}).strict();

export const OrganizationUncheckedUpdateWithoutProviderOrganizationInputSchema: z.ZodType<Prisma.OrganizationUncheckedUpdateWithoutProviderOrganizationInput> = z.object({
  Id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  href: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  ParentId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Level: z.union([ z.number(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  ParentOrgName: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  OrgName: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  OrgType: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  OrgSpecialty: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  OrgAddress: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  OrgCity: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  OrgState: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  OrgZip: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  LabOrder: z.lazy(() => LabOrderUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  ChildOrganization: z.lazy(() => OrganizationUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  OrganizationFavoriteTest: z.lazy(() => OrganizationFavoriteTestUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  PatientOrganization: z.lazy(() => PatientOrganizationUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional()
}).strict();

export const ProviderUpsertWithoutProviderOrganizationInputSchema: z.ZodType<Prisma.ProviderUpsertWithoutProviderOrganizationInput> = z.object({
  update: z.union([ z.lazy(() => ProviderUpdateWithoutProviderOrganizationInputSchema),z.lazy(() => ProviderUncheckedUpdateWithoutProviderOrganizationInputSchema) ]),
  create: z.union([ z.lazy(() => ProviderCreateWithoutProviderOrganizationInputSchema),z.lazy(() => ProviderUncheckedCreateWithoutProviderOrganizationInputSchema) ]),
  where: z.lazy(() => ProviderWhereInputSchema).optional()
}).strict();

export const ProviderUpdateToOneWithWhereWithoutProviderOrganizationInputSchema: z.ZodType<Prisma.ProviderUpdateToOneWithWhereWithoutProviderOrganizationInput> = z.object({
  where: z.lazy(() => ProviderWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => ProviderUpdateWithoutProviderOrganizationInputSchema),z.lazy(() => ProviderUncheckedUpdateWithoutProviderOrganizationInputSchema) ]),
}).strict();

export const ProviderUpdateWithoutProviderOrganizationInputSchema: z.ZodType<Prisma.ProviderUpdateWithoutProviderOrganizationInput> = z.object({
  Id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  href: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  NPI: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Email: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Credentials: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Specialty: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Aboutme: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Gender: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  ProviderType: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Affiliation: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  ProceduresAndResearch: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  SpecialInterests: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  OrderingProviderLabOrder: z.lazy(() => LabOrderUpdateManyWithoutOrderingProviderNestedInputSchema).optional(),
  TreatingProviderLabOrder: z.lazy(() => LabOrderUpdateManyWithoutTreatingProviderNestedInputSchema).optional(),
  UserAttribute: z.lazy(() => UserAttributeUpdateOneWithoutProviderNestedInputSchema).optional(),
  ProviderEducation: z.lazy(() => ProviderEducationUpdateManyWithoutProviderNestedInputSchema).optional(),
  ProviderFavoriteTest: z.lazy(() => ProviderFavoriteTestUpdateManyWithoutProviderNestedInputSchema).optional()
}).strict();

export const ProviderUncheckedUpdateWithoutProviderOrganizationInputSchema: z.ZodType<Prisma.ProviderUncheckedUpdateWithoutProviderOrganizationInput> = z.object({
  Id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  href: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  NPI: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Email: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Credentials: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Specialty: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Aboutme: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Gender: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  ProviderType: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Affiliation: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  ProceduresAndResearch: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  SpecialInterests: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  UserAttributeId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  OrderingProviderLabOrder: z.lazy(() => LabOrderUncheckedUpdateManyWithoutOrderingProviderNestedInputSchema).optional(),
  TreatingProviderLabOrder: z.lazy(() => LabOrderUncheckedUpdateManyWithoutTreatingProviderNestedInputSchema).optional(),
  ProviderEducation: z.lazy(() => ProviderEducationUncheckedUpdateManyWithoutProviderNestedInputSchema).optional(),
  ProviderFavoriteTest: z.lazy(() => ProviderFavoriteTestUncheckedUpdateManyWithoutProviderNestedInputSchema).optional()
}).strict();

export const UserCreateWithoutSessionInputSchema: z.ZodType<Prisma.UserCreateWithoutSessionInput> = z.object({
  id: z.string().optional(),
  name: z.string().optional().nullable(),
  email: z.string().optional().nullable(),
  password: z.string().optional().nullable(),
  emailVerified: z.date().optional().nullable(),
  image: z.string().optional().nullable(),
  Account: z.lazy(() => AccountCreateNestedOneWithoutUserInputSchema).optional(),
  UserAttribute: z.lazy(() => UserAttributeCreateNestedOneWithoutUserInputSchema).optional()
}).strict();

export const UserUncheckedCreateWithoutSessionInputSchema: z.ZodType<Prisma.UserUncheckedCreateWithoutSessionInput> = z.object({
  id: z.string().optional(),
  name: z.string().optional().nullable(),
  email: z.string().optional().nullable(),
  password: z.string().optional().nullable(),
  emailVerified: z.date().optional().nullable(),
  image: z.string().optional().nullable(),
  Account: z.lazy(() => AccountUncheckedCreateNestedOneWithoutUserInputSchema).optional(),
  UserAttribute: z.lazy(() => UserAttributeUncheckedCreateNestedOneWithoutUserInputSchema).optional()
}).strict();

export const UserCreateOrConnectWithoutSessionInputSchema: z.ZodType<Prisma.UserCreateOrConnectWithoutSessionInput> = z.object({
  where: z.lazy(() => UserWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => UserCreateWithoutSessionInputSchema),z.lazy(() => UserUncheckedCreateWithoutSessionInputSchema) ]),
}).strict();

export const UserUpsertWithoutSessionInputSchema: z.ZodType<Prisma.UserUpsertWithoutSessionInput> = z.object({
  update: z.union([ z.lazy(() => UserUpdateWithoutSessionInputSchema),z.lazy(() => UserUncheckedUpdateWithoutSessionInputSchema) ]),
  create: z.union([ z.lazy(() => UserCreateWithoutSessionInputSchema),z.lazy(() => UserUncheckedCreateWithoutSessionInputSchema) ]),
  where: z.lazy(() => UserWhereInputSchema).optional()
}).strict();

export const UserUpdateToOneWithWhereWithoutSessionInputSchema: z.ZodType<Prisma.UserUpdateToOneWithWhereWithoutSessionInput> = z.object({
  where: z.lazy(() => UserWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => UserUpdateWithoutSessionInputSchema),z.lazy(() => UserUncheckedUpdateWithoutSessionInputSchema) ]),
}).strict();

export const UserUpdateWithoutSessionInputSchema: z.ZodType<Prisma.UserUpdateWithoutSessionInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  email: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  password: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  emailVerified: z.union([ z.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  image: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Account: z.lazy(() => AccountUpdateOneWithoutUserNestedInputSchema).optional(),
  UserAttribute: z.lazy(() => UserAttributeUpdateOneWithoutUserNestedInputSchema).optional()
}).strict();

export const UserUncheckedUpdateWithoutSessionInputSchema: z.ZodType<Prisma.UserUncheckedUpdateWithoutSessionInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  email: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  password: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  emailVerified: z.union([ z.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  image: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Account: z.lazy(() => AccountUncheckedUpdateOneWithoutUserNestedInputSchema).optional(),
  UserAttribute: z.lazy(() => UserAttributeUncheckedUpdateOneWithoutUserNestedInputSchema).optional()
}).strict();

export const SponsoredProgramCreateWithoutSponsorInputSchema: z.ZodType<Prisma.SponsoredProgramCreateWithoutSponsorInput> = z.object({
  TherapeuticArea: z.string().optional().nullable(),
  ProgramName: z.string().optional().nullable(),
  ProgramUrl: z.string().optional().nullable(),
  ProgramLabUrl: z.string().optional().nullable(),
  SponosoredTestingUrl: z.string().optional().nullable(),
  ProgramEligibility: z.string().optional().nullable(),
  CreatedAt: z.date().optional().nullable(),
  UpdatedAt: z.date().optional().nullable(),
  SponsoredTest: z.lazy(() => SponsoredTestCreateNestedManyWithoutSponsoredProgramInputSchema).optional()
}).strict();

export const SponsoredProgramUncheckedCreateWithoutSponsorInputSchema: z.ZodType<Prisma.SponsoredProgramUncheckedCreateWithoutSponsorInput> = z.object({
  ProgramId: z.number().optional(),
  TherapeuticArea: z.string().optional().nullable(),
  ProgramName: z.string().optional().nullable(),
  ProgramUrl: z.string().optional().nullable(),
  ProgramLabUrl: z.string().optional().nullable(),
  SponosoredTestingUrl: z.string().optional().nullable(),
  ProgramEligibility: z.string().optional().nullable(),
  CreatedAt: z.date().optional().nullable(),
  UpdatedAt: z.date().optional().nullable(),
  SponsoredTest: z.lazy(() => SponsoredTestUncheckedCreateNestedManyWithoutSponsoredProgramInputSchema).optional()
}).strict();

export const SponsoredProgramCreateOrConnectWithoutSponsorInputSchema: z.ZodType<Prisma.SponsoredProgramCreateOrConnectWithoutSponsorInput> = z.object({
  where: z.lazy(() => SponsoredProgramWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => SponsoredProgramCreateWithoutSponsorInputSchema),z.lazy(() => SponsoredProgramUncheckedCreateWithoutSponsorInputSchema) ]),
}).strict();

export const SponsoredProgramCreateManySponsorInputEnvelopeSchema: z.ZodType<Prisma.SponsoredProgramCreateManySponsorInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => SponsoredProgramCreateManySponsorInputSchema),z.lazy(() => SponsoredProgramCreateManySponsorInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const SponsoredProgramUpsertWithWhereUniqueWithoutSponsorInputSchema: z.ZodType<Prisma.SponsoredProgramUpsertWithWhereUniqueWithoutSponsorInput> = z.object({
  where: z.lazy(() => SponsoredProgramWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => SponsoredProgramUpdateWithoutSponsorInputSchema),z.lazy(() => SponsoredProgramUncheckedUpdateWithoutSponsorInputSchema) ]),
  create: z.union([ z.lazy(() => SponsoredProgramCreateWithoutSponsorInputSchema),z.lazy(() => SponsoredProgramUncheckedCreateWithoutSponsorInputSchema) ]),
}).strict();

export const SponsoredProgramUpdateWithWhereUniqueWithoutSponsorInputSchema: z.ZodType<Prisma.SponsoredProgramUpdateWithWhereUniqueWithoutSponsorInput> = z.object({
  where: z.lazy(() => SponsoredProgramWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => SponsoredProgramUpdateWithoutSponsorInputSchema),z.lazy(() => SponsoredProgramUncheckedUpdateWithoutSponsorInputSchema) ]),
}).strict();

export const SponsoredProgramUpdateManyWithWhereWithoutSponsorInputSchema: z.ZodType<Prisma.SponsoredProgramUpdateManyWithWhereWithoutSponsorInput> = z.object({
  where: z.lazy(() => SponsoredProgramScalarWhereInputSchema),
  data: z.union([ z.lazy(() => SponsoredProgramUpdateManyMutationInputSchema),z.lazy(() => SponsoredProgramUncheckedUpdateManyWithoutSponsorInputSchema) ]),
}).strict();

export const SponsoredProgramScalarWhereInputSchema: z.ZodType<Prisma.SponsoredProgramScalarWhereInput> = z.object({
  AND: z.union([ z.lazy(() => SponsoredProgramScalarWhereInputSchema),z.lazy(() => SponsoredProgramScalarWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => SponsoredProgramScalarWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => SponsoredProgramScalarWhereInputSchema),z.lazy(() => SponsoredProgramScalarWhereInputSchema).array() ]).optional(),
  ProgramId: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  SponsorId: z.union([ z.lazy(() => IntNullableFilterSchema),z.number() ]).optional().nullable(),
  TherapeuticArea: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  ProgramName: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  ProgramUrl: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  ProgramLabUrl: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  SponosoredTestingUrl: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  ProgramEligibility: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  CreatedAt: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.date() ]).optional().nullable(),
  UpdatedAt: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.date() ]).optional().nullable(),
}).strict();

export const SponsorCreateWithoutSponsoredProgramInputSchema: z.ZodType<Prisma.SponsorCreateWithoutSponsoredProgramInput> = z.object({
  SponsorName: z.string().optional().nullable(),
  SponsorCode: z.string().optional().nullable(),
  SponsorWebsite: z.string().optional().nullable(),
  SponsorType: z.string().optional().nullable(),
  Address: z.string().optional().nullable(),
  City: z.string().optional().nullable(),
  State: z.string().optional().nullable(),
  Zip: z.string().optional().nullable()
}).strict();

export const SponsorUncheckedCreateWithoutSponsoredProgramInputSchema: z.ZodType<Prisma.SponsorUncheckedCreateWithoutSponsoredProgramInput> = z.object({
  SponsorId: z.number().optional(),
  SponsorName: z.string().optional().nullable(),
  SponsorCode: z.string().optional().nullable(),
  SponsorWebsite: z.string().optional().nullable(),
  SponsorType: z.string().optional().nullable(),
  Address: z.string().optional().nullable(),
  City: z.string().optional().nullable(),
  State: z.string().optional().nullable(),
  Zip: z.string().optional().nullable()
}).strict();

export const SponsorCreateOrConnectWithoutSponsoredProgramInputSchema: z.ZodType<Prisma.SponsorCreateOrConnectWithoutSponsoredProgramInput> = z.object({
  where: z.lazy(() => SponsorWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => SponsorCreateWithoutSponsoredProgramInputSchema),z.lazy(() => SponsorUncheckedCreateWithoutSponsoredProgramInputSchema) ]),
}).strict();

export const SponsoredTestCreateWithoutSponsoredProgramInputSchema: z.ZodType<Prisma.SponsoredTestCreateWithoutSponsoredProgramInput> = z.object({
  Id: z.string().optional(),
  LabTestId: z.string().optional().nullable(),
  CasandraTestId: z.string(),
  Category: z.string(),
  SubCategory: z.string().optional().nullable(),
  CreatedAt: z.date().optional().nullable(),
  UpdatedAt: z.date().optional().nullable(),
  LabOrderSponsoredTestConsent: z.lazy(() => LabOrderSponsoredTestConsentCreateNestedManyWithoutSponsoredTestInputSchema).optional(),
  Lab: z.lazy(() => LabCreateNestedOneWithoutSponsoredTestInputSchema).optional(),
  TestCatalog: z.lazy(() => TestCatalogCreateNestedOneWithoutSponsoredTestInputSchema)
}).strict();

export const SponsoredTestUncheckedCreateWithoutSponsoredProgramInputSchema: z.ZodType<Prisma.SponsoredTestUncheckedCreateWithoutSponsoredProgramInput> = z.object({
  Id: z.string().optional(),
  TestId: z.number(),
  LabTestId: z.string().optional().nullable(),
  LabId: z.number().optional().nullable(),
  CasandraTestId: z.string(),
  Category: z.string(),
  SubCategory: z.string().optional().nullable(),
  CreatedAt: z.date().optional().nullable(),
  UpdatedAt: z.date().optional().nullable(),
  LabOrderSponsoredTestConsent: z.lazy(() => LabOrderSponsoredTestConsentUncheckedCreateNestedManyWithoutSponsoredTestInputSchema).optional()
}).strict();

export const SponsoredTestCreateOrConnectWithoutSponsoredProgramInputSchema: z.ZodType<Prisma.SponsoredTestCreateOrConnectWithoutSponsoredProgramInput> = z.object({
  where: z.lazy(() => SponsoredTestWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => SponsoredTestCreateWithoutSponsoredProgramInputSchema),z.lazy(() => SponsoredTestUncheckedCreateWithoutSponsoredProgramInputSchema) ]),
}).strict();

export const SponsoredTestCreateManySponsoredProgramInputEnvelopeSchema: z.ZodType<Prisma.SponsoredTestCreateManySponsoredProgramInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => SponsoredTestCreateManySponsoredProgramInputSchema),z.lazy(() => SponsoredTestCreateManySponsoredProgramInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const SponsorUpsertWithoutSponsoredProgramInputSchema: z.ZodType<Prisma.SponsorUpsertWithoutSponsoredProgramInput> = z.object({
  update: z.union([ z.lazy(() => SponsorUpdateWithoutSponsoredProgramInputSchema),z.lazy(() => SponsorUncheckedUpdateWithoutSponsoredProgramInputSchema) ]),
  create: z.union([ z.lazy(() => SponsorCreateWithoutSponsoredProgramInputSchema),z.lazy(() => SponsorUncheckedCreateWithoutSponsoredProgramInputSchema) ]),
  where: z.lazy(() => SponsorWhereInputSchema).optional()
}).strict();

export const SponsorUpdateToOneWithWhereWithoutSponsoredProgramInputSchema: z.ZodType<Prisma.SponsorUpdateToOneWithWhereWithoutSponsoredProgramInput> = z.object({
  where: z.lazy(() => SponsorWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => SponsorUpdateWithoutSponsoredProgramInputSchema),z.lazy(() => SponsorUncheckedUpdateWithoutSponsoredProgramInputSchema) ]),
}).strict();

export const SponsorUpdateWithoutSponsoredProgramInputSchema: z.ZodType<Prisma.SponsorUpdateWithoutSponsoredProgramInput> = z.object({
  SponsorName: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  SponsorCode: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  SponsorWebsite: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  SponsorType: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Address: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  City: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  State: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Zip: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const SponsorUncheckedUpdateWithoutSponsoredProgramInputSchema: z.ZodType<Prisma.SponsorUncheckedUpdateWithoutSponsoredProgramInput> = z.object({
  SponsorId: z.union([ z.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  SponsorName: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  SponsorCode: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  SponsorWebsite: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  SponsorType: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Address: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  City: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  State: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Zip: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const SponsoredTestUpsertWithWhereUniqueWithoutSponsoredProgramInputSchema: z.ZodType<Prisma.SponsoredTestUpsertWithWhereUniqueWithoutSponsoredProgramInput> = z.object({
  where: z.lazy(() => SponsoredTestWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => SponsoredTestUpdateWithoutSponsoredProgramInputSchema),z.lazy(() => SponsoredTestUncheckedUpdateWithoutSponsoredProgramInputSchema) ]),
  create: z.union([ z.lazy(() => SponsoredTestCreateWithoutSponsoredProgramInputSchema),z.lazy(() => SponsoredTestUncheckedCreateWithoutSponsoredProgramInputSchema) ]),
}).strict();

export const SponsoredTestUpdateWithWhereUniqueWithoutSponsoredProgramInputSchema: z.ZodType<Prisma.SponsoredTestUpdateWithWhereUniqueWithoutSponsoredProgramInput> = z.object({
  where: z.lazy(() => SponsoredTestWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => SponsoredTestUpdateWithoutSponsoredProgramInputSchema),z.lazy(() => SponsoredTestUncheckedUpdateWithoutSponsoredProgramInputSchema) ]),
}).strict();

export const SponsoredTestUpdateManyWithWhereWithoutSponsoredProgramInputSchema: z.ZodType<Prisma.SponsoredTestUpdateManyWithWhereWithoutSponsoredProgramInput> = z.object({
  where: z.lazy(() => SponsoredTestScalarWhereInputSchema),
  data: z.union([ z.lazy(() => SponsoredTestUpdateManyMutationInputSchema),z.lazy(() => SponsoredTestUncheckedUpdateManyWithoutSponsoredProgramInputSchema) ]),
}).strict();

export const LabOrderSponsoredTestConsentCreateWithoutSponsoredTestInputSchema: z.ZodType<Prisma.LabOrderSponsoredTestConsentCreateWithoutSponsoredTestInput> = z.object({
  Id: z.string().optional(),
  ProviderName: z.string().optional().nullable(),
  ProviderNPI: z.string().optional().nullable(),
  ConsentAt: z.date().optional().nullable(),
  CreatedAt: z.date().optional().nullable(),
  UpdatedAt: z.date().optional().nullable(),
  LabOrder: z.lazy(() => LabOrderCreateNestedOneWithoutLabOrderSponsoredTestConsentInputSchema).optional()
}).strict();

export const LabOrderSponsoredTestConsentUncheckedCreateWithoutSponsoredTestInputSchema: z.ZodType<Prisma.LabOrderSponsoredTestConsentUncheckedCreateWithoutSponsoredTestInput> = z.object({
  Id: z.string().optional(),
  LabOrderId: z.string().optional().nullable(),
  ProviderName: z.string().optional().nullable(),
  ProviderNPI: z.string().optional().nullable(),
  ConsentAt: z.date().optional().nullable(),
  CreatedAt: z.date().optional().nullable(),
  UpdatedAt: z.date().optional().nullable()
}).strict();

export const LabOrderSponsoredTestConsentCreateOrConnectWithoutSponsoredTestInputSchema: z.ZodType<Prisma.LabOrderSponsoredTestConsentCreateOrConnectWithoutSponsoredTestInput> = z.object({
  where: z.lazy(() => LabOrderSponsoredTestConsentWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => LabOrderSponsoredTestConsentCreateWithoutSponsoredTestInputSchema),z.lazy(() => LabOrderSponsoredTestConsentUncheckedCreateWithoutSponsoredTestInputSchema) ]),
}).strict();

export const LabOrderSponsoredTestConsentCreateManySponsoredTestInputEnvelopeSchema: z.ZodType<Prisma.LabOrderSponsoredTestConsentCreateManySponsoredTestInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => LabOrderSponsoredTestConsentCreateManySponsoredTestInputSchema),z.lazy(() => LabOrderSponsoredTestConsentCreateManySponsoredTestInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const LabCreateWithoutSponsoredTestInputSchema: z.ZodType<Prisma.LabCreateWithoutSponsoredTestInput> = z.object({
  LabName: z.string().optional().nullable(),
  LabCode: z.string().optional().nullable(),
  Address: z.string().optional().nullable(),
  City: z.string().optional().nullable(),
  State: z.string().optional().nullable(),
  Zip: z.string().optional().nullable(),
  TestCatalog: z.lazy(() => TestCatalogCreateNestedManyWithoutLabInputSchema).optional()
}).strict();

export const LabUncheckedCreateWithoutSponsoredTestInputSchema: z.ZodType<Prisma.LabUncheckedCreateWithoutSponsoredTestInput> = z.object({
  LabId: z.number().optional(),
  LabName: z.string().optional().nullable(),
  LabCode: z.string().optional().nullable(),
  Address: z.string().optional().nullable(),
  City: z.string().optional().nullable(),
  State: z.string().optional().nullable(),
  Zip: z.string().optional().nullable(),
  TestCatalog: z.lazy(() => TestCatalogUncheckedCreateNestedManyWithoutLabInputSchema).optional()
}).strict();

export const LabCreateOrConnectWithoutSponsoredTestInputSchema: z.ZodType<Prisma.LabCreateOrConnectWithoutSponsoredTestInput> = z.object({
  where: z.lazy(() => LabWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => LabCreateWithoutSponsoredTestInputSchema),z.lazy(() => LabUncheckedCreateWithoutSponsoredTestInputSchema) ]),
}).strict();

export const SponsoredProgramCreateWithoutSponsoredTestInputSchema: z.ZodType<Prisma.SponsoredProgramCreateWithoutSponsoredTestInput> = z.object({
  TherapeuticArea: z.string().optional().nullable(),
  ProgramName: z.string().optional().nullable(),
  ProgramUrl: z.string().optional().nullable(),
  ProgramLabUrl: z.string().optional().nullable(),
  SponosoredTestingUrl: z.string().optional().nullable(),
  ProgramEligibility: z.string().optional().nullable(),
  CreatedAt: z.date().optional().nullable(),
  UpdatedAt: z.date().optional().nullable(),
  Sponsor: z.lazy(() => SponsorCreateNestedOneWithoutSponsoredProgramInputSchema).optional()
}).strict();

export const SponsoredProgramUncheckedCreateWithoutSponsoredTestInputSchema: z.ZodType<Prisma.SponsoredProgramUncheckedCreateWithoutSponsoredTestInput> = z.object({
  ProgramId: z.number().optional(),
  SponsorId: z.number().optional().nullable(),
  TherapeuticArea: z.string().optional().nullable(),
  ProgramName: z.string().optional().nullable(),
  ProgramUrl: z.string().optional().nullable(),
  ProgramLabUrl: z.string().optional().nullable(),
  SponosoredTestingUrl: z.string().optional().nullable(),
  ProgramEligibility: z.string().optional().nullable(),
  CreatedAt: z.date().optional().nullable(),
  UpdatedAt: z.date().optional().nullable()
}).strict();

export const SponsoredProgramCreateOrConnectWithoutSponsoredTestInputSchema: z.ZodType<Prisma.SponsoredProgramCreateOrConnectWithoutSponsoredTestInput> = z.object({
  where: z.lazy(() => SponsoredProgramWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => SponsoredProgramCreateWithoutSponsoredTestInputSchema),z.lazy(() => SponsoredProgramUncheckedCreateWithoutSponsoredTestInputSchema) ]),
}).strict();

export const TestCatalogCreateWithoutSponsoredTestInputSchema: z.ZodType<Prisma.TestCatalogCreateWithoutSponsoredTestInput> = z.object({
  href: z.string().optional().nullable(),
  CasandraTestId: z.string(),
  LabTestId: z.string().optional().nullable(),
  TestName: z.string().optional().nullable(),
  AlternativeName: z.string().optional().nullable(),
  AlternativeName1: z.string().optional().nullable(),
  AlternativeName2: z.string().optional().nullable(),
  AlternativeName3: z.string().optional().nullable(),
  AlternativeName4: z.string().optional().nullable(),
  AlternativeName5: z.string().optional().nullable(),
  TestIncludes: z.string().optional().nullable(),
  SpecimenType: z.string().optional().nullable(),
  SpecialInstructions: z.string().optional().nullable(),
  Methodology: z.string().optional().nullable(),
  TestDescription: z.string().optional().nullable(),
  Diseases: z.string().optional().nullable(),
  Probes: z.string().optional().nullable(),
  ClinicalSignificance: z.string().optional().nullable(),
  SpecimenRequirements: z.string().optional().nullable(),
  Volume: z.string().optional().nullable(),
  MinimumVolume: z.string().optional().nullable(),
  Container: z.string().optional().nullable(),
  Collection: z.string().optional().nullable(),
  StabilityRequirements: z.string().optional().nullable(),
  StorageTransportation: z.string().optional().nullable(),
  PatientPreparation: z.string().optional().nullable(),
  CausesForRejection: z.string().optional().nullable(),
  TestUsage: z.string().optional().nullable(),
  TestLimitations: z.string().optional().nullable(),
  CPTCodes: z.string().optional().nullable(),
  NewYorkApproved: z.string().optional().nullable(),
  LevelOfService: z.string().optional().nullable(),
  TurnAroundTime: z.string().optional().nullable(),
  AssayCategory: z.string().optional().nullable(),
  ReferenceRanges: z.string().optional().nullable(),
  SetupSchedule: z.string().optional().nullable(),
  AlternativeSpecimen: z.string().optional().nullable(),
  LoincCodesText: z.string().optional().nullable(),
  LoincCodesHTML: z.string().optional().nullable(),
  TestCategory: z.string().optional().nullable(),
  TestSubCategory: z.string().optional().nullable(),
  CreatedAt: z.date().optional(),
  UpdatedAt: z.date().optional(),
  LabOrderTest: z.lazy(() => LabOrderTestCreateNestedManyWithoutTestCatalogInputSchema).optional(),
  OrganizationFavoriteTest: z.lazy(() => OrganizationFavoriteTestCreateNestedManyWithoutTestCatalogInputSchema).optional(),
  ProviderFavoriteTest: z.lazy(() => ProviderFavoriteTestCreateNestedManyWithoutTestCatalogInputSchema).optional(),
  TestBiomarker: z.lazy(() => TestBiomarkerCreateNestedManyWithoutTestCatalogInputSchema).optional(),
  Lab: z.lazy(() => LabCreateNestedOneWithoutTestCatalogInputSchema).optional(),
  TestCptCode: z.lazy(() => TestCptCodeCreateNestedManyWithoutTestCatalogInputSchema).optional(),
  TestGene: z.lazy(() => TestGeneCreateNestedManyWithoutTestCatalogInputSchema).optional(),
  TestOrderLoinc: z.lazy(() => TestOrderLoincCreateNestedManyWithoutTestCatalogInputSchema).optional(),
  TestResultLoinc: z.lazy(() => TestResultLoincCreateNestedManyWithoutTestCatalogInputSchema).optional()
}).strict();

export const TestCatalogUncheckedCreateWithoutSponsoredTestInputSchema: z.ZodType<Prisma.TestCatalogUncheckedCreateWithoutSponsoredTestInput> = z.object({
  TestId: z.number().optional(),
  LabId: z.number().optional().nullable(),
  href: z.string().optional().nullable(),
  CasandraTestId: z.string(),
  LabTestId: z.string().optional().nullable(),
  TestName: z.string().optional().nullable(),
  AlternativeName: z.string().optional().nullable(),
  AlternativeName1: z.string().optional().nullable(),
  AlternativeName2: z.string().optional().nullable(),
  AlternativeName3: z.string().optional().nullable(),
  AlternativeName4: z.string().optional().nullable(),
  AlternativeName5: z.string().optional().nullable(),
  TestIncludes: z.string().optional().nullable(),
  SpecimenType: z.string().optional().nullable(),
  SpecialInstructions: z.string().optional().nullable(),
  Methodology: z.string().optional().nullable(),
  TestDescription: z.string().optional().nullable(),
  Diseases: z.string().optional().nullable(),
  Probes: z.string().optional().nullable(),
  ClinicalSignificance: z.string().optional().nullable(),
  SpecimenRequirements: z.string().optional().nullable(),
  Volume: z.string().optional().nullable(),
  MinimumVolume: z.string().optional().nullable(),
  Container: z.string().optional().nullable(),
  Collection: z.string().optional().nullable(),
  StabilityRequirements: z.string().optional().nullable(),
  StorageTransportation: z.string().optional().nullable(),
  PatientPreparation: z.string().optional().nullable(),
  CausesForRejection: z.string().optional().nullable(),
  TestUsage: z.string().optional().nullable(),
  TestLimitations: z.string().optional().nullable(),
  CPTCodes: z.string().optional().nullable(),
  NewYorkApproved: z.string().optional().nullable(),
  LevelOfService: z.string().optional().nullable(),
  TurnAroundTime: z.string().optional().nullable(),
  AssayCategory: z.string().optional().nullable(),
  ReferenceRanges: z.string().optional().nullable(),
  SetupSchedule: z.string().optional().nullable(),
  AlternativeSpecimen: z.string().optional().nullable(),
  LoincCodesText: z.string().optional().nullable(),
  LoincCodesHTML: z.string().optional().nullable(),
  TestCategory: z.string().optional().nullable(),
  TestSubCategory: z.string().optional().nullable(),
  CreatedAt: z.date().optional(),
  UpdatedAt: z.date().optional(),
  LabOrderTest: z.lazy(() => LabOrderTestUncheckedCreateNestedManyWithoutTestCatalogInputSchema).optional(),
  OrganizationFavoriteTest: z.lazy(() => OrganizationFavoriteTestUncheckedCreateNestedManyWithoutTestCatalogInputSchema).optional(),
  ProviderFavoriteTest: z.lazy(() => ProviderFavoriteTestUncheckedCreateNestedManyWithoutTestCatalogInputSchema).optional(),
  TestBiomarker: z.lazy(() => TestBiomarkerUncheckedCreateNestedManyWithoutTestCatalogInputSchema).optional(),
  TestCptCode: z.lazy(() => TestCptCodeUncheckedCreateNestedManyWithoutTestCatalogInputSchema).optional(),
  TestGene: z.lazy(() => TestGeneUncheckedCreateNestedManyWithoutTestCatalogInputSchema).optional(),
  TestOrderLoinc: z.lazy(() => TestOrderLoincUncheckedCreateNestedManyWithoutTestCatalogInputSchema).optional(),
  TestResultLoinc: z.lazy(() => TestResultLoincUncheckedCreateNestedManyWithoutTestCatalogInputSchema).optional()
}).strict();

export const TestCatalogCreateOrConnectWithoutSponsoredTestInputSchema: z.ZodType<Prisma.TestCatalogCreateOrConnectWithoutSponsoredTestInput> = z.object({
  where: z.lazy(() => TestCatalogWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => TestCatalogCreateWithoutSponsoredTestInputSchema),z.lazy(() => TestCatalogUncheckedCreateWithoutSponsoredTestInputSchema) ]),
}).strict();

export const LabOrderSponsoredTestConsentUpsertWithWhereUniqueWithoutSponsoredTestInputSchema: z.ZodType<Prisma.LabOrderSponsoredTestConsentUpsertWithWhereUniqueWithoutSponsoredTestInput> = z.object({
  where: z.lazy(() => LabOrderSponsoredTestConsentWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => LabOrderSponsoredTestConsentUpdateWithoutSponsoredTestInputSchema),z.lazy(() => LabOrderSponsoredTestConsentUncheckedUpdateWithoutSponsoredTestInputSchema) ]),
  create: z.union([ z.lazy(() => LabOrderSponsoredTestConsentCreateWithoutSponsoredTestInputSchema),z.lazy(() => LabOrderSponsoredTestConsentUncheckedCreateWithoutSponsoredTestInputSchema) ]),
}).strict();

export const LabOrderSponsoredTestConsentUpdateWithWhereUniqueWithoutSponsoredTestInputSchema: z.ZodType<Prisma.LabOrderSponsoredTestConsentUpdateWithWhereUniqueWithoutSponsoredTestInput> = z.object({
  where: z.lazy(() => LabOrderSponsoredTestConsentWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => LabOrderSponsoredTestConsentUpdateWithoutSponsoredTestInputSchema),z.lazy(() => LabOrderSponsoredTestConsentUncheckedUpdateWithoutSponsoredTestInputSchema) ]),
}).strict();

export const LabOrderSponsoredTestConsentUpdateManyWithWhereWithoutSponsoredTestInputSchema: z.ZodType<Prisma.LabOrderSponsoredTestConsentUpdateManyWithWhereWithoutSponsoredTestInput> = z.object({
  where: z.lazy(() => LabOrderSponsoredTestConsentScalarWhereInputSchema),
  data: z.union([ z.lazy(() => LabOrderSponsoredTestConsentUpdateManyMutationInputSchema),z.lazy(() => LabOrderSponsoredTestConsentUncheckedUpdateManyWithoutSponsoredTestInputSchema) ]),
}).strict();

export const LabUpsertWithoutSponsoredTestInputSchema: z.ZodType<Prisma.LabUpsertWithoutSponsoredTestInput> = z.object({
  update: z.union([ z.lazy(() => LabUpdateWithoutSponsoredTestInputSchema),z.lazy(() => LabUncheckedUpdateWithoutSponsoredTestInputSchema) ]),
  create: z.union([ z.lazy(() => LabCreateWithoutSponsoredTestInputSchema),z.lazy(() => LabUncheckedCreateWithoutSponsoredTestInputSchema) ]),
  where: z.lazy(() => LabWhereInputSchema).optional()
}).strict();

export const LabUpdateToOneWithWhereWithoutSponsoredTestInputSchema: z.ZodType<Prisma.LabUpdateToOneWithWhereWithoutSponsoredTestInput> = z.object({
  where: z.lazy(() => LabWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => LabUpdateWithoutSponsoredTestInputSchema),z.lazy(() => LabUncheckedUpdateWithoutSponsoredTestInputSchema) ]),
}).strict();

export const LabUpdateWithoutSponsoredTestInputSchema: z.ZodType<Prisma.LabUpdateWithoutSponsoredTestInput> = z.object({
  LabName: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  LabCode: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Address: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  City: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  State: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Zip: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  TestCatalog: z.lazy(() => TestCatalogUpdateManyWithoutLabNestedInputSchema).optional()
}).strict();

export const LabUncheckedUpdateWithoutSponsoredTestInputSchema: z.ZodType<Prisma.LabUncheckedUpdateWithoutSponsoredTestInput> = z.object({
  LabId: z.union([ z.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  LabName: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  LabCode: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Address: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  City: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  State: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Zip: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  TestCatalog: z.lazy(() => TestCatalogUncheckedUpdateManyWithoutLabNestedInputSchema).optional()
}).strict();

export const SponsoredProgramUpsertWithoutSponsoredTestInputSchema: z.ZodType<Prisma.SponsoredProgramUpsertWithoutSponsoredTestInput> = z.object({
  update: z.union([ z.lazy(() => SponsoredProgramUpdateWithoutSponsoredTestInputSchema),z.lazy(() => SponsoredProgramUncheckedUpdateWithoutSponsoredTestInputSchema) ]),
  create: z.union([ z.lazy(() => SponsoredProgramCreateWithoutSponsoredTestInputSchema),z.lazy(() => SponsoredProgramUncheckedCreateWithoutSponsoredTestInputSchema) ]),
  where: z.lazy(() => SponsoredProgramWhereInputSchema).optional()
}).strict();

export const SponsoredProgramUpdateToOneWithWhereWithoutSponsoredTestInputSchema: z.ZodType<Prisma.SponsoredProgramUpdateToOneWithWhereWithoutSponsoredTestInput> = z.object({
  where: z.lazy(() => SponsoredProgramWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => SponsoredProgramUpdateWithoutSponsoredTestInputSchema),z.lazy(() => SponsoredProgramUncheckedUpdateWithoutSponsoredTestInputSchema) ]),
}).strict();

export const SponsoredProgramUpdateWithoutSponsoredTestInputSchema: z.ZodType<Prisma.SponsoredProgramUpdateWithoutSponsoredTestInput> = z.object({
  TherapeuticArea: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  ProgramName: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  ProgramUrl: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  ProgramLabUrl: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  SponosoredTestingUrl: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  ProgramEligibility: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  CreatedAt: z.union([ z.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  UpdatedAt: z.union([ z.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Sponsor: z.lazy(() => SponsorUpdateOneWithoutSponsoredProgramNestedInputSchema).optional()
}).strict();

export const SponsoredProgramUncheckedUpdateWithoutSponsoredTestInputSchema: z.ZodType<Prisma.SponsoredProgramUncheckedUpdateWithoutSponsoredTestInput> = z.object({
  ProgramId: z.union([ z.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  SponsorId: z.union([ z.number(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  TherapeuticArea: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  ProgramName: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  ProgramUrl: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  ProgramLabUrl: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  SponosoredTestingUrl: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  ProgramEligibility: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  CreatedAt: z.union([ z.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  UpdatedAt: z.union([ z.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const TestCatalogUpsertWithoutSponsoredTestInputSchema: z.ZodType<Prisma.TestCatalogUpsertWithoutSponsoredTestInput> = z.object({
  update: z.union([ z.lazy(() => TestCatalogUpdateWithoutSponsoredTestInputSchema),z.lazy(() => TestCatalogUncheckedUpdateWithoutSponsoredTestInputSchema) ]),
  create: z.union([ z.lazy(() => TestCatalogCreateWithoutSponsoredTestInputSchema),z.lazy(() => TestCatalogUncheckedCreateWithoutSponsoredTestInputSchema) ]),
  where: z.lazy(() => TestCatalogWhereInputSchema).optional()
}).strict();

export const TestCatalogUpdateToOneWithWhereWithoutSponsoredTestInputSchema: z.ZodType<Prisma.TestCatalogUpdateToOneWithWhereWithoutSponsoredTestInput> = z.object({
  where: z.lazy(() => TestCatalogWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => TestCatalogUpdateWithoutSponsoredTestInputSchema),z.lazy(() => TestCatalogUncheckedUpdateWithoutSponsoredTestInputSchema) ]),
}).strict();

export const TestCatalogUpdateWithoutSponsoredTestInputSchema: z.ZodType<Prisma.TestCatalogUpdateWithoutSponsoredTestInput> = z.object({
  href: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  CasandraTestId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  LabTestId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  TestName: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  AlternativeName: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  AlternativeName1: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  AlternativeName2: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  AlternativeName3: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  AlternativeName4: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  AlternativeName5: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  TestIncludes: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  SpecimenType: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  SpecialInstructions: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Methodology: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  TestDescription: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Diseases: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Probes: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  ClinicalSignificance: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  SpecimenRequirements: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Volume: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  MinimumVolume: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Container: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Collection: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  StabilityRequirements: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  StorageTransportation: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  PatientPreparation: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  CausesForRejection: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  TestUsage: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  TestLimitations: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  CPTCodes: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  NewYorkApproved: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  LevelOfService: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  TurnAroundTime: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  AssayCategory: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  ReferenceRanges: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  SetupSchedule: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  AlternativeSpecimen: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  LoincCodesText: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  LoincCodesHTML: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  TestCategory: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  TestSubCategory: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  CreatedAt: z.union([ z.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  UpdatedAt: z.union([ z.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  LabOrderTest: z.lazy(() => LabOrderTestUpdateManyWithoutTestCatalogNestedInputSchema).optional(),
  OrganizationFavoriteTest: z.lazy(() => OrganizationFavoriteTestUpdateManyWithoutTestCatalogNestedInputSchema).optional(),
  ProviderFavoriteTest: z.lazy(() => ProviderFavoriteTestUpdateManyWithoutTestCatalogNestedInputSchema).optional(),
  TestBiomarker: z.lazy(() => TestBiomarkerUpdateManyWithoutTestCatalogNestedInputSchema).optional(),
  Lab: z.lazy(() => LabUpdateOneWithoutTestCatalogNestedInputSchema).optional(),
  TestCptCode: z.lazy(() => TestCptCodeUpdateManyWithoutTestCatalogNestedInputSchema).optional(),
  TestGene: z.lazy(() => TestGeneUpdateManyWithoutTestCatalogNestedInputSchema).optional(),
  TestOrderLoinc: z.lazy(() => TestOrderLoincUpdateManyWithoutTestCatalogNestedInputSchema).optional(),
  TestResultLoinc: z.lazy(() => TestResultLoincUpdateManyWithoutTestCatalogNestedInputSchema).optional()
}).strict();

export const TestCatalogUncheckedUpdateWithoutSponsoredTestInputSchema: z.ZodType<Prisma.TestCatalogUncheckedUpdateWithoutSponsoredTestInput> = z.object({
  TestId: z.union([ z.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  LabId: z.union([ z.number(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  href: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  CasandraTestId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  LabTestId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  TestName: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  AlternativeName: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  AlternativeName1: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  AlternativeName2: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  AlternativeName3: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  AlternativeName4: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  AlternativeName5: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  TestIncludes: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  SpecimenType: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  SpecialInstructions: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Methodology: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  TestDescription: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Diseases: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Probes: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  ClinicalSignificance: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  SpecimenRequirements: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Volume: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  MinimumVolume: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Container: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Collection: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  StabilityRequirements: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  StorageTransportation: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  PatientPreparation: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  CausesForRejection: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  TestUsage: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  TestLimitations: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  CPTCodes: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  NewYorkApproved: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  LevelOfService: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  TurnAroundTime: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  AssayCategory: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  ReferenceRanges: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  SetupSchedule: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  AlternativeSpecimen: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  LoincCodesText: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  LoincCodesHTML: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  TestCategory: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  TestSubCategory: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  CreatedAt: z.union([ z.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  UpdatedAt: z.union([ z.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  LabOrderTest: z.lazy(() => LabOrderTestUncheckedUpdateManyWithoutTestCatalogNestedInputSchema).optional(),
  OrganizationFavoriteTest: z.lazy(() => OrganizationFavoriteTestUncheckedUpdateManyWithoutTestCatalogNestedInputSchema).optional(),
  ProviderFavoriteTest: z.lazy(() => ProviderFavoriteTestUncheckedUpdateManyWithoutTestCatalogNestedInputSchema).optional(),
  TestBiomarker: z.lazy(() => TestBiomarkerUncheckedUpdateManyWithoutTestCatalogNestedInputSchema).optional(),
  TestCptCode: z.lazy(() => TestCptCodeUncheckedUpdateManyWithoutTestCatalogNestedInputSchema).optional(),
  TestGene: z.lazy(() => TestGeneUncheckedUpdateManyWithoutTestCatalogNestedInputSchema).optional(),
  TestOrderLoinc: z.lazy(() => TestOrderLoincUncheckedUpdateManyWithoutTestCatalogNestedInputSchema).optional(),
  TestResultLoinc: z.lazy(() => TestResultLoincUncheckedUpdateManyWithoutTestCatalogNestedInputSchema).optional()
}).strict();

export const BIOMARKERCreateWithoutTestBiomarkerInputSchema: z.ZodType<Prisma.BIOMARKERCreateWithoutTestBiomarkerInput> = z.object({
  HGNCId: z.string(),
  HGNCStatus: z.string().optional().nullable(),
  HGNCApprovedSymbol: z.string().optional().nullable(),
  HGNCApprovedName: z.string().optional().nullable()
}).strict();

export const BIOMARKERUncheckedCreateWithoutTestBiomarkerInputSchema: z.ZodType<Prisma.BIOMARKERUncheckedCreateWithoutTestBiomarkerInput> = z.object({
  HGNCId: z.string(),
  HGNCStatus: z.string().optional().nullable(),
  HGNCApprovedSymbol: z.string().optional().nullable(),
  HGNCApprovedName: z.string().optional().nullable()
}).strict();

export const BIOMARKERCreateOrConnectWithoutTestBiomarkerInputSchema: z.ZodType<Prisma.BIOMARKERCreateOrConnectWithoutTestBiomarkerInput> = z.object({
  where: z.lazy(() => BIOMARKERWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => BIOMARKERCreateWithoutTestBiomarkerInputSchema),z.lazy(() => BIOMARKERUncheckedCreateWithoutTestBiomarkerInputSchema) ]),
}).strict();

export const TestCatalogCreateWithoutTestBiomarkerInputSchema: z.ZodType<Prisma.TestCatalogCreateWithoutTestBiomarkerInput> = z.object({
  href: z.string().optional().nullable(),
  CasandraTestId: z.string(),
  LabTestId: z.string().optional().nullable(),
  TestName: z.string().optional().nullable(),
  AlternativeName: z.string().optional().nullable(),
  AlternativeName1: z.string().optional().nullable(),
  AlternativeName2: z.string().optional().nullable(),
  AlternativeName3: z.string().optional().nullable(),
  AlternativeName4: z.string().optional().nullable(),
  AlternativeName5: z.string().optional().nullable(),
  TestIncludes: z.string().optional().nullable(),
  SpecimenType: z.string().optional().nullable(),
  SpecialInstructions: z.string().optional().nullable(),
  Methodology: z.string().optional().nullable(),
  TestDescription: z.string().optional().nullable(),
  Diseases: z.string().optional().nullable(),
  Probes: z.string().optional().nullable(),
  ClinicalSignificance: z.string().optional().nullable(),
  SpecimenRequirements: z.string().optional().nullable(),
  Volume: z.string().optional().nullable(),
  MinimumVolume: z.string().optional().nullable(),
  Container: z.string().optional().nullable(),
  Collection: z.string().optional().nullable(),
  StabilityRequirements: z.string().optional().nullable(),
  StorageTransportation: z.string().optional().nullable(),
  PatientPreparation: z.string().optional().nullable(),
  CausesForRejection: z.string().optional().nullable(),
  TestUsage: z.string().optional().nullable(),
  TestLimitations: z.string().optional().nullable(),
  CPTCodes: z.string().optional().nullable(),
  NewYorkApproved: z.string().optional().nullable(),
  LevelOfService: z.string().optional().nullable(),
  TurnAroundTime: z.string().optional().nullable(),
  AssayCategory: z.string().optional().nullable(),
  ReferenceRanges: z.string().optional().nullable(),
  SetupSchedule: z.string().optional().nullable(),
  AlternativeSpecimen: z.string().optional().nullable(),
  LoincCodesText: z.string().optional().nullable(),
  LoincCodesHTML: z.string().optional().nullable(),
  TestCategory: z.string().optional().nullable(),
  TestSubCategory: z.string().optional().nullable(),
  CreatedAt: z.date().optional(),
  UpdatedAt: z.date().optional(),
  LabOrderTest: z.lazy(() => LabOrderTestCreateNestedManyWithoutTestCatalogInputSchema).optional(),
  OrganizationFavoriteTest: z.lazy(() => OrganizationFavoriteTestCreateNestedManyWithoutTestCatalogInputSchema).optional(),
  ProviderFavoriteTest: z.lazy(() => ProviderFavoriteTestCreateNestedManyWithoutTestCatalogInputSchema).optional(),
  SponsoredTest: z.lazy(() => SponsoredTestCreateNestedManyWithoutTestCatalogInputSchema).optional(),
  Lab: z.lazy(() => LabCreateNestedOneWithoutTestCatalogInputSchema).optional(),
  TestCptCode: z.lazy(() => TestCptCodeCreateNestedManyWithoutTestCatalogInputSchema).optional(),
  TestGene: z.lazy(() => TestGeneCreateNestedManyWithoutTestCatalogInputSchema).optional(),
  TestOrderLoinc: z.lazy(() => TestOrderLoincCreateNestedManyWithoutTestCatalogInputSchema).optional(),
  TestResultLoinc: z.lazy(() => TestResultLoincCreateNestedManyWithoutTestCatalogInputSchema).optional()
}).strict();

export const TestCatalogUncheckedCreateWithoutTestBiomarkerInputSchema: z.ZodType<Prisma.TestCatalogUncheckedCreateWithoutTestBiomarkerInput> = z.object({
  TestId: z.number().optional(),
  LabId: z.number().optional().nullable(),
  href: z.string().optional().nullable(),
  CasandraTestId: z.string(),
  LabTestId: z.string().optional().nullable(),
  TestName: z.string().optional().nullable(),
  AlternativeName: z.string().optional().nullable(),
  AlternativeName1: z.string().optional().nullable(),
  AlternativeName2: z.string().optional().nullable(),
  AlternativeName3: z.string().optional().nullable(),
  AlternativeName4: z.string().optional().nullable(),
  AlternativeName5: z.string().optional().nullable(),
  TestIncludes: z.string().optional().nullable(),
  SpecimenType: z.string().optional().nullable(),
  SpecialInstructions: z.string().optional().nullable(),
  Methodology: z.string().optional().nullable(),
  TestDescription: z.string().optional().nullable(),
  Diseases: z.string().optional().nullable(),
  Probes: z.string().optional().nullable(),
  ClinicalSignificance: z.string().optional().nullable(),
  SpecimenRequirements: z.string().optional().nullable(),
  Volume: z.string().optional().nullable(),
  MinimumVolume: z.string().optional().nullable(),
  Container: z.string().optional().nullable(),
  Collection: z.string().optional().nullable(),
  StabilityRequirements: z.string().optional().nullable(),
  StorageTransportation: z.string().optional().nullable(),
  PatientPreparation: z.string().optional().nullable(),
  CausesForRejection: z.string().optional().nullable(),
  TestUsage: z.string().optional().nullable(),
  TestLimitations: z.string().optional().nullable(),
  CPTCodes: z.string().optional().nullable(),
  NewYorkApproved: z.string().optional().nullable(),
  LevelOfService: z.string().optional().nullable(),
  TurnAroundTime: z.string().optional().nullable(),
  AssayCategory: z.string().optional().nullable(),
  ReferenceRanges: z.string().optional().nullable(),
  SetupSchedule: z.string().optional().nullable(),
  AlternativeSpecimen: z.string().optional().nullable(),
  LoincCodesText: z.string().optional().nullable(),
  LoincCodesHTML: z.string().optional().nullable(),
  TestCategory: z.string().optional().nullable(),
  TestSubCategory: z.string().optional().nullable(),
  CreatedAt: z.date().optional(),
  UpdatedAt: z.date().optional(),
  LabOrderTest: z.lazy(() => LabOrderTestUncheckedCreateNestedManyWithoutTestCatalogInputSchema).optional(),
  OrganizationFavoriteTest: z.lazy(() => OrganizationFavoriteTestUncheckedCreateNestedManyWithoutTestCatalogInputSchema).optional(),
  ProviderFavoriteTest: z.lazy(() => ProviderFavoriteTestUncheckedCreateNestedManyWithoutTestCatalogInputSchema).optional(),
  SponsoredTest: z.lazy(() => SponsoredTestUncheckedCreateNestedManyWithoutTestCatalogInputSchema).optional(),
  TestCptCode: z.lazy(() => TestCptCodeUncheckedCreateNestedManyWithoutTestCatalogInputSchema).optional(),
  TestGene: z.lazy(() => TestGeneUncheckedCreateNestedManyWithoutTestCatalogInputSchema).optional(),
  TestOrderLoinc: z.lazy(() => TestOrderLoincUncheckedCreateNestedManyWithoutTestCatalogInputSchema).optional(),
  TestResultLoinc: z.lazy(() => TestResultLoincUncheckedCreateNestedManyWithoutTestCatalogInputSchema).optional()
}).strict();

export const TestCatalogCreateOrConnectWithoutTestBiomarkerInputSchema: z.ZodType<Prisma.TestCatalogCreateOrConnectWithoutTestBiomarkerInput> = z.object({
  where: z.lazy(() => TestCatalogWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => TestCatalogCreateWithoutTestBiomarkerInputSchema),z.lazy(() => TestCatalogUncheckedCreateWithoutTestBiomarkerInputSchema) ]),
}).strict();

export const BIOMARKERUpsertWithoutTestBiomarkerInputSchema: z.ZodType<Prisma.BIOMARKERUpsertWithoutTestBiomarkerInput> = z.object({
  update: z.union([ z.lazy(() => BIOMARKERUpdateWithoutTestBiomarkerInputSchema),z.lazy(() => BIOMARKERUncheckedUpdateWithoutTestBiomarkerInputSchema) ]),
  create: z.union([ z.lazy(() => BIOMARKERCreateWithoutTestBiomarkerInputSchema),z.lazy(() => BIOMARKERUncheckedCreateWithoutTestBiomarkerInputSchema) ]),
  where: z.lazy(() => BIOMARKERWhereInputSchema).optional()
}).strict();

export const BIOMARKERUpdateToOneWithWhereWithoutTestBiomarkerInputSchema: z.ZodType<Prisma.BIOMARKERUpdateToOneWithWhereWithoutTestBiomarkerInput> = z.object({
  where: z.lazy(() => BIOMARKERWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => BIOMARKERUpdateWithoutTestBiomarkerInputSchema),z.lazy(() => BIOMARKERUncheckedUpdateWithoutTestBiomarkerInputSchema) ]),
}).strict();

export const BIOMARKERUpdateWithoutTestBiomarkerInputSchema: z.ZodType<Prisma.BIOMARKERUpdateWithoutTestBiomarkerInput> = z.object({
  HGNCId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  HGNCStatus: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  HGNCApprovedSymbol: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  HGNCApprovedName: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const BIOMARKERUncheckedUpdateWithoutTestBiomarkerInputSchema: z.ZodType<Prisma.BIOMARKERUncheckedUpdateWithoutTestBiomarkerInput> = z.object({
  HGNCId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  HGNCStatus: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  HGNCApprovedSymbol: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  HGNCApprovedName: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const TestCatalogUpsertWithoutTestBiomarkerInputSchema: z.ZodType<Prisma.TestCatalogUpsertWithoutTestBiomarkerInput> = z.object({
  update: z.union([ z.lazy(() => TestCatalogUpdateWithoutTestBiomarkerInputSchema),z.lazy(() => TestCatalogUncheckedUpdateWithoutTestBiomarkerInputSchema) ]),
  create: z.union([ z.lazy(() => TestCatalogCreateWithoutTestBiomarkerInputSchema),z.lazy(() => TestCatalogUncheckedCreateWithoutTestBiomarkerInputSchema) ]),
  where: z.lazy(() => TestCatalogWhereInputSchema).optional()
}).strict();

export const TestCatalogUpdateToOneWithWhereWithoutTestBiomarkerInputSchema: z.ZodType<Prisma.TestCatalogUpdateToOneWithWhereWithoutTestBiomarkerInput> = z.object({
  where: z.lazy(() => TestCatalogWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => TestCatalogUpdateWithoutTestBiomarkerInputSchema),z.lazy(() => TestCatalogUncheckedUpdateWithoutTestBiomarkerInputSchema) ]),
}).strict();

export const TestCatalogUpdateWithoutTestBiomarkerInputSchema: z.ZodType<Prisma.TestCatalogUpdateWithoutTestBiomarkerInput> = z.object({
  href: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  CasandraTestId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  LabTestId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  TestName: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  AlternativeName: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  AlternativeName1: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  AlternativeName2: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  AlternativeName3: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  AlternativeName4: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  AlternativeName5: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  TestIncludes: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  SpecimenType: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  SpecialInstructions: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Methodology: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  TestDescription: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Diseases: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Probes: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  ClinicalSignificance: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  SpecimenRequirements: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Volume: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  MinimumVolume: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Container: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Collection: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  StabilityRequirements: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  StorageTransportation: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  PatientPreparation: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  CausesForRejection: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  TestUsage: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  TestLimitations: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  CPTCodes: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  NewYorkApproved: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  LevelOfService: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  TurnAroundTime: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  AssayCategory: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  ReferenceRanges: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  SetupSchedule: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  AlternativeSpecimen: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  LoincCodesText: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  LoincCodesHTML: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  TestCategory: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  TestSubCategory: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  CreatedAt: z.union([ z.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  UpdatedAt: z.union([ z.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  LabOrderTest: z.lazy(() => LabOrderTestUpdateManyWithoutTestCatalogNestedInputSchema).optional(),
  OrganizationFavoriteTest: z.lazy(() => OrganizationFavoriteTestUpdateManyWithoutTestCatalogNestedInputSchema).optional(),
  ProviderFavoriteTest: z.lazy(() => ProviderFavoriteTestUpdateManyWithoutTestCatalogNestedInputSchema).optional(),
  SponsoredTest: z.lazy(() => SponsoredTestUpdateManyWithoutTestCatalogNestedInputSchema).optional(),
  Lab: z.lazy(() => LabUpdateOneWithoutTestCatalogNestedInputSchema).optional(),
  TestCptCode: z.lazy(() => TestCptCodeUpdateManyWithoutTestCatalogNestedInputSchema).optional(),
  TestGene: z.lazy(() => TestGeneUpdateManyWithoutTestCatalogNestedInputSchema).optional(),
  TestOrderLoinc: z.lazy(() => TestOrderLoincUpdateManyWithoutTestCatalogNestedInputSchema).optional(),
  TestResultLoinc: z.lazy(() => TestResultLoincUpdateManyWithoutTestCatalogNestedInputSchema).optional()
}).strict();

export const TestCatalogUncheckedUpdateWithoutTestBiomarkerInputSchema: z.ZodType<Prisma.TestCatalogUncheckedUpdateWithoutTestBiomarkerInput> = z.object({
  TestId: z.union([ z.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  LabId: z.union([ z.number(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  href: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  CasandraTestId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  LabTestId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  TestName: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  AlternativeName: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  AlternativeName1: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  AlternativeName2: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  AlternativeName3: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  AlternativeName4: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  AlternativeName5: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  TestIncludes: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  SpecimenType: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  SpecialInstructions: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Methodology: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  TestDescription: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Diseases: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Probes: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  ClinicalSignificance: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  SpecimenRequirements: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Volume: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  MinimumVolume: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Container: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Collection: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  StabilityRequirements: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  StorageTransportation: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  PatientPreparation: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  CausesForRejection: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  TestUsage: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  TestLimitations: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  CPTCodes: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  NewYorkApproved: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  LevelOfService: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  TurnAroundTime: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  AssayCategory: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  ReferenceRanges: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  SetupSchedule: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  AlternativeSpecimen: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  LoincCodesText: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  LoincCodesHTML: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  TestCategory: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  TestSubCategory: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  CreatedAt: z.union([ z.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  UpdatedAt: z.union([ z.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  LabOrderTest: z.lazy(() => LabOrderTestUncheckedUpdateManyWithoutTestCatalogNestedInputSchema).optional(),
  OrganizationFavoriteTest: z.lazy(() => OrganizationFavoriteTestUncheckedUpdateManyWithoutTestCatalogNestedInputSchema).optional(),
  ProviderFavoriteTest: z.lazy(() => ProviderFavoriteTestUncheckedUpdateManyWithoutTestCatalogNestedInputSchema).optional(),
  SponsoredTest: z.lazy(() => SponsoredTestUncheckedUpdateManyWithoutTestCatalogNestedInputSchema).optional(),
  TestCptCode: z.lazy(() => TestCptCodeUncheckedUpdateManyWithoutTestCatalogNestedInputSchema).optional(),
  TestGene: z.lazy(() => TestGeneUncheckedUpdateManyWithoutTestCatalogNestedInputSchema).optional(),
  TestOrderLoinc: z.lazy(() => TestOrderLoincUncheckedUpdateManyWithoutTestCatalogNestedInputSchema).optional(),
  TestResultLoinc: z.lazy(() => TestResultLoincUncheckedUpdateManyWithoutTestCatalogNestedInputSchema).optional()
}).strict();

export const LabOrderTestCreateWithoutTestCatalogInputSchema: z.ZodType<Prisma.LabOrderTestCreateWithoutTestCatalogInput> = z.object({
  Id: z.string().optional(),
  CreatedAt: z.date().optional().nullable(),
  UpdatedAt: z.date().optional().nullable(),
  LabOrder: z.lazy(() => LabOrderCreateNestedOneWithoutLabOrderTestInputSchema).optional()
}).strict();

export const LabOrderTestUncheckedCreateWithoutTestCatalogInputSchema: z.ZodType<Prisma.LabOrderTestUncheckedCreateWithoutTestCatalogInput> = z.object({
  Id: z.string().optional(),
  LabOrderId: z.string().optional().nullable(),
  CreatedAt: z.date().optional().nullable(),
  UpdatedAt: z.date().optional().nullable()
}).strict();

export const LabOrderTestCreateOrConnectWithoutTestCatalogInputSchema: z.ZodType<Prisma.LabOrderTestCreateOrConnectWithoutTestCatalogInput> = z.object({
  where: z.lazy(() => LabOrderTestWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => LabOrderTestCreateWithoutTestCatalogInputSchema),z.lazy(() => LabOrderTestUncheckedCreateWithoutTestCatalogInputSchema) ]),
}).strict();

export const LabOrderTestCreateManyTestCatalogInputEnvelopeSchema: z.ZodType<Prisma.LabOrderTestCreateManyTestCatalogInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => LabOrderTestCreateManyTestCatalogInputSchema),z.lazy(() => LabOrderTestCreateManyTestCatalogInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const OrganizationFavoriteTestCreateWithoutTestCatalogInputSchema: z.ZodType<Prisma.OrganizationFavoriteTestCreateWithoutTestCatalogInput> = z.object({
  Id: z.string().optional(),
  ParentId: z.string().optional().nullable(),
  ParentName: z.string().optional().nullable(),
  Level: z.number().optional().nullable(),
  CreatedAt: z.date().optional().nullable(),
  UpdatedAt: z.date().optional().nullable(),
  Organization: z.lazy(() => OrganizationCreateNestedOneWithoutOrganizationFavoriteTestInputSchema).optional()
}).strict();

export const OrganizationFavoriteTestUncheckedCreateWithoutTestCatalogInputSchema: z.ZodType<Prisma.OrganizationFavoriteTestUncheckedCreateWithoutTestCatalogInput> = z.object({
  Id: z.string().optional(),
  OrganizationId: z.string().optional().nullable(),
  ParentId: z.string().optional().nullable(),
  ParentName: z.string().optional().nullable(),
  Level: z.number().optional().nullable(),
  CreatedAt: z.date().optional().nullable(),
  UpdatedAt: z.date().optional().nullable()
}).strict();

export const OrganizationFavoriteTestCreateOrConnectWithoutTestCatalogInputSchema: z.ZodType<Prisma.OrganizationFavoriteTestCreateOrConnectWithoutTestCatalogInput> = z.object({
  where: z.lazy(() => OrganizationFavoriteTestWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => OrganizationFavoriteTestCreateWithoutTestCatalogInputSchema),z.lazy(() => OrganizationFavoriteTestUncheckedCreateWithoutTestCatalogInputSchema) ]),
}).strict();

export const OrganizationFavoriteTestCreateManyTestCatalogInputEnvelopeSchema: z.ZodType<Prisma.OrganizationFavoriteTestCreateManyTestCatalogInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => OrganizationFavoriteTestCreateManyTestCatalogInputSchema),z.lazy(() => OrganizationFavoriteTestCreateManyTestCatalogInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const ProviderFavoriteTestCreateWithoutTestCatalogInputSchema: z.ZodType<Prisma.ProviderFavoriteTestCreateWithoutTestCatalogInput> = z.object({
  Id: z.string().optional(),
  ParentId: z.string().optional().nullable(),
  ParentName: z.string().optional().nullable(),
  Level: z.number().optional().nullable(),
  CreatedAt: z.date().optional().nullable(),
  UpdatedAt: z.date().optional().nullable(),
  Provider: z.lazy(() => ProviderCreateNestedOneWithoutProviderFavoriteTestInputSchema).optional()
}).strict();

export const ProviderFavoriteTestUncheckedCreateWithoutTestCatalogInputSchema: z.ZodType<Prisma.ProviderFavoriteTestUncheckedCreateWithoutTestCatalogInput> = z.object({
  Id: z.string().optional(),
  ProviderId: z.string().optional().nullable(),
  ParentId: z.string().optional().nullable(),
  ParentName: z.string().optional().nullable(),
  Level: z.number().optional().nullable(),
  CreatedAt: z.date().optional().nullable(),
  UpdatedAt: z.date().optional().nullable()
}).strict();

export const ProviderFavoriteTestCreateOrConnectWithoutTestCatalogInputSchema: z.ZodType<Prisma.ProviderFavoriteTestCreateOrConnectWithoutTestCatalogInput> = z.object({
  where: z.lazy(() => ProviderFavoriteTestWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => ProviderFavoriteTestCreateWithoutTestCatalogInputSchema),z.lazy(() => ProviderFavoriteTestUncheckedCreateWithoutTestCatalogInputSchema) ]),
}).strict();

export const ProviderFavoriteTestCreateManyTestCatalogInputEnvelopeSchema: z.ZodType<Prisma.ProviderFavoriteTestCreateManyTestCatalogInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => ProviderFavoriteTestCreateManyTestCatalogInputSchema),z.lazy(() => ProviderFavoriteTestCreateManyTestCatalogInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const SponsoredTestCreateWithoutTestCatalogInputSchema: z.ZodType<Prisma.SponsoredTestCreateWithoutTestCatalogInput> = z.object({
  Id: z.string().optional(),
  LabTestId: z.string().optional().nullable(),
  CasandraTestId: z.string(),
  Category: z.string(),
  SubCategory: z.string().optional().nullable(),
  CreatedAt: z.date().optional().nullable(),
  UpdatedAt: z.date().optional().nullable(),
  LabOrderSponsoredTestConsent: z.lazy(() => LabOrderSponsoredTestConsentCreateNestedManyWithoutSponsoredTestInputSchema).optional(),
  Lab: z.lazy(() => LabCreateNestedOneWithoutSponsoredTestInputSchema).optional(),
  SponsoredProgram: z.lazy(() => SponsoredProgramCreateNestedOneWithoutSponsoredTestInputSchema).optional()
}).strict();

export const SponsoredTestUncheckedCreateWithoutTestCatalogInputSchema: z.ZodType<Prisma.SponsoredTestUncheckedCreateWithoutTestCatalogInput> = z.object({
  Id: z.string().optional(),
  LabTestId: z.string().optional().nullable(),
  SponsoredProgramId: z.number().optional().nullable(),
  LabId: z.number().optional().nullable(),
  CasandraTestId: z.string(),
  Category: z.string(),
  SubCategory: z.string().optional().nullable(),
  CreatedAt: z.date().optional().nullable(),
  UpdatedAt: z.date().optional().nullable(),
  LabOrderSponsoredTestConsent: z.lazy(() => LabOrderSponsoredTestConsentUncheckedCreateNestedManyWithoutSponsoredTestInputSchema).optional()
}).strict();

export const SponsoredTestCreateOrConnectWithoutTestCatalogInputSchema: z.ZodType<Prisma.SponsoredTestCreateOrConnectWithoutTestCatalogInput> = z.object({
  where: z.lazy(() => SponsoredTestWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => SponsoredTestCreateWithoutTestCatalogInputSchema),z.lazy(() => SponsoredTestUncheckedCreateWithoutTestCatalogInputSchema) ]),
}).strict();

export const SponsoredTestCreateManyTestCatalogInputEnvelopeSchema: z.ZodType<Prisma.SponsoredTestCreateManyTestCatalogInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => SponsoredTestCreateManyTestCatalogInputSchema),z.lazy(() => SponsoredTestCreateManyTestCatalogInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const TestBiomarkerCreateWithoutTestCatalogInputSchema: z.ZodType<Prisma.TestBiomarkerCreateWithoutTestCatalogInput> = z.object({
  LabTestId: z.string().optional().nullable(),
  TranscriptReference: z.string().optional().nullable(),
  CreatedAt: z.date().optional(),
  UpdatedAt: z.date().optional(),
  BIOMARKER: z.lazy(() => BIOMARKERCreateNestedOneWithoutTestBiomarkerInputSchema)
}).strict();

export const TestBiomarkerUncheckedCreateWithoutTestCatalogInputSchema: z.ZodType<Prisma.TestBiomarkerUncheckedCreateWithoutTestCatalogInput> = z.object({
  Id: z.number().optional(),
  LabTestId: z.string().optional().nullable(),
  HGNCId: z.string(),
  TranscriptReference: z.string().optional().nullable(),
  CreatedAt: z.date().optional(),
  UpdatedAt: z.date().optional()
}).strict();

export const TestBiomarkerCreateOrConnectWithoutTestCatalogInputSchema: z.ZodType<Prisma.TestBiomarkerCreateOrConnectWithoutTestCatalogInput> = z.object({
  where: z.lazy(() => TestBiomarkerWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => TestBiomarkerCreateWithoutTestCatalogInputSchema),z.lazy(() => TestBiomarkerUncheckedCreateWithoutTestCatalogInputSchema) ]),
}).strict();

export const TestBiomarkerCreateManyTestCatalogInputEnvelopeSchema: z.ZodType<Prisma.TestBiomarkerCreateManyTestCatalogInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => TestBiomarkerCreateManyTestCatalogInputSchema),z.lazy(() => TestBiomarkerCreateManyTestCatalogInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const LabCreateWithoutTestCatalogInputSchema: z.ZodType<Prisma.LabCreateWithoutTestCatalogInput> = z.object({
  LabName: z.string().optional().nullable(),
  LabCode: z.string().optional().nullable(),
  Address: z.string().optional().nullable(),
  City: z.string().optional().nullable(),
  State: z.string().optional().nullable(),
  Zip: z.string().optional().nullable(),
  SponsoredTest: z.lazy(() => SponsoredTestCreateNestedManyWithoutLabInputSchema).optional()
}).strict();

export const LabUncheckedCreateWithoutTestCatalogInputSchema: z.ZodType<Prisma.LabUncheckedCreateWithoutTestCatalogInput> = z.object({
  LabId: z.number().optional(),
  LabName: z.string().optional().nullable(),
  LabCode: z.string().optional().nullable(),
  Address: z.string().optional().nullable(),
  City: z.string().optional().nullable(),
  State: z.string().optional().nullable(),
  Zip: z.string().optional().nullable(),
  SponsoredTest: z.lazy(() => SponsoredTestUncheckedCreateNestedManyWithoutLabInputSchema).optional()
}).strict();

export const LabCreateOrConnectWithoutTestCatalogInputSchema: z.ZodType<Prisma.LabCreateOrConnectWithoutTestCatalogInput> = z.object({
  where: z.lazy(() => LabWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => LabCreateWithoutTestCatalogInputSchema),z.lazy(() => LabUncheckedCreateWithoutTestCatalogInputSchema) ]),
}).strict();

export const TestCptCodeCreateWithoutTestCatalogInputSchema: z.ZodType<Prisma.TestCptCodeCreateWithoutTestCatalogInput> = z.object({
  LabTestId: z.string().optional().nullable(),
  CptCode: z.string().optional().nullable(),
  Modifier: z.string().optional().nullable(),
  Comments: z.string().optional().nullable(),
  CreatedAt: z.date().optional(),
  UpdatedAt: z.date().optional()
}).strict();

export const TestCptCodeUncheckedCreateWithoutTestCatalogInputSchema: z.ZodType<Prisma.TestCptCodeUncheckedCreateWithoutTestCatalogInput> = z.object({
  Id: z.number().optional(),
  LabTestId: z.string().optional().nullable(),
  CptCode: z.string().optional().nullable(),
  Modifier: z.string().optional().nullable(),
  Comments: z.string().optional().nullable(),
  CreatedAt: z.date().optional(),
  UpdatedAt: z.date().optional()
}).strict();

export const TestCptCodeCreateOrConnectWithoutTestCatalogInputSchema: z.ZodType<Prisma.TestCptCodeCreateOrConnectWithoutTestCatalogInput> = z.object({
  where: z.lazy(() => TestCptCodeWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => TestCptCodeCreateWithoutTestCatalogInputSchema),z.lazy(() => TestCptCodeUncheckedCreateWithoutTestCatalogInputSchema) ]),
}).strict();

export const TestCptCodeCreateManyTestCatalogInputEnvelopeSchema: z.ZodType<Prisma.TestCptCodeCreateManyTestCatalogInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => TestCptCodeCreateManyTestCatalogInputSchema),z.lazy(() => TestCptCodeCreateManyTestCatalogInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const TestGeneCreateWithoutTestCatalogInputSchema: z.ZodType<Prisma.TestGeneCreateWithoutTestCatalogInput> = z.object({
  LabTestId: z.string().optional().nullable(),
  Gene: z.string(),
  TranscriptReference: z.string().optional().nullable(),
  CreatedAt: z.date().optional(),
  UpdatedAt: z.date().optional()
}).strict();

export const TestGeneUncheckedCreateWithoutTestCatalogInputSchema: z.ZodType<Prisma.TestGeneUncheckedCreateWithoutTestCatalogInput> = z.object({
  Id: z.number().optional(),
  LabTestId: z.string().optional().nullable(),
  Gene: z.string(),
  TranscriptReference: z.string().optional().nullable(),
  CreatedAt: z.date().optional(),
  UpdatedAt: z.date().optional()
}).strict();

export const TestGeneCreateOrConnectWithoutTestCatalogInputSchema: z.ZodType<Prisma.TestGeneCreateOrConnectWithoutTestCatalogInput> = z.object({
  where: z.lazy(() => TestGeneWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => TestGeneCreateWithoutTestCatalogInputSchema),z.lazy(() => TestGeneUncheckedCreateWithoutTestCatalogInputSchema) ]),
}).strict();

export const TestGeneCreateManyTestCatalogInputEnvelopeSchema: z.ZodType<Prisma.TestGeneCreateManyTestCatalogInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => TestGeneCreateManyTestCatalogInputSchema),z.lazy(() => TestGeneCreateManyTestCatalogInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const TestOrderLoincCreateWithoutTestCatalogInputSchema: z.ZodType<Prisma.TestOrderLoincCreateWithoutTestCatalogInput> = z.object({
  LabTestId: z.string().optional().nullable(),
  CreatedAt: z.date().optional(),
  UpdatedAt: z.date().optional(),
  LOINC: z.lazy(() => LOINCCreateNestedOneWithoutTestOrderLoincInputSchema).optional()
}).strict();

export const TestOrderLoincUncheckedCreateWithoutTestCatalogInputSchema: z.ZodType<Prisma.TestOrderLoincUncheckedCreateWithoutTestCatalogInput> = z.object({
  Id: z.number().optional(),
  LabTestId: z.string().optional().nullable(),
  OrderLoinc: z.string().optional().nullable(),
  CreatedAt: z.date().optional(),
  UpdatedAt: z.date().optional()
}).strict();

export const TestOrderLoincCreateOrConnectWithoutTestCatalogInputSchema: z.ZodType<Prisma.TestOrderLoincCreateOrConnectWithoutTestCatalogInput> = z.object({
  where: z.lazy(() => TestOrderLoincWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => TestOrderLoincCreateWithoutTestCatalogInputSchema),z.lazy(() => TestOrderLoincUncheckedCreateWithoutTestCatalogInputSchema) ]),
}).strict();

export const TestOrderLoincCreateManyTestCatalogInputEnvelopeSchema: z.ZodType<Prisma.TestOrderLoincCreateManyTestCatalogInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => TestOrderLoincCreateManyTestCatalogInputSchema),z.lazy(() => TestOrderLoincCreateManyTestCatalogInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const TestResultLoincCreateWithoutTestCatalogInputSchema: z.ZodType<Prisma.TestResultLoincCreateWithoutTestCatalogInput> = z.object({
  LabTestId: z.string().optional().nullable(),
  ResultCode: z.string().optional().nullable(),
  ResultCodeName: z.string().optional().nullable(),
  UofM: z.string().optional().nullable(),
  CreatedAt: z.date().optional(),
  UpdatedAt: z.date().optional(),
  LOINC: z.lazy(() => LOINCCreateNestedOneWithoutTestResultLoincInputSchema).optional()
}).strict();

export const TestResultLoincUncheckedCreateWithoutTestCatalogInputSchema: z.ZodType<Prisma.TestResultLoincUncheckedCreateWithoutTestCatalogInput> = z.object({
  Id: z.number().optional(),
  LabTestId: z.string().optional().nullable(),
  ResultCode: z.string().optional().nullable(),
  ResultCodeName: z.string().optional().nullable(),
  UofM: z.string().optional().nullable(),
  ResultLoinc: z.string().optional().nullable(),
  CreatedAt: z.date().optional(),
  UpdatedAt: z.date().optional()
}).strict();

export const TestResultLoincCreateOrConnectWithoutTestCatalogInputSchema: z.ZodType<Prisma.TestResultLoincCreateOrConnectWithoutTestCatalogInput> = z.object({
  where: z.lazy(() => TestResultLoincWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => TestResultLoincCreateWithoutTestCatalogInputSchema),z.lazy(() => TestResultLoincUncheckedCreateWithoutTestCatalogInputSchema) ]),
}).strict();

export const TestResultLoincCreateManyTestCatalogInputEnvelopeSchema: z.ZodType<Prisma.TestResultLoincCreateManyTestCatalogInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => TestResultLoincCreateManyTestCatalogInputSchema),z.lazy(() => TestResultLoincCreateManyTestCatalogInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const LabOrderTestUpsertWithWhereUniqueWithoutTestCatalogInputSchema: z.ZodType<Prisma.LabOrderTestUpsertWithWhereUniqueWithoutTestCatalogInput> = z.object({
  where: z.lazy(() => LabOrderTestWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => LabOrderTestUpdateWithoutTestCatalogInputSchema),z.lazy(() => LabOrderTestUncheckedUpdateWithoutTestCatalogInputSchema) ]),
  create: z.union([ z.lazy(() => LabOrderTestCreateWithoutTestCatalogInputSchema),z.lazy(() => LabOrderTestUncheckedCreateWithoutTestCatalogInputSchema) ]),
}).strict();

export const LabOrderTestUpdateWithWhereUniqueWithoutTestCatalogInputSchema: z.ZodType<Prisma.LabOrderTestUpdateWithWhereUniqueWithoutTestCatalogInput> = z.object({
  where: z.lazy(() => LabOrderTestWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => LabOrderTestUpdateWithoutTestCatalogInputSchema),z.lazy(() => LabOrderTestUncheckedUpdateWithoutTestCatalogInputSchema) ]),
}).strict();

export const LabOrderTestUpdateManyWithWhereWithoutTestCatalogInputSchema: z.ZodType<Prisma.LabOrderTestUpdateManyWithWhereWithoutTestCatalogInput> = z.object({
  where: z.lazy(() => LabOrderTestScalarWhereInputSchema),
  data: z.union([ z.lazy(() => LabOrderTestUpdateManyMutationInputSchema),z.lazy(() => LabOrderTestUncheckedUpdateManyWithoutTestCatalogInputSchema) ]),
}).strict();

export const OrganizationFavoriteTestUpsertWithWhereUniqueWithoutTestCatalogInputSchema: z.ZodType<Prisma.OrganizationFavoriteTestUpsertWithWhereUniqueWithoutTestCatalogInput> = z.object({
  where: z.lazy(() => OrganizationFavoriteTestWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => OrganizationFavoriteTestUpdateWithoutTestCatalogInputSchema),z.lazy(() => OrganizationFavoriteTestUncheckedUpdateWithoutTestCatalogInputSchema) ]),
  create: z.union([ z.lazy(() => OrganizationFavoriteTestCreateWithoutTestCatalogInputSchema),z.lazy(() => OrganizationFavoriteTestUncheckedCreateWithoutTestCatalogInputSchema) ]),
}).strict();

export const OrganizationFavoriteTestUpdateWithWhereUniqueWithoutTestCatalogInputSchema: z.ZodType<Prisma.OrganizationFavoriteTestUpdateWithWhereUniqueWithoutTestCatalogInput> = z.object({
  where: z.lazy(() => OrganizationFavoriteTestWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => OrganizationFavoriteTestUpdateWithoutTestCatalogInputSchema),z.lazy(() => OrganizationFavoriteTestUncheckedUpdateWithoutTestCatalogInputSchema) ]),
}).strict();

export const OrganizationFavoriteTestUpdateManyWithWhereWithoutTestCatalogInputSchema: z.ZodType<Prisma.OrganizationFavoriteTestUpdateManyWithWhereWithoutTestCatalogInput> = z.object({
  where: z.lazy(() => OrganizationFavoriteTestScalarWhereInputSchema),
  data: z.union([ z.lazy(() => OrganizationFavoriteTestUpdateManyMutationInputSchema),z.lazy(() => OrganizationFavoriteTestUncheckedUpdateManyWithoutTestCatalogInputSchema) ]),
}).strict();

export const ProviderFavoriteTestUpsertWithWhereUniqueWithoutTestCatalogInputSchema: z.ZodType<Prisma.ProviderFavoriteTestUpsertWithWhereUniqueWithoutTestCatalogInput> = z.object({
  where: z.lazy(() => ProviderFavoriteTestWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => ProviderFavoriteTestUpdateWithoutTestCatalogInputSchema),z.lazy(() => ProviderFavoriteTestUncheckedUpdateWithoutTestCatalogInputSchema) ]),
  create: z.union([ z.lazy(() => ProviderFavoriteTestCreateWithoutTestCatalogInputSchema),z.lazy(() => ProviderFavoriteTestUncheckedCreateWithoutTestCatalogInputSchema) ]),
}).strict();

export const ProviderFavoriteTestUpdateWithWhereUniqueWithoutTestCatalogInputSchema: z.ZodType<Prisma.ProviderFavoriteTestUpdateWithWhereUniqueWithoutTestCatalogInput> = z.object({
  where: z.lazy(() => ProviderFavoriteTestWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => ProviderFavoriteTestUpdateWithoutTestCatalogInputSchema),z.lazy(() => ProviderFavoriteTestUncheckedUpdateWithoutTestCatalogInputSchema) ]),
}).strict();

export const ProviderFavoriteTestUpdateManyWithWhereWithoutTestCatalogInputSchema: z.ZodType<Prisma.ProviderFavoriteTestUpdateManyWithWhereWithoutTestCatalogInput> = z.object({
  where: z.lazy(() => ProviderFavoriteTestScalarWhereInputSchema),
  data: z.union([ z.lazy(() => ProviderFavoriteTestUpdateManyMutationInputSchema),z.lazy(() => ProviderFavoriteTestUncheckedUpdateManyWithoutTestCatalogInputSchema) ]),
}).strict();

export const SponsoredTestUpsertWithWhereUniqueWithoutTestCatalogInputSchema: z.ZodType<Prisma.SponsoredTestUpsertWithWhereUniqueWithoutTestCatalogInput> = z.object({
  where: z.lazy(() => SponsoredTestWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => SponsoredTestUpdateWithoutTestCatalogInputSchema),z.lazy(() => SponsoredTestUncheckedUpdateWithoutTestCatalogInputSchema) ]),
  create: z.union([ z.lazy(() => SponsoredTestCreateWithoutTestCatalogInputSchema),z.lazy(() => SponsoredTestUncheckedCreateWithoutTestCatalogInputSchema) ]),
}).strict();

export const SponsoredTestUpdateWithWhereUniqueWithoutTestCatalogInputSchema: z.ZodType<Prisma.SponsoredTestUpdateWithWhereUniqueWithoutTestCatalogInput> = z.object({
  where: z.lazy(() => SponsoredTestWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => SponsoredTestUpdateWithoutTestCatalogInputSchema),z.lazy(() => SponsoredTestUncheckedUpdateWithoutTestCatalogInputSchema) ]),
}).strict();

export const SponsoredTestUpdateManyWithWhereWithoutTestCatalogInputSchema: z.ZodType<Prisma.SponsoredTestUpdateManyWithWhereWithoutTestCatalogInput> = z.object({
  where: z.lazy(() => SponsoredTestScalarWhereInputSchema),
  data: z.union([ z.lazy(() => SponsoredTestUpdateManyMutationInputSchema),z.lazy(() => SponsoredTestUncheckedUpdateManyWithoutTestCatalogInputSchema) ]),
}).strict();

export const TestBiomarkerUpsertWithWhereUniqueWithoutTestCatalogInputSchema: z.ZodType<Prisma.TestBiomarkerUpsertWithWhereUniqueWithoutTestCatalogInput> = z.object({
  where: z.lazy(() => TestBiomarkerWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => TestBiomarkerUpdateWithoutTestCatalogInputSchema),z.lazy(() => TestBiomarkerUncheckedUpdateWithoutTestCatalogInputSchema) ]),
  create: z.union([ z.lazy(() => TestBiomarkerCreateWithoutTestCatalogInputSchema),z.lazy(() => TestBiomarkerUncheckedCreateWithoutTestCatalogInputSchema) ]),
}).strict();

export const TestBiomarkerUpdateWithWhereUniqueWithoutTestCatalogInputSchema: z.ZodType<Prisma.TestBiomarkerUpdateWithWhereUniqueWithoutTestCatalogInput> = z.object({
  where: z.lazy(() => TestBiomarkerWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => TestBiomarkerUpdateWithoutTestCatalogInputSchema),z.lazy(() => TestBiomarkerUncheckedUpdateWithoutTestCatalogInputSchema) ]),
}).strict();

export const TestBiomarkerUpdateManyWithWhereWithoutTestCatalogInputSchema: z.ZodType<Prisma.TestBiomarkerUpdateManyWithWhereWithoutTestCatalogInput> = z.object({
  where: z.lazy(() => TestBiomarkerScalarWhereInputSchema),
  data: z.union([ z.lazy(() => TestBiomarkerUpdateManyMutationInputSchema),z.lazy(() => TestBiomarkerUncheckedUpdateManyWithoutTestCatalogInputSchema) ]),
}).strict();

export const LabUpsertWithoutTestCatalogInputSchema: z.ZodType<Prisma.LabUpsertWithoutTestCatalogInput> = z.object({
  update: z.union([ z.lazy(() => LabUpdateWithoutTestCatalogInputSchema),z.lazy(() => LabUncheckedUpdateWithoutTestCatalogInputSchema) ]),
  create: z.union([ z.lazy(() => LabCreateWithoutTestCatalogInputSchema),z.lazy(() => LabUncheckedCreateWithoutTestCatalogInputSchema) ]),
  where: z.lazy(() => LabWhereInputSchema).optional()
}).strict();

export const LabUpdateToOneWithWhereWithoutTestCatalogInputSchema: z.ZodType<Prisma.LabUpdateToOneWithWhereWithoutTestCatalogInput> = z.object({
  where: z.lazy(() => LabWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => LabUpdateWithoutTestCatalogInputSchema),z.lazy(() => LabUncheckedUpdateWithoutTestCatalogInputSchema) ]),
}).strict();

export const LabUpdateWithoutTestCatalogInputSchema: z.ZodType<Prisma.LabUpdateWithoutTestCatalogInput> = z.object({
  LabName: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  LabCode: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Address: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  City: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  State: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Zip: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  SponsoredTest: z.lazy(() => SponsoredTestUpdateManyWithoutLabNestedInputSchema).optional()
}).strict();

export const LabUncheckedUpdateWithoutTestCatalogInputSchema: z.ZodType<Prisma.LabUncheckedUpdateWithoutTestCatalogInput> = z.object({
  LabId: z.union([ z.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  LabName: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  LabCode: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Address: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  City: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  State: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Zip: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  SponsoredTest: z.lazy(() => SponsoredTestUncheckedUpdateManyWithoutLabNestedInputSchema).optional()
}).strict();

export const TestCptCodeUpsertWithWhereUniqueWithoutTestCatalogInputSchema: z.ZodType<Prisma.TestCptCodeUpsertWithWhereUniqueWithoutTestCatalogInput> = z.object({
  where: z.lazy(() => TestCptCodeWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => TestCptCodeUpdateWithoutTestCatalogInputSchema),z.lazy(() => TestCptCodeUncheckedUpdateWithoutTestCatalogInputSchema) ]),
  create: z.union([ z.lazy(() => TestCptCodeCreateWithoutTestCatalogInputSchema),z.lazy(() => TestCptCodeUncheckedCreateWithoutTestCatalogInputSchema) ]),
}).strict();

export const TestCptCodeUpdateWithWhereUniqueWithoutTestCatalogInputSchema: z.ZodType<Prisma.TestCptCodeUpdateWithWhereUniqueWithoutTestCatalogInput> = z.object({
  where: z.lazy(() => TestCptCodeWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => TestCptCodeUpdateWithoutTestCatalogInputSchema),z.lazy(() => TestCptCodeUncheckedUpdateWithoutTestCatalogInputSchema) ]),
}).strict();

export const TestCptCodeUpdateManyWithWhereWithoutTestCatalogInputSchema: z.ZodType<Prisma.TestCptCodeUpdateManyWithWhereWithoutTestCatalogInput> = z.object({
  where: z.lazy(() => TestCptCodeScalarWhereInputSchema),
  data: z.union([ z.lazy(() => TestCptCodeUpdateManyMutationInputSchema),z.lazy(() => TestCptCodeUncheckedUpdateManyWithoutTestCatalogInputSchema) ]),
}).strict();

export const TestCptCodeScalarWhereInputSchema: z.ZodType<Prisma.TestCptCodeScalarWhereInput> = z.object({
  AND: z.union([ z.lazy(() => TestCptCodeScalarWhereInputSchema),z.lazy(() => TestCptCodeScalarWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => TestCptCodeScalarWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => TestCptCodeScalarWhereInputSchema),z.lazy(() => TestCptCodeScalarWhereInputSchema).array() ]).optional(),
  Id: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  TestId: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  LabTestId: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  CptCode: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  Modifier: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  Comments: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  CreatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.date() ]).optional(),
  UpdatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.date() ]).optional(),
}).strict();

export const TestGeneUpsertWithWhereUniqueWithoutTestCatalogInputSchema: z.ZodType<Prisma.TestGeneUpsertWithWhereUniqueWithoutTestCatalogInput> = z.object({
  where: z.lazy(() => TestGeneWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => TestGeneUpdateWithoutTestCatalogInputSchema),z.lazy(() => TestGeneUncheckedUpdateWithoutTestCatalogInputSchema) ]),
  create: z.union([ z.lazy(() => TestGeneCreateWithoutTestCatalogInputSchema),z.lazy(() => TestGeneUncheckedCreateWithoutTestCatalogInputSchema) ]),
}).strict();

export const TestGeneUpdateWithWhereUniqueWithoutTestCatalogInputSchema: z.ZodType<Prisma.TestGeneUpdateWithWhereUniqueWithoutTestCatalogInput> = z.object({
  where: z.lazy(() => TestGeneWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => TestGeneUpdateWithoutTestCatalogInputSchema),z.lazy(() => TestGeneUncheckedUpdateWithoutTestCatalogInputSchema) ]),
}).strict();

export const TestGeneUpdateManyWithWhereWithoutTestCatalogInputSchema: z.ZodType<Prisma.TestGeneUpdateManyWithWhereWithoutTestCatalogInput> = z.object({
  where: z.lazy(() => TestGeneScalarWhereInputSchema),
  data: z.union([ z.lazy(() => TestGeneUpdateManyMutationInputSchema),z.lazy(() => TestGeneUncheckedUpdateManyWithoutTestCatalogInputSchema) ]),
}).strict();

export const TestGeneScalarWhereInputSchema: z.ZodType<Prisma.TestGeneScalarWhereInput> = z.object({
  AND: z.union([ z.lazy(() => TestGeneScalarWhereInputSchema),z.lazy(() => TestGeneScalarWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => TestGeneScalarWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => TestGeneScalarWhereInputSchema),z.lazy(() => TestGeneScalarWhereInputSchema).array() ]).optional(),
  Id: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  TestId: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  LabTestId: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  Gene: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  TranscriptReference: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  CreatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.date() ]).optional(),
  UpdatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.date() ]).optional(),
}).strict();

export const TestOrderLoincUpsertWithWhereUniqueWithoutTestCatalogInputSchema: z.ZodType<Prisma.TestOrderLoincUpsertWithWhereUniqueWithoutTestCatalogInput> = z.object({
  where: z.lazy(() => TestOrderLoincWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => TestOrderLoincUpdateWithoutTestCatalogInputSchema),z.lazy(() => TestOrderLoincUncheckedUpdateWithoutTestCatalogInputSchema) ]),
  create: z.union([ z.lazy(() => TestOrderLoincCreateWithoutTestCatalogInputSchema),z.lazy(() => TestOrderLoincUncheckedCreateWithoutTestCatalogInputSchema) ]),
}).strict();

export const TestOrderLoincUpdateWithWhereUniqueWithoutTestCatalogInputSchema: z.ZodType<Prisma.TestOrderLoincUpdateWithWhereUniqueWithoutTestCatalogInput> = z.object({
  where: z.lazy(() => TestOrderLoincWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => TestOrderLoincUpdateWithoutTestCatalogInputSchema),z.lazy(() => TestOrderLoincUncheckedUpdateWithoutTestCatalogInputSchema) ]),
}).strict();

export const TestOrderLoincUpdateManyWithWhereWithoutTestCatalogInputSchema: z.ZodType<Prisma.TestOrderLoincUpdateManyWithWhereWithoutTestCatalogInput> = z.object({
  where: z.lazy(() => TestOrderLoincScalarWhereInputSchema),
  data: z.union([ z.lazy(() => TestOrderLoincUpdateManyMutationInputSchema),z.lazy(() => TestOrderLoincUncheckedUpdateManyWithoutTestCatalogInputSchema) ]),
}).strict();

export const TestResultLoincUpsertWithWhereUniqueWithoutTestCatalogInputSchema: z.ZodType<Prisma.TestResultLoincUpsertWithWhereUniqueWithoutTestCatalogInput> = z.object({
  where: z.lazy(() => TestResultLoincWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => TestResultLoincUpdateWithoutTestCatalogInputSchema),z.lazy(() => TestResultLoincUncheckedUpdateWithoutTestCatalogInputSchema) ]),
  create: z.union([ z.lazy(() => TestResultLoincCreateWithoutTestCatalogInputSchema),z.lazy(() => TestResultLoincUncheckedCreateWithoutTestCatalogInputSchema) ]),
}).strict();

export const TestResultLoincUpdateWithWhereUniqueWithoutTestCatalogInputSchema: z.ZodType<Prisma.TestResultLoincUpdateWithWhereUniqueWithoutTestCatalogInput> = z.object({
  where: z.lazy(() => TestResultLoincWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => TestResultLoincUpdateWithoutTestCatalogInputSchema),z.lazy(() => TestResultLoincUncheckedUpdateWithoutTestCatalogInputSchema) ]),
}).strict();

export const TestResultLoincUpdateManyWithWhereWithoutTestCatalogInputSchema: z.ZodType<Prisma.TestResultLoincUpdateManyWithWhereWithoutTestCatalogInput> = z.object({
  where: z.lazy(() => TestResultLoincScalarWhereInputSchema),
  data: z.union([ z.lazy(() => TestResultLoincUpdateManyMutationInputSchema),z.lazy(() => TestResultLoincUncheckedUpdateManyWithoutTestCatalogInputSchema) ]),
}).strict();

export const TestCatalogCreateWithoutTestCptCodeInputSchema: z.ZodType<Prisma.TestCatalogCreateWithoutTestCptCodeInput> = z.object({
  href: z.string().optional().nullable(),
  CasandraTestId: z.string(),
  LabTestId: z.string().optional().nullable(),
  TestName: z.string().optional().nullable(),
  AlternativeName: z.string().optional().nullable(),
  AlternativeName1: z.string().optional().nullable(),
  AlternativeName2: z.string().optional().nullable(),
  AlternativeName3: z.string().optional().nullable(),
  AlternativeName4: z.string().optional().nullable(),
  AlternativeName5: z.string().optional().nullable(),
  TestIncludes: z.string().optional().nullable(),
  SpecimenType: z.string().optional().nullable(),
  SpecialInstructions: z.string().optional().nullable(),
  Methodology: z.string().optional().nullable(),
  TestDescription: z.string().optional().nullable(),
  Diseases: z.string().optional().nullable(),
  Probes: z.string().optional().nullable(),
  ClinicalSignificance: z.string().optional().nullable(),
  SpecimenRequirements: z.string().optional().nullable(),
  Volume: z.string().optional().nullable(),
  MinimumVolume: z.string().optional().nullable(),
  Container: z.string().optional().nullable(),
  Collection: z.string().optional().nullable(),
  StabilityRequirements: z.string().optional().nullable(),
  StorageTransportation: z.string().optional().nullable(),
  PatientPreparation: z.string().optional().nullable(),
  CausesForRejection: z.string().optional().nullable(),
  TestUsage: z.string().optional().nullable(),
  TestLimitations: z.string().optional().nullable(),
  CPTCodes: z.string().optional().nullable(),
  NewYorkApproved: z.string().optional().nullable(),
  LevelOfService: z.string().optional().nullable(),
  TurnAroundTime: z.string().optional().nullable(),
  AssayCategory: z.string().optional().nullable(),
  ReferenceRanges: z.string().optional().nullable(),
  SetupSchedule: z.string().optional().nullable(),
  AlternativeSpecimen: z.string().optional().nullable(),
  LoincCodesText: z.string().optional().nullable(),
  LoincCodesHTML: z.string().optional().nullable(),
  TestCategory: z.string().optional().nullable(),
  TestSubCategory: z.string().optional().nullable(),
  CreatedAt: z.date().optional(),
  UpdatedAt: z.date().optional(),
  LabOrderTest: z.lazy(() => LabOrderTestCreateNestedManyWithoutTestCatalogInputSchema).optional(),
  OrganizationFavoriteTest: z.lazy(() => OrganizationFavoriteTestCreateNestedManyWithoutTestCatalogInputSchema).optional(),
  ProviderFavoriteTest: z.lazy(() => ProviderFavoriteTestCreateNestedManyWithoutTestCatalogInputSchema).optional(),
  SponsoredTest: z.lazy(() => SponsoredTestCreateNestedManyWithoutTestCatalogInputSchema).optional(),
  TestBiomarker: z.lazy(() => TestBiomarkerCreateNestedManyWithoutTestCatalogInputSchema).optional(),
  Lab: z.lazy(() => LabCreateNestedOneWithoutTestCatalogInputSchema).optional(),
  TestGene: z.lazy(() => TestGeneCreateNestedManyWithoutTestCatalogInputSchema).optional(),
  TestOrderLoinc: z.lazy(() => TestOrderLoincCreateNestedManyWithoutTestCatalogInputSchema).optional(),
  TestResultLoinc: z.lazy(() => TestResultLoincCreateNestedManyWithoutTestCatalogInputSchema).optional()
}).strict();

export const TestCatalogUncheckedCreateWithoutTestCptCodeInputSchema: z.ZodType<Prisma.TestCatalogUncheckedCreateWithoutTestCptCodeInput> = z.object({
  TestId: z.number().optional(),
  LabId: z.number().optional().nullable(),
  href: z.string().optional().nullable(),
  CasandraTestId: z.string(),
  LabTestId: z.string().optional().nullable(),
  TestName: z.string().optional().nullable(),
  AlternativeName: z.string().optional().nullable(),
  AlternativeName1: z.string().optional().nullable(),
  AlternativeName2: z.string().optional().nullable(),
  AlternativeName3: z.string().optional().nullable(),
  AlternativeName4: z.string().optional().nullable(),
  AlternativeName5: z.string().optional().nullable(),
  TestIncludes: z.string().optional().nullable(),
  SpecimenType: z.string().optional().nullable(),
  SpecialInstructions: z.string().optional().nullable(),
  Methodology: z.string().optional().nullable(),
  TestDescription: z.string().optional().nullable(),
  Diseases: z.string().optional().nullable(),
  Probes: z.string().optional().nullable(),
  ClinicalSignificance: z.string().optional().nullable(),
  SpecimenRequirements: z.string().optional().nullable(),
  Volume: z.string().optional().nullable(),
  MinimumVolume: z.string().optional().nullable(),
  Container: z.string().optional().nullable(),
  Collection: z.string().optional().nullable(),
  StabilityRequirements: z.string().optional().nullable(),
  StorageTransportation: z.string().optional().nullable(),
  PatientPreparation: z.string().optional().nullable(),
  CausesForRejection: z.string().optional().nullable(),
  TestUsage: z.string().optional().nullable(),
  TestLimitations: z.string().optional().nullable(),
  CPTCodes: z.string().optional().nullable(),
  NewYorkApproved: z.string().optional().nullable(),
  LevelOfService: z.string().optional().nullable(),
  TurnAroundTime: z.string().optional().nullable(),
  AssayCategory: z.string().optional().nullable(),
  ReferenceRanges: z.string().optional().nullable(),
  SetupSchedule: z.string().optional().nullable(),
  AlternativeSpecimen: z.string().optional().nullable(),
  LoincCodesText: z.string().optional().nullable(),
  LoincCodesHTML: z.string().optional().nullable(),
  TestCategory: z.string().optional().nullable(),
  TestSubCategory: z.string().optional().nullable(),
  CreatedAt: z.date().optional(),
  UpdatedAt: z.date().optional(),
  LabOrderTest: z.lazy(() => LabOrderTestUncheckedCreateNestedManyWithoutTestCatalogInputSchema).optional(),
  OrganizationFavoriteTest: z.lazy(() => OrganizationFavoriteTestUncheckedCreateNestedManyWithoutTestCatalogInputSchema).optional(),
  ProviderFavoriteTest: z.lazy(() => ProviderFavoriteTestUncheckedCreateNestedManyWithoutTestCatalogInputSchema).optional(),
  SponsoredTest: z.lazy(() => SponsoredTestUncheckedCreateNestedManyWithoutTestCatalogInputSchema).optional(),
  TestBiomarker: z.lazy(() => TestBiomarkerUncheckedCreateNestedManyWithoutTestCatalogInputSchema).optional(),
  TestGene: z.lazy(() => TestGeneUncheckedCreateNestedManyWithoutTestCatalogInputSchema).optional(),
  TestOrderLoinc: z.lazy(() => TestOrderLoincUncheckedCreateNestedManyWithoutTestCatalogInputSchema).optional(),
  TestResultLoinc: z.lazy(() => TestResultLoincUncheckedCreateNestedManyWithoutTestCatalogInputSchema).optional()
}).strict();

export const TestCatalogCreateOrConnectWithoutTestCptCodeInputSchema: z.ZodType<Prisma.TestCatalogCreateOrConnectWithoutTestCptCodeInput> = z.object({
  where: z.lazy(() => TestCatalogWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => TestCatalogCreateWithoutTestCptCodeInputSchema),z.lazy(() => TestCatalogUncheckedCreateWithoutTestCptCodeInputSchema) ]),
}).strict();

export const TestCatalogUpsertWithoutTestCptCodeInputSchema: z.ZodType<Prisma.TestCatalogUpsertWithoutTestCptCodeInput> = z.object({
  update: z.union([ z.lazy(() => TestCatalogUpdateWithoutTestCptCodeInputSchema),z.lazy(() => TestCatalogUncheckedUpdateWithoutTestCptCodeInputSchema) ]),
  create: z.union([ z.lazy(() => TestCatalogCreateWithoutTestCptCodeInputSchema),z.lazy(() => TestCatalogUncheckedCreateWithoutTestCptCodeInputSchema) ]),
  where: z.lazy(() => TestCatalogWhereInputSchema).optional()
}).strict();

export const TestCatalogUpdateToOneWithWhereWithoutTestCptCodeInputSchema: z.ZodType<Prisma.TestCatalogUpdateToOneWithWhereWithoutTestCptCodeInput> = z.object({
  where: z.lazy(() => TestCatalogWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => TestCatalogUpdateWithoutTestCptCodeInputSchema),z.lazy(() => TestCatalogUncheckedUpdateWithoutTestCptCodeInputSchema) ]),
}).strict();

export const TestCatalogUpdateWithoutTestCptCodeInputSchema: z.ZodType<Prisma.TestCatalogUpdateWithoutTestCptCodeInput> = z.object({
  href: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  CasandraTestId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  LabTestId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  TestName: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  AlternativeName: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  AlternativeName1: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  AlternativeName2: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  AlternativeName3: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  AlternativeName4: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  AlternativeName5: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  TestIncludes: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  SpecimenType: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  SpecialInstructions: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Methodology: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  TestDescription: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Diseases: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Probes: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  ClinicalSignificance: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  SpecimenRequirements: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Volume: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  MinimumVolume: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Container: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Collection: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  StabilityRequirements: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  StorageTransportation: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  PatientPreparation: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  CausesForRejection: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  TestUsage: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  TestLimitations: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  CPTCodes: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  NewYorkApproved: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  LevelOfService: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  TurnAroundTime: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  AssayCategory: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  ReferenceRanges: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  SetupSchedule: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  AlternativeSpecimen: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  LoincCodesText: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  LoincCodesHTML: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  TestCategory: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  TestSubCategory: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  CreatedAt: z.union([ z.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  UpdatedAt: z.union([ z.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  LabOrderTest: z.lazy(() => LabOrderTestUpdateManyWithoutTestCatalogNestedInputSchema).optional(),
  OrganizationFavoriteTest: z.lazy(() => OrganizationFavoriteTestUpdateManyWithoutTestCatalogNestedInputSchema).optional(),
  ProviderFavoriteTest: z.lazy(() => ProviderFavoriteTestUpdateManyWithoutTestCatalogNestedInputSchema).optional(),
  SponsoredTest: z.lazy(() => SponsoredTestUpdateManyWithoutTestCatalogNestedInputSchema).optional(),
  TestBiomarker: z.lazy(() => TestBiomarkerUpdateManyWithoutTestCatalogNestedInputSchema).optional(),
  Lab: z.lazy(() => LabUpdateOneWithoutTestCatalogNestedInputSchema).optional(),
  TestGene: z.lazy(() => TestGeneUpdateManyWithoutTestCatalogNestedInputSchema).optional(),
  TestOrderLoinc: z.lazy(() => TestOrderLoincUpdateManyWithoutTestCatalogNestedInputSchema).optional(),
  TestResultLoinc: z.lazy(() => TestResultLoincUpdateManyWithoutTestCatalogNestedInputSchema).optional()
}).strict();

export const TestCatalogUncheckedUpdateWithoutTestCptCodeInputSchema: z.ZodType<Prisma.TestCatalogUncheckedUpdateWithoutTestCptCodeInput> = z.object({
  TestId: z.union([ z.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  LabId: z.union([ z.number(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  href: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  CasandraTestId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  LabTestId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  TestName: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  AlternativeName: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  AlternativeName1: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  AlternativeName2: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  AlternativeName3: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  AlternativeName4: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  AlternativeName5: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  TestIncludes: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  SpecimenType: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  SpecialInstructions: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Methodology: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  TestDescription: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Diseases: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Probes: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  ClinicalSignificance: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  SpecimenRequirements: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Volume: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  MinimumVolume: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Container: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Collection: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  StabilityRequirements: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  StorageTransportation: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  PatientPreparation: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  CausesForRejection: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  TestUsage: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  TestLimitations: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  CPTCodes: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  NewYorkApproved: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  LevelOfService: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  TurnAroundTime: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  AssayCategory: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  ReferenceRanges: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  SetupSchedule: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  AlternativeSpecimen: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  LoincCodesText: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  LoincCodesHTML: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  TestCategory: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  TestSubCategory: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  CreatedAt: z.union([ z.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  UpdatedAt: z.union([ z.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  LabOrderTest: z.lazy(() => LabOrderTestUncheckedUpdateManyWithoutTestCatalogNestedInputSchema).optional(),
  OrganizationFavoriteTest: z.lazy(() => OrganizationFavoriteTestUncheckedUpdateManyWithoutTestCatalogNestedInputSchema).optional(),
  ProviderFavoriteTest: z.lazy(() => ProviderFavoriteTestUncheckedUpdateManyWithoutTestCatalogNestedInputSchema).optional(),
  SponsoredTest: z.lazy(() => SponsoredTestUncheckedUpdateManyWithoutTestCatalogNestedInputSchema).optional(),
  TestBiomarker: z.lazy(() => TestBiomarkerUncheckedUpdateManyWithoutTestCatalogNestedInputSchema).optional(),
  TestGene: z.lazy(() => TestGeneUncheckedUpdateManyWithoutTestCatalogNestedInputSchema).optional(),
  TestOrderLoinc: z.lazy(() => TestOrderLoincUncheckedUpdateManyWithoutTestCatalogNestedInputSchema).optional(),
  TestResultLoinc: z.lazy(() => TestResultLoincUncheckedUpdateManyWithoutTestCatalogNestedInputSchema).optional()
}).strict();

export const TestCatalogCreateWithoutTestGeneInputSchema: z.ZodType<Prisma.TestCatalogCreateWithoutTestGeneInput> = z.object({
  href: z.string().optional().nullable(),
  CasandraTestId: z.string(),
  LabTestId: z.string().optional().nullable(),
  TestName: z.string().optional().nullable(),
  AlternativeName: z.string().optional().nullable(),
  AlternativeName1: z.string().optional().nullable(),
  AlternativeName2: z.string().optional().nullable(),
  AlternativeName3: z.string().optional().nullable(),
  AlternativeName4: z.string().optional().nullable(),
  AlternativeName5: z.string().optional().nullable(),
  TestIncludes: z.string().optional().nullable(),
  SpecimenType: z.string().optional().nullable(),
  SpecialInstructions: z.string().optional().nullable(),
  Methodology: z.string().optional().nullable(),
  TestDescription: z.string().optional().nullable(),
  Diseases: z.string().optional().nullable(),
  Probes: z.string().optional().nullable(),
  ClinicalSignificance: z.string().optional().nullable(),
  SpecimenRequirements: z.string().optional().nullable(),
  Volume: z.string().optional().nullable(),
  MinimumVolume: z.string().optional().nullable(),
  Container: z.string().optional().nullable(),
  Collection: z.string().optional().nullable(),
  StabilityRequirements: z.string().optional().nullable(),
  StorageTransportation: z.string().optional().nullable(),
  PatientPreparation: z.string().optional().nullable(),
  CausesForRejection: z.string().optional().nullable(),
  TestUsage: z.string().optional().nullable(),
  TestLimitations: z.string().optional().nullable(),
  CPTCodes: z.string().optional().nullable(),
  NewYorkApproved: z.string().optional().nullable(),
  LevelOfService: z.string().optional().nullable(),
  TurnAroundTime: z.string().optional().nullable(),
  AssayCategory: z.string().optional().nullable(),
  ReferenceRanges: z.string().optional().nullable(),
  SetupSchedule: z.string().optional().nullable(),
  AlternativeSpecimen: z.string().optional().nullable(),
  LoincCodesText: z.string().optional().nullable(),
  LoincCodesHTML: z.string().optional().nullable(),
  TestCategory: z.string().optional().nullable(),
  TestSubCategory: z.string().optional().nullable(),
  CreatedAt: z.date().optional(),
  UpdatedAt: z.date().optional(),
  LabOrderTest: z.lazy(() => LabOrderTestCreateNestedManyWithoutTestCatalogInputSchema).optional(),
  OrganizationFavoriteTest: z.lazy(() => OrganizationFavoriteTestCreateNestedManyWithoutTestCatalogInputSchema).optional(),
  ProviderFavoriteTest: z.lazy(() => ProviderFavoriteTestCreateNestedManyWithoutTestCatalogInputSchema).optional(),
  SponsoredTest: z.lazy(() => SponsoredTestCreateNestedManyWithoutTestCatalogInputSchema).optional(),
  TestBiomarker: z.lazy(() => TestBiomarkerCreateNestedManyWithoutTestCatalogInputSchema).optional(),
  Lab: z.lazy(() => LabCreateNestedOneWithoutTestCatalogInputSchema).optional(),
  TestCptCode: z.lazy(() => TestCptCodeCreateNestedManyWithoutTestCatalogInputSchema).optional(),
  TestOrderLoinc: z.lazy(() => TestOrderLoincCreateNestedManyWithoutTestCatalogInputSchema).optional(),
  TestResultLoinc: z.lazy(() => TestResultLoincCreateNestedManyWithoutTestCatalogInputSchema).optional()
}).strict();

export const TestCatalogUncheckedCreateWithoutTestGeneInputSchema: z.ZodType<Prisma.TestCatalogUncheckedCreateWithoutTestGeneInput> = z.object({
  TestId: z.number().optional(),
  LabId: z.number().optional().nullable(),
  href: z.string().optional().nullable(),
  CasandraTestId: z.string(),
  LabTestId: z.string().optional().nullable(),
  TestName: z.string().optional().nullable(),
  AlternativeName: z.string().optional().nullable(),
  AlternativeName1: z.string().optional().nullable(),
  AlternativeName2: z.string().optional().nullable(),
  AlternativeName3: z.string().optional().nullable(),
  AlternativeName4: z.string().optional().nullable(),
  AlternativeName5: z.string().optional().nullable(),
  TestIncludes: z.string().optional().nullable(),
  SpecimenType: z.string().optional().nullable(),
  SpecialInstructions: z.string().optional().nullable(),
  Methodology: z.string().optional().nullable(),
  TestDescription: z.string().optional().nullable(),
  Diseases: z.string().optional().nullable(),
  Probes: z.string().optional().nullable(),
  ClinicalSignificance: z.string().optional().nullable(),
  SpecimenRequirements: z.string().optional().nullable(),
  Volume: z.string().optional().nullable(),
  MinimumVolume: z.string().optional().nullable(),
  Container: z.string().optional().nullable(),
  Collection: z.string().optional().nullable(),
  StabilityRequirements: z.string().optional().nullable(),
  StorageTransportation: z.string().optional().nullable(),
  PatientPreparation: z.string().optional().nullable(),
  CausesForRejection: z.string().optional().nullable(),
  TestUsage: z.string().optional().nullable(),
  TestLimitations: z.string().optional().nullable(),
  CPTCodes: z.string().optional().nullable(),
  NewYorkApproved: z.string().optional().nullable(),
  LevelOfService: z.string().optional().nullable(),
  TurnAroundTime: z.string().optional().nullable(),
  AssayCategory: z.string().optional().nullable(),
  ReferenceRanges: z.string().optional().nullable(),
  SetupSchedule: z.string().optional().nullable(),
  AlternativeSpecimen: z.string().optional().nullable(),
  LoincCodesText: z.string().optional().nullable(),
  LoincCodesHTML: z.string().optional().nullable(),
  TestCategory: z.string().optional().nullable(),
  TestSubCategory: z.string().optional().nullable(),
  CreatedAt: z.date().optional(),
  UpdatedAt: z.date().optional(),
  LabOrderTest: z.lazy(() => LabOrderTestUncheckedCreateNestedManyWithoutTestCatalogInputSchema).optional(),
  OrganizationFavoriteTest: z.lazy(() => OrganizationFavoriteTestUncheckedCreateNestedManyWithoutTestCatalogInputSchema).optional(),
  ProviderFavoriteTest: z.lazy(() => ProviderFavoriteTestUncheckedCreateNestedManyWithoutTestCatalogInputSchema).optional(),
  SponsoredTest: z.lazy(() => SponsoredTestUncheckedCreateNestedManyWithoutTestCatalogInputSchema).optional(),
  TestBiomarker: z.lazy(() => TestBiomarkerUncheckedCreateNestedManyWithoutTestCatalogInputSchema).optional(),
  TestCptCode: z.lazy(() => TestCptCodeUncheckedCreateNestedManyWithoutTestCatalogInputSchema).optional(),
  TestOrderLoinc: z.lazy(() => TestOrderLoincUncheckedCreateNestedManyWithoutTestCatalogInputSchema).optional(),
  TestResultLoinc: z.lazy(() => TestResultLoincUncheckedCreateNestedManyWithoutTestCatalogInputSchema).optional()
}).strict();

export const TestCatalogCreateOrConnectWithoutTestGeneInputSchema: z.ZodType<Prisma.TestCatalogCreateOrConnectWithoutTestGeneInput> = z.object({
  where: z.lazy(() => TestCatalogWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => TestCatalogCreateWithoutTestGeneInputSchema),z.lazy(() => TestCatalogUncheckedCreateWithoutTestGeneInputSchema) ]),
}).strict();

export const TestCatalogUpsertWithoutTestGeneInputSchema: z.ZodType<Prisma.TestCatalogUpsertWithoutTestGeneInput> = z.object({
  update: z.union([ z.lazy(() => TestCatalogUpdateWithoutTestGeneInputSchema),z.lazy(() => TestCatalogUncheckedUpdateWithoutTestGeneInputSchema) ]),
  create: z.union([ z.lazy(() => TestCatalogCreateWithoutTestGeneInputSchema),z.lazy(() => TestCatalogUncheckedCreateWithoutTestGeneInputSchema) ]),
  where: z.lazy(() => TestCatalogWhereInputSchema).optional()
}).strict();

export const TestCatalogUpdateToOneWithWhereWithoutTestGeneInputSchema: z.ZodType<Prisma.TestCatalogUpdateToOneWithWhereWithoutTestGeneInput> = z.object({
  where: z.lazy(() => TestCatalogWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => TestCatalogUpdateWithoutTestGeneInputSchema),z.lazy(() => TestCatalogUncheckedUpdateWithoutTestGeneInputSchema) ]),
}).strict();

export const TestCatalogUpdateWithoutTestGeneInputSchema: z.ZodType<Prisma.TestCatalogUpdateWithoutTestGeneInput> = z.object({
  href: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  CasandraTestId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  LabTestId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  TestName: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  AlternativeName: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  AlternativeName1: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  AlternativeName2: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  AlternativeName3: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  AlternativeName4: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  AlternativeName5: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  TestIncludes: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  SpecimenType: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  SpecialInstructions: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Methodology: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  TestDescription: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Diseases: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Probes: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  ClinicalSignificance: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  SpecimenRequirements: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Volume: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  MinimumVolume: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Container: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Collection: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  StabilityRequirements: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  StorageTransportation: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  PatientPreparation: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  CausesForRejection: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  TestUsage: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  TestLimitations: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  CPTCodes: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  NewYorkApproved: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  LevelOfService: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  TurnAroundTime: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  AssayCategory: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  ReferenceRanges: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  SetupSchedule: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  AlternativeSpecimen: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  LoincCodesText: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  LoincCodesHTML: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  TestCategory: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  TestSubCategory: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  CreatedAt: z.union([ z.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  UpdatedAt: z.union([ z.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  LabOrderTest: z.lazy(() => LabOrderTestUpdateManyWithoutTestCatalogNestedInputSchema).optional(),
  OrganizationFavoriteTest: z.lazy(() => OrganizationFavoriteTestUpdateManyWithoutTestCatalogNestedInputSchema).optional(),
  ProviderFavoriteTest: z.lazy(() => ProviderFavoriteTestUpdateManyWithoutTestCatalogNestedInputSchema).optional(),
  SponsoredTest: z.lazy(() => SponsoredTestUpdateManyWithoutTestCatalogNestedInputSchema).optional(),
  TestBiomarker: z.lazy(() => TestBiomarkerUpdateManyWithoutTestCatalogNestedInputSchema).optional(),
  Lab: z.lazy(() => LabUpdateOneWithoutTestCatalogNestedInputSchema).optional(),
  TestCptCode: z.lazy(() => TestCptCodeUpdateManyWithoutTestCatalogNestedInputSchema).optional(),
  TestOrderLoinc: z.lazy(() => TestOrderLoincUpdateManyWithoutTestCatalogNestedInputSchema).optional(),
  TestResultLoinc: z.lazy(() => TestResultLoincUpdateManyWithoutTestCatalogNestedInputSchema).optional()
}).strict();

export const TestCatalogUncheckedUpdateWithoutTestGeneInputSchema: z.ZodType<Prisma.TestCatalogUncheckedUpdateWithoutTestGeneInput> = z.object({
  TestId: z.union([ z.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  LabId: z.union([ z.number(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  href: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  CasandraTestId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  LabTestId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  TestName: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  AlternativeName: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  AlternativeName1: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  AlternativeName2: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  AlternativeName3: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  AlternativeName4: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  AlternativeName5: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  TestIncludes: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  SpecimenType: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  SpecialInstructions: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Methodology: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  TestDescription: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Diseases: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Probes: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  ClinicalSignificance: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  SpecimenRequirements: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Volume: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  MinimumVolume: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Container: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Collection: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  StabilityRequirements: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  StorageTransportation: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  PatientPreparation: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  CausesForRejection: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  TestUsage: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  TestLimitations: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  CPTCodes: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  NewYorkApproved: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  LevelOfService: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  TurnAroundTime: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  AssayCategory: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  ReferenceRanges: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  SetupSchedule: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  AlternativeSpecimen: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  LoincCodesText: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  LoincCodesHTML: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  TestCategory: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  TestSubCategory: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  CreatedAt: z.union([ z.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  UpdatedAt: z.union([ z.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  LabOrderTest: z.lazy(() => LabOrderTestUncheckedUpdateManyWithoutTestCatalogNestedInputSchema).optional(),
  OrganizationFavoriteTest: z.lazy(() => OrganizationFavoriteTestUncheckedUpdateManyWithoutTestCatalogNestedInputSchema).optional(),
  ProviderFavoriteTest: z.lazy(() => ProviderFavoriteTestUncheckedUpdateManyWithoutTestCatalogNestedInputSchema).optional(),
  SponsoredTest: z.lazy(() => SponsoredTestUncheckedUpdateManyWithoutTestCatalogNestedInputSchema).optional(),
  TestBiomarker: z.lazy(() => TestBiomarkerUncheckedUpdateManyWithoutTestCatalogNestedInputSchema).optional(),
  TestCptCode: z.lazy(() => TestCptCodeUncheckedUpdateManyWithoutTestCatalogNestedInputSchema).optional(),
  TestOrderLoinc: z.lazy(() => TestOrderLoincUncheckedUpdateManyWithoutTestCatalogNestedInputSchema).optional(),
  TestResultLoinc: z.lazy(() => TestResultLoincUncheckedUpdateManyWithoutTestCatalogNestedInputSchema).optional()
}).strict();

export const LOINCCreateWithoutTestOrderLoincInputSchema: z.ZodType<Prisma.LOINCCreateWithoutTestOrderLoincInput> = z.object({
  Loinc_Num: z.string(),
  COMPONENT: z.string().optional().nullable(),
  PROPERTY: z.string().optional().nullable(),
  TIME_ASPCT: z.string().optional().nullable(),
  SYSTEM: z.string().optional().nullable(),
  SCALE_TYP: z.string().optional().nullable(),
  METHOD_TYP: z.string().optional().nullable(),
  CLASS: z.string().optional().nullable(),
  VersionLastChanged: z.string().optional().nullable(),
  CHNG_TYPE: z.string().optional().nullable(),
  DefinitionDescription: z.string().optional().nullable(),
  STATUS: z.string().optional().nullable(),
  CONSUMER_NAME: z.string().optional().nullable(),
  CLASSTYPE: z.number().optional().nullable(),
  FORMULA: z.string().optional().nullable(),
  EXMPL_ANSWERS: z.string().optional().nullable(),
  SURVEY_QUEST_TEXT: z.string().optional().nullable(),
  SURVEY_QUEST_SRC: z.string().optional().nullable(),
  UNITSREQUIRED: z.string().optional().nullable(),
  RELATEDNAMES2: z.string().optional().nullable(),
  SHORTNAME: z.string().optional().nullable(),
  ORDER_OBS: z.string().optional().nullable(),
  HL7_FIELD_SUBFIELD_ID: z.string().optional().nullable(),
  EXTERNAL_COPYRIGHT_NOTICE: z.string().optional().nullable(),
  EXAMPLE_UNITS: z.string().optional().nullable(),
  LONG_COMMON_NAME: z.string().optional().nullable(),
  EXAMPLE_UCUM_UNITS: z.string().optional().nullable(),
  STATUS_REASON: z.string().optional().nullable(),
  STATUS_TEXT: z.string().optional().nullable(),
  CHANGE_REASON_PUBLIC: z.string().optional().nullable(),
  COMMON_TEST_RANK: z.number().optional().nullable(),
  COMMON_ORDER_RANK: z.number().optional().nullable(),
  HL7_ATTACHMENT_STRUCTURE: z.string().optional().nullable(),
  EXTERNAL_COPYRIGHT_LINK: z.string().optional().nullable(),
  PanelType: z.string().optional().nullable(),
  AskAtOrderEntry: z.string().optional().nullable(),
  AssociatedObservations: z.string().optional().nullable(),
  VersionFirstReleased: z.string().optional().nullable(),
  ValidHL7AttachmentRequest: z.string().optional().nullable(),
  DisplayName: z.string().optional().nullable(),
  TestResultLoinc: z.lazy(() => TestResultLoincCreateNestedManyWithoutLOINCInputSchema).optional()
}).strict();

export const LOINCUncheckedCreateWithoutTestOrderLoincInputSchema: z.ZodType<Prisma.LOINCUncheckedCreateWithoutTestOrderLoincInput> = z.object({
  Loinc_Num: z.string(),
  COMPONENT: z.string().optional().nullable(),
  PROPERTY: z.string().optional().nullable(),
  TIME_ASPCT: z.string().optional().nullable(),
  SYSTEM: z.string().optional().nullable(),
  SCALE_TYP: z.string().optional().nullable(),
  METHOD_TYP: z.string().optional().nullable(),
  CLASS: z.string().optional().nullable(),
  VersionLastChanged: z.string().optional().nullable(),
  CHNG_TYPE: z.string().optional().nullable(),
  DefinitionDescription: z.string().optional().nullable(),
  STATUS: z.string().optional().nullable(),
  CONSUMER_NAME: z.string().optional().nullable(),
  CLASSTYPE: z.number().optional().nullable(),
  FORMULA: z.string().optional().nullable(),
  EXMPL_ANSWERS: z.string().optional().nullable(),
  SURVEY_QUEST_TEXT: z.string().optional().nullable(),
  SURVEY_QUEST_SRC: z.string().optional().nullable(),
  UNITSREQUIRED: z.string().optional().nullable(),
  RELATEDNAMES2: z.string().optional().nullable(),
  SHORTNAME: z.string().optional().nullable(),
  ORDER_OBS: z.string().optional().nullable(),
  HL7_FIELD_SUBFIELD_ID: z.string().optional().nullable(),
  EXTERNAL_COPYRIGHT_NOTICE: z.string().optional().nullable(),
  EXAMPLE_UNITS: z.string().optional().nullable(),
  LONG_COMMON_NAME: z.string().optional().nullable(),
  EXAMPLE_UCUM_UNITS: z.string().optional().nullable(),
  STATUS_REASON: z.string().optional().nullable(),
  STATUS_TEXT: z.string().optional().nullable(),
  CHANGE_REASON_PUBLIC: z.string().optional().nullable(),
  COMMON_TEST_RANK: z.number().optional().nullable(),
  COMMON_ORDER_RANK: z.number().optional().nullable(),
  HL7_ATTACHMENT_STRUCTURE: z.string().optional().nullable(),
  EXTERNAL_COPYRIGHT_LINK: z.string().optional().nullable(),
  PanelType: z.string().optional().nullable(),
  AskAtOrderEntry: z.string().optional().nullable(),
  AssociatedObservations: z.string().optional().nullable(),
  VersionFirstReleased: z.string().optional().nullable(),
  ValidHL7AttachmentRequest: z.string().optional().nullable(),
  DisplayName: z.string().optional().nullable(),
  TestResultLoinc: z.lazy(() => TestResultLoincUncheckedCreateNestedManyWithoutLOINCInputSchema).optional()
}).strict();

export const LOINCCreateOrConnectWithoutTestOrderLoincInputSchema: z.ZodType<Prisma.LOINCCreateOrConnectWithoutTestOrderLoincInput> = z.object({
  where: z.lazy(() => LOINCWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => LOINCCreateWithoutTestOrderLoincInputSchema),z.lazy(() => LOINCUncheckedCreateWithoutTestOrderLoincInputSchema) ]),
}).strict();

export const TestCatalogCreateWithoutTestOrderLoincInputSchema: z.ZodType<Prisma.TestCatalogCreateWithoutTestOrderLoincInput> = z.object({
  href: z.string().optional().nullable(),
  CasandraTestId: z.string(),
  LabTestId: z.string().optional().nullable(),
  TestName: z.string().optional().nullable(),
  AlternativeName: z.string().optional().nullable(),
  AlternativeName1: z.string().optional().nullable(),
  AlternativeName2: z.string().optional().nullable(),
  AlternativeName3: z.string().optional().nullable(),
  AlternativeName4: z.string().optional().nullable(),
  AlternativeName5: z.string().optional().nullable(),
  TestIncludes: z.string().optional().nullable(),
  SpecimenType: z.string().optional().nullable(),
  SpecialInstructions: z.string().optional().nullable(),
  Methodology: z.string().optional().nullable(),
  TestDescription: z.string().optional().nullable(),
  Diseases: z.string().optional().nullable(),
  Probes: z.string().optional().nullable(),
  ClinicalSignificance: z.string().optional().nullable(),
  SpecimenRequirements: z.string().optional().nullable(),
  Volume: z.string().optional().nullable(),
  MinimumVolume: z.string().optional().nullable(),
  Container: z.string().optional().nullable(),
  Collection: z.string().optional().nullable(),
  StabilityRequirements: z.string().optional().nullable(),
  StorageTransportation: z.string().optional().nullable(),
  PatientPreparation: z.string().optional().nullable(),
  CausesForRejection: z.string().optional().nullable(),
  TestUsage: z.string().optional().nullable(),
  TestLimitations: z.string().optional().nullable(),
  CPTCodes: z.string().optional().nullable(),
  NewYorkApproved: z.string().optional().nullable(),
  LevelOfService: z.string().optional().nullable(),
  TurnAroundTime: z.string().optional().nullable(),
  AssayCategory: z.string().optional().nullable(),
  ReferenceRanges: z.string().optional().nullable(),
  SetupSchedule: z.string().optional().nullable(),
  AlternativeSpecimen: z.string().optional().nullable(),
  LoincCodesText: z.string().optional().nullable(),
  LoincCodesHTML: z.string().optional().nullable(),
  TestCategory: z.string().optional().nullable(),
  TestSubCategory: z.string().optional().nullable(),
  CreatedAt: z.date().optional(),
  UpdatedAt: z.date().optional(),
  LabOrderTest: z.lazy(() => LabOrderTestCreateNestedManyWithoutTestCatalogInputSchema).optional(),
  OrganizationFavoriteTest: z.lazy(() => OrganizationFavoriteTestCreateNestedManyWithoutTestCatalogInputSchema).optional(),
  ProviderFavoriteTest: z.lazy(() => ProviderFavoriteTestCreateNestedManyWithoutTestCatalogInputSchema).optional(),
  SponsoredTest: z.lazy(() => SponsoredTestCreateNestedManyWithoutTestCatalogInputSchema).optional(),
  TestBiomarker: z.lazy(() => TestBiomarkerCreateNestedManyWithoutTestCatalogInputSchema).optional(),
  Lab: z.lazy(() => LabCreateNestedOneWithoutTestCatalogInputSchema).optional(),
  TestCptCode: z.lazy(() => TestCptCodeCreateNestedManyWithoutTestCatalogInputSchema).optional(),
  TestGene: z.lazy(() => TestGeneCreateNestedManyWithoutTestCatalogInputSchema).optional(),
  TestResultLoinc: z.lazy(() => TestResultLoincCreateNestedManyWithoutTestCatalogInputSchema).optional()
}).strict();

export const TestCatalogUncheckedCreateWithoutTestOrderLoincInputSchema: z.ZodType<Prisma.TestCatalogUncheckedCreateWithoutTestOrderLoincInput> = z.object({
  TestId: z.number().optional(),
  LabId: z.number().optional().nullable(),
  href: z.string().optional().nullable(),
  CasandraTestId: z.string(),
  LabTestId: z.string().optional().nullable(),
  TestName: z.string().optional().nullable(),
  AlternativeName: z.string().optional().nullable(),
  AlternativeName1: z.string().optional().nullable(),
  AlternativeName2: z.string().optional().nullable(),
  AlternativeName3: z.string().optional().nullable(),
  AlternativeName4: z.string().optional().nullable(),
  AlternativeName5: z.string().optional().nullable(),
  TestIncludes: z.string().optional().nullable(),
  SpecimenType: z.string().optional().nullable(),
  SpecialInstructions: z.string().optional().nullable(),
  Methodology: z.string().optional().nullable(),
  TestDescription: z.string().optional().nullable(),
  Diseases: z.string().optional().nullable(),
  Probes: z.string().optional().nullable(),
  ClinicalSignificance: z.string().optional().nullable(),
  SpecimenRequirements: z.string().optional().nullable(),
  Volume: z.string().optional().nullable(),
  MinimumVolume: z.string().optional().nullable(),
  Container: z.string().optional().nullable(),
  Collection: z.string().optional().nullable(),
  StabilityRequirements: z.string().optional().nullable(),
  StorageTransportation: z.string().optional().nullable(),
  PatientPreparation: z.string().optional().nullable(),
  CausesForRejection: z.string().optional().nullable(),
  TestUsage: z.string().optional().nullable(),
  TestLimitations: z.string().optional().nullable(),
  CPTCodes: z.string().optional().nullable(),
  NewYorkApproved: z.string().optional().nullable(),
  LevelOfService: z.string().optional().nullable(),
  TurnAroundTime: z.string().optional().nullable(),
  AssayCategory: z.string().optional().nullable(),
  ReferenceRanges: z.string().optional().nullable(),
  SetupSchedule: z.string().optional().nullable(),
  AlternativeSpecimen: z.string().optional().nullable(),
  LoincCodesText: z.string().optional().nullable(),
  LoincCodesHTML: z.string().optional().nullable(),
  TestCategory: z.string().optional().nullable(),
  TestSubCategory: z.string().optional().nullable(),
  CreatedAt: z.date().optional(),
  UpdatedAt: z.date().optional(),
  LabOrderTest: z.lazy(() => LabOrderTestUncheckedCreateNestedManyWithoutTestCatalogInputSchema).optional(),
  OrganizationFavoriteTest: z.lazy(() => OrganizationFavoriteTestUncheckedCreateNestedManyWithoutTestCatalogInputSchema).optional(),
  ProviderFavoriteTest: z.lazy(() => ProviderFavoriteTestUncheckedCreateNestedManyWithoutTestCatalogInputSchema).optional(),
  SponsoredTest: z.lazy(() => SponsoredTestUncheckedCreateNestedManyWithoutTestCatalogInputSchema).optional(),
  TestBiomarker: z.lazy(() => TestBiomarkerUncheckedCreateNestedManyWithoutTestCatalogInputSchema).optional(),
  TestCptCode: z.lazy(() => TestCptCodeUncheckedCreateNestedManyWithoutTestCatalogInputSchema).optional(),
  TestGene: z.lazy(() => TestGeneUncheckedCreateNestedManyWithoutTestCatalogInputSchema).optional(),
  TestResultLoinc: z.lazy(() => TestResultLoincUncheckedCreateNestedManyWithoutTestCatalogInputSchema).optional()
}).strict();

export const TestCatalogCreateOrConnectWithoutTestOrderLoincInputSchema: z.ZodType<Prisma.TestCatalogCreateOrConnectWithoutTestOrderLoincInput> = z.object({
  where: z.lazy(() => TestCatalogWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => TestCatalogCreateWithoutTestOrderLoincInputSchema),z.lazy(() => TestCatalogUncheckedCreateWithoutTestOrderLoincInputSchema) ]),
}).strict();

export const LOINCUpsertWithoutTestOrderLoincInputSchema: z.ZodType<Prisma.LOINCUpsertWithoutTestOrderLoincInput> = z.object({
  update: z.union([ z.lazy(() => LOINCUpdateWithoutTestOrderLoincInputSchema),z.lazy(() => LOINCUncheckedUpdateWithoutTestOrderLoincInputSchema) ]),
  create: z.union([ z.lazy(() => LOINCCreateWithoutTestOrderLoincInputSchema),z.lazy(() => LOINCUncheckedCreateWithoutTestOrderLoincInputSchema) ]),
  where: z.lazy(() => LOINCWhereInputSchema).optional()
}).strict();

export const LOINCUpdateToOneWithWhereWithoutTestOrderLoincInputSchema: z.ZodType<Prisma.LOINCUpdateToOneWithWhereWithoutTestOrderLoincInput> = z.object({
  where: z.lazy(() => LOINCWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => LOINCUpdateWithoutTestOrderLoincInputSchema),z.lazy(() => LOINCUncheckedUpdateWithoutTestOrderLoincInputSchema) ]),
}).strict();

export const LOINCUpdateWithoutTestOrderLoincInputSchema: z.ZodType<Prisma.LOINCUpdateWithoutTestOrderLoincInput> = z.object({
  Loinc_Num: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  COMPONENT: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  PROPERTY: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  TIME_ASPCT: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  SYSTEM: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  SCALE_TYP: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  METHOD_TYP: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  CLASS: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  VersionLastChanged: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  CHNG_TYPE: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  DefinitionDescription: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  STATUS: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  CONSUMER_NAME: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  CLASSTYPE: z.union([ z.number(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  FORMULA: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  EXMPL_ANSWERS: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  SURVEY_QUEST_TEXT: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  SURVEY_QUEST_SRC: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  UNITSREQUIRED: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  RELATEDNAMES2: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  SHORTNAME: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  ORDER_OBS: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  HL7_FIELD_SUBFIELD_ID: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  EXTERNAL_COPYRIGHT_NOTICE: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  EXAMPLE_UNITS: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  LONG_COMMON_NAME: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  EXAMPLE_UCUM_UNITS: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  STATUS_REASON: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  STATUS_TEXT: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  CHANGE_REASON_PUBLIC: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  COMMON_TEST_RANK: z.union([ z.number(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  COMMON_ORDER_RANK: z.union([ z.number(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  HL7_ATTACHMENT_STRUCTURE: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  EXTERNAL_COPYRIGHT_LINK: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  PanelType: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  AskAtOrderEntry: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  AssociatedObservations: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  VersionFirstReleased: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  ValidHL7AttachmentRequest: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  DisplayName: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  TestResultLoinc: z.lazy(() => TestResultLoincUpdateManyWithoutLOINCNestedInputSchema).optional()
}).strict();

export const LOINCUncheckedUpdateWithoutTestOrderLoincInputSchema: z.ZodType<Prisma.LOINCUncheckedUpdateWithoutTestOrderLoincInput> = z.object({
  Loinc_Num: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  COMPONENT: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  PROPERTY: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  TIME_ASPCT: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  SYSTEM: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  SCALE_TYP: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  METHOD_TYP: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  CLASS: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  VersionLastChanged: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  CHNG_TYPE: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  DefinitionDescription: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  STATUS: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  CONSUMER_NAME: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  CLASSTYPE: z.union([ z.number(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  FORMULA: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  EXMPL_ANSWERS: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  SURVEY_QUEST_TEXT: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  SURVEY_QUEST_SRC: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  UNITSREQUIRED: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  RELATEDNAMES2: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  SHORTNAME: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  ORDER_OBS: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  HL7_FIELD_SUBFIELD_ID: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  EXTERNAL_COPYRIGHT_NOTICE: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  EXAMPLE_UNITS: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  LONG_COMMON_NAME: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  EXAMPLE_UCUM_UNITS: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  STATUS_REASON: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  STATUS_TEXT: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  CHANGE_REASON_PUBLIC: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  COMMON_TEST_RANK: z.union([ z.number(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  COMMON_ORDER_RANK: z.union([ z.number(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  HL7_ATTACHMENT_STRUCTURE: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  EXTERNAL_COPYRIGHT_LINK: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  PanelType: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  AskAtOrderEntry: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  AssociatedObservations: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  VersionFirstReleased: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  ValidHL7AttachmentRequest: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  DisplayName: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  TestResultLoinc: z.lazy(() => TestResultLoincUncheckedUpdateManyWithoutLOINCNestedInputSchema).optional()
}).strict();

export const TestCatalogUpsertWithoutTestOrderLoincInputSchema: z.ZodType<Prisma.TestCatalogUpsertWithoutTestOrderLoincInput> = z.object({
  update: z.union([ z.lazy(() => TestCatalogUpdateWithoutTestOrderLoincInputSchema),z.lazy(() => TestCatalogUncheckedUpdateWithoutTestOrderLoincInputSchema) ]),
  create: z.union([ z.lazy(() => TestCatalogCreateWithoutTestOrderLoincInputSchema),z.lazy(() => TestCatalogUncheckedCreateWithoutTestOrderLoincInputSchema) ]),
  where: z.lazy(() => TestCatalogWhereInputSchema).optional()
}).strict();

export const TestCatalogUpdateToOneWithWhereWithoutTestOrderLoincInputSchema: z.ZodType<Prisma.TestCatalogUpdateToOneWithWhereWithoutTestOrderLoincInput> = z.object({
  where: z.lazy(() => TestCatalogWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => TestCatalogUpdateWithoutTestOrderLoincInputSchema),z.lazy(() => TestCatalogUncheckedUpdateWithoutTestOrderLoincInputSchema) ]),
}).strict();

export const TestCatalogUpdateWithoutTestOrderLoincInputSchema: z.ZodType<Prisma.TestCatalogUpdateWithoutTestOrderLoincInput> = z.object({
  href: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  CasandraTestId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  LabTestId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  TestName: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  AlternativeName: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  AlternativeName1: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  AlternativeName2: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  AlternativeName3: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  AlternativeName4: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  AlternativeName5: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  TestIncludes: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  SpecimenType: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  SpecialInstructions: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Methodology: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  TestDescription: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Diseases: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Probes: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  ClinicalSignificance: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  SpecimenRequirements: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Volume: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  MinimumVolume: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Container: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Collection: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  StabilityRequirements: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  StorageTransportation: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  PatientPreparation: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  CausesForRejection: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  TestUsage: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  TestLimitations: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  CPTCodes: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  NewYorkApproved: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  LevelOfService: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  TurnAroundTime: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  AssayCategory: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  ReferenceRanges: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  SetupSchedule: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  AlternativeSpecimen: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  LoincCodesText: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  LoincCodesHTML: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  TestCategory: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  TestSubCategory: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  CreatedAt: z.union([ z.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  UpdatedAt: z.union([ z.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  LabOrderTest: z.lazy(() => LabOrderTestUpdateManyWithoutTestCatalogNestedInputSchema).optional(),
  OrganizationFavoriteTest: z.lazy(() => OrganizationFavoriteTestUpdateManyWithoutTestCatalogNestedInputSchema).optional(),
  ProviderFavoriteTest: z.lazy(() => ProviderFavoriteTestUpdateManyWithoutTestCatalogNestedInputSchema).optional(),
  SponsoredTest: z.lazy(() => SponsoredTestUpdateManyWithoutTestCatalogNestedInputSchema).optional(),
  TestBiomarker: z.lazy(() => TestBiomarkerUpdateManyWithoutTestCatalogNestedInputSchema).optional(),
  Lab: z.lazy(() => LabUpdateOneWithoutTestCatalogNestedInputSchema).optional(),
  TestCptCode: z.lazy(() => TestCptCodeUpdateManyWithoutTestCatalogNestedInputSchema).optional(),
  TestGene: z.lazy(() => TestGeneUpdateManyWithoutTestCatalogNestedInputSchema).optional(),
  TestResultLoinc: z.lazy(() => TestResultLoincUpdateManyWithoutTestCatalogNestedInputSchema).optional()
}).strict();

export const TestCatalogUncheckedUpdateWithoutTestOrderLoincInputSchema: z.ZodType<Prisma.TestCatalogUncheckedUpdateWithoutTestOrderLoincInput> = z.object({
  TestId: z.union([ z.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  LabId: z.union([ z.number(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  href: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  CasandraTestId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  LabTestId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  TestName: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  AlternativeName: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  AlternativeName1: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  AlternativeName2: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  AlternativeName3: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  AlternativeName4: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  AlternativeName5: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  TestIncludes: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  SpecimenType: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  SpecialInstructions: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Methodology: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  TestDescription: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Diseases: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Probes: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  ClinicalSignificance: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  SpecimenRequirements: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Volume: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  MinimumVolume: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Container: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Collection: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  StabilityRequirements: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  StorageTransportation: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  PatientPreparation: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  CausesForRejection: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  TestUsage: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  TestLimitations: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  CPTCodes: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  NewYorkApproved: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  LevelOfService: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  TurnAroundTime: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  AssayCategory: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  ReferenceRanges: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  SetupSchedule: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  AlternativeSpecimen: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  LoincCodesText: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  LoincCodesHTML: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  TestCategory: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  TestSubCategory: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  CreatedAt: z.union([ z.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  UpdatedAt: z.union([ z.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  LabOrderTest: z.lazy(() => LabOrderTestUncheckedUpdateManyWithoutTestCatalogNestedInputSchema).optional(),
  OrganizationFavoriteTest: z.lazy(() => OrganizationFavoriteTestUncheckedUpdateManyWithoutTestCatalogNestedInputSchema).optional(),
  ProviderFavoriteTest: z.lazy(() => ProviderFavoriteTestUncheckedUpdateManyWithoutTestCatalogNestedInputSchema).optional(),
  SponsoredTest: z.lazy(() => SponsoredTestUncheckedUpdateManyWithoutTestCatalogNestedInputSchema).optional(),
  TestBiomarker: z.lazy(() => TestBiomarkerUncheckedUpdateManyWithoutTestCatalogNestedInputSchema).optional(),
  TestCptCode: z.lazy(() => TestCptCodeUncheckedUpdateManyWithoutTestCatalogNestedInputSchema).optional(),
  TestGene: z.lazy(() => TestGeneUncheckedUpdateManyWithoutTestCatalogNestedInputSchema).optional(),
  TestResultLoinc: z.lazy(() => TestResultLoincUncheckedUpdateManyWithoutTestCatalogNestedInputSchema).optional()
}).strict();

export const LOINCCreateWithoutTestResultLoincInputSchema: z.ZodType<Prisma.LOINCCreateWithoutTestResultLoincInput> = z.object({
  Loinc_Num: z.string(),
  COMPONENT: z.string().optional().nullable(),
  PROPERTY: z.string().optional().nullable(),
  TIME_ASPCT: z.string().optional().nullable(),
  SYSTEM: z.string().optional().nullable(),
  SCALE_TYP: z.string().optional().nullable(),
  METHOD_TYP: z.string().optional().nullable(),
  CLASS: z.string().optional().nullable(),
  VersionLastChanged: z.string().optional().nullable(),
  CHNG_TYPE: z.string().optional().nullable(),
  DefinitionDescription: z.string().optional().nullable(),
  STATUS: z.string().optional().nullable(),
  CONSUMER_NAME: z.string().optional().nullable(),
  CLASSTYPE: z.number().optional().nullable(),
  FORMULA: z.string().optional().nullable(),
  EXMPL_ANSWERS: z.string().optional().nullable(),
  SURVEY_QUEST_TEXT: z.string().optional().nullable(),
  SURVEY_QUEST_SRC: z.string().optional().nullable(),
  UNITSREQUIRED: z.string().optional().nullable(),
  RELATEDNAMES2: z.string().optional().nullable(),
  SHORTNAME: z.string().optional().nullable(),
  ORDER_OBS: z.string().optional().nullable(),
  HL7_FIELD_SUBFIELD_ID: z.string().optional().nullable(),
  EXTERNAL_COPYRIGHT_NOTICE: z.string().optional().nullable(),
  EXAMPLE_UNITS: z.string().optional().nullable(),
  LONG_COMMON_NAME: z.string().optional().nullable(),
  EXAMPLE_UCUM_UNITS: z.string().optional().nullable(),
  STATUS_REASON: z.string().optional().nullable(),
  STATUS_TEXT: z.string().optional().nullable(),
  CHANGE_REASON_PUBLIC: z.string().optional().nullable(),
  COMMON_TEST_RANK: z.number().optional().nullable(),
  COMMON_ORDER_RANK: z.number().optional().nullable(),
  HL7_ATTACHMENT_STRUCTURE: z.string().optional().nullable(),
  EXTERNAL_COPYRIGHT_LINK: z.string().optional().nullable(),
  PanelType: z.string().optional().nullable(),
  AskAtOrderEntry: z.string().optional().nullable(),
  AssociatedObservations: z.string().optional().nullable(),
  VersionFirstReleased: z.string().optional().nullable(),
  ValidHL7AttachmentRequest: z.string().optional().nullable(),
  DisplayName: z.string().optional().nullable(),
  TestOrderLoinc: z.lazy(() => TestOrderLoincCreateNestedManyWithoutLOINCInputSchema).optional()
}).strict();

export const LOINCUncheckedCreateWithoutTestResultLoincInputSchema: z.ZodType<Prisma.LOINCUncheckedCreateWithoutTestResultLoincInput> = z.object({
  Loinc_Num: z.string(),
  COMPONENT: z.string().optional().nullable(),
  PROPERTY: z.string().optional().nullable(),
  TIME_ASPCT: z.string().optional().nullable(),
  SYSTEM: z.string().optional().nullable(),
  SCALE_TYP: z.string().optional().nullable(),
  METHOD_TYP: z.string().optional().nullable(),
  CLASS: z.string().optional().nullable(),
  VersionLastChanged: z.string().optional().nullable(),
  CHNG_TYPE: z.string().optional().nullable(),
  DefinitionDescription: z.string().optional().nullable(),
  STATUS: z.string().optional().nullable(),
  CONSUMER_NAME: z.string().optional().nullable(),
  CLASSTYPE: z.number().optional().nullable(),
  FORMULA: z.string().optional().nullable(),
  EXMPL_ANSWERS: z.string().optional().nullable(),
  SURVEY_QUEST_TEXT: z.string().optional().nullable(),
  SURVEY_QUEST_SRC: z.string().optional().nullable(),
  UNITSREQUIRED: z.string().optional().nullable(),
  RELATEDNAMES2: z.string().optional().nullable(),
  SHORTNAME: z.string().optional().nullable(),
  ORDER_OBS: z.string().optional().nullable(),
  HL7_FIELD_SUBFIELD_ID: z.string().optional().nullable(),
  EXTERNAL_COPYRIGHT_NOTICE: z.string().optional().nullable(),
  EXAMPLE_UNITS: z.string().optional().nullable(),
  LONG_COMMON_NAME: z.string().optional().nullable(),
  EXAMPLE_UCUM_UNITS: z.string().optional().nullable(),
  STATUS_REASON: z.string().optional().nullable(),
  STATUS_TEXT: z.string().optional().nullable(),
  CHANGE_REASON_PUBLIC: z.string().optional().nullable(),
  COMMON_TEST_RANK: z.number().optional().nullable(),
  COMMON_ORDER_RANK: z.number().optional().nullable(),
  HL7_ATTACHMENT_STRUCTURE: z.string().optional().nullable(),
  EXTERNAL_COPYRIGHT_LINK: z.string().optional().nullable(),
  PanelType: z.string().optional().nullable(),
  AskAtOrderEntry: z.string().optional().nullable(),
  AssociatedObservations: z.string().optional().nullable(),
  VersionFirstReleased: z.string().optional().nullable(),
  ValidHL7AttachmentRequest: z.string().optional().nullable(),
  DisplayName: z.string().optional().nullable(),
  TestOrderLoinc: z.lazy(() => TestOrderLoincUncheckedCreateNestedManyWithoutLOINCInputSchema).optional()
}).strict();

export const LOINCCreateOrConnectWithoutTestResultLoincInputSchema: z.ZodType<Prisma.LOINCCreateOrConnectWithoutTestResultLoincInput> = z.object({
  where: z.lazy(() => LOINCWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => LOINCCreateWithoutTestResultLoincInputSchema),z.lazy(() => LOINCUncheckedCreateWithoutTestResultLoincInputSchema) ]),
}).strict();

export const TestCatalogCreateWithoutTestResultLoincInputSchema: z.ZodType<Prisma.TestCatalogCreateWithoutTestResultLoincInput> = z.object({
  href: z.string().optional().nullable(),
  CasandraTestId: z.string(),
  LabTestId: z.string().optional().nullable(),
  TestName: z.string().optional().nullable(),
  AlternativeName: z.string().optional().nullable(),
  AlternativeName1: z.string().optional().nullable(),
  AlternativeName2: z.string().optional().nullable(),
  AlternativeName3: z.string().optional().nullable(),
  AlternativeName4: z.string().optional().nullable(),
  AlternativeName5: z.string().optional().nullable(),
  TestIncludes: z.string().optional().nullable(),
  SpecimenType: z.string().optional().nullable(),
  SpecialInstructions: z.string().optional().nullable(),
  Methodology: z.string().optional().nullable(),
  TestDescription: z.string().optional().nullable(),
  Diseases: z.string().optional().nullable(),
  Probes: z.string().optional().nullable(),
  ClinicalSignificance: z.string().optional().nullable(),
  SpecimenRequirements: z.string().optional().nullable(),
  Volume: z.string().optional().nullable(),
  MinimumVolume: z.string().optional().nullable(),
  Container: z.string().optional().nullable(),
  Collection: z.string().optional().nullable(),
  StabilityRequirements: z.string().optional().nullable(),
  StorageTransportation: z.string().optional().nullable(),
  PatientPreparation: z.string().optional().nullable(),
  CausesForRejection: z.string().optional().nullable(),
  TestUsage: z.string().optional().nullable(),
  TestLimitations: z.string().optional().nullable(),
  CPTCodes: z.string().optional().nullable(),
  NewYorkApproved: z.string().optional().nullable(),
  LevelOfService: z.string().optional().nullable(),
  TurnAroundTime: z.string().optional().nullable(),
  AssayCategory: z.string().optional().nullable(),
  ReferenceRanges: z.string().optional().nullable(),
  SetupSchedule: z.string().optional().nullable(),
  AlternativeSpecimen: z.string().optional().nullable(),
  LoincCodesText: z.string().optional().nullable(),
  LoincCodesHTML: z.string().optional().nullable(),
  TestCategory: z.string().optional().nullable(),
  TestSubCategory: z.string().optional().nullable(),
  CreatedAt: z.date().optional(),
  UpdatedAt: z.date().optional(),
  LabOrderTest: z.lazy(() => LabOrderTestCreateNestedManyWithoutTestCatalogInputSchema).optional(),
  OrganizationFavoriteTest: z.lazy(() => OrganizationFavoriteTestCreateNestedManyWithoutTestCatalogInputSchema).optional(),
  ProviderFavoriteTest: z.lazy(() => ProviderFavoriteTestCreateNestedManyWithoutTestCatalogInputSchema).optional(),
  SponsoredTest: z.lazy(() => SponsoredTestCreateNestedManyWithoutTestCatalogInputSchema).optional(),
  TestBiomarker: z.lazy(() => TestBiomarkerCreateNestedManyWithoutTestCatalogInputSchema).optional(),
  Lab: z.lazy(() => LabCreateNestedOneWithoutTestCatalogInputSchema).optional(),
  TestCptCode: z.lazy(() => TestCptCodeCreateNestedManyWithoutTestCatalogInputSchema).optional(),
  TestGene: z.lazy(() => TestGeneCreateNestedManyWithoutTestCatalogInputSchema).optional(),
  TestOrderLoinc: z.lazy(() => TestOrderLoincCreateNestedManyWithoutTestCatalogInputSchema).optional()
}).strict();

export const TestCatalogUncheckedCreateWithoutTestResultLoincInputSchema: z.ZodType<Prisma.TestCatalogUncheckedCreateWithoutTestResultLoincInput> = z.object({
  TestId: z.number().optional(),
  LabId: z.number().optional().nullable(),
  href: z.string().optional().nullable(),
  CasandraTestId: z.string(),
  LabTestId: z.string().optional().nullable(),
  TestName: z.string().optional().nullable(),
  AlternativeName: z.string().optional().nullable(),
  AlternativeName1: z.string().optional().nullable(),
  AlternativeName2: z.string().optional().nullable(),
  AlternativeName3: z.string().optional().nullable(),
  AlternativeName4: z.string().optional().nullable(),
  AlternativeName5: z.string().optional().nullable(),
  TestIncludes: z.string().optional().nullable(),
  SpecimenType: z.string().optional().nullable(),
  SpecialInstructions: z.string().optional().nullable(),
  Methodology: z.string().optional().nullable(),
  TestDescription: z.string().optional().nullable(),
  Diseases: z.string().optional().nullable(),
  Probes: z.string().optional().nullable(),
  ClinicalSignificance: z.string().optional().nullable(),
  SpecimenRequirements: z.string().optional().nullable(),
  Volume: z.string().optional().nullable(),
  MinimumVolume: z.string().optional().nullable(),
  Container: z.string().optional().nullable(),
  Collection: z.string().optional().nullable(),
  StabilityRequirements: z.string().optional().nullable(),
  StorageTransportation: z.string().optional().nullable(),
  PatientPreparation: z.string().optional().nullable(),
  CausesForRejection: z.string().optional().nullable(),
  TestUsage: z.string().optional().nullable(),
  TestLimitations: z.string().optional().nullable(),
  CPTCodes: z.string().optional().nullable(),
  NewYorkApproved: z.string().optional().nullable(),
  LevelOfService: z.string().optional().nullable(),
  TurnAroundTime: z.string().optional().nullable(),
  AssayCategory: z.string().optional().nullable(),
  ReferenceRanges: z.string().optional().nullable(),
  SetupSchedule: z.string().optional().nullable(),
  AlternativeSpecimen: z.string().optional().nullable(),
  LoincCodesText: z.string().optional().nullable(),
  LoincCodesHTML: z.string().optional().nullable(),
  TestCategory: z.string().optional().nullable(),
  TestSubCategory: z.string().optional().nullable(),
  CreatedAt: z.date().optional(),
  UpdatedAt: z.date().optional(),
  LabOrderTest: z.lazy(() => LabOrderTestUncheckedCreateNestedManyWithoutTestCatalogInputSchema).optional(),
  OrganizationFavoriteTest: z.lazy(() => OrganizationFavoriteTestUncheckedCreateNestedManyWithoutTestCatalogInputSchema).optional(),
  ProviderFavoriteTest: z.lazy(() => ProviderFavoriteTestUncheckedCreateNestedManyWithoutTestCatalogInputSchema).optional(),
  SponsoredTest: z.lazy(() => SponsoredTestUncheckedCreateNestedManyWithoutTestCatalogInputSchema).optional(),
  TestBiomarker: z.lazy(() => TestBiomarkerUncheckedCreateNestedManyWithoutTestCatalogInputSchema).optional(),
  TestCptCode: z.lazy(() => TestCptCodeUncheckedCreateNestedManyWithoutTestCatalogInputSchema).optional(),
  TestGene: z.lazy(() => TestGeneUncheckedCreateNestedManyWithoutTestCatalogInputSchema).optional(),
  TestOrderLoinc: z.lazy(() => TestOrderLoincUncheckedCreateNestedManyWithoutTestCatalogInputSchema).optional()
}).strict();

export const TestCatalogCreateOrConnectWithoutTestResultLoincInputSchema: z.ZodType<Prisma.TestCatalogCreateOrConnectWithoutTestResultLoincInput> = z.object({
  where: z.lazy(() => TestCatalogWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => TestCatalogCreateWithoutTestResultLoincInputSchema),z.lazy(() => TestCatalogUncheckedCreateWithoutTestResultLoincInputSchema) ]),
}).strict();

export const LOINCUpsertWithoutTestResultLoincInputSchema: z.ZodType<Prisma.LOINCUpsertWithoutTestResultLoincInput> = z.object({
  update: z.union([ z.lazy(() => LOINCUpdateWithoutTestResultLoincInputSchema),z.lazy(() => LOINCUncheckedUpdateWithoutTestResultLoincInputSchema) ]),
  create: z.union([ z.lazy(() => LOINCCreateWithoutTestResultLoincInputSchema),z.lazy(() => LOINCUncheckedCreateWithoutTestResultLoincInputSchema) ]),
  where: z.lazy(() => LOINCWhereInputSchema).optional()
}).strict();

export const LOINCUpdateToOneWithWhereWithoutTestResultLoincInputSchema: z.ZodType<Prisma.LOINCUpdateToOneWithWhereWithoutTestResultLoincInput> = z.object({
  where: z.lazy(() => LOINCWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => LOINCUpdateWithoutTestResultLoincInputSchema),z.lazy(() => LOINCUncheckedUpdateWithoutTestResultLoincInputSchema) ]),
}).strict();

export const LOINCUpdateWithoutTestResultLoincInputSchema: z.ZodType<Prisma.LOINCUpdateWithoutTestResultLoincInput> = z.object({
  Loinc_Num: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  COMPONENT: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  PROPERTY: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  TIME_ASPCT: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  SYSTEM: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  SCALE_TYP: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  METHOD_TYP: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  CLASS: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  VersionLastChanged: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  CHNG_TYPE: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  DefinitionDescription: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  STATUS: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  CONSUMER_NAME: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  CLASSTYPE: z.union([ z.number(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  FORMULA: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  EXMPL_ANSWERS: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  SURVEY_QUEST_TEXT: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  SURVEY_QUEST_SRC: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  UNITSREQUIRED: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  RELATEDNAMES2: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  SHORTNAME: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  ORDER_OBS: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  HL7_FIELD_SUBFIELD_ID: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  EXTERNAL_COPYRIGHT_NOTICE: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  EXAMPLE_UNITS: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  LONG_COMMON_NAME: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  EXAMPLE_UCUM_UNITS: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  STATUS_REASON: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  STATUS_TEXT: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  CHANGE_REASON_PUBLIC: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  COMMON_TEST_RANK: z.union([ z.number(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  COMMON_ORDER_RANK: z.union([ z.number(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  HL7_ATTACHMENT_STRUCTURE: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  EXTERNAL_COPYRIGHT_LINK: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  PanelType: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  AskAtOrderEntry: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  AssociatedObservations: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  VersionFirstReleased: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  ValidHL7AttachmentRequest: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  DisplayName: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  TestOrderLoinc: z.lazy(() => TestOrderLoincUpdateManyWithoutLOINCNestedInputSchema).optional()
}).strict();

export const LOINCUncheckedUpdateWithoutTestResultLoincInputSchema: z.ZodType<Prisma.LOINCUncheckedUpdateWithoutTestResultLoincInput> = z.object({
  Loinc_Num: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  COMPONENT: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  PROPERTY: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  TIME_ASPCT: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  SYSTEM: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  SCALE_TYP: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  METHOD_TYP: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  CLASS: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  VersionLastChanged: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  CHNG_TYPE: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  DefinitionDescription: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  STATUS: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  CONSUMER_NAME: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  CLASSTYPE: z.union([ z.number(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  FORMULA: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  EXMPL_ANSWERS: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  SURVEY_QUEST_TEXT: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  SURVEY_QUEST_SRC: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  UNITSREQUIRED: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  RELATEDNAMES2: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  SHORTNAME: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  ORDER_OBS: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  HL7_FIELD_SUBFIELD_ID: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  EXTERNAL_COPYRIGHT_NOTICE: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  EXAMPLE_UNITS: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  LONG_COMMON_NAME: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  EXAMPLE_UCUM_UNITS: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  STATUS_REASON: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  STATUS_TEXT: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  CHANGE_REASON_PUBLIC: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  COMMON_TEST_RANK: z.union([ z.number(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  COMMON_ORDER_RANK: z.union([ z.number(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  HL7_ATTACHMENT_STRUCTURE: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  EXTERNAL_COPYRIGHT_LINK: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  PanelType: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  AskAtOrderEntry: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  AssociatedObservations: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  VersionFirstReleased: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  ValidHL7AttachmentRequest: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  DisplayName: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  TestOrderLoinc: z.lazy(() => TestOrderLoincUncheckedUpdateManyWithoutLOINCNestedInputSchema).optional()
}).strict();

export const TestCatalogUpsertWithoutTestResultLoincInputSchema: z.ZodType<Prisma.TestCatalogUpsertWithoutTestResultLoincInput> = z.object({
  update: z.union([ z.lazy(() => TestCatalogUpdateWithoutTestResultLoincInputSchema),z.lazy(() => TestCatalogUncheckedUpdateWithoutTestResultLoincInputSchema) ]),
  create: z.union([ z.lazy(() => TestCatalogCreateWithoutTestResultLoincInputSchema),z.lazy(() => TestCatalogUncheckedCreateWithoutTestResultLoincInputSchema) ]),
  where: z.lazy(() => TestCatalogWhereInputSchema).optional()
}).strict();

export const TestCatalogUpdateToOneWithWhereWithoutTestResultLoincInputSchema: z.ZodType<Prisma.TestCatalogUpdateToOneWithWhereWithoutTestResultLoincInput> = z.object({
  where: z.lazy(() => TestCatalogWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => TestCatalogUpdateWithoutTestResultLoincInputSchema),z.lazy(() => TestCatalogUncheckedUpdateWithoutTestResultLoincInputSchema) ]),
}).strict();

export const TestCatalogUpdateWithoutTestResultLoincInputSchema: z.ZodType<Prisma.TestCatalogUpdateWithoutTestResultLoincInput> = z.object({
  href: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  CasandraTestId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  LabTestId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  TestName: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  AlternativeName: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  AlternativeName1: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  AlternativeName2: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  AlternativeName3: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  AlternativeName4: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  AlternativeName5: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  TestIncludes: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  SpecimenType: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  SpecialInstructions: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Methodology: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  TestDescription: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Diseases: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Probes: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  ClinicalSignificance: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  SpecimenRequirements: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Volume: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  MinimumVolume: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Container: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Collection: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  StabilityRequirements: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  StorageTransportation: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  PatientPreparation: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  CausesForRejection: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  TestUsage: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  TestLimitations: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  CPTCodes: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  NewYorkApproved: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  LevelOfService: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  TurnAroundTime: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  AssayCategory: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  ReferenceRanges: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  SetupSchedule: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  AlternativeSpecimen: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  LoincCodesText: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  LoincCodesHTML: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  TestCategory: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  TestSubCategory: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  CreatedAt: z.union([ z.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  UpdatedAt: z.union([ z.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  LabOrderTest: z.lazy(() => LabOrderTestUpdateManyWithoutTestCatalogNestedInputSchema).optional(),
  OrganizationFavoriteTest: z.lazy(() => OrganizationFavoriteTestUpdateManyWithoutTestCatalogNestedInputSchema).optional(),
  ProviderFavoriteTest: z.lazy(() => ProviderFavoriteTestUpdateManyWithoutTestCatalogNestedInputSchema).optional(),
  SponsoredTest: z.lazy(() => SponsoredTestUpdateManyWithoutTestCatalogNestedInputSchema).optional(),
  TestBiomarker: z.lazy(() => TestBiomarkerUpdateManyWithoutTestCatalogNestedInputSchema).optional(),
  Lab: z.lazy(() => LabUpdateOneWithoutTestCatalogNestedInputSchema).optional(),
  TestCptCode: z.lazy(() => TestCptCodeUpdateManyWithoutTestCatalogNestedInputSchema).optional(),
  TestGene: z.lazy(() => TestGeneUpdateManyWithoutTestCatalogNestedInputSchema).optional(),
  TestOrderLoinc: z.lazy(() => TestOrderLoincUpdateManyWithoutTestCatalogNestedInputSchema).optional()
}).strict();

export const TestCatalogUncheckedUpdateWithoutTestResultLoincInputSchema: z.ZodType<Prisma.TestCatalogUncheckedUpdateWithoutTestResultLoincInput> = z.object({
  TestId: z.union([ z.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  LabId: z.union([ z.number(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  href: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  CasandraTestId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  LabTestId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  TestName: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  AlternativeName: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  AlternativeName1: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  AlternativeName2: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  AlternativeName3: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  AlternativeName4: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  AlternativeName5: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  TestIncludes: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  SpecimenType: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  SpecialInstructions: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Methodology: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  TestDescription: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Diseases: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Probes: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  ClinicalSignificance: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  SpecimenRequirements: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Volume: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  MinimumVolume: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Container: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Collection: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  StabilityRequirements: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  StorageTransportation: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  PatientPreparation: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  CausesForRejection: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  TestUsage: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  TestLimitations: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  CPTCodes: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  NewYorkApproved: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  LevelOfService: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  TurnAroundTime: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  AssayCategory: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  ReferenceRanges: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  SetupSchedule: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  AlternativeSpecimen: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  LoincCodesText: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  LoincCodesHTML: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  TestCategory: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  TestSubCategory: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  CreatedAt: z.union([ z.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  UpdatedAt: z.union([ z.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  LabOrderTest: z.lazy(() => LabOrderTestUncheckedUpdateManyWithoutTestCatalogNestedInputSchema).optional(),
  OrganizationFavoriteTest: z.lazy(() => OrganizationFavoriteTestUncheckedUpdateManyWithoutTestCatalogNestedInputSchema).optional(),
  ProviderFavoriteTest: z.lazy(() => ProviderFavoriteTestUncheckedUpdateManyWithoutTestCatalogNestedInputSchema).optional(),
  SponsoredTest: z.lazy(() => SponsoredTestUncheckedUpdateManyWithoutTestCatalogNestedInputSchema).optional(),
  TestBiomarker: z.lazy(() => TestBiomarkerUncheckedUpdateManyWithoutTestCatalogNestedInputSchema).optional(),
  TestCptCode: z.lazy(() => TestCptCodeUncheckedUpdateManyWithoutTestCatalogNestedInputSchema).optional(),
  TestGene: z.lazy(() => TestGeneUncheckedUpdateManyWithoutTestCatalogNestedInputSchema).optional(),
  TestOrderLoinc: z.lazy(() => TestOrderLoincUncheckedUpdateManyWithoutTestCatalogNestedInputSchema).optional()
}).strict();

export const AccountCreateWithoutUserInputSchema: z.ZodType<Prisma.AccountCreateWithoutUserInput> = z.object({
  id: z.string().optional(),
  type: z.string(),
  provider: z.string(),
  providerAccountId: z.string(),
  refresh_token: z.string().optional().nullable(),
  access_token: z.string().optional().nullable(),
  expires_at: z.number().optional().nullable(),
  token_type: z.string().optional().nullable(),
  scope: z.string().optional().nullable(),
  state: z.string().optional().nullable(),
  id_token: z.string().optional().nullable(),
  session_state: z.string().optional().nullable(),
  refresh_token_expires_in: z.number().optional().nullable(),
  epic_dstu2_patient: z.string().optional().nullable(),
  appointment: z.string().optional().nullable(),
  dob: z.string().optional().nullable(),
  encounter: z.string().optional().nullable(),
  location: z.string().optional().nullable(),
  loginDepartment: z.string().optional().nullable(),
  need_patient_banner: z.string().optional().nullable(),
  patient: z.string().optional().nullable(),
  smart_style_url: z.string().optional().nullable(),
  unconfirmed_status: z.string().optional().nullable(),
  user_email: z.string().optional().nullable(),
  username: z.string().optional().nullable(),
  tenant: z.string().optional().nullable(),
  createdAt: z.date().optional().nullable(),
  updatedAt: z.date().optional().nullable()
}).strict();

export const AccountUncheckedCreateWithoutUserInputSchema: z.ZodType<Prisma.AccountUncheckedCreateWithoutUserInput> = z.object({
  id: z.string().optional(),
  type: z.string(),
  provider: z.string(),
  providerAccountId: z.string(),
  refresh_token: z.string().optional().nullable(),
  access_token: z.string().optional().nullable(),
  expires_at: z.number().optional().nullable(),
  token_type: z.string().optional().nullable(),
  scope: z.string().optional().nullable(),
  state: z.string().optional().nullable(),
  id_token: z.string().optional().nullable(),
  session_state: z.string().optional().nullable(),
  refresh_token_expires_in: z.number().optional().nullable(),
  epic_dstu2_patient: z.string().optional().nullable(),
  appointment: z.string().optional().nullable(),
  dob: z.string().optional().nullable(),
  encounter: z.string().optional().nullable(),
  location: z.string().optional().nullable(),
  loginDepartment: z.string().optional().nullable(),
  need_patient_banner: z.string().optional().nullable(),
  patient: z.string().optional().nullable(),
  smart_style_url: z.string().optional().nullable(),
  unconfirmed_status: z.string().optional().nullable(),
  user_email: z.string().optional().nullable(),
  username: z.string().optional().nullable(),
  tenant: z.string().optional().nullable(),
  createdAt: z.date().optional().nullable(),
  updatedAt: z.date().optional().nullable()
}).strict();

export const AccountCreateOrConnectWithoutUserInputSchema: z.ZodType<Prisma.AccountCreateOrConnectWithoutUserInput> = z.object({
  where: z.lazy(() => AccountWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => AccountCreateWithoutUserInputSchema),z.lazy(() => AccountUncheckedCreateWithoutUserInputSchema) ]),
}).strict();

export const SessionCreateWithoutUserInputSchema: z.ZodType<Prisma.SessionCreateWithoutUserInput> = z.object({
  id: z.string(),
  sessionToken: z.string(),
  expires: z.date()
}).strict();

export const SessionUncheckedCreateWithoutUserInputSchema: z.ZodType<Prisma.SessionUncheckedCreateWithoutUserInput> = z.object({
  id: z.string(),
  sessionToken: z.string(),
  expires: z.date()
}).strict();

export const SessionCreateOrConnectWithoutUserInputSchema: z.ZodType<Prisma.SessionCreateOrConnectWithoutUserInput> = z.object({
  where: z.lazy(() => SessionWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => SessionCreateWithoutUserInputSchema),z.lazy(() => SessionUncheckedCreateWithoutUserInputSchema) ]),
}).strict();

export const SessionCreateManyUserInputEnvelopeSchema: z.ZodType<Prisma.SessionCreateManyUserInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => SessionCreateManyUserInputSchema),z.lazy(() => SessionCreateManyUserInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const UserAttributeCreateWithoutUserInputSchema: z.ZodType<Prisma.UserAttributeCreateWithoutUserInput> = z.object({
  Id: z.string().optional(),
  UserType: z.lazy(() => UserAttribute_UserTypeSchema).optional().nullable(),
  Admin: z.lazy(() => AdminCreateNestedOneWithoutUserAttributeInputSchema).optional(),
  Provider: z.lazy(() => ProviderCreateNestedOneWithoutUserAttributeInputSchema).optional()
}).strict();

export const UserAttributeUncheckedCreateWithoutUserInputSchema: z.ZodType<Prisma.UserAttributeUncheckedCreateWithoutUserInput> = z.object({
  Id: z.string().optional(),
  UserType: z.lazy(() => UserAttribute_UserTypeSchema).optional().nullable(),
  Admin: z.lazy(() => AdminUncheckedCreateNestedOneWithoutUserAttributeInputSchema).optional(),
  Provider: z.lazy(() => ProviderUncheckedCreateNestedOneWithoutUserAttributeInputSchema).optional()
}).strict();

export const UserAttributeCreateOrConnectWithoutUserInputSchema: z.ZodType<Prisma.UserAttributeCreateOrConnectWithoutUserInput> = z.object({
  where: z.lazy(() => UserAttributeWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => UserAttributeCreateWithoutUserInputSchema),z.lazy(() => UserAttributeUncheckedCreateWithoutUserInputSchema) ]),
}).strict();

export const AccountUpsertWithoutUserInputSchema: z.ZodType<Prisma.AccountUpsertWithoutUserInput> = z.object({
  update: z.union([ z.lazy(() => AccountUpdateWithoutUserInputSchema),z.lazy(() => AccountUncheckedUpdateWithoutUserInputSchema) ]),
  create: z.union([ z.lazy(() => AccountCreateWithoutUserInputSchema),z.lazy(() => AccountUncheckedCreateWithoutUserInputSchema) ]),
  where: z.lazy(() => AccountWhereInputSchema).optional()
}).strict();

export const AccountUpdateToOneWithWhereWithoutUserInputSchema: z.ZodType<Prisma.AccountUpdateToOneWithWhereWithoutUserInput> = z.object({
  where: z.lazy(() => AccountWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => AccountUpdateWithoutUserInputSchema),z.lazy(() => AccountUncheckedUpdateWithoutUserInputSchema) ]),
}).strict();

export const AccountUpdateWithoutUserInputSchema: z.ZodType<Prisma.AccountUpdateWithoutUserInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  provider: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  providerAccountId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  refresh_token: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  access_token: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  expires_at: z.union([ z.number(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  token_type: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  scope: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  state: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  id_token: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  session_state: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  refresh_token_expires_in: z.union([ z.number(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  epic_dstu2_patient: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  appointment: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  dob: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  encounter: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  location: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  loginDepartment: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  need_patient_banner: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  patient: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  smart_style_url: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  unconfirmed_status: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  user_email: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  username: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  tenant: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updatedAt: z.union([ z.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const AccountUncheckedUpdateWithoutUserInputSchema: z.ZodType<Prisma.AccountUncheckedUpdateWithoutUserInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  provider: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  providerAccountId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  refresh_token: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  access_token: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  expires_at: z.union([ z.number(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  token_type: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  scope: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  state: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  id_token: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  session_state: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  refresh_token_expires_in: z.union([ z.number(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  epic_dstu2_patient: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  appointment: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  dob: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  encounter: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  location: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  loginDepartment: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  need_patient_banner: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  patient: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  smart_style_url: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  unconfirmed_status: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  user_email: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  username: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  tenant: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updatedAt: z.union([ z.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const SessionUpsertWithWhereUniqueWithoutUserInputSchema: z.ZodType<Prisma.SessionUpsertWithWhereUniqueWithoutUserInput> = z.object({
  where: z.lazy(() => SessionWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => SessionUpdateWithoutUserInputSchema),z.lazy(() => SessionUncheckedUpdateWithoutUserInputSchema) ]),
  create: z.union([ z.lazy(() => SessionCreateWithoutUserInputSchema),z.lazy(() => SessionUncheckedCreateWithoutUserInputSchema) ]),
}).strict();

export const SessionUpdateWithWhereUniqueWithoutUserInputSchema: z.ZodType<Prisma.SessionUpdateWithWhereUniqueWithoutUserInput> = z.object({
  where: z.lazy(() => SessionWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => SessionUpdateWithoutUserInputSchema),z.lazy(() => SessionUncheckedUpdateWithoutUserInputSchema) ]),
}).strict();

export const SessionUpdateManyWithWhereWithoutUserInputSchema: z.ZodType<Prisma.SessionUpdateManyWithWhereWithoutUserInput> = z.object({
  where: z.lazy(() => SessionScalarWhereInputSchema),
  data: z.union([ z.lazy(() => SessionUpdateManyMutationInputSchema),z.lazy(() => SessionUncheckedUpdateManyWithoutUserInputSchema) ]),
}).strict();

export const SessionScalarWhereInputSchema: z.ZodType<Prisma.SessionScalarWhereInput> = z.object({
  AND: z.union([ z.lazy(() => SessionScalarWhereInputSchema),z.lazy(() => SessionScalarWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => SessionScalarWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => SessionScalarWhereInputSchema),z.lazy(() => SessionScalarWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  sessionToken: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  userId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  expires: z.union([ z.lazy(() => DateTimeFilterSchema),z.date() ]).optional(),
}).strict();

export const UserAttributeUpsertWithoutUserInputSchema: z.ZodType<Prisma.UserAttributeUpsertWithoutUserInput> = z.object({
  update: z.union([ z.lazy(() => UserAttributeUpdateWithoutUserInputSchema),z.lazy(() => UserAttributeUncheckedUpdateWithoutUserInputSchema) ]),
  create: z.union([ z.lazy(() => UserAttributeCreateWithoutUserInputSchema),z.lazy(() => UserAttributeUncheckedCreateWithoutUserInputSchema) ]),
  where: z.lazy(() => UserAttributeWhereInputSchema).optional()
}).strict();

export const UserAttributeUpdateToOneWithWhereWithoutUserInputSchema: z.ZodType<Prisma.UserAttributeUpdateToOneWithWhereWithoutUserInput> = z.object({
  where: z.lazy(() => UserAttributeWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => UserAttributeUpdateWithoutUserInputSchema),z.lazy(() => UserAttributeUncheckedUpdateWithoutUserInputSchema) ]),
}).strict();

export const UserAttributeUpdateWithoutUserInputSchema: z.ZodType<Prisma.UserAttributeUpdateWithoutUserInput> = z.object({
  Id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  UserType: z.union([ z.lazy(() => UserAttribute_UserTypeSchema),z.lazy(() => NullableEnumUserAttribute_UserTypeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Admin: z.lazy(() => AdminUpdateOneWithoutUserAttributeNestedInputSchema).optional(),
  Provider: z.lazy(() => ProviderUpdateOneWithoutUserAttributeNestedInputSchema).optional()
}).strict();

export const UserAttributeUncheckedUpdateWithoutUserInputSchema: z.ZodType<Prisma.UserAttributeUncheckedUpdateWithoutUserInput> = z.object({
  Id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  UserType: z.union([ z.lazy(() => UserAttribute_UserTypeSchema),z.lazy(() => NullableEnumUserAttribute_UserTypeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Admin: z.lazy(() => AdminUncheckedUpdateOneWithoutUserAttributeNestedInputSchema).optional(),
  Provider: z.lazy(() => ProviderUncheckedUpdateOneWithoutUserAttributeNestedInputSchema).optional()
}).strict();

export const AdminCreateWithoutUserAttributeInputSchema: z.ZodType<Prisma.AdminCreateWithoutUserAttributeInput> = z.object({
  Id: z.string().optional(),
  Name: z.string().optional().nullable(),
  Email: z.string().optional().nullable()
}).strict();

export const AdminUncheckedCreateWithoutUserAttributeInputSchema: z.ZodType<Prisma.AdminUncheckedCreateWithoutUserAttributeInput> = z.object({
  Id: z.string().optional(),
  Name: z.string().optional().nullable(),
  Email: z.string().optional().nullable()
}).strict();

export const AdminCreateOrConnectWithoutUserAttributeInputSchema: z.ZodType<Prisma.AdminCreateOrConnectWithoutUserAttributeInput> = z.object({
  where: z.lazy(() => AdminWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => AdminCreateWithoutUserAttributeInputSchema),z.lazy(() => AdminUncheckedCreateWithoutUserAttributeInputSchema) ]),
}).strict();

export const ProviderCreateWithoutUserAttributeInputSchema: z.ZodType<Prisma.ProviderCreateWithoutUserAttributeInput> = z.object({
  Id: z.string().optional(),
  href: z.string().optional().nullable(),
  NPI: z.string().optional().nullable(),
  Name: z.string().optional().nullable(),
  Email: z.string().optional().nullable(),
  Credentials: z.string().optional().nullable(),
  Specialty: z.string().optional().nullable(),
  Aboutme: z.string().optional().nullable(),
  Gender: z.string().optional().nullable(),
  ProviderType: z.string().optional().nullable(),
  Affiliation: z.string().optional().nullable(),
  ProceduresAndResearch: z.string().optional().nullable(),
  SpecialInterests: z.string().optional().nullable(),
  OrderingProviderLabOrder: z.lazy(() => LabOrderCreateNestedManyWithoutOrderingProviderInputSchema).optional(),
  TreatingProviderLabOrder: z.lazy(() => LabOrderCreateNestedManyWithoutTreatingProviderInputSchema).optional(),
  ProviderEducation: z.lazy(() => ProviderEducationCreateNestedManyWithoutProviderInputSchema).optional(),
  ProviderFavoriteTest: z.lazy(() => ProviderFavoriteTestCreateNestedManyWithoutProviderInputSchema).optional(),
  ProviderOrganization: z.lazy(() => ProviderOrganizationCreateNestedManyWithoutProviderInputSchema).optional()
}).strict();

export const ProviderUncheckedCreateWithoutUserAttributeInputSchema: z.ZodType<Prisma.ProviderUncheckedCreateWithoutUserAttributeInput> = z.object({
  Id: z.string().optional(),
  href: z.string().optional().nullable(),
  NPI: z.string().optional().nullable(),
  Name: z.string().optional().nullable(),
  Email: z.string().optional().nullable(),
  Credentials: z.string().optional().nullable(),
  Specialty: z.string().optional().nullable(),
  Aboutme: z.string().optional().nullable(),
  Gender: z.string().optional().nullable(),
  ProviderType: z.string().optional().nullable(),
  Affiliation: z.string().optional().nullable(),
  ProceduresAndResearch: z.string().optional().nullable(),
  SpecialInterests: z.string().optional().nullable(),
  OrderingProviderLabOrder: z.lazy(() => LabOrderUncheckedCreateNestedManyWithoutOrderingProviderInputSchema).optional(),
  TreatingProviderLabOrder: z.lazy(() => LabOrderUncheckedCreateNestedManyWithoutTreatingProviderInputSchema).optional(),
  ProviderEducation: z.lazy(() => ProviderEducationUncheckedCreateNestedManyWithoutProviderInputSchema).optional(),
  ProviderFavoriteTest: z.lazy(() => ProviderFavoriteTestUncheckedCreateNestedManyWithoutProviderInputSchema).optional(),
  ProviderOrganization: z.lazy(() => ProviderOrganizationUncheckedCreateNestedManyWithoutProviderInputSchema).optional()
}).strict();

export const ProviderCreateOrConnectWithoutUserAttributeInputSchema: z.ZodType<Prisma.ProviderCreateOrConnectWithoutUserAttributeInput> = z.object({
  where: z.lazy(() => ProviderWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => ProviderCreateWithoutUserAttributeInputSchema),z.lazy(() => ProviderUncheckedCreateWithoutUserAttributeInputSchema) ]),
}).strict();

export const UserCreateWithoutUserAttributeInputSchema: z.ZodType<Prisma.UserCreateWithoutUserAttributeInput> = z.object({
  id: z.string().optional(),
  name: z.string().optional().nullable(),
  email: z.string().optional().nullable(),
  password: z.string().optional().nullable(),
  emailVerified: z.date().optional().nullable(),
  image: z.string().optional().nullable(),
  Account: z.lazy(() => AccountCreateNestedOneWithoutUserInputSchema).optional(),
  Session: z.lazy(() => SessionCreateNestedManyWithoutUserInputSchema).optional()
}).strict();

export const UserUncheckedCreateWithoutUserAttributeInputSchema: z.ZodType<Prisma.UserUncheckedCreateWithoutUserAttributeInput> = z.object({
  id: z.string().optional(),
  name: z.string().optional().nullable(),
  email: z.string().optional().nullable(),
  password: z.string().optional().nullable(),
  emailVerified: z.date().optional().nullable(),
  image: z.string().optional().nullable(),
  Account: z.lazy(() => AccountUncheckedCreateNestedOneWithoutUserInputSchema).optional(),
  Session: z.lazy(() => SessionUncheckedCreateNestedManyWithoutUserInputSchema).optional()
}).strict();

export const UserCreateOrConnectWithoutUserAttributeInputSchema: z.ZodType<Prisma.UserCreateOrConnectWithoutUserAttributeInput> = z.object({
  where: z.lazy(() => UserWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => UserCreateWithoutUserAttributeInputSchema),z.lazy(() => UserUncheckedCreateWithoutUserAttributeInputSchema) ]),
}).strict();

export const AdminUpsertWithoutUserAttributeInputSchema: z.ZodType<Prisma.AdminUpsertWithoutUserAttributeInput> = z.object({
  update: z.union([ z.lazy(() => AdminUpdateWithoutUserAttributeInputSchema),z.lazy(() => AdminUncheckedUpdateWithoutUserAttributeInputSchema) ]),
  create: z.union([ z.lazy(() => AdminCreateWithoutUserAttributeInputSchema),z.lazy(() => AdminUncheckedCreateWithoutUserAttributeInputSchema) ]),
  where: z.lazy(() => AdminWhereInputSchema).optional()
}).strict();

export const AdminUpdateToOneWithWhereWithoutUserAttributeInputSchema: z.ZodType<Prisma.AdminUpdateToOneWithWhereWithoutUserAttributeInput> = z.object({
  where: z.lazy(() => AdminWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => AdminUpdateWithoutUserAttributeInputSchema),z.lazy(() => AdminUncheckedUpdateWithoutUserAttributeInputSchema) ]),
}).strict();

export const AdminUpdateWithoutUserAttributeInputSchema: z.ZodType<Prisma.AdminUpdateWithoutUserAttributeInput> = z.object({
  Id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  Name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Email: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const AdminUncheckedUpdateWithoutUserAttributeInputSchema: z.ZodType<Prisma.AdminUncheckedUpdateWithoutUserAttributeInput> = z.object({
  Id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  Name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Email: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const ProviderUpsertWithoutUserAttributeInputSchema: z.ZodType<Prisma.ProviderUpsertWithoutUserAttributeInput> = z.object({
  update: z.union([ z.lazy(() => ProviderUpdateWithoutUserAttributeInputSchema),z.lazy(() => ProviderUncheckedUpdateWithoutUserAttributeInputSchema) ]),
  create: z.union([ z.lazy(() => ProviderCreateWithoutUserAttributeInputSchema),z.lazy(() => ProviderUncheckedCreateWithoutUserAttributeInputSchema) ]),
  where: z.lazy(() => ProviderWhereInputSchema).optional()
}).strict();

export const ProviderUpdateToOneWithWhereWithoutUserAttributeInputSchema: z.ZodType<Prisma.ProviderUpdateToOneWithWhereWithoutUserAttributeInput> = z.object({
  where: z.lazy(() => ProviderWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => ProviderUpdateWithoutUserAttributeInputSchema),z.lazy(() => ProviderUncheckedUpdateWithoutUserAttributeInputSchema) ]),
}).strict();

export const ProviderUpdateWithoutUserAttributeInputSchema: z.ZodType<Prisma.ProviderUpdateWithoutUserAttributeInput> = z.object({
  Id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  href: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  NPI: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Email: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Credentials: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Specialty: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Aboutme: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Gender: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  ProviderType: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Affiliation: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  ProceduresAndResearch: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  SpecialInterests: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  OrderingProviderLabOrder: z.lazy(() => LabOrderUpdateManyWithoutOrderingProviderNestedInputSchema).optional(),
  TreatingProviderLabOrder: z.lazy(() => LabOrderUpdateManyWithoutTreatingProviderNestedInputSchema).optional(),
  ProviderEducation: z.lazy(() => ProviderEducationUpdateManyWithoutProviderNestedInputSchema).optional(),
  ProviderFavoriteTest: z.lazy(() => ProviderFavoriteTestUpdateManyWithoutProviderNestedInputSchema).optional(),
  ProviderOrganization: z.lazy(() => ProviderOrganizationUpdateManyWithoutProviderNestedInputSchema).optional()
}).strict();

export const ProviderUncheckedUpdateWithoutUserAttributeInputSchema: z.ZodType<Prisma.ProviderUncheckedUpdateWithoutUserAttributeInput> = z.object({
  Id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  href: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  NPI: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Email: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Credentials: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Specialty: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Aboutme: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Gender: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  ProviderType: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Affiliation: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  ProceduresAndResearch: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  SpecialInterests: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  OrderingProviderLabOrder: z.lazy(() => LabOrderUncheckedUpdateManyWithoutOrderingProviderNestedInputSchema).optional(),
  TreatingProviderLabOrder: z.lazy(() => LabOrderUncheckedUpdateManyWithoutTreatingProviderNestedInputSchema).optional(),
  ProviderEducation: z.lazy(() => ProviderEducationUncheckedUpdateManyWithoutProviderNestedInputSchema).optional(),
  ProviderFavoriteTest: z.lazy(() => ProviderFavoriteTestUncheckedUpdateManyWithoutProviderNestedInputSchema).optional(),
  ProviderOrganization: z.lazy(() => ProviderOrganizationUncheckedUpdateManyWithoutProviderNestedInputSchema).optional()
}).strict();

export const UserUpsertWithoutUserAttributeInputSchema: z.ZodType<Prisma.UserUpsertWithoutUserAttributeInput> = z.object({
  update: z.union([ z.lazy(() => UserUpdateWithoutUserAttributeInputSchema),z.lazy(() => UserUncheckedUpdateWithoutUserAttributeInputSchema) ]),
  create: z.union([ z.lazy(() => UserCreateWithoutUserAttributeInputSchema),z.lazy(() => UserUncheckedCreateWithoutUserAttributeInputSchema) ]),
  where: z.lazy(() => UserWhereInputSchema).optional()
}).strict();

export const UserUpdateToOneWithWhereWithoutUserAttributeInputSchema: z.ZodType<Prisma.UserUpdateToOneWithWhereWithoutUserAttributeInput> = z.object({
  where: z.lazy(() => UserWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => UserUpdateWithoutUserAttributeInputSchema),z.lazy(() => UserUncheckedUpdateWithoutUserAttributeInputSchema) ]),
}).strict();

export const UserUpdateWithoutUserAttributeInputSchema: z.ZodType<Prisma.UserUpdateWithoutUserAttributeInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  email: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  password: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  emailVerified: z.union([ z.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  image: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Account: z.lazy(() => AccountUpdateOneWithoutUserNestedInputSchema).optional(),
  Session: z.lazy(() => SessionUpdateManyWithoutUserNestedInputSchema).optional()
}).strict();

export const UserUncheckedUpdateWithoutUserAttributeInputSchema: z.ZodType<Prisma.UserUncheckedUpdateWithoutUserAttributeInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  email: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  password: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  emailVerified: z.union([ z.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  image: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Account: z.lazy(() => AccountUncheckedUpdateOneWithoutUserNestedInputSchema).optional(),
  Session: z.lazy(() => SessionUncheckedUpdateManyWithoutUserNestedInputSchema).optional()
}).strict();

export const LabOrderAttachmentCreateManyAttachmentInputSchema: z.ZodType<Prisma.LabOrderAttachmentCreateManyAttachmentInput> = z.object({
  Id: z.string().optional(),
  LabOrderId: z.string().optional().nullable(),
  CreatedAt: z.date().optional().nullable(),
  UpdatedAt: z.date().optional().nullable()
}).strict();

export const LabOrderAttachmentUpdateWithoutAttachmentInputSchema: z.ZodType<Prisma.LabOrderAttachmentUpdateWithoutAttachmentInput> = z.object({
  Id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  CreatedAt: z.union([ z.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  UpdatedAt: z.union([ z.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  LabOrder: z.lazy(() => LabOrderUpdateOneWithoutLabOrderAttachmentNestedInputSchema).optional()
}).strict();

export const LabOrderAttachmentUncheckedUpdateWithoutAttachmentInputSchema: z.ZodType<Prisma.LabOrderAttachmentUncheckedUpdateWithoutAttachmentInput> = z.object({
  Id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  LabOrderId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  CreatedAt: z.union([ z.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  UpdatedAt: z.union([ z.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const LabOrderAttachmentUncheckedUpdateManyWithoutAttachmentInputSchema: z.ZodType<Prisma.LabOrderAttachmentUncheckedUpdateManyWithoutAttachmentInput> = z.object({
  Id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  LabOrderId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  CreatedAt: z.union([ z.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  UpdatedAt: z.union([ z.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const TestBiomarkerCreateManyBIOMARKERInputSchema: z.ZodType<Prisma.TestBiomarkerCreateManyBIOMARKERInput> = z.object({
  Id: z.number().optional(),
  TestId: z.number(),
  LabTestId: z.string().optional().nullable(),
  TranscriptReference: z.string().optional().nullable(),
  CreatedAt: z.date().optional(),
  UpdatedAt: z.date().optional()
}).strict();

export const TestBiomarkerUpdateWithoutBIOMARKERInputSchema: z.ZodType<Prisma.TestBiomarkerUpdateWithoutBIOMARKERInput> = z.object({
  LabTestId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  TranscriptReference: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  CreatedAt: z.union([ z.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  UpdatedAt: z.union([ z.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  TestCatalog: z.lazy(() => TestCatalogUpdateOneRequiredWithoutTestBiomarkerNestedInputSchema).optional()
}).strict();

export const TestBiomarkerUncheckedUpdateWithoutBIOMARKERInputSchema: z.ZodType<Prisma.TestBiomarkerUncheckedUpdateWithoutBIOMARKERInput> = z.object({
  Id: z.union([ z.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  TestId: z.union([ z.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  LabTestId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  TranscriptReference: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  CreatedAt: z.union([ z.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  UpdatedAt: z.union([ z.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const TestBiomarkerUncheckedUpdateManyWithoutBIOMARKERInputSchema: z.ZodType<Prisma.TestBiomarkerUncheckedUpdateManyWithoutBIOMARKERInput> = z.object({
  Id: z.union([ z.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  TestId: z.union([ z.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  LabTestId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  TranscriptReference: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  CreatedAt: z.union([ z.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  UpdatedAt: z.union([ z.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const LabOrderIcdCreateManyICDInputSchema: z.ZodType<Prisma.LabOrderIcdCreateManyICDInput> = z.object({
  Id: z.string().optional(),
  LabOrderId: z.string().optional().nullable(),
  CreatedAt: z.date().optional().nullable(),
  UpdatedAt: z.date().optional().nullable()
}).strict();

export const LabOrderIcdUpdateWithoutICDInputSchema: z.ZodType<Prisma.LabOrderIcdUpdateWithoutICDInput> = z.object({
  Id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  CreatedAt: z.union([ z.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  UpdatedAt: z.union([ z.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  LabOrder: z.lazy(() => LabOrderUpdateOneWithoutLabOrderIcdNestedInputSchema).optional()
}).strict();

export const LabOrderIcdUncheckedUpdateWithoutICDInputSchema: z.ZodType<Prisma.LabOrderIcdUncheckedUpdateWithoutICDInput> = z.object({
  Id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  LabOrderId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  CreatedAt: z.union([ z.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  UpdatedAt: z.union([ z.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const LabOrderIcdUncheckedUpdateManyWithoutICDInputSchema: z.ZodType<Prisma.LabOrderIcdUncheckedUpdateManyWithoutICDInput> = z.object({
  Id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  LabOrderId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  CreatedAt: z.union([ z.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  UpdatedAt: z.union([ z.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const TestOrderLoincCreateManyLOINCInputSchema: z.ZodType<Prisma.TestOrderLoincCreateManyLOINCInput> = z.object({
  Id: z.number().optional(),
  TestId: z.number(),
  LabTestId: z.string().optional().nullable(),
  CreatedAt: z.date().optional(),
  UpdatedAt: z.date().optional()
}).strict();

export const TestResultLoincCreateManyLOINCInputSchema: z.ZodType<Prisma.TestResultLoincCreateManyLOINCInput> = z.object({
  Id: z.number().optional(),
  TestId: z.number(),
  LabTestId: z.string().optional().nullable(),
  ResultCode: z.string().optional().nullable(),
  ResultCodeName: z.string().optional().nullable(),
  UofM: z.string().optional().nullable(),
  CreatedAt: z.date().optional(),
  UpdatedAt: z.date().optional()
}).strict();

export const TestOrderLoincUpdateWithoutLOINCInputSchema: z.ZodType<Prisma.TestOrderLoincUpdateWithoutLOINCInput> = z.object({
  LabTestId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  CreatedAt: z.union([ z.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  UpdatedAt: z.union([ z.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  TestCatalog: z.lazy(() => TestCatalogUpdateOneRequiredWithoutTestOrderLoincNestedInputSchema).optional()
}).strict();

export const TestOrderLoincUncheckedUpdateWithoutLOINCInputSchema: z.ZodType<Prisma.TestOrderLoincUncheckedUpdateWithoutLOINCInput> = z.object({
  Id: z.union([ z.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  TestId: z.union([ z.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  LabTestId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  CreatedAt: z.union([ z.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  UpdatedAt: z.union([ z.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const TestOrderLoincUncheckedUpdateManyWithoutLOINCInputSchema: z.ZodType<Prisma.TestOrderLoincUncheckedUpdateManyWithoutLOINCInput> = z.object({
  Id: z.union([ z.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  TestId: z.union([ z.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  LabTestId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  CreatedAt: z.union([ z.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  UpdatedAt: z.union([ z.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const TestResultLoincUpdateWithoutLOINCInputSchema: z.ZodType<Prisma.TestResultLoincUpdateWithoutLOINCInput> = z.object({
  LabTestId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  ResultCode: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  ResultCodeName: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  UofM: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  CreatedAt: z.union([ z.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  UpdatedAt: z.union([ z.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  TestCatalog: z.lazy(() => TestCatalogUpdateOneRequiredWithoutTestResultLoincNestedInputSchema).optional()
}).strict();

export const TestResultLoincUncheckedUpdateWithoutLOINCInputSchema: z.ZodType<Prisma.TestResultLoincUncheckedUpdateWithoutLOINCInput> = z.object({
  Id: z.union([ z.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  TestId: z.union([ z.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  LabTestId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  ResultCode: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  ResultCodeName: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  UofM: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  CreatedAt: z.union([ z.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  UpdatedAt: z.union([ z.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const TestResultLoincUncheckedUpdateManyWithoutLOINCInputSchema: z.ZodType<Prisma.TestResultLoincUncheckedUpdateManyWithoutLOINCInput> = z.object({
  Id: z.union([ z.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  TestId: z.union([ z.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  LabTestId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  ResultCode: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  ResultCodeName: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  UofM: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  CreatedAt: z.union([ z.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  UpdatedAt: z.union([ z.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const SponsoredTestCreateManyLabInputSchema: z.ZodType<Prisma.SponsoredTestCreateManyLabInput> = z.object({
  Id: z.string().optional(),
  TestId: z.number(),
  LabTestId: z.string().optional().nullable(),
  SponsoredProgramId: z.number().optional().nullable(),
  CasandraTestId: z.string(),
  Category: z.string(),
  SubCategory: z.string().optional().nullable(),
  CreatedAt: z.date().optional().nullable(),
  UpdatedAt: z.date().optional().nullable()
}).strict();

export const TestCatalogCreateManyLabInputSchema: z.ZodType<Prisma.TestCatalogCreateManyLabInput> = z.object({
  TestId: z.number().optional(),
  href: z.string().optional().nullable(),
  CasandraTestId: z.string(),
  LabTestId: z.string().optional().nullable(),
  TestName: z.string().optional().nullable(),
  AlternativeName: z.string().optional().nullable(),
  AlternativeName1: z.string().optional().nullable(),
  AlternativeName2: z.string().optional().nullable(),
  AlternativeName3: z.string().optional().nullable(),
  AlternativeName4: z.string().optional().nullable(),
  AlternativeName5: z.string().optional().nullable(),
  TestIncludes: z.string().optional().nullable(),
  SpecimenType: z.string().optional().nullable(),
  SpecialInstructions: z.string().optional().nullable(),
  Methodology: z.string().optional().nullable(),
  TestDescription: z.string().optional().nullable(),
  Diseases: z.string().optional().nullable(),
  Probes: z.string().optional().nullable(),
  ClinicalSignificance: z.string().optional().nullable(),
  SpecimenRequirements: z.string().optional().nullable(),
  Volume: z.string().optional().nullable(),
  MinimumVolume: z.string().optional().nullable(),
  Container: z.string().optional().nullable(),
  Collection: z.string().optional().nullable(),
  StabilityRequirements: z.string().optional().nullable(),
  StorageTransportation: z.string().optional().nullable(),
  PatientPreparation: z.string().optional().nullable(),
  CausesForRejection: z.string().optional().nullable(),
  TestUsage: z.string().optional().nullable(),
  TestLimitations: z.string().optional().nullable(),
  CPTCodes: z.string().optional().nullable(),
  NewYorkApproved: z.string().optional().nullable(),
  LevelOfService: z.string().optional().nullable(),
  TurnAroundTime: z.string().optional().nullable(),
  AssayCategory: z.string().optional().nullable(),
  ReferenceRanges: z.string().optional().nullable(),
  SetupSchedule: z.string().optional().nullable(),
  AlternativeSpecimen: z.string().optional().nullable(),
  LoincCodesText: z.string().optional().nullable(),
  LoincCodesHTML: z.string().optional().nullable(),
  TestCategory: z.string().optional().nullable(),
  TestSubCategory: z.string().optional().nullable(),
  CreatedAt: z.date().optional(),
  UpdatedAt: z.date().optional()
}).strict();

export const SponsoredTestUpdateWithoutLabInputSchema: z.ZodType<Prisma.SponsoredTestUpdateWithoutLabInput> = z.object({
  Id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  LabTestId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  CasandraTestId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  Category: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  SubCategory: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  CreatedAt: z.union([ z.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  UpdatedAt: z.union([ z.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  LabOrderSponsoredTestConsent: z.lazy(() => LabOrderSponsoredTestConsentUpdateManyWithoutSponsoredTestNestedInputSchema).optional(),
  SponsoredProgram: z.lazy(() => SponsoredProgramUpdateOneWithoutSponsoredTestNestedInputSchema).optional(),
  TestCatalog: z.lazy(() => TestCatalogUpdateOneRequiredWithoutSponsoredTestNestedInputSchema).optional()
}).strict();

export const SponsoredTestUncheckedUpdateWithoutLabInputSchema: z.ZodType<Prisma.SponsoredTestUncheckedUpdateWithoutLabInput> = z.object({
  Id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  TestId: z.union([ z.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  LabTestId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  SponsoredProgramId: z.union([ z.number(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  CasandraTestId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  Category: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  SubCategory: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  CreatedAt: z.union([ z.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  UpdatedAt: z.union([ z.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  LabOrderSponsoredTestConsent: z.lazy(() => LabOrderSponsoredTestConsentUncheckedUpdateManyWithoutSponsoredTestNestedInputSchema).optional()
}).strict();

export const SponsoredTestUncheckedUpdateManyWithoutLabInputSchema: z.ZodType<Prisma.SponsoredTestUncheckedUpdateManyWithoutLabInput> = z.object({
  Id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  TestId: z.union([ z.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  LabTestId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  SponsoredProgramId: z.union([ z.number(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  CasandraTestId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  Category: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  SubCategory: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  CreatedAt: z.union([ z.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  UpdatedAt: z.union([ z.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const TestCatalogUpdateWithoutLabInputSchema: z.ZodType<Prisma.TestCatalogUpdateWithoutLabInput> = z.object({
  href: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  CasandraTestId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  LabTestId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  TestName: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  AlternativeName: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  AlternativeName1: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  AlternativeName2: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  AlternativeName3: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  AlternativeName4: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  AlternativeName5: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  TestIncludes: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  SpecimenType: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  SpecialInstructions: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Methodology: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  TestDescription: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Diseases: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Probes: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  ClinicalSignificance: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  SpecimenRequirements: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Volume: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  MinimumVolume: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Container: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Collection: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  StabilityRequirements: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  StorageTransportation: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  PatientPreparation: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  CausesForRejection: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  TestUsage: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  TestLimitations: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  CPTCodes: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  NewYorkApproved: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  LevelOfService: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  TurnAroundTime: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  AssayCategory: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  ReferenceRanges: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  SetupSchedule: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  AlternativeSpecimen: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  LoincCodesText: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  LoincCodesHTML: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  TestCategory: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  TestSubCategory: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  CreatedAt: z.union([ z.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  UpdatedAt: z.union([ z.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  LabOrderTest: z.lazy(() => LabOrderTestUpdateManyWithoutTestCatalogNestedInputSchema).optional(),
  OrganizationFavoriteTest: z.lazy(() => OrganizationFavoriteTestUpdateManyWithoutTestCatalogNestedInputSchema).optional(),
  ProviderFavoriteTest: z.lazy(() => ProviderFavoriteTestUpdateManyWithoutTestCatalogNestedInputSchema).optional(),
  SponsoredTest: z.lazy(() => SponsoredTestUpdateManyWithoutTestCatalogNestedInputSchema).optional(),
  TestBiomarker: z.lazy(() => TestBiomarkerUpdateManyWithoutTestCatalogNestedInputSchema).optional(),
  TestCptCode: z.lazy(() => TestCptCodeUpdateManyWithoutTestCatalogNestedInputSchema).optional(),
  TestGene: z.lazy(() => TestGeneUpdateManyWithoutTestCatalogNestedInputSchema).optional(),
  TestOrderLoinc: z.lazy(() => TestOrderLoincUpdateManyWithoutTestCatalogNestedInputSchema).optional(),
  TestResultLoinc: z.lazy(() => TestResultLoincUpdateManyWithoutTestCatalogNestedInputSchema).optional()
}).strict();

export const TestCatalogUncheckedUpdateWithoutLabInputSchema: z.ZodType<Prisma.TestCatalogUncheckedUpdateWithoutLabInput> = z.object({
  TestId: z.union([ z.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  href: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  CasandraTestId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  LabTestId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  TestName: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  AlternativeName: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  AlternativeName1: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  AlternativeName2: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  AlternativeName3: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  AlternativeName4: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  AlternativeName5: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  TestIncludes: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  SpecimenType: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  SpecialInstructions: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Methodology: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  TestDescription: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Diseases: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Probes: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  ClinicalSignificance: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  SpecimenRequirements: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Volume: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  MinimumVolume: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Container: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Collection: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  StabilityRequirements: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  StorageTransportation: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  PatientPreparation: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  CausesForRejection: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  TestUsage: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  TestLimitations: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  CPTCodes: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  NewYorkApproved: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  LevelOfService: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  TurnAroundTime: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  AssayCategory: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  ReferenceRanges: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  SetupSchedule: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  AlternativeSpecimen: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  LoincCodesText: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  LoincCodesHTML: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  TestCategory: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  TestSubCategory: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  CreatedAt: z.union([ z.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  UpdatedAt: z.union([ z.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  LabOrderTest: z.lazy(() => LabOrderTestUncheckedUpdateManyWithoutTestCatalogNestedInputSchema).optional(),
  OrganizationFavoriteTest: z.lazy(() => OrganizationFavoriteTestUncheckedUpdateManyWithoutTestCatalogNestedInputSchema).optional(),
  ProviderFavoriteTest: z.lazy(() => ProviderFavoriteTestUncheckedUpdateManyWithoutTestCatalogNestedInputSchema).optional(),
  SponsoredTest: z.lazy(() => SponsoredTestUncheckedUpdateManyWithoutTestCatalogNestedInputSchema).optional(),
  TestBiomarker: z.lazy(() => TestBiomarkerUncheckedUpdateManyWithoutTestCatalogNestedInputSchema).optional(),
  TestCptCode: z.lazy(() => TestCptCodeUncheckedUpdateManyWithoutTestCatalogNestedInputSchema).optional(),
  TestGene: z.lazy(() => TestGeneUncheckedUpdateManyWithoutTestCatalogNestedInputSchema).optional(),
  TestOrderLoinc: z.lazy(() => TestOrderLoincUncheckedUpdateManyWithoutTestCatalogNestedInputSchema).optional(),
  TestResultLoinc: z.lazy(() => TestResultLoincUncheckedUpdateManyWithoutTestCatalogNestedInputSchema).optional()
}).strict();

export const TestCatalogUncheckedUpdateManyWithoutLabInputSchema: z.ZodType<Prisma.TestCatalogUncheckedUpdateManyWithoutLabInput> = z.object({
  TestId: z.union([ z.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  href: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  CasandraTestId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  LabTestId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  TestName: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  AlternativeName: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  AlternativeName1: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  AlternativeName2: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  AlternativeName3: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  AlternativeName4: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  AlternativeName5: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  TestIncludes: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  SpecimenType: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  SpecialInstructions: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Methodology: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  TestDescription: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Diseases: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Probes: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  ClinicalSignificance: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  SpecimenRequirements: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Volume: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  MinimumVolume: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Container: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Collection: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  StabilityRequirements: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  StorageTransportation: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  PatientPreparation: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  CausesForRejection: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  TestUsage: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  TestLimitations: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  CPTCodes: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  NewYorkApproved: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  LevelOfService: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  TurnAroundTime: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  AssayCategory: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  ReferenceRanges: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  SetupSchedule: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  AlternativeSpecimen: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  LoincCodesText: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  LoincCodesHTML: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  TestCategory: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  TestSubCategory: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  CreatedAt: z.union([ z.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  UpdatedAt: z.union([ z.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const LabOrderAttachmentCreateManyLabOrderInputSchema: z.ZodType<Prisma.LabOrderAttachmentCreateManyLabOrderInput> = z.object({
  Id: z.string().optional(),
  AttachmentId: z.string().optional().nullable(),
  CreatedAt: z.date().optional().nullable(),
  UpdatedAt: z.date().optional().nullable()
}).strict();

export const LabOrderBillingCreateManyLabOrderInputSchema: z.ZodType<Prisma.LabOrderBillingCreateManyLabOrderInput> = z.object({
  Id: z.string().optional(),
  BillToId: z.string().optional().nullable(),
  HealthPalnId: z.string().optional().nullable(),
  PatientStatus: z.string().optional().nullable(),
  SponoseredTestCouponCode: z.string().optional().nullable(),
  CreatedAt: z.date().optional().nullable(),
  UpdatedAt: z.date().optional().nullable()
}).strict();

export const LabOrderIcdCreateManyLabOrderInputSchema: z.ZodType<Prisma.LabOrderIcdCreateManyLabOrderInput> = z.object({
  Id: z.string().optional(),
  ICDId: z.string().optional().nullable(),
  CreatedAt: z.date().optional().nullable(),
  UpdatedAt: z.date().optional().nullable()
}).strict();

export const LabOrderSpecimenCreateManyLabOrderInputSchema: z.ZodType<Prisma.LabOrderSpecimenCreateManyLabOrderInput> = z.object({
  Id: z.string().optional(),
  SpecimenType: z.string().optional().nullable(),
  SpecimenCount: z.string().optional().nullable(),
  CollectedDate: z.date().optional().nullable(),
  CollectedTime: z.string().optional().nullable(),
  SpecimenID: z.string().optional().nullable(),
  BodySite: z.string().optional().nullable(),
  TumorType: z.string().optional().nullable(),
  Fixative: z.string().optional().nullable(),
  FixativeDuration: z.string().optional().nullable(),
  ColdIschemicTime: z.string().optional().nullable(),
  CreatedAt: z.date().optional().nullable(),
  UpdatedAt: z.date().optional().nullable()
}).strict();

export const LabOrderSponsoredTestConsentCreateManyLabOrderInputSchema: z.ZodType<Prisma.LabOrderSponsoredTestConsentCreateManyLabOrderInput> = z.object({
  Id: z.string().optional(),
  SponsoredCasandraTestId: z.string().optional().nullable(),
  ProviderName: z.string().optional().nullable(),
  ProviderNPI: z.string().optional().nullable(),
  ConsentAt: z.date().optional().nullable(),
  CreatedAt: z.date().optional().nullable(),
  UpdatedAt: z.date().optional().nullable()
}).strict();

export const LabOrderStatusCreateManyLabOrderInputSchema: z.ZodType<Prisma.LabOrderStatusCreateManyLabOrderInput> = z.object({
  Id: z.string().optional(),
  Status: z.string().optional().nullable(),
  StatusDate: z.date().optional().nullable(),
  CreatedAt: z.date().optional().nullable(),
  UpdatedAt: z.date().optional().nullable()
}).strict();

export const LabOrderTestCreateManyLabOrderInputSchema: z.ZodType<Prisma.LabOrderTestCreateManyLabOrderInput> = z.object({
  Id: z.string().optional(),
  TestId: z.number().optional().nullable(),
  CreatedAt: z.date().optional().nullable(),
  UpdatedAt: z.date().optional().nullable()
}).strict();

export const LabOrderAttachmentUpdateWithoutLabOrderInputSchema: z.ZodType<Prisma.LabOrderAttachmentUpdateWithoutLabOrderInput> = z.object({
  Id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  CreatedAt: z.union([ z.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  UpdatedAt: z.union([ z.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Attachment: z.lazy(() => AttachmentUpdateOneWithoutLabOrderAttachmentNestedInputSchema).optional()
}).strict();

export const LabOrderAttachmentUncheckedUpdateWithoutLabOrderInputSchema: z.ZodType<Prisma.LabOrderAttachmentUncheckedUpdateWithoutLabOrderInput> = z.object({
  Id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  AttachmentId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  CreatedAt: z.union([ z.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  UpdatedAt: z.union([ z.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const LabOrderAttachmentUncheckedUpdateManyWithoutLabOrderInputSchema: z.ZodType<Prisma.LabOrderAttachmentUncheckedUpdateManyWithoutLabOrderInput> = z.object({
  Id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  AttachmentId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  CreatedAt: z.union([ z.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  UpdatedAt: z.union([ z.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const LabOrderBillingUpdateWithoutLabOrderInputSchema: z.ZodType<Prisma.LabOrderBillingUpdateWithoutLabOrderInput> = z.object({
  Id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  BillToId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  HealthPalnId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  PatientStatus: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  SponoseredTestCouponCode: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  CreatedAt: z.union([ z.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  UpdatedAt: z.union([ z.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const LabOrderBillingUncheckedUpdateWithoutLabOrderInputSchema: z.ZodType<Prisma.LabOrderBillingUncheckedUpdateWithoutLabOrderInput> = z.object({
  Id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  BillToId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  HealthPalnId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  PatientStatus: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  SponoseredTestCouponCode: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  CreatedAt: z.union([ z.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  UpdatedAt: z.union([ z.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const LabOrderBillingUncheckedUpdateManyWithoutLabOrderInputSchema: z.ZodType<Prisma.LabOrderBillingUncheckedUpdateManyWithoutLabOrderInput> = z.object({
  Id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  BillToId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  HealthPalnId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  PatientStatus: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  SponoseredTestCouponCode: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  CreatedAt: z.union([ z.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  UpdatedAt: z.union([ z.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const LabOrderIcdUpdateWithoutLabOrderInputSchema: z.ZodType<Prisma.LabOrderIcdUpdateWithoutLabOrderInput> = z.object({
  Id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  CreatedAt: z.union([ z.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  UpdatedAt: z.union([ z.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  ICD: z.lazy(() => ICDUpdateOneWithoutLabOrderIcdNestedInputSchema).optional()
}).strict();

export const LabOrderIcdUncheckedUpdateWithoutLabOrderInputSchema: z.ZodType<Prisma.LabOrderIcdUncheckedUpdateWithoutLabOrderInput> = z.object({
  Id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  ICDId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  CreatedAt: z.union([ z.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  UpdatedAt: z.union([ z.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const LabOrderIcdUncheckedUpdateManyWithoutLabOrderInputSchema: z.ZodType<Prisma.LabOrderIcdUncheckedUpdateManyWithoutLabOrderInput> = z.object({
  Id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  ICDId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  CreatedAt: z.union([ z.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  UpdatedAt: z.union([ z.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const LabOrderSpecimenUpdateWithoutLabOrderInputSchema: z.ZodType<Prisma.LabOrderSpecimenUpdateWithoutLabOrderInput> = z.object({
  Id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  SpecimenType: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  SpecimenCount: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  CollectedDate: z.union([ z.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  CollectedTime: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  SpecimenID: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  BodySite: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  TumorType: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Fixative: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  FixativeDuration: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  ColdIschemicTime: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  CreatedAt: z.union([ z.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  UpdatedAt: z.union([ z.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const LabOrderSpecimenUncheckedUpdateWithoutLabOrderInputSchema: z.ZodType<Prisma.LabOrderSpecimenUncheckedUpdateWithoutLabOrderInput> = z.object({
  Id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  SpecimenType: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  SpecimenCount: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  CollectedDate: z.union([ z.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  CollectedTime: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  SpecimenID: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  BodySite: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  TumorType: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Fixative: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  FixativeDuration: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  ColdIschemicTime: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  CreatedAt: z.union([ z.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  UpdatedAt: z.union([ z.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const LabOrderSpecimenUncheckedUpdateManyWithoutLabOrderInputSchema: z.ZodType<Prisma.LabOrderSpecimenUncheckedUpdateManyWithoutLabOrderInput> = z.object({
  Id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  SpecimenType: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  SpecimenCount: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  CollectedDate: z.union([ z.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  CollectedTime: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  SpecimenID: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  BodySite: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  TumorType: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Fixative: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  FixativeDuration: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  ColdIschemicTime: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  CreatedAt: z.union([ z.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  UpdatedAt: z.union([ z.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const LabOrderSponsoredTestConsentUpdateWithoutLabOrderInputSchema: z.ZodType<Prisma.LabOrderSponsoredTestConsentUpdateWithoutLabOrderInput> = z.object({
  Id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  ProviderName: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  ProviderNPI: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  ConsentAt: z.union([ z.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  CreatedAt: z.union([ z.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  UpdatedAt: z.union([ z.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  SponsoredTest: z.lazy(() => SponsoredTestUpdateOneWithoutLabOrderSponsoredTestConsentNestedInputSchema).optional()
}).strict();

export const LabOrderSponsoredTestConsentUncheckedUpdateWithoutLabOrderInputSchema: z.ZodType<Prisma.LabOrderSponsoredTestConsentUncheckedUpdateWithoutLabOrderInput> = z.object({
  Id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  SponsoredCasandraTestId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  ProviderName: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  ProviderNPI: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  ConsentAt: z.union([ z.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  CreatedAt: z.union([ z.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  UpdatedAt: z.union([ z.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const LabOrderSponsoredTestConsentUncheckedUpdateManyWithoutLabOrderInputSchema: z.ZodType<Prisma.LabOrderSponsoredTestConsentUncheckedUpdateManyWithoutLabOrderInput> = z.object({
  Id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  SponsoredCasandraTestId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  ProviderName: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  ProviderNPI: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  ConsentAt: z.union([ z.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  CreatedAt: z.union([ z.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  UpdatedAt: z.union([ z.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const LabOrderStatusUpdateWithoutLabOrderInputSchema: z.ZodType<Prisma.LabOrderStatusUpdateWithoutLabOrderInput> = z.object({
  Id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  Status: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  StatusDate: z.union([ z.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  CreatedAt: z.union([ z.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  UpdatedAt: z.union([ z.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const LabOrderStatusUncheckedUpdateWithoutLabOrderInputSchema: z.ZodType<Prisma.LabOrderStatusUncheckedUpdateWithoutLabOrderInput> = z.object({
  Id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  Status: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  StatusDate: z.union([ z.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  CreatedAt: z.union([ z.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  UpdatedAt: z.union([ z.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const LabOrderStatusUncheckedUpdateManyWithoutLabOrderInputSchema: z.ZodType<Prisma.LabOrderStatusUncheckedUpdateManyWithoutLabOrderInput> = z.object({
  Id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  Status: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  StatusDate: z.union([ z.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  CreatedAt: z.union([ z.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  UpdatedAt: z.union([ z.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const LabOrderTestUpdateWithoutLabOrderInputSchema: z.ZodType<Prisma.LabOrderTestUpdateWithoutLabOrderInput> = z.object({
  Id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  CreatedAt: z.union([ z.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  UpdatedAt: z.union([ z.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  TestCatalog: z.lazy(() => TestCatalogUpdateOneWithoutLabOrderTestNestedInputSchema).optional()
}).strict();

export const LabOrderTestUncheckedUpdateWithoutLabOrderInputSchema: z.ZodType<Prisma.LabOrderTestUncheckedUpdateWithoutLabOrderInput> = z.object({
  Id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  TestId: z.union([ z.number(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  CreatedAt: z.union([ z.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  UpdatedAt: z.union([ z.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const LabOrderTestUncheckedUpdateManyWithoutLabOrderInputSchema: z.ZodType<Prisma.LabOrderTestUncheckedUpdateManyWithoutLabOrderInput> = z.object({
  Id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  TestId: z.union([ z.number(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  CreatedAt: z.union([ z.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  UpdatedAt: z.union([ z.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const LabOrderCreateManyOrganizationInputSchema: z.ZodType<Prisma.LabOrderCreateManyOrganizationInput> = z.object({
  Id: z.string().optional(),
  OrderNumber: z.string().optional().nullable(),
  AccessionNumber: z.string().optional().nullable(),
  OrderingProviderId: z.string().optional().nullable(),
  TreatingProviderId: z.string().optional().nullable(),
  PatientId: z.string().optional().nullable(),
  PatientMRN: z.string().optional().nullable(),
  PatientMobile: z.string().optional().nullable(),
  PatientEmail: z.string().optional().nullable(),
  OrderDate: z.date().optional().nullable(),
  OrderNotes: z.string().optional().nullable(),
  CreatedAt: z.date().optional().nullable(),
  UpdatedAt: z.date().optional().nullable()
}).strict();

export const OrganizationCreateManyOrganizationInputSchema: z.ZodType<Prisma.OrganizationCreateManyOrganizationInput> = z.object({
  Id: z.string(),
  href: z.string().optional().nullable(),
  Level: z.number().optional().nullable(),
  ParentOrgName: z.string().optional().nullable(),
  OrgName: z.string().optional().nullable(),
  OrgType: z.string().optional().nullable(),
  OrgSpecialty: z.string().optional().nullable(),
  OrgAddress: z.string().optional().nullable(),
  OrgCity: z.string().optional().nullable(),
  OrgState: z.string().optional().nullable(),
  OrgZip: z.string().optional().nullable()
}).strict();

export const OrganizationFavoriteTestCreateManyOrganizationInputSchema: z.ZodType<Prisma.OrganizationFavoriteTestCreateManyOrganizationInput> = z.object({
  Id: z.string().optional(),
  ParentId: z.string().optional().nullable(),
  ParentName: z.string().optional().nullable(),
  Level: z.number().optional().nullable(),
  TestId: z.number().optional().nullable(),
  CreatedAt: z.date().optional().nullable(),
  UpdatedAt: z.date().optional().nullable()
}).strict();

export const PatientOrganizationCreateManyOrganizationInputSchema: z.ZodType<Prisma.PatientOrganizationCreateManyOrganizationInput> = z.object({
  Id: z.string().optional(),
  PatientId: z.string(),
  MRN: z.string().optional().nullable(),
  Mobile: z.string().optional().nullable(),
  Email: z.string().optional().nullable()
}).strict();

export const ProviderOrganizationCreateManyOrganizationInputSchema: z.ZodType<Prisma.ProviderOrganizationCreateManyOrganizationInput> = z.object({
  Id: z.string().optional(),
  ProviderId: z.string(),
  ProviderNPI: z.string().optional().nullable(),
  Name: z.string().optional().nullable(),
  ParentOrgName: z.string().optional().nullable(),
  OrgName: z.string().optional().nullable(),
  OrgAddress: z.string().optional().nullable(),
  OrgCity: z.string().optional().nullable(),
  OrgState: z.string().optional().nullable(),
  OrgZip: z.string().optional().nullable()
}).strict();

export const LabOrderUpdateWithoutOrganizationInputSchema: z.ZodType<Prisma.LabOrderUpdateWithoutOrganizationInput> = z.object({
  Id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  OrderNumber: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  AccessionNumber: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  PatientMRN: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  PatientMobile: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  PatientEmail: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  OrderDate: z.union([ z.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  OrderNotes: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  CreatedAt: z.union([ z.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  UpdatedAt: z.union([ z.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  OrderingProvider: z.lazy(() => ProviderUpdateOneWithoutOrderingProviderLabOrderNestedInputSchema).optional(),
  TreatingProvider: z.lazy(() => ProviderUpdateOneWithoutTreatingProviderLabOrderNestedInputSchema).optional(),
  Patient: z.lazy(() => PatientUpdateOneWithoutLabOrderNestedInputSchema).optional(),
  LabOrderAttachment: z.lazy(() => LabOrderAttachmentUpdateManyWithoutLabOrderNestedInputSchema).optional(),
  LabOrderBilling: z.lazy(() => LabOrderBillingUpdateManyWithoutLabOrderNestedInputSchema).optional(),
  LabOrderIcd: z.lazy(() => LabOrderIcdUpdateManyWithoutLabOrderNestedInputSchema).optional(),
  LabOrderSpecimen: z.lazy(() => LabOrderSpecimenUpdateManyWithoutLabOrderNestedInputSchema).optional(),
  LabOrderSponsoredTestConsent: z.lazy(() => LabOrderSponsoredTestConsentUpdateManyWithoutLabOrderNestedInputSchema).optional(),
  LabOrderStatus: z.lazy(() => LabOrderStatusUpdateManyWithoutLabOrderNestedInputSchema).optional(),
  LabOrderTest: z.lazy(() => LabOrderTestUpdateManyWithoutLabOrderNestedInputSchema).optional()
}).strict();

export const LabOrderUncheckedUpdateWithoutOrganizationInputSchema: z.ZodType<Prisma.LabOrderUncheckedUpdateWithoutOrganizationInput> = z.object({
  Id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  OrderNumber: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  AccessionNumber: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  OrderingProviderId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  TreatingProviderId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  PatientId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  PatientMRN: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  PatientMobile: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  PatientEmail: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  OrderDate: z.union([ z.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  OrderNotes: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  CreatedAt: z.union([ z.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  UpdatedAt: z.union([ z.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  LabOrderAttachment: z.lazy(() => LabOrderAttachmentUncheckedUpdateManyWithoutLabOrderNestedInputSchema).optional(),
  LabOrderBilling: z.lazy(() => LabOrderBillingUncheckedUpdateManyWithoutLabOrderNestedInputSchema).optional(),
  LabOrderIcd: z.lazy(() => LabOrderIcdUncheckedUpdateManyWithoutLabOrderNestedInputSchema).optional(),
  LabOrderSpecimen: z.lazy(() => LabOrderSpecimenUncheckedUpdateManyWithoutLabOrderNestedInputSchema).optional(),
  LabOrderSponsoredTestConsent: z.lazy(() => LabOrderSponsoredTestConsentUncheckedUpdateManyWithoutLabOrderNestedInputSchema).optional(),
  LabOrderStatus: z.lazy(() => LabOrderStatusUncheckedUpdateManyWithoutLabOrderNestedInputSchema).optional(),
  LabOrderTest: z.lazy(() => LabOrderTestUncheckedUpdateManyWithoutLabOrderNestedInputSchema).optional()
}).strict();

export const LabOrderUncheckedUpdateManyWithoutOrganizationInputSchema: z.ZodType<Prisma.LabOrderUncheckedUpdateManyWithoutOrganizationInput> = z.object({
  Id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  OrderNumber: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  AccessionNumber: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  OrderingProviderId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  TreatingProviderId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  PatientId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  PatientMRN: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  PatientMobile: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  PatientEmail: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  OrderDate: z.union([ z.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  OrderNotes: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  CreatedAt: z.union([ z.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  UpdatedAt: z.union([ z.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const OrganizationUpdateWithoutOrganizationInputSchema: z.ZodType<Prisma.OrganizationUpdateWithoutOrganizationInput> = z.object({
  Id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  href: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Level: z.union([ z.number(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  ParentOrgName: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  OrgName: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  OrgType: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  OrgSpecialty: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  OrgAddress: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  OrgCity: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  OrgState: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  OrgZip: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  LabOrder: z.lazy(() => LabOrderUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  ChildOrganization: z.lazy(() => OrganizationUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  OrganizationFavoriteTest: z.lazy(() => OrganizationFavoriteTestUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  PatientOrganization: z.lazy(() => PatientOrganizationUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  ProviderOrganization: z.lazy(() => ProviderOrganizationUpdateManyWithoutOrganizationNestedInputSchema).optional()
}).strict();

export const OrganizationUncheckedUpdateWithoutOrganizationInputSchema: z.ZodType<Prisma.OrganizationUncheckedUpdateWithoutOrganizationInput> = z.object({
  Id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  href: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Level: z.union([ z.number(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  ParentOrgName: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  OrgName: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  OrgType: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  OrgSpecialty: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  OrgAddress: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  OrgCity: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  OrgState: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  OrgZip: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  LabOrder: z.lazy(() => LabOrderUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  ChildOrganization: z.lazy(() => OrganizationUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  OrganizationFavoriteTest: z.lazy(() => OrganizationFavoriteTestUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  PatientOrganization: z.lazy(() => PatientOrganizationUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  ProviderOrganization: z.lazy(() => ProviderOrganizationUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional()
}).strict();

export const OrganizationUncheckedUpdateManyWithoutOrganizationInputSchema: z.ZodType<Prisma.OrganizationUncheckedUpdateManyWithoutOrganizationInput> = z.object({
  Id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  href: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Level: z.union([ z.number(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  ParentOrgName: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  OrgName: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  OrgType: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  OrgSpecialty: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  OrgAddress: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  OrgCity: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  OrgState: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  OrgZip: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const OrganizationFavoriteTestUpdateWithoutOrganizationInputSchema: z.ZodType<Prisma.OrganizationFavoriteTestUpdateWithoutOrganizationInput> = z.object({
  Id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  ParentId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  ParentName: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Level: z.union([ z.number(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  CreatedAt: z.union([ z.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  UpdatedAt: z.union([ z.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  TestCatalog: z.lazy(() => TestCatalogUpdateOneWithoutOrganizationFavoriteTestNestedInputSchema).optional()
}).strict();

export const OrganizationFavoriteTestUncheckedUpdateWithoutOrganizationInputSchema: z.ZodType<Prisma.OrganizationFavoriteTestUncheckedUpdateWithoutOrganizationInput> = z.object({
  Id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  ParentId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  ParentName: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Level: z.union([ z.number(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  TestId: z.union([ z.number(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  CreatedAt: z.union([ z.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  UpdatedAt: z.union([ z.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const OrganizationFavoriteTestUncheckedUpdateManyWithoutOrganizationInputSchema: z.ZodType<Prisma.OrganizationFavoriteTestUncheckedUpdateManyWithoutOrganizationInput> = z.object({
  Id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  ParentId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  ParentName: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Level: z.union([ z.number(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  TestId: z.union([ z.number(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  CreatedAt: z.union([ z.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  UpdatedAt: z.union([ z.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const PatientOrganizationUpdateWithoutOrganizationInputSchema: z.ZodType<Prisma.PatientOrganizationUpdateWithoutOrganizationInput> = z.object({
  Id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  MRN: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Mobile: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Email: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Patient: z.lazy(() => PatientUpdateOneRequiredWithoutPatientOrganizationNestedInputSchema).optional()
}).strict();

export const PatientOrganizationUncheckedUpdateWithoutOrganizationInputSchema: z.ZodType<Prisma.PatientOrganizationUncheckedUpdateWithoutOrganizationInput> = z.object({
  Id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  PatientId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  MRN: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Mobile: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Email: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const PatientOrganizationUncheckedUpdateManyWithoutOrganizationInputSchema: z.ZodType<Prisma.PatientOrganizationUncheckedUpdateManyWithoutOrganizationInput> = z.object({
  Id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  PatientId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  MRN: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Mobile: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Email: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const ProviderOrganizationUpdateWithoutOrganizationInputSchema: z.ZodType<Prisma.ProviderOrganizationUpdateWithoutOrganizationInput> = z.object({
  Id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  ProviderNPI: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  ParentOrgName: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  OrgName: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  OrgAddress: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  OrgCity: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  OrgState: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  OrgZip: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Provider: z.lazy(() => ProviderUpdateOneRequiredWithoutProviderOrganizationNestedInputSchema).optional()
}).strict();

export const ProviderOrganizationUncheckedUpdateWithoutOrganizationInputSchema: z.ZodType<Prisma.ProviderOrganizationUncheckedUpdateWithoutOrganizationInput> = z.object({
  Id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  ProviderId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  ProviderNPI: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  ParentOrgName: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  OrgName: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  OrgAddress: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  OrgCity: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  OrgState: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  OrgZip: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const ProviderOrganizationUncheckedUpdateManyWithoutOrganizationInputSchema: z.ZodType<Prisma.ProviderOrganizationUncheckedUpdateManyWithoutOrganizationInput> = z.object({
  Id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  ProviderId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  ProviderNPI: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  ParentOrgName: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  OrgName: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  OrgAddress: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  OrgCity: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  OrgState: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  OrgZip: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const LabOrderCreateManyPatientInputSchema: z.ZodType<Prisma.LabOrderCreateManyPatientInput> = z.object({
  Id: z.string().optional(),
  OrderNumber: z.string().optional().nullable(),
  AccessionNumber: z.string().optional().nullable(),
  OrderingProviderId: z.string().optional().nullable(),
  TreatingProviderId: z.string().optional().nullable(),
  PatientMRN: z.string().optional().nullable(),
  PatientMobile: z.string().optional().nullable(),
  PatientEmail: z.string().optional().nullable(),
  OrganizationId: z.string().optional().nullable(),
  OrderDate: z.date().optional().nullable(),
  OrderNotes: z.string().optional().nullable(),
  CreatedAt: z.date().optional().nullable(),
  UpdatedAt: z.date().optional().nullable()
}).strict();

export const PatientOrganizationCreateManyPatientInputSchema: z.ZodType<Prisma.PatientOrganizationCreateManyPatientInput> = z.object({
  Id: z.string().optional(),
  OrganizationId: z.string(),
  MRN: z.string().optional().nullable(),
  Mobile: z.string().optional().nullable(),
  Email: z.string().optional().nullable()
}).strict();

export const LabOrderUpdateWithoutPatientInputSchema: z.ZodType<Prisma.LabOrderUpdateWithoutPatientInput> = z.object({
  Id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  OrderNumber: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  AccessionNumber: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  PatientMRN: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  PatientMobile: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  PatientEmail: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  OrderDate: z.union([ z.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  OrderNotes: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  CreatedAt: z.union([ z.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  UpdatedAt: z.union([ z.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  OrderingProvider: z.lazy(() => ProviderUpdateOneWithoutOrderingProviderLabOrderNestedInputSchema).optional(),
  TreatingProvider: z.lazy(() => ProviderUpdateOneWithoutTreatingProviderLabOrderNestedInputSchema).optional(),
  Organization: z.lazy(() => OrganizationUpdateOneWithoutLabOrderNestedInputSchema).optional(),
  LabOrderAttachment: z.lazy(() => LabOrderAttachmentUpdateManyWithoutLabOrderNestedInputSchema).optional(),
  LabOrderBilling: z.lazy(() => LabOrderBillingUpdateManyWithoutLabOrderNestedInputSchema).optional(),
  LabOrderIcd: z.lazy(() => LabOrderIcdUpdateManyWithoutLabOrderNestedInputSchema).optional(),
  LabOrderSpecimen: z.lazy(() => LabOrderSpecimenUpdateManyWithoutLabOrderNestedInputSchema).optional(),
  LabOrderSponsoredTestConsent: z.lazy(() => LabOrderSponsoredTestConsentUpdateManyWithoutLabOrderNestedInputSchema).optional(),
  LabOrderStatus: z.lazy(() => LabOrderStatusUpdateManyWithoutLabOrderNestedInputSchema).optional(),
  LabOrderTest: z.lazy(() => LabOrderTestUpdateManyWithoutLabOrderNestedInputSchema).optional()
}).strict();

export const LabOrderUncheckedUpdateWithoutPatientInputSchema: z.ZodType<Prisma.LabOrderUncheckedUpdateWithoutPatientInput> = z.object({
  Id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  OrderNumber: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  AccessionNumber: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  OrderingProviderId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  TreatingProviderId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  PatientMRN: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  PatientMobile: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  PatientEmail: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  OrganizationId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  OrderDate: z.union([ z.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  OrderNotes: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  CreatedAt: z.union([ z.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  UpdatedAt: z.union([ z.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  LabOrderAttachment: z.lazy(() => LabOrderAttachmentUncheckedUpdateManyWithoutLabOrderNestedInputSchema).optional(),
  LabOrderBilling: z.lazy(() => LabOrderBillingUncheckedUpdateManyWithoutLabOrderNestedInputSchema).optional(),
  LabOrderIcd: z.lazy(() => LabOrderIcdUncheckedUpdateManyWithoutLabOrderNestedInputSchema).optional(),
  LabOrderSpecimen: z.lazy(() => LabOrderSpecimenUncheckedUpdateManyWithoutLabOrderNestedInputSchema).optional(),
  LabOrderSponsoredTestConsent: z.lazy(() => LabOrderSponsoredTestConsentUncheckedUpdateManyWithoutLabOrderNestedInputSchema).optional(),
  LabOrderStatus: z.lazy(() => LabOrderStatusUncheckedUpdateManyWithoutLabOrderNestedInputSchema).optional(),
  LabOrderTest: z.lazy(() => LabOrderTestUncheckedUpdateManyWithoutLabOrderNestedInputSchema).optional()
}).strict();

export const LabOrderUncheckedUpdateManyWithoutPatientInputSchema: z.ZodType<Prisma.LabOrderUncheckedUpdateManyWithoutPatientInput> = z.object({
  Id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  OrderNumber: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  AccessionNumber: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  OrderingProviderId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  TreatingProviderId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  PatientMRN: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  PatientMobile: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  PatientEmail: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  OrganizationId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  OrderDate: z.union([ z.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  OrderNotes: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  CreatedAt: z.union([ z.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  UpdatedAt: z.union([ z.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const PatientOrganizationUpdateWithoutPatientInputSchema: z.ZodType<Prisma.PatientOrganizationUpdateWithoutPatientInput> = z.object({
  Id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  MRN: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Mobile: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Email: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Organization: z.lazy(() => OrganizationUpdateOneRequiredWithoutPatientOrganizationNestedInputSchema).optional()
}).strict();

export const PatientOrganizationUncheckedUpdateWithoutPatientInputSchema: z.ZodType<Prisma.PatientOrganizationUncheckedUpdateWithoutPatientInput> = z.object({
  Id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  OrganizationId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  MRN: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Mobile: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Email: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const PatientOrganizationUncheckedUpdateManyWithoutPatientInputSchema: z.ZodType<Prisma.PatientOrganizationUncheckedUpdateManyWithoutPatientInput> = z.object({
  Id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  OrganizationId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  MRN: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Mobile: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Email: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const LabOrderCreateManyOrderingProviderInputSchema: z.ZodType<Prisma.LabOrderCreateManyOrderingProviderInput> = z.object({
  Id: z.string().optional(),
  OrderNumber: z.string().optional().nullable(),
  AccessionNumber: z.string().optional().nullable(),
  TreatingProviderId: z.string().optional().nullable(),
  PatientId: z.string().optional().nullable(),
  PatientMRN: z.string().optional().nullable(),
  PatientMobile: z.string().optional().nullable(),
  PatientEmail: z.string().optional().nullable(),
  OrganizationId: z.string().optional().nullable(),
  OrderDate: z.date().optional().nullable(),
  OrderNotes: z.string().optional().nullable(),
  CreatedAt: z.date().optional().nullable(),
  UpdatedAt: z.date().optional().nullable()
}).strict();

export const LabOrderCreateManyTreatingProviderInputSchema: z.ZodType<Prisma.LabOrderCreateManyTreatingProviderInput> = z.object({
  Id: z.string().optional(),
  OrderNumber: z.string().optional().nullable(),
  AccessionNumber: z.string().optional().nullable(),
  OrderingProviderId: z.string().optional().nullable(),
  PatientId: z.string().optional().nullable(),
  PatientMRN: z.string().optional().nullable(),
  PatientMobile: z.string().optional().nullable(),
  PatientEmail: z.string().optional().nullable(),
  OrganizationId: z.string().optional().nullable(),
  OrderDate: z.date().optional().nullable(),
  OrderNotes: z.string().optional().nullable(),
  CreatedAt: z.date().optional().nullable(),
  UpdatedAt: z.date().optional().nullable()
}).strict();

export const ProviderEducationCreateManyProviderInputSchema: z.ZodType<Prisma.ProviderEducationCreateManyProviderInput> = z.object({
  Id: z.string().optional(),
  ProviderNPI: z.string().optional().nullable(),
  Name: z.string().optional().nullable(),
  EducationType: z.string().optional().nullable(),
  SchoolName: z.string().optional().nullable(),
  AreaOfEducation: z.string().optional().nullable()
}).strict();

export const ProviderFavoriteTestCreateManyProviderInputSchema: z.ZodType<Prisma.ProviderFavoriteTestCreateManyProviderInput> = z.object({
  Id: z.string().optional(),
  ParentId: z.string().optional().nullable(),
  ParentName: z.string().optional().nullable(),
  Level: z.number().optional().nullable(),
  TestId: z.number().optional().nullable(),
  CreatedAt: z.date().optional().nullable(),
  UpdatedAt: z.date().optional().nullable()
}).strict();

export const ProviderOrganizationCreateManyProviderInputSchema: z.ZodType<Prisma.ProviderOrganizationCreateManyProviderInput> = z.object({
  Id: z.string().optional(),
  OrganizationId: z.string(),
  ProviderNPI: z.string().optional().nullable(),
  Name: z.string().optional().nullable(),
  ParentOrgName: z.string().optional().nullable(),
  OrgName: z.string().optional().nullable(),
  OrgAddress: z.string().optional().nullable(),
  OrgCity: z.string().optional().nullable(),
  OrgState: z.string().optional().nullable(),
  OrgZip: z.string().optional().nullable()
}).strict();

export const LabOrderUpdateWithoutOrderingProviderInputSchema: z.ZodType<Prisma.LabOrderUpdateWithoutOrderingProviderInput> = z.object({
  Id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  OrderNumber: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  AccessionNumber: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  PatientMRN: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  PatientMobile: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  PatientEmail: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  OrderDate: z.union([ z.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  OrderNotes: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  CreatedAt: z.union([ z.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  UpdatedAt: z.union([ z.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  TreatingProvider: z.lazy(() => ProviderUpdateOneWithoutTreatingProviderLabOrderNestedInputSchema).optional(),
  Patient: z.lazy(() => PatientUpdateOneWithoutLabOrderNestedInputSchema).optional(),
  Organization: z.lazy(() => OrganizationUpdateOneWithoutLabOrderNestedInputSchema).optional(),
  LabOrderAttachment: z.lazy(() => LabOrderAttachmentUpdateManyWithoutLabOrderNestedInputSchema).optional(),
  LabOrderBilling: z.lazy(() => LabOrderBillingUpdateManyWithoutLabOrderNestedInputSchema).optional(),
  LabOrderIcd: z.lazy(() => LabOrderIcdUpdateManyWithoutLabOrderNestedInputSchema).optional(),
  LabOrderSpecimen: z.lazy(() => LabOrderSpecimenUpdateManyWithoutLabOrderNestedInputSchema).optional(),
  LabOrderSponsoredTestConsent: z.lazy(() => LabOrderSponsoredTestConsentUpdateManyWithoutLabOrderNestedInputSchema).optional(),
  LabOrderStatus: z.lazy(() => LabOrderStatusUpdateManyWithoutLabOrderNestedInputSchema).optional(),
  LabOrderTest: z.lazy(() => LabOrderTestUpdateManyWithoutLabOrderNestedInputSchema).optional()
}).strict();

export const LabOrderUncheckedUpdateWithoutOrderingProviderInputSchema: z.ZodType<Prisma.LabOrderUncheckedUpdateWithoutOrderingProviderInput> = z.object({
  Id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  OrderNumber: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  AccessionNumber: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  TreatingProviderId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  PatientId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  PatientMRN: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  PatientMobile: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  PatientEmail: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  OrganizationId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  OrderDate: z.union([ z.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  OrderNotes: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  CreatedAt: z.union([ z.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  UpdatedAt: z.union([ z.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  LabOrderAttachment: z.lazy(() => LabOrderAttachmentUncheckedUpdateManyWithoutLabOrderNestedInputSchema).optional(),
  LabOrderBilling: z.lazy(() => LabOrderBillingUncheckedUpdateManyWithoutLabOrderNestedInputSchema).optional(),
  LabOrderIcd: z.lazy(() => LabOrderIcdUncheckedUpdateManyWithoutLabOrderNestedInputSchema).optional(),
  LabOrderSpecimen: z.lazy(() => LabOrderSpecimenUncheckedUpdateManyWithoutLabOrderNestedInputSchema).optional(),
  LabOrderSponsoredTestConsent: z.lazy(() => LabOrderSponsoredTestConsentUncheckedUpdateManyWithoutLabOrderNestedInputSchema).optional(),
  LabOrderStatus: z.lazy(() => LabOrderStatusUncheckedUpdateManyWithoutLabOrderNestedInputSchema).optional(),
  LabOrderTest: z.lazy(() => LabOrderTestUncheckedUpdateManyWithoutLabOrderNestedInputSchema).optional()
}).strict();

export const LabOrderUncheckedUpdateManyWithoutOrderingProviderInputSchema: z.ZodType<Prisma.LabOrderUncheckedUpdateManyWithoutOrderingProviderInput> = z.object({
  Id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  OrderNumber: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  AccessionNumber: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  TreatingProviderId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  PatientId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  PatientMRN: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  PatientMobile: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  PatientEmail: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  OrganizationId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  OrderDate: z.union([ z.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  OrderNotes: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  CreatedAt: z.union([ z.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  UpdatedAt: z.union([ z.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const LabOrderUpdateWithoutTreatingProviderInputSchema: z.ZodType<Prisma.LabOrderUpdateWithoutTreatingProviderInput> = z.object({
  Id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  OrderNumber: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  AccessionNumber: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  PatientMRN: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  PatientMobile: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  PatientEmail: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  OrderDate: z.union([ z.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  OrderNotes: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  CreatedAt: z.union([ z.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  UpdatedAt: z.union([ z.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  OrderingProvider: z.lazy(() => ProviderUpdateOneWithoutOrderingProviderLabOrderNestedInputSchema).optional(),
  Patient: z.lazy(() => PatientUpdateOneWithoutLabOrderNestedInputSchema).optional(),
  Organization: z.lazy(() => OrganizationUpdateOneWithoutLabOrderNestedInputSchema).optional(),
  LabOrderAttachment: z.lazy(() => LabOrderAttachmentUpdateManyWithoutLabOrderNestedInputSchema).optional(),
  LabOrderBilling: z.lazy(() => LabOrderBillingUpdateManyWithoutLabOrderNestedInputSchema).optional(),
  LabOrderIcd: z.lazy(() => LabOrderIcdUpdateManyWithoutLabOrderNestedInputSchema).optional(),
  LabOrderSpecimen: z.lazy(() => LabOrderSpecimenUpdateManyWithoutLabOrderNestedInputSchema).optional(),
  LabOrderSponsoredTestConsent: z.lazy(() => LabOrderSponsoredTestConsentUpdateManyWithoutLabOrderNestedInputSchema).optional(),
  LabOrderStatus: z.lazy(() => LabOrderStatusUpdateManyWithoutLabOrderNestedInputSchema).optional(),
  LabOrderTest: z.lazy(() => LabOrderTestUpdateManyWithoutLabOrderNestedInputSchema).optional()
}).strict();

export const LabOrderUncheckedUpdateWithoutTreatingProviderInputSchema: z.ZodType<Prisma.LabOrderUncheckedUpdateWithoutTreatingProviderInput> = z.object({
  Id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  OrderNumber: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  AccessionNumber: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  OrderingProviderId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  PatientId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  PatientMRN: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  PatientMobile: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  PatientEmail: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  OrganizationId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  OrderDate: z.union([ z.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  OrderNotes: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  CreatedAt: z.union([ z.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  UpdatedAt: z.union([ z.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  LabOrderAttachment: z.lazy(() => LabOrderAttachmentUncheckedUpdateManyWithoutLabOrderNestedInputSchema).optional(),
  LabOrderBilling: z.lazy(() => LabOrderBillingUncheckedUpdateManyWithoutLabOrderNestedInputSchema).optional(),
  LabOrderIcd: z.lazy(() => LabOrderIcdUncheckedUpdateManyWithoutLabOrderNestedInputSchema).optional(),
  LabOrderSpecimen: z.lazy(() => LabOrderSpecimenUncheckedUpdateManyWithoutLabOrderNestedInputSchema).optional(),
  LabOrderSponsoredTestConsent: z.lazy(() => LabOrderSponsoredTestConsentUncheckedUpdateManyWithoutLabOrderNestedInputSchema).optional(),
  LabOrderStatus: z.lazy(() => LabOrderStatusUncheckedUpdateManyWithoutLabOrderNestedInputSchema).optional(),
  LabOrderTest: z.lazy(() => LabOrderTestUncheckedUpdateManyWithoutLabOrderNestedInputSchema).optional()
}).strict();

export const LabOrderUncheckedUpdateManyWithoutTreatingProviderInputSchema: z.ZodType<Prisma.LabOrderUncheckedUpdateManyWithoutTreatingProviderInput> = z.object({
  Id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  OrderNumber: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  AccessionNumber: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  OrderingProviderId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  PatientId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  PatientMRN: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  PatientMobile: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  PatientEmail: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  OrganizationId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  OrderDate: z.union([ z.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  OrderNotes: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  CreatedAt: z.union([ z.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  UpdatedAt: z.union([ z.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const ProviderEducationUpdateWithoutProviderInputSchema: z.ZodType<Prisma.ProviderEducationUpdateWithoutProviderInput> = z.object({
  Id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  ProviderNPI: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  EducationType: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  SchoolName: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  AreaOfEducation: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const ProviderEducationUncheckedUpdateWithoutProviderInputSchema: z.ZodType<Prisma.ProviderEducationUncheckedUpdateWithoutProviderInput> = z.object({
  Id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  ProviderNPI: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  EducationType: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  SchoolName: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  AreaOfEducation: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const ProviderEducationUncheckedUpdateManyWithoutProviderInputSchema: z.ZodType<Prisma.ProviderEducationUncheckedUpdateManyWithoutProviderInput> = z.object({
  Id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  ProviderNPI: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  EducationType: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  SchoolName: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  AreaOfEducation: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const ProviderFavoriteTestUpdateWithoutProviderInputSchema: z.ZodType<Prisma.ProviderFavoriteTestUpdateWithoutProviderInput> = z.object({
  Id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  ParentId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  ParentName: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Level: z.union([ z.number(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  CreatedAt: z.union([ z.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  UpdatedAt: z.union([ z.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  TestCatalog: z.lazy(() => TestCatalogUpdateOneWithoutProviderFavoriteTestNestedInputSchema).optional()
}).strict();

export const ProviderFavoriteTestUncheckedUpdateWithoutProviderInputSchema: z.ZodType<Prisma.ProviderFavoriteTestUncheckedUpdateWithoutProviderInput> = z.object({
  Id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  ParentId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  ParentName: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Level: z.union([ z.number(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  TestId: z.union([ z.number(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  CreatedAt: z.union([ z.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  UpdatedAt: z.union([ z.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const ProviderFavoriteTestUncheckedUpdateManyWithoutProviderInputSchema: z.ZodType<Prisma.ProviderFavoriteTestUncheckedUpdateManyWithoutProviderInput> = z.object({
  Id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  ParentId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  ParentName: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Level: z.union([ z.number(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  TestId: z.union([ z.number(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  CreatedAt: z.union([ z.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  UpdatedAt: z.union([ z.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const ProviderOrganizationUpdateWithoutProviderInputSchema: z.ZodType<Prisma.ProviderOrganizationUpdateWithoutProviderInput> = z.object({
  Id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  ProviderNPI: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  ParentOrgName: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  OrgName: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  OrgAddress: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  OrgCity: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  OrgState: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  OrgZip: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Organization: z.lazy(() => OrganizationUpdateOneRequiredWithoutProviderOrganizationNestedInputSchema).optional()
}).strict();

export const ProviderOrganizationUncheckedUpdateWithoutProviderInputSchema: z.ZodType<Prisma.ProviderOrganizationUncheckedUpdateWithoutProviderInput> = z.object({
  Id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  OrganizationId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  ProviderNPI: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  ParentOrgName: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  OrgName: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  OrgAddress: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  OrgCity: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  OrgState: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  OrgZip: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const ProviderOrganizationUncheckedUpdateManyWithoutProviderInputSchema: z.ZodType<Prisma.ProviderOrganizationUncheckedUpdateManyWithoutProviderInput> = z.object({
  Id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  OrganizationId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  ProviderNPI: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  ParentOrgName: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  OrgName: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  OrgAddress: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  OrgCity: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  OrgState: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  OrgZip: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const SponsoredProgramCreateManySponsorInputSchema: z.ZodType<Prisma.SponsoredProgramCreateManySponsorInput> = z.object({
  ProgramId: z.number().optional(),
  TherapeuticArea: z.string().optional().nullable(),
  ProgramName: z.string().optional().nullable(),
  ProgramUrl: z.string().optional().nullable(),
  ProgramLabUrl: z.string().optional().nullable(),
  SponosoredTestingUrl: z.string().optional().nullable(),
  ProgramEligibility: z.string().optional().nullable(),
  CreatedAt: z.date().optional().nullable(),
  UpdatedAt: z.date().optional().nullable()
}).strict();

export const SponsoredProgramUpdateWithoutSponsorInputSchema: z.ZodType<Prisma.SponsoredProgramUpdateWithoutSponsorInput> = z.object({
  TherapeuticArea: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  ProgramName: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  ProgramUrl: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  ProgramLabUrl: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  SponosoredTestingUrl: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  ProgramEligibility: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  CreatedAt: z.union([ z.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  UpdatedAt: z.union([ z.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  SponsoredTest: z.lazy(() => SponsoredTestUpdateManyWithoutSponsoredProgramNestedInputSchema).optional()
}).strict();

export const SponsoredProgramUncheckedUpdateWithoutSponsorInputSchema: z.ZodType<Prisma.SponsoredProgramUncheckedUpdateWithoutSponsorInput> = z.object({
  ProgramId: z.union([ z.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  TherapeuticArea: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  ProgramName: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  ProgramUrl: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  ProgramLabUrl: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  SponosoredTestingUrl: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  ProgramEligibility: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  CreatedAt: z.union([ z.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  UpdatedAt: z.union([ z.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  SponsoredTest: z.lazy(() => SponsoredTestUncheckedUpdateManyWithoutSponsoredProgramNestedInputSchema).optional()
}).strict();

export const SponsoredProgramUncheckedUpdateManyWithoutSponsorInputSchema: z.ZodType<Prisma.SponsoredProgramUncheckedUpdateManyWithoutSponsorInput> = z.object({
  ProgramId: z.union([ z.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  TherapeuticArea: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  ProgramName: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  ProgramUrl: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  ProgramLabUrl: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  SponosoredTestingUrl: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  ProgramEligibility: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  CreatedAt: z.union([ z.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  UpdatedAt: z.union([ z.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const SponsoredTestCreateManySponsoredProgramInputSchema: z.ZodType<Prisma.SponsoredTestCreateManySponsoredProgramInput> = z.object({
  Id: z.string().optional(),
  TestId: z.number(),
  LabTestId: z.string().optional().nullable(),
  LabId: z.number().optional().nullable(),
  CasandraTestId: z.string(),
  Category: z.string(),
  SubCategory: z.string().optional().nullable(),
  CreatedAt: z.date().optional().nullable(),
  UpdatedAt: z.date().optional().nullable()
}).strict();

export const SponsoredTestUpdateWithoutSponsoredProgramInputSchema: z.ZodType<Prisma.SponsoredTestUpdateWithoutSponsoredProgramInput> = z.object({
  Id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  LabTestId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  CasandraTestId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  Category: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  SubCategory: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  CreatedAt: z.union([ z.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  UpdatedAt: z.union([ z.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  LabOrderSponsoredTestConsent: z.lazy(() => LabOrderSponsoredTestConsentUpdateManyWithoutSponsoredTestNestedInputSchema).optional(),
  Lab: z.lazy(() => LabUpdateOneWithoutSponsoredTestNestedInputSchema).optional(),
  TestCatalog: z.lazy(() => TestCatalogUpdateOneRequiredWithoutSponsoredTestNestedInputSchema).optional()
}).strict();

export const SponsoredTestUncheckedUpdateWithoutSponsoredProgramInputSchema: z.ZodType<Prisma.SponsoredTestUncheckedUpdateWithoutSponsoredProgramInput> = z.object({
  Id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  TestId: z.union([ z.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  LabTestId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  LabId: z.union([ z.number(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  CasandraTestId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  Category: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  SubCategory: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  CreatedAt: z.union([ z.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  UpdatedAt: z.union([ z.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  LabOrderSponsoredTestConsent: z.lazy(() => LabOrderSponsoredTestConsentUncheckedUpdateManyWithoutSponsoredTestNestedInputSchema).optional()
}).strict();

export const SponsoredTestUncheckedUpdateManyWithoutSponsoredProgramInputSchema: z.ZodType<Prisma.SponsoredTestUncheckedUpdateManyWithoutSponsoredProgramInput> = z.object({
  Id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  TestId: z.union([ z.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  LabTestId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  LabId: z.union([ z.number(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  CasandraTestId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  Category: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  SubCategory: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  CreatedAt: z.union([ z.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  UpdatedAt: z.union([ z.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const LabOrderSponsoredTestConsentCreateManySponsoredTestInputSchema: z.ZodType<Prisma.LabOrderSponsoredTestConsentCreateManySponsoredTestInput> = z.object({
  Id: z.string().optional(),
  LabOrderId: z.string().optional().nullable(),
  ProviderName: z.string().optional().nullable(),
  ProviderNPI: z.string().optional().nullable(),
  ConsentAt: z.date().optional().nullable(),
  CreatedAt: z.date().optional().nullable(),
  UpdatedAt: z.date().optional().nullable()
}).strict();

export const LabOrderSponsoredTestConsentUpdateWithoutSponsoredTestInputSchema: z.ZodType<Prisma.LabOrderSponsoredTestConsentUpdateWithoutSponsoredTestInput> = z.object({
  Id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  ProviderName: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  ProviderNPI: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  ConsentAt: z.union([ z.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  CreatedAt: z.union([ z.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  UpdatedAt: z.union([ z.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  LabOrder: z.lazy(() => LabOrderUpdateOneWithoutLabOrderSponsoredTestConsentNestedInputSchema).optional()
}).strict();

export const LabOrderSponsoredTestConsentUncheckedUpdateWithoutSponsoredTestInputSchema: z.ZodType<Prisma.LabOrderSponsoredTestConsentUncheckedUpdateWithoutSponsoredTestInput> = z.object({
  Id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  LabOrderId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  ProviderName: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  ProviderNPI: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  ConsentAt: z.union([ z.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  CreatedAt: z.union([ z.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  UpdatedAt: z.union([ z.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const LabOrderSponsoredTestConsentUncheckedUpdateManyWithoutSponsoredTestInputSchema: z.ZodType<Prisma.LabOrderSponsoredTestConsentUncheckedUpdateManyWithoutSponsoredTestInput> = z.object({
  Id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  LabOrderId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  ProviderName: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  ProviderNPI: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  ConsentAt: z.union([ z.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  CreatedAt: z.union([ z.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  UpdatedAt: z.union([ z.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const LabOrderTestCreateManyTestCatalogInputSchema: z.ZodType<Prisma.LabOrderTestCreateManyTestCatalogInput> = z.object({
  Id: z.string().optional(),
  LabOrderId: z.string().optional().nullable(),
  CreatedAt: z.date().optional().nullable(),
  UpdatedAt: z.date().optional().nullable()
}).strict();

export const OrganizationFavoriteTestCreateManyTestCatalogInputSchema: z.ZodType<Prisma.OrganizationFavoriteTestCreateManyTestCatalogInput> = z.object({
  Id: z.string().optional(),
  OrganizationId: z.string().optional().nullable(),
  ParentId: z.string().optional().nullable(),
  ParentName: z.string().optional().nullable(),
  Level: z.number().optional().nullable(),
  CreatedAt: z.date().optional().nullable(),
  UpdatedAt: z.date().optional().nullable()
}).strict();

export const ProviderFavoriteTestCreateManyTestCatalogInputSchema: z.ZodType<Prisma.ProviderFavoriteTestCreateManyTestCatalogInput> = z.object({
  Id: z.string().optional(),
  ProviderId: z.string().optional().nullable(),
  ParentId: z.string().optional().nullable(),
  ParentName: z.string().optional().nullable(),
  Level: z.number().optional().nullable(),
  CreatedAt: z.date().optional().nullable(),
  UpdatedAt: z.date().optional().nullable()
}).strict();

export const SponsoredTestCreateManyTestCatalogInputSchema: z.ZodType<Prisma.SponsoredTestCreateManyTestCatalogInput> = z.object({
  Id: z.string().optional(),
  LabTestId: z.string().optional().nullable(),
  SponsoredProgramId: z.number().optional().nullable(),
  LabId: z.number().optional().nullable(),
  CasandraTestId: z.string(),
  Category: z.string(),
  SubCategory: z.string().optional().nullable(),
  CreatedAt: z.date().optional().nullable(),
  UpdatedAt: z.date().optional().nullable()
}).strict();

export const TestBiomarkerCreateManyTestCatalogInputSchema: z.ZodType<Prisma.TestBiomarkerCreateManyTestCatalogInput> = z.object({
  Id: z.number().optional(),
  LabTestId: z.string().optional().nullable(),
  HGNCId: z.string(),
  TranscriptReference: z.string().optional().nullable(),
  CreatedAt: z.date().optional(),
  UpdatedAt: z.date().optional()
}).strict();

export const TestCptCodeCreateManyTestCatalogInputSchema: z.ZodType<Prisma.TestCptCodeCreateManyTestCatalogInput> = z.object({
  Id: z.number().optional(),
  LabTestId: z.string().optional().nullable(),
  CptCode: z.string().optional().nullable(),
  Modifier: z.string().optional().nullable(),
  Comments: z.string().optional().nullable(),
  CreatedAt: z.date().optional(),
  UpdatedAt: z.date().optional()
}).strict();

export const TestGeneCreateManyTestCatalogInputSchema: z.ZodType<Prisma.TestGeneCreateManyTestCatalogInput> = z.object({
  Id: z.number().optional(),
  LabTestId: z.string().optional().nullable(),
  Gene: z.string(),
  TranscriptReference: z.string().optional().nullable(),
  CreatedAt: z.date().optional(),
  UpdatedAt: z.date().optional()
}).strict();

export const TestOrderLoincCreateManyTestCatalogInputSchema: z.ZodType<Prisma.TestOrderLoincCreateManyTestCatalogInput> = z.object({
  Id: z.number().optional(),
  LabTestId: z.string().optional().nullable(),
  OrderLoinc: z.string().optional().nullable(),
  CreatedAt: z.date().optional(),
  UpdatedAt: z.date().optional()
}).strict();

export const TestResultLoincCreateManyTestCatalogInputSchema: z.ZodType<Prisma.TestResultLoincCreateManyTestCatalogInput> = z.object({
  Id: z.number().optional(),
  LabTestId: z.string().optional().nullable(),
  ResultCode: z.string().optional().nullable(),
  ResultCodeName: z.string().optional().nullable(),
  UofM: z.string().optional().nullable(),
  ResultLoinc: z.string().optional().nullable(),
  CreatedAt: z.date().optional(),
  UpdatedAt: z.date().optional()
}).strict();

export const LabOrderTestUpdateWithoutTestCatalogInputSchema: z.ZodType<Prisma.LabOrderTestUpdateWithoutTestCatalogInput> = z.object({
  Id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  CreatedAt: z.union([ z.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  UpdatedAt: z.union([ z.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  LabOrder: z.lazy(() => LabOrderUpdateOneWithoutLabOrderTestNestedInputSchema).optional()
}).strict();

export const LabOrderTestUncheckedUpdateWithoutTestCatalogInputSchema: z.ZodType<Prisma.LabOrderTestUncheckedUpdateWithoutTestCatalogInput> = z.object({
  Id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  LabOrderId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  CreatedAt: z.union([ z.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  UpdatedAt: z.union([ z.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const LabOrderTestUncheckedUpdateManyWithoutTestCatalogInputSchema: z.ZodType<Prisma.LabOrderTestUncheckedUpdateManyWithoutTestCatalogInput> = z.object({
  Id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  LabOrderId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  CreatedAt: z.union([ z.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  UpdatedAt: z.union([ z.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const OrganizationFavoriteTestUpdateWithoutTestCatalogInputSchema: z.ZodType<Prisma.OrganizationFavoriteTestUpdateWithoutTestCatalogInput> = z.object({
  Id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  ParentId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  ParentName: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Level: z.union([ z.number(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  CreatedAt: z.union([ z.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  UpdatedAt: z.union([ z.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Organization: z.lazy(() => OrganizationUpdateOneWithoutOrganizationFavoriteTestNestedInputSchema).optional()
}).strict();

export const OrganizationFavoriteTestUncheckedUpdateWithoutTestCatalogInputSchema: z.ZodType<Prisma.OrganizationFavoriteTestUncheckedUpdateWithoutTestCatalogInput> = z.object({
  Id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  OrganizationId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  ParentId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  ParentName: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Level: z.union([ z.number(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  CreatedAt: z.union([ z.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  UpdatedAt: z.union([ z.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const OrganizationFavoriteTestUncheckedUpdateManyWithoutTestCatalogInputSchema: z.ZodType<Prisma.OrganizationFavoriteTestUncheckedUpdateManyWithoutTestCatalogInput> = z.object({
  Id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  OrganizationId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  ParentId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  ParentName: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Level: z.union([ z.number(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  CreatedAt: z.union([ z.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  UpdatedAt: z.union([ z.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const ProviderFavoriteTestUpdateWithoutTestCatalogInputSchema: z.ZodType<Prisma.ProviderFavoriteTestUpdateWithoutTestCatalogInput> = z.object({
  Id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  ParentId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  ParentName: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Level: z.union([ z.number(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  CreatedAt: z.union([ z.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  UpdatedAt: z.union([ z.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Provider: z.lazy(() => ProviderUpdateOneWithoutProviderFavoriteTestNestedInputSchema).optional()
}).strict();

export const ProviderFavoriteTestUncheckedUpdateWithoutTestCatalogInputSchema: z.ZodType<Prisma.ProviderFavoriteTestUncheckedUpdateWithoutTestCatalogInput> = z.object({
  Id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  ProviderId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  ParentId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  ParentName: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Level: z.union([ z.number(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  CreatedAt: z.union([ z.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  UpdatedAt: z.union([ z.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const ProviderFavoriteTestUncheckedUpdateManyWithoutTestCatalogInputSchema: z.ZodType<Prisma.ProviderFavoriteTestUncheckedUpdateManyWithoutTestCatalogInput> = z.object({
  Id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  ProviderId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  ParentId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  ParentName: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Level: z.union([ z.number(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  CreatedAt: z.union([ z.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  UpdatedAt: z.union([ z.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const SponsoredTestUpdateWithoutTestCatalogInputSchema: z.ZodType<Prisma.SponsoredTestUpdateWithoutTestCatalogInput> = z.object({
  Id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  LabTestId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  CasandraTestId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  Category: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  SubCategory: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  CreatedAt: z.union([ z.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  UpdatedAt: z.union([ z.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  LabOrderSponsoredTestConsent: z.lazy(() => LabOrderSponsoredTestConsentUpdateManyWithoutSponsoredTestNestedInputSchema).optional(),
  Lab: z.lazy(() => LabUpdateOneWithoutSponsoredTestNestedInputSchema).optional(),
  SponsoredProgram: z.lazy(() => SponsoredProgramUpdateOneWithoutSponsoredTestNestedInputSchema).optional()
}).strict();

export const SponsoredTestUncheckedUpdateWithoutTestCatalogInputSchema: z.ZodType<Prisma.SponsoredTestUncheckedUpdateWithoutTestCatalogInput> = z.object({
  Id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  LabTestId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  SponsoredProgramId: z.union([ z.number(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  LabId: z.union([ z.number(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  CasandraTestId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  Category: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  SubCategory: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  CreatedAt: z.union([ z.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  UpdatedAt: z.union([ z.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  LabOrderSponsoredTestConsent: z.lazy(() => LabOrderSponsoredTestConsentUncheckedUpdateManyWithoutSponsoredTestNestedInputSchema).optional()
}).strict();

export const SponsoredTestUncheckedUpdateManyWithoutTestCatalogInputSchema: z.ZodType<Prisma.SponsoredTestUncheckedUpdateManyWithoutTestCatalogInput> = z.object({
  Id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  LabTestId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  SponsoredProgramId: z.union([ z.number(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  LabId: z.union([ z.number(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  CasandraTestId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  Category: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  SubCategory: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  CreatedAt: z.union([ z.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  UpdatedAt: z.union([ z.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const TestBiomarkerUpdateWithoutTestCatalogInputSchema: z.ZodType<Prisma.TestBiomarkerUpdateWithoutTestCatalogInput> = z.object({
  LabTestId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  TranscriptReference: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  CreatedAt: z.union([ z.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  UpdatedAt: z.union([ z.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  BIOMARKER: z.lazy(() => BIOMARKERUpdateOneRequiredWithoutTestBiomarkerNestedInputSchema).optional()
}).strict();

export const TestBiomarkerUncheckedUpdateWithoutTestCatalogInputSchema: z.ZodType<Prisma.TestBiomarkerUncheckedUpdateWithoutTestCatalogInput> = z.object({
  Id: z.union([ z.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  LabTestId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  HGNCId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  TranscriptReference: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  CreatedAt: z.union([ z.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  UpdatedAt: z.union([ z.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const TestBiomarkerUncheckedUpdateManyWithoutTestCatalogInputSchema: z.ZodType<Prisma.TestBiomarkerUncheckedUpdateManyWithoutTestCatalogInput> = z.object({
  Id: z.union([ z.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  LabTestId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  HGNCId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  TranscriptReference: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  CreatedAt: z.union([ z.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  UpdatedAt: z.union([ z.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const TestCptCodeUpdateWithoutTestCatalogInputSchema: z.ZodType<Prisma.TestCptCodeUpdateWithoutTestCatalogInput> = z.object({
  LabTestId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  CptCode: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Modifier: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Comments: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  CreatedAt: z.union([ z.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  UpdatedAt: z.union([ z.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const TestCptCodeUncheckedUpdateWithoutTestCatalogInputSchema: z.ZodType<Prisma.TestCptCodeUncheckedUpdateWithoutTestCatalogInput> = z.object({
  Id: z.union([ z.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  LabTestId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  CptCode: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Modifier: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Comments: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  CreatedAt: z.union([ z.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  UpdatedAt: z.union([ z.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const TestCptCodeUncheckedUpdateManyWithoutTestCatalogInputSchema: z.ZodType<Prisma.TestCptCodeUncheckedUpdateManyWithoutTestCatalogInput> = z.object({
  Id: z.union([ z.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  LabTestId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  CptCode: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Modifier: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Comments: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  CreatedAt: z.union([ z.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  UpdatedAt: z.union([ z.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const TestGeneUpdateWithoutTestCatalogInputSchema: z.ZodType<Prisma.TestGeneUpdateWithoutTestCatalogInput> = z.object({
  LabTestId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Gene: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  TranscriptReference: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  CreatedAt: z.union([ z.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  UpdatedAt: z.union([ z.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const TestGeneUncheckedUpdateWithoutTestCatalogInputSchema: z.ZodType<Prisma.TestGeneUncheckedUpdateWithoutTestCatalogInput> = z.object({
  Id: z.union([ z.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  LabTestId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Gene: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  TranscriptReference: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  CreatedAt: z.union([ z.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  UpdatedAt: z.union([ z.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const TestGeneUncheckedUpdateManyWithoutTestCatalogInputSchema: z.ZodType<Prisma.TestGeneUncheckedUpdateManyWithoutTestCatalogInput> = z.object({
  Id: z.union([ z.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  LabTestId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Gene: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  TranscriptReference: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  CreatedAt: z.union([ z.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  UpdatedAt: z.union([ z.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const TestOrderLoincUpdateWithoutTestCatalogInputSchema: z.ZodType<Prisma.TestOrderLoincUpdateWithoutTestCatalogInput> = z.object({
  LabTestId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  CreatedAt: z.union([ z.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  UpdatedAt: z.union([ z.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  LOINC: z.lazy(() => LOINCUpdateOneWithoutTestOrderLoincNestedInputSchema).optional()
}).strict();

export const TestOrderLoincUncheckedUpdateWithoutTestCatalogInputSchema: z.ZodType<Prisma.TestOrderLoincUncheckedUpdateWithoutTestCatalogInput> = z.object({
  Id: z.union([ z.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  LabTestId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  OrderLoinc: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  CreatedAt: z.union([ z.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  UpdatedAt: z.union([ z.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const TestOrderLoincUncheckedUpdateManyWithoutTestCatalogInputSchema: z.ZodType<Prisma.TestOrderLoincUncheckedUpdateManyWithoutTestCatalogInput> = z.object({
  Id: z.union([ z.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  LabTestId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  OrderLoinc: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  CreatedAt: z.union([ z.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  UpdatedAt: z.union([ z.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const TestResultLoincUpdateWithoutTestCatalogInputSchema: z.ZodType<Prisma.TestResultLoincUpdateWithoutTestCatalogInput> = z.object({
  LabTestId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  ResultCode: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  ResultCodeName: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  UofM: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  CreatedAt: z.union([ z.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  UpdatedAt: z.union([ z.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  LOINC: z.lazy(() => LOINCUpdateOneWithoutTestResultLoincNestedInputSchema).optional()
}).strict();

export const TestResultLoincUncheckedUpdateWithoutTestCatalogInputSchema: z.ZodType<Prisma.TestResultLoincUncheckedUpdateWithoutTestCatalogInput> = z.object({
  Id: z.union([ z.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  LabTestId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  ResultCode: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  ResultCodeName: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  UofM: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  ResultLoinc: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  CreatedAt: z.union([ z.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  UpdatedAt: z.union([ z.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const TestResultLoincUncheckedUpdateManyWithoutTestCatalogInputSchema: z.ZodType<Prisma.TestResultLoincUncheckedUpdateManyWithoutTestCatalogInput> = z.object({
  Id: z.union([ z.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  LabTestId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  ResultCode: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  ResultCodeName: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  UofM: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  ResultLoinc: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  CreatedAt: z.union([ z.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  UpdatedAt: z.union([ z.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const SessionCreateManyUserInputSchema: z.ZodType<Prisma.SessionCreateManyUserInput> = z.object({
  id: z.string(),
  sessionToken: z.string(),
  expires: z.date()
}).strict();

export const SessionUpdateWithoutUserInputSchema: z.ZodType<Prisma.SessionUpdateWithoutUserInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  sessionToken: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  expires: z.union([ z.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const SessionUncheckedUpdateWithoutUserInputSchema: z.ZodType<Prisma.SessionUncheckedUpdateWithoutUserInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  sessionToken: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  expires: z.union([ z.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const SessionUncheckedUpdateManyWithoutUserInputSchema: z.ZodType<Prisma.SessionUncheckedUpdateManyWithoutUserInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  sessionToken: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  expires: z.union([ z.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

/////////////////////////////////////////
// ARGS
/////////////////////////////////////////

export const AccountFindFirstArgsSchema: z.ZodType<Prisma.AccountFindFirstArgs> = z.object({
  select: AccountSelectSchema.optional(),
  include: AccountIncludeSchema.optional(),
  where: AccountWhereInputSchema.optional(),
  orderBy: z.union([ AccountOrderByWithRelationInputSchema.array(),AccountOrderByWithRelationInputSchema ]).optional(),
  cursor: AccountWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ AccountScalarFieldEnumSchema,AccountScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const AccountFindFirstOrThrowArgsSchema: z.ZodType<Prisma.AccountFindFirstOrThrowArgs> = z.object({
  select: AccountSelectSchema.optional(),
  include: AccountIncludeSchema.optional(),
  where: AccountWhereInputSchema.optional(),
  orderBy: z.union([ AccountOrderByWithRelationInputSchema.array(),AccountOrderByWithRelationInputSchema ]).optional(),
  cursor: AccountWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ AccountScalarFieldEnumSchema,AccountScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const AccountFindManyArgsSchema: z.ZodType<Prisma.AccountFindManyArgs> = z.object({
  select: AccountSelectSchema.optional(),
  include: AccountIncludeSchema.optional(),
  where: AccountWhereInputSchema.optional(),
  orderBy: z.union([ AccountOrderByWithRelationInputSchema.array(),AccountOrderByWithRelationInputSchema ]).optional(),
  cursor: AccountWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ AccountScalarFieldEnumSchema,AccountScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const AccountAggregateArgsSchema: z.ZodType<Prisma.AccountAggregateArgs> = z.object({
  where: AccountWhereInputSchema.optional(),
  orderBy: z.union([ AccountOrderByWithRelationInputSchema.array(),AccountOrderByWithRelationInputSchema ]).optional(),
  cursor: AccountWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const AccountGroupByArgsSchema: z.ZodType<Prisma.AccountGroupByArgs> = z.object({
  where: AccountWhereInputSchema.optional(),
  orderBy: z.union([ AccountOrderByWithAggregationInputSchema.array(),AccountOrderByWithAggregationInputSchema ]).optional(),
  by: AccountScalarFieldEnumSchema.array(),
  having: AccountScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const AccountFindUniqueArgsSchema: z.ZodType<Prisma.AccountFindUniqueArgs> = z.object({
  select: AccountSelectSchema.optional(),
  include: AccountIncludeSchema.optional(),
  where: AccountWhereUniqueInputSchema,
}).strict() ;

export const AccountFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.AccountFindUniqueOrThrowArgs> = z.object({
  select: AccountSelectSchema.optional(),
  include: AccountIncludeSchema.optional(),
  where: AccountWhereUniqueInputSchema,
}).strict() ;

export const AdminFindFirstArgsSchema: z.ZodType<Prisma.AdminFindFirstArgs> = z.object({
  select: AdminSelectSchema.optional(),
  include: AdminIncludeSchema.optional(),
  where: AdminWhereInputSchema.optional(),
  orderBy: z.union([ AdminOrderByWithRelationInputSchema.array(),AdminOrderByWithRelationInputSchema ]).optional(),
  cursor: AdminWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ AdminScalarFieldEnumSchema,AdminScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const AdminFindFirstOrThrowArgsSchema: z.ZodType<Prisma.AdminFindFirstOrThrowArgs> = z.object({
  select: AdminSelectSchema.optional(),
  include: AdminIncludeSchema.optional(),
  where: AdminWhereInputSchema.optional(),
  orderBy: z.union([ AdminOrderByWithRelationInputSchema.array(),AdminOrderByWithRelationInputSchema ]).optional(),
  cursor: AdminWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ AdminScalarFieldEnumSchema,AdminScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const AdminFindManyArgsSchema: z.ZodType<Prisma.AdminFindManyArgs> = z.object({
  select: AdminSelectSchema.optional(),
  include: AdminIncludeSchema.optional(),
  where: AdminWhereInputSchema.optional(),
  orderBy: z.union([ AdminOrderByWithRelationInputSchema.array(),AdminOrderByWithRelationInputSchema ]).optional(),
  cursor: AdminWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ AdminScalarFieldEnumSchema,AdminScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const AdminAggregateArgsSchema: z.ZodType<Prisma.AdminAggregateArgs> = z.object({
  where: AdminWhereInputSchema.optional(),
  orderBy: z.union([ AdminOrderByWithRelationInputSchema.array(),AdminOrderByWithRelationInputSchema ]).optional(),
  cursor: AdminWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const AdminGroupByArgsSchema: z.ZodType<Prisma.AdminGroupByArgs> = z.object({
  where: AdminWhereInputSchema.optional(),
  orderBy: z.union([ AdminOrderByWithAggregationInputSchema.array(),AdminOrderByWithAggregationInputSchema ]).optional(),
  by: AdminScalarFieldEnumSchema.array(),
  having: AdminScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const AdminFindUniqueArgsSchema: z.ZodType<Prisma.AdminFindUniqueArgs> = z.object({
  select: AdminSelectSchema.optional(),
  include: AdminIncludeSchema.optional(),
  where: AdminWhereUniqueInputSchema,
}).strict() ;

export const AdminFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.AdminFindUniqueOrThrowArgs> = z.object({
  select: AdminSelectSchema.optional(),
  include: AdminIncludeSchema.optional(),
  where: AdminWhereUniqueInputSchema,
}).strict() ;

export const AttachmentFindFirstArgsSchema: z.ZodType<Prisma.AttachmentFindFirstArgs> = z.object({
  select: AttachmentSelectSchema.optional(),
  include: AttachmentIncludeSchema.optional(),
  where: AttachmentWhereInputSchema.optional(),
  orderBy: z.union([ AttachmentOrderByWithRelationInputSchema.array(),AttachmentOrderByWithRelationInputSchema ]).optional(),
  cursor: AttachmentWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ AttachmentScalarFieldEnumSchema,AttachmentScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const AttachmentFindFirstOrThrowArgsSchema: z.ZodType<Prisma.AttachmentFindFirstOrThrowArgs> = z.object({
  select: AttachmentSelectSchema.optional(),
  include: AttachmentIncludeSchema.optional(),
  where: AttachmentWhereInputSchema.optional(),
  orderBy: z.union([ AttachmentOrderByWithRelationInputSchema.array(),AttachmentOrderByWithRelationInputSchema ]).optional(),
  cursor: AttachmentWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ AttachmentScalarFieldEnumSchema,AttachmentScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const AttachmentFindManyArgsSchema: z.ZodType<Prisma.AttachmentFindManyArgs> = z.object({
  select: AttachmentSelectSchema.optional(),
  include: AttachmentIncludeSchema.optional(),
  where: AttachmentWhereInputSchema.optional(),
  orderBy: z.union([ AttachmentOrderByWithRelationInputSchema.array(),AttachmentOrderByWithRelationInputSchema ]).optional(),
  cursor: AttachmentWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ AttachmentScalarFieldEnumSchema,AttachmentScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const AttachmentAggregateArgsSchema: z.ZodType<Prisma.AttachmentAggregateArgs> = z.object({
  where: AttachmentWhereInputSchema.optional(),
  orderBy: z.union([ AttachmentOrderByWithRelationInputSchema.array(),AttachmentOrderByWithRelationInputSchema ]).optional(),
  cursor: AttachmentWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const AttachmentGroupByArgsSchema: z.ZodType<Prisma.AttachmentGroupByArgs> = z.object({
  where: AttachmentWhereInputSchema.optional(),
  orderBy: z.union([ AttachmentOrderByWithAggregationInputSchema.array(),AttachmentOrderByWithAggregationInputSchema ]).optional(),
  by: AttachmentScalarFieldEnumSchema.array(),
  having: AttachmentScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const AttachmentFindUniqueArgsSchema: z.ZodType<Prisma.AttachmentFindUniqueArgs> = z.object({
  select: AttachmentSelectSchema.optional(),
  include: AttachmentIncludeSchema.optional(),
  where: AttachmentWhereUniqueInputSchema,
}).strict() ;

export const AttachmentFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.AttachmentFindUniqueOrThrowArgs> = z.object({
  select: AttachmentSelectSchema.optional(),
  include: AttachmentIncludeSchema.optional(),
  where: AttachmentWhereUniqueInputSchema,
}).strict() ;

export const BIOMARKERFindFirstArgsSchema: z.ZodType<Prisma.BIOMARKERFindFirstArgs> = z.object({
  select: BIOMARKERSelectSchema.optional(),
  include: BIOMARKERIncludeSchema.optional(),
  where: BIOMARKERWhereInputSchema.optional(),
  orderBy: z.union([ BIOMARKEROrderByWithRelationInputSchema.array(),BIOMARKEROrderByWithRelationInputSchema ]).optional(),
  cursor: BIOMARKERWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ BIOMARKERScalarFieldEnumSchema,BIOMARKERScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const BIOMARKERFindFirstOrThrowArgsSchema: z.ZodType<Prisma.BIOMARKERFindFirstOrThrowArgs> = z.object({
  select: BIOMARKERSelectSchema.optional(),
  include: BIOMARKERIncludeSchema.optional(),
  where: BIOMARKERWhereInputSchema.optional(),
  orderBy: z.union([ BIOMARKEROrderByWithRelationInputSchema.array(),BIOMARKEROrderByWithRelationInputSchema ]).optional(),
  cursor: BIOMARKERWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ BIOMARKERScalarFieldEnumSchema,BIOMARKERScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const BIOMARKERFindManyArgsSchema: z.ZodType<Prisma.BIOMARKERFindManyArgs> = z.object({
  select: BIOMARKERSelectSchema.optional(),
  include: BIOMARKERIncludeSchema.optional(),
  where: BIOMARKERWhereInputSchema.optional(),
  orderBy: z.union([ BIOMARKEROrderByWithRelationInputSchema.array(),BIOMARKEROrderByWithRelationInputSchema ]).optional(),
  cursor: BIOMARKERWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ BIOMARKERScalarFieldEnumSchema,BIOMARKERScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const BIOMARKERAggregateArgsSchema: z.ZodType<Prisma.BIOMARKERAggregateArgs> = z.object({
  where: BIOMARKERWhereInputSchema.optional(),
  orderBy: z.union([ BIOMARKEROrderByWithRelationInputSchema.array(),BIOMARKEROrderByWithRelationInputSchema ]).optional(),
  cursor: BIOMARKERWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const BIOMARKERGroupByArgsSchema: z.ZodType<Prisma.BIOMARKERGroupByArgs> = z.object({
  where: BIOMARKERWhereInputSchema.optional(),
  orderBy: z.union([ BIOMARKEROrderByWithAggregationInputSchema.array(),BIOMARKEROrderByWithAggregationInputSchema ]).optional(),
  by: BIOMARKERScalarFieldEnumSchema.array(),
  having: BIOMARKERScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const BIOMARKERFindUniqueArgsSchema: z.ZodType<Prisma.BIOMARKERFindUniqueArgs> = z.object({
  select: BIOMARKERSelectSchema.optional(),
  include: BIOMARKERIncludeSchema.optional(),
  where: BIOMARKERWhereUniqueInputSchema,
}).strict() ;

export const BIOMARKERFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.BIOMARKERFindUniqueOrThrowArgs> = z.object({
  select: BIOMARKERSelectSchema.optional(),
  include: BIOMARKERIncludeSchema.optional(),
  where: BIOMARKERWhereUniqueInputSchema,
}).strict() ;

export const ICDFindFirstArgsSchema: z.ZodType<Prisma.ICDFindFirstArgs> = z.object({
  select: ICDSelectSchema.optional(),
  include: ICDIncludeSchema.optional(),
  where: ICDWhereInputSchema.optional(),
  orderBy: z.union([ ICDOrderByWithRelationInputSchema.array(),ICDOrderByWithRelationInputSchema ]).optional(),
  cursor: ICDWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ ICDScalarFieldEnumSchema,ICDScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const ICDFindFirstOrThrowArgsSchema: z.ZodType<Prisma.ICDFindFirstOrThrowArgs> = z.object({
  select: ICDSelectSchema.optional(),
  include: ICDIncludeSchema.optional(),
  where: ICDWhereInputSchema.optional(),
  orderBy: z.union([ ICDOrderByWithRelationInputSchema.array(),ICDOrderByWithRelationInputSchema ]).optional(),
  cursor: ICDWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ ICDScalarFieldEnumSchema,ICDScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const ICDFindManyArgsSchema: z.ZodType<Prisma.ICDFindManyArgs> = z.object({
  select: ICDSelectSchema.optional(),
  include: ICDIncludeSchema.optional(),
  where: ICDWhereInputSchema.optional(),
  orderBy: z.union([ ICDOrderByWithRelationInputSchema.array(),ICDOrderByWithRelationInputSchema ]).optional(),
  cursor: ICDWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ ICDScalarFieldEnumSchema,ICDScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const ICDAggregateArgsSchema: z.ZodType<Prisma.ICDAggregateArgs> = z.object({
  where: ICDWhereInputSchema.optional(),
  orderBy: z.union([ ICDOrderByWithRelationInputSchema.array(),ICDOrderByWithRelationInputSchema ]).optional(),
  cursor: ICDWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const ICDGroupByArgsSchema: z.ZodType<Prisma.ICDGroupByArgs> = z.object({
  where: ICDWhereInputSchema.optional(),
  orderBy: z.union([ ICDOrderByWithAggregationInputSchema.array(),ICDOrderByWithAggregationInputSchema ]).optional(),
  by: ICDScalarFieldEnumSchema.array(),
  having: ICDScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const ICDFindUniqueArgsSchema: z.ZodType<Prisma.ICDFindUniqueArgs> = z.object({
  select: ICDSelectSchema.optional(),
  include: ICDIncludeSchema.optional(),
  where: ICDWhereUniqueInputSchema,
}).strict() ;

export const ICDFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.ICDFindUniqueOrThrowArgs> = z.object({
  select: ICDSelectSchema.optional(),
  include: ICDIncludeSchema.optional(),
  where: ICDWhereUniqueInputSchema,
}).strict() ;

export const LOINCFindFirstArgsSchema: z.ZodType<Prisma.LOINCFindFirstArgs> = z.object({
  select: LOINCSelectSchema.optional(),
  include: LOINCIncludeSchema.optional(),
  where: LOINCWhereInputSchema.optional(),
  orderBy: z.union([ LOINCOrderByWithRelationInputSchema.array(),LOINCOrderByWithRelationInputSchema ]).optional(),
  cursor: LOINCWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ LOINCScalarFieldEnumSchema,LOINCScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const LOINCFindFirstOrThrowArgsSchema: z.ZodType<Prisma.LOINCFindFirstOrThrowArgs> = z.object({
  select: LOINCSelectSchema.optional(),
  include: LOINCIncludeSchema.optional(),
  where: LOINCWhereInputSchema.optional(),
  orderBy: z.union([ LOINCOrderByWithRelationInputSchema.array(),LOINCOrderByWithRelationInputSchema ]).optional(),
  cursor: LOINCWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ LOINCScalarFieldEnumSchema,LOINCScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const LOINCFindManyArgsSchema: z.ZodType<Prisma.LOINCFindManyArgs> = z.object({
  select: LOINCSelectSchema.optional(),
  include: LOINCIncludeSchema.optional(),
  where: LOINCWhereInputSchema.optional(),
  orderBy: z.union([ LOINCOrderByWithRelationInputSchema.array(),LOINCOrderByWithRelationInputSchema ]).optional(),
  cursor: LOINCWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ LOINCScalarFieldEnumSchema,LOINCScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const LOINCAggregateArgsSchema: z.ZodType<Prisma.LOINCAggregateArgs> = z.object({
  where: LOINCWhereInputSchema.optional(),
  orderBy: z.union([ LOINCOrderByWithRelationInputSchema.array(),LOINCOrderByWithRelationInputSchema ]).optional(),
  cursor: LOINCWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const LOINCGroupByArgsSchema: z.ZodType<Prisma.LOINCGroupByArgs> = z.object({
  where: LOINCWhereInputSchema.optional(),
  orderBy: z.union([ LOINCOrderByWithAggregationInputSchema.array(),LOINCOrderByWithAggregationInputSchema ]).optional(),
  by: LOINCScalarFieldEnumSchema.array(),
  having: LOINCScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const LOINCFindUniqueArgsSchema: z.ZodType<Prisma.LOINCFindUniqueArgs> = z.object({
  select: LOINCSelectSchema.optional(),
  include: LOINCIncludeSchema.optional(),
  where: LOINCWhereUniqueInputSchema,
}).strict() ;

export const LOINCFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.LOINCFindUniqueOrThrowArgs> = z.object({
  select: LOINCSelectSchema.optional(),
  include: LOINCIncludeSchema.optional(),
  where: LOINCWhereUniqueInputSchema,
}).strict() ;

export const LabFindFirstArgsSchema: z.ZodType<Prisma.LabFindFirstArgs> = z.object({
  select: LabSelectSchema.optional(),
  include: LabIncludeSchema.optional(),
  where: LabWhereInputSchema.optional(),
  orderBy: z.union([ LabOrderByWithRelationInputSchema.array(),LabOrderByWithRelationInputSchema ]).optional(),
  cursor: LabWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ LabScalarFieldEnumSchema,LabScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const LabFindFirstOrThrowArgsSchema: z.ZodType<Prisma.LabFindFirstOrThrowArgs> = z.object({
  select: LabSelectSchema.optional(),
  include: LabIncludeSchema.optional(),
  where: LabWhereInputSchema.optional(),
  orderBy: z.union([ LabOrderByWithRelationInputSchema.array(),LabOrderByWithRelationInputSchema ]).optional(),
  cursor: LabWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ LabScalarFieldEnumSchema,LabScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const LabFindManyArgsSchema: z.ZodType<Prisma.LabFindManyArgs> = z.object({
  select: LabSelectSchema.optional(),
  include: LabIncludeSchema.optional(),
  where: LabWhereInputSchema.optional(),
  orderBy: z.union([ LabOrderByWithRelationInputSchema.array(),LabOrderByWithRelationInputSchema ]).optional(),
  cursor: LabWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ LabScalarFieldEnumSchema,LabScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const LabAggregateArgsSchema: z.ZodType<Prisma.LabAggregateArgs> = z.object({
  where: LabWhereInputSchema.optional(),
  orderBy: z.union([ LabOrderByWithRelationInputSchema.array(),LabOrderByWithRelationInputSchema ]).optional(),
  cursor: LabWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const LabGroupByArgsSchema: z.ZodType<Prisma.LabGroupByArgs> = z.object({
  where: LabWhereInputSchema.optional(),
  orderBy: z.union([ LabOrderByWithAggregationInputSchema.array(),LabOrderByWithAggregationInputSchema ]).optional(),
  by: LabScalarFieldEnumSchema.array(),
  having: LabScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const LabFindUniqueArgsSchema: z.ZodType<Prisma.LabFindUniqueArgs> = z.object({
  select: LabSelectSchema.optional(),
  include: LabIncludeSchema.optional(),
  where: LabWhereUniqueInputSchema,
}).strict() ;

export const LabFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.LabFindUniqueOrThrowArgs> = z.object({
  select: LabSelectSchema.optional(),
  include: LabIncludeSchema.optional(),
  where: LabWhereUniqueInputSchema,
}).strict() ;

export const LabOrderFindFirstArgsSchema: z.ZodType<Prisma.LabOrderFindFirstArgs> = z.object({
  select: LabOrderSelectSchema.optional(),
  include: LabOrderIncludeSchema.optional(),
  where: LabOrderWhereInputSchema.optional(),
  orderBy: z.union([ LabOrderOrderByWithRelationInputSchema.array(),LabOrderOrderByWithRelationInputSchema ]).optional(),
  cursor: LabOrderWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ LabOrderScalarFieldEnumSchema,LabOrderScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const LabOrderFindFirstOrThrowArgsSchema: z.ZodType<Prisma.LabOrderFindFirstOrThrowArgs> = z.object({
  select: LabOrderSelectSchema.optional(),
  include: LabOrderIncludeSchema.optional(),
  where: LabOrderWhereInputSchema.optional(),
  orderBy: z.union([ LabOrderOrderByWithRelationInputSchema.array(),LabOrderOrderByWithRelationInputSchema ]).optional(),
  cursor: LabOrderWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ LabOrderScalarFieldEnumSchema,LabOrderScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const LabOrderFindManyArgsSchema: z.ZodType<Prisma.LabOrderFindManyArgs> = z.object({
  select: LabOrderSelectSchema.optional(),
  include: LabOrderIncludeSchema.optional(),
  where: LabOrderWhereInputSchema.optional(),
  orderBy: z.union([ LabOrderOrderByWithRelationInputSchema.array(),LabOrderOrderByWithRelationInputSchema ]).optional(),
  cursor: LabOrderWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ LabOrderScalarFieldEnumSchema,LabOrderScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const LabOrderAggregateArgsSchema: z.ZodType<Prisma.LabOrderAggregateArgs> = z.object({
  where: LabOrderWhereInputSchema.optional(),
  orderBy: z.union([ LabOrderOrderByWithRelationInputSchema.array(),LabOrderOrderByWithRelationInputSchema ]).optional(),
  cursor: LabOrderWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const LabOrderGroupByArgsSchema: z.ZodType<Prisma.LabOrderGroupByArgs> = z.object({
  where: LabOrderWhereInputSchema.optional(),
  orderBy: z.union([ LabOrderOrderByWithAggregationInputSchema.array(),LabOrderOrderByWithAggregationInputSchema ]).optional(),
  by: LabOrderScalarFieldEnumSchema.array(),
  having: LabOrderScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const LabOrderFindUniqueArgsSchema: z.ZodType<Prisma.LabOrderFindUniqueArgs> = z.object({
  select: LabOrderSelectSchema.optional(),
  include: LabOrderIncludeSchema.optional(),
  where: LabOrderWhereUniqueInputSchema,
}).strict() ;

export const LabOrderFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.LabOrderFindUniqueOrThrowArgs> = z.object({
  select: LabOrderSelectSchema.optional(),
  include: LabOrderIncludeSchema.optional(),
  where: LabOrderWhereUniqueInputSchema,
}).strict() ;

export const LabOrderAttachmentFindFirstArgsSchema: z.ZodType<Prisma.LabOrderAttachmentFindFirstArgs> = z.object({
  select: LabOrderAttachmentSelectSchema.optional(),
  include: LabOrderAttachmentIncludeSchema.optional(),
  where: LabOrderAttachmentWhereInputSchema.optional(),
  orderBy: z.union([ LabOrderAttachmentOrderByWithRelationInputSchema.array(),LabOrderAttachmentOrderByWithRelationInputSchema ]).optional(),
  cursor: LabOrderAttachmentWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ LabOrderAttachmentScalarFieldEnumSchema,LabOrderAttachmentScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const LabOrderAttachmentFindFirstOrThrowArgsSchema: z.ZodType<Prisma.LabOrderAttachmentFindFirstOrThrowArgs> = z.object({
  select: LabOrderAttachmentSelectSchema.optional(),
  include: LabOrderAttachmentIncludeSchema.optional(),
  where: LabOrderAttachmentWhereInputSchema.optional(),
  orderBy: z.union([ LabOrderAttachmentOrderByWithRelationInputSchema.array(),LabOrderAttachmentOrderByWithRelationInputSchema ]).optional(),
  cursor: LabOrderAttachmentWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ LabOrderAttachmentScalarFieldEnumSchema,LabOrderAttachmentScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const LabOrderAttachmentFindManyArgsSchema: z.ZodType<Prisma.LabOrderAttachmentFindManyArgs> = z.object({
  select: LabOrderAttachmentSelectSchema.optional(),
  include: LabOrderAttachmentIncludeSchema.optional(),
  where: LabOrderAttachmentWhereInputSchema.optional(),
  orderBy: z.union([ LabOrderAttachmentOrderByWithRelationInputSchema.array(),LabOrderAttachmentOrderByWithRelationInputSchema ]).optional(),
  cursor: LabOrderAttachmentWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ LabOrderAttachmentScalarFieldEnumSchema,LabOrderAttachmentScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const LabOrderAttachmentAggregateArgsSchema: z.ZodType<Prisma.LabOrderAttachmentAggregateArgs> = z.object({
  where: LabOrderAttachmentWhereInputSchema.optional(),
  orderBy: z.union([ LabOrderAttachmentOrderByWithRelationInputSchema.array(),LabOrderAttachmentOrderByWithRelationInputSchema ]).optional(),
  cursor: LabOrderAttachmentWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const LabOrderAttachmentGroupByArgsSchema: z.ZodType<Prisma.LabOrderAttachmentGroupByArgs> = z.object({
  where: LabOrderAttachmentWhereInputSchema.optional(),
  orderBy: z.union([ LabOrderAttachmentOrderByWithAggregationInputSchema.array(),LabOrderAttachmentOrderByWithAggregationInputSchema ]).optional(),
  by: LabOrderAttachmentScalarFieldEnumSchema.array(),
  having: LabOrderAttachmentScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const LabOrderAttachmentFindUniqueArgsSchema: z.ZodType<Prisma.LabOrderAttachmentFindUniqueArgs> = z.object({
  select: LabOrderAttachmentSelectSchema.optional(),
  include: LabOrderAttachmentIncludeSchema.optional(),
  where: LabOrderAttachmentWhereUniqueInputSchema,
}).strict() ;

export const LabOrderAttachmentFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.LabOrderAttachmentFindUniqueOrThrowArgs> = z.object({
  select: LabOrderAttachmentSelectSchema.optional(),
  include: LabOrderAttachmentIncludeSchema.optional(),
  where: LabOrderAttachmentWhereUniqueInputSchema,
}).strict() ;

export const LabOrderBillingFindFirstArgsSchema: z.ZodType<Prisma.LabOrderBillingFindFirstArgs> = z.object({
  select: LabOrderBillingSelectSchema.optional(),
  include: LabOrderBillingIncludeSchema.optional(),
  where: LabOrderBillingWhereInputSchema.optional(),
  orderBy: z.union([ LabOrderBillingOrderByWithRelationInputSchema.array(),LabOrderBillingOrderByWithRelationInputSchema ]).optional(),
  cursor: LabOrderBillingWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ LabOrderBillingScalarFieldEnumSchema,LabOrderBillingScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const LabOrderBillingFindFirstOrThrowArgsSchema: z.ZodType<Prisma.LabOrderBillingFindFirstOrThrowArgs> = z.object({
  select: LabOrderBillingSelectSchema.optional(),
  include: LabOrderBillingIncludeSchema.optional(),
  where: LabOrderBillingWhereInputSchema.optional(),
  orderBy: z.union([ LabOrderBillingOrderByWithRelationInputSchema.array(),LabOrderBillingOrderByWithRelationInputSchema ]).optional(),
  cursor: LabOrderBillingWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ LabOrderBillingScalarFieldEnumSchema,LabOrderBillingScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const LabOrderBillingFindManyArgsSchema: z.ZodType<Prisma.LabOrderBillingFindManyArgs> = z.object({
  select: LabOrderBillingSelectSchema.optional(),
  include: LabOrderBillingIncludeSchema.optional(),
  where: LabOrderBillingWhereInputSchema.optional(),
  orderBy: z.union([ LabOrderBillingOrderByWithRelationInputSchema.array(),LabOrderBillingOrderByWithRelationInputSchema ]).optional(),
  cursor: LabOrderBillingWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ LabOrderBillingScalarFieldEnumSchema,LabOrderBillingScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const LabOrderBillingAggregateArgsSchema: z.ZodType<Prisma.LabOrderBillingAggregateArgs> = z.object({
  where: LabOrderBillingWhereInputSchema.optional(),
  orderBy: z.union([ LabOrderBillingOrderByWithRelationInputSchema.array(),LabOrderBillingOrderByWithRelationInputSchema ]).optional(),
  cursor: LabOrderBillingWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const LabOrderBillingGroupByArgsSchema: z.ZodType<Prisma.LabOrderBillingGroupByArgs> = z.object({
  where: LabOrderBillingWhereInputSchema.optional(),
  orderBy: z.union([ LabOrderBillingOrderByWithAggregationInputSchema.array(),LabOrderBillingOrderByWithAggregationInputSchema ]).optional(),
  by: LabOrderBillingScalarFieldEnumSchema.array(),
  having: LabOrderBillingScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const LabOrderBillingFindUniqueArgsSchema: z.ZodType<Prisma.LabOrderBillingFindUniqueArgs> = z.object({
  select: LabOrderBillingSelectSchema.optional(),
  include: LabOrderBillingIncludeSchema.optional(),
  where: LabOrderBillingWhereUniqueInputSchema,
}).strict() ;

export const LabOrderBillingFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.LabOrderBillingFindUniqueOrThrowArgs> = z.object({
  select: LabOrderBillingSelectSchema.optional(),
  include: LabOrderBillingIncludeSchema.optional(),
  where: LabOrderBillingWhereUniqueInputSchema,
}).strict() ;

export const LabOrderIcdFindFirstArgsSchema: z.ZodType<Prisma.LabOrderIcdFindFirstArgs> = z.object({
  select: LabOrderIcdSelectSchema.optional(),
  include: LabOrderIcdIncludeSchema.optional(),
  where: LabOrderIcdWhereInputSchema.optional(),
  orderBy: z.union([ LabOrderIcdOrderByWithRelationInputSchema.array(),LabOrderIcdOrderByWithRelationInputSchema ]).optional(),
  cursor: LabOrderIcdWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ LabOrderIcdScalarFieldEnumSchema,LabOrderIcdScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const LabOrderIcdFindFirstOrThrowArgsSchema: z.ZodType<Prisma.LabOrderIcdFindFirstOrThrowArgs> = z.object({
  select: LabOrderIcdSelectSchema.optional(),
  include: LabOrderIcdIncludeSchema.optional(),
  where: LabOrderIcdWhereInputSchema.optional(),
  orderBy: z.union([ LabOrderIcdOrderByWithRelationInputSchema.array(),LabOrderIcdOrderByWithRelationInputSchema ]).optional(),
  cursor: LabOrderIcdWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ LabOrderIcdScalarFieldEnumSchema,LabOrderIcdScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const LabOrderIcdFindManyArgsSchema: z.ZodType<Prisma.LabOrderIcdFindManyArgs> = z.object({
  select: LabOrderIcdSelectSchema.optional(),
  include: LabOrderIcdIncludeSchema.optional(),
  where: LabOrderIcdWhereInputSchema.optional(),
  orderBy: z.union([ LabOrderIcdOrderByWithRelationInputSchema.array(),LabOrderIcdOrderByWithRelationInputSchema ]).optional(),
  cursor: LabOrderIcdWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ LabOrderIcdScalarFieldEnumSchema,LabOrderIcdScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const LabOrderIcdAggregateArgsSchema: z.ZodType<Prisma.LabOrderIcdAggregateArgs> = z.object({
  where: LabOrderIcdWhereInputSchema.optional(),
  orderBy: z.union([ LabOrderIcdOrderByWithRelationInputSchema.array(),LabOrderIcdOrderByWithRelationInputSchema ]).optional(),
  cursor: LabOrderIcdWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const LabOrderIcdGroupByArgsSchema: z.ZodType<Prisma.LabOrderIcdGroupByArgs> = z.object({
  where: LabOrderIcdWhereInputSchema.optional(),
  orderBy: z.union([ LabOrderIcdOrderByWithAggregationInputSchema.array(),LabOrderIcdOrderByWithAggregationInputSchema ]).optional(),
  by: LabOrderIcdScalarFieldEnumSchema.array(),
  having: LabOrderIcdScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const LabOrderIcdFindUniqueArgsSchema: z.ZodType<Prisma.LabOrderIcdFindUniqueArgs> = z.object({
  select: LabOrderIcdSelectSchema.optional(),
  include: LabOrderIcdIncludeSchema.optional(),
  where: LabOrderIcdWhereUniqueInputSchema,
}).strict() ;

export const LabOrderIcdFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.LabOrderIcdFindUniqueOrThrowArgs> = z.object({
  select: LabOrderIcdSelectSchema.optional(),
  include: LabOrderIcdIncludeSchema.optional(),
  where: LabOrderIcdWhereUniqueInputSchema,
}).strict() ;

export const LabOrderSpecimenFindFirstArgsSchema: z.ZodType<Prisma.LabOrderSpecimenFindFirstArgs> = z.object({
  select: LabOrderSpecimenSelectSchema.optional(),
  include: LabOrderSpecimenIncludeSchema.optional(),
  where: LabOrderSpecimenWhereInputSchema.optional(),
  orderBy: z.union([ LabOrderSpecimenOrderByWithRelationInputSchema.array(),LabOrderSpecimenOrderByWithRelationInputSchema ]).optional(),
  cursor: LabOrderSpecimenWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ LabOrderSpecimenScalarFieldEnumSchema,LabOrderSpecimenScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const LabOrderSpecimenFindFirstOrThrowArgsSchema: z.ZodType<Prisma.LabOrderSpecimenFindFirstOrThrowArgs> = z.object({
  select: LabOrderSpecimenSelectSchema.optional(),
  include: LabOrderSpecimenIncludeSchema.optional(),
  where: LabOrderSpecimenWhereInputSchema.optional(),
  orderBy: z.union([ LabOrderSpecimenOrderByWithRelationInputSchema.array(),LabOrderSpecimenOrderByWithRelationInputSchema ]).optional(),
  cursor: LabOrderSpecimenWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ LabOrderSpecimenScalarFieldEnumSchema,LabOrderSpecimenScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const LabOrderSpecimenFindManyArgsSchema: z.ZodType<Prisma.LabOrderSpecimenFindManyArgs> = z.object({
  select: LabOrderSpecimenSelectSchema.optional(),
  include: LabOrderSpecimenIncludeSchema.optional(),
  where: LabOrderSpecimenWhereInputSchema.optional(),
  orderBy: z.union([ LabOrderSpecimenOrderByWithRelationInputSchema.array(),LabOrderSpecimenOrderByWithRelationInputSchema ]).optional(),
  cursor: LabOrderSpecimenWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ LabOrderSpecimenScalarFieldEnumSchema,LabOrderSpecimenScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const LabOrderSpecimenAggregateArgsSchema: z.ZodType<Prisma.LabOrderSpecimenAggregateArgs> = z.object({
  where: LabOrderSpecimenWhereInputSchema.optional(),
  orderBy: z.union([ LabOrderSpecimenOrderByWithRelationInputSchema.array(),LabOrderSpecimenOrderByWithRelationInputSchema ]).optional(),
  cursor: LabOrderSpecimenWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const LabOrderSpecimenGroupByArgsSchema: z.ZodType<Prisma.LabOrderSpecimenGroupByArgs> = z.object({
  where: LabOrderSpecimenWhereInputSchema.optional(),
  orderBy: z.union([ LabOrderSpecimenOrderByWithAggregationInputSchema.array(),LabOrderSpecimenOrderByWithAggregationInputSchema ]).optional(),
  by: LabOrderSpecimenScalarFieldEnumSchema.array(),
  having: LabOrderSpecimenScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const LabOrderSpecimenFindUniqueArgsSchema: z.ZodType<Prisma.LabOrderSpecimenFindUniqueArgs> = z.object({
  select: LabOrderSpecimenSelectSchema.optional(),
  include: LabOrderSpecimenIncludeSchema.optional(),
  where: LabOrderSpecimenWhereUniqueInputSchema,
}).strict() ;

export const LabOrderSpecimenFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.LabOrderSpecimenFindUniqueOrThrowArgs> = z.object({
  select: LabOrderSpecimenSelectSchema.optional(),
  include: LabOrderSpecimenIncludeSchema.optional(),
  where: LabOrderSpecimenWhereUniqueInputSchema,
}).strict() ;

export const LabOrderSponsoredTestConsentFindFirstArgsSchema: z.ZodType<Prisma.LabOrderSponsoredTestConsentFindFirstArgs> = z.object({
  select: LabOrderSponsoredTestConsentSelectSchema.optional(),
  include: LabOrderSponsoredTestConsentIncludeSchema.optional(),
  where: LabOrderSponsoredTestConsentWhereInputSchema.optional(),
  orderBy: z.union([ LabOrderSponsoredTestConsentOrderByWithRelationInputSchema.array(),LabOrderSponsoredTestConsentOrderByWithRelationInputSchema ]).optional(),
  cursor: LabOrderSponsoredTestConsentWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ LabOrderSponsoredTestConsentScalarFieldEnumSchema,LabOrderSponsoredTestConsentScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const LabOrderSponsoredTestConsentFindFirstOrThrowArgsSchema: z.ZodType<Prisma.LabOrderSponsoredTestConsentFindFirstOrThrowArgs> = z.object({
  select: LabOrderSponsoredTestConsentSelectSchema.optional(),
  include: LabOrderSponsoredTestConsentIncludeSchema.optional(),
  where: LabOrderSponsoredTestConsentWhereInputSchema.optional(),
  orderBy: z.union([ LabOrderSponsoredTestConsentOrderByWithRelationInputSchema.array(),LabOrderSponsoredTestConsentOrderByWithRelationInputSchema ]).optional(),
  cursor: LabOrderSponsoredTestConsentWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ LabOrderSponsoredTestConsentScalarFieldEnumSchema,LabOrderSponsoredTestConsentScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const LabOrderSponsoredTestConsentFindManyArgsSchema: z.ZodType<Prisma.LabOrderSponsoredTestConsentFindManyArgs> = z.object({
  select: LabOrderSponsoredTestConsentSelectSchema.optional(),
  include: LabOrderSponsoredTestConsentIncludeSchema.optional(),
  where: LabOrderSponsoredTestConsentWhereInputSchema.optional(),
  orderBy: z.union([ LabOrderSponsoredTestConsentOrderByWithRelationInputSchema.array(),LabOrderSponsoredTestConsentOrderByWithRelationInputSchema ]).optional(),
  cursor: LabOrderSponsoredTestConsentWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ LabOrderSponsoredTestConsentScalarFieldEnumSchema,LabOrderSponsoredTestConsentScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const LabOrderSponsoredTestConsentAggregateArgsSchema: z.ZodType<Prisma.LabOrderSponsoredTestConsentAggregateArgs> = z.object({
  where: LabOrderSponsoredTestConsentWhereInputSchema.optional(),
  orderBy: z.union([ LabOrderSponsoredTestConsentOrderByWithRelationInputSchema.array(),LabOrderSponsoredTestConsentOrderByWithRelationInputSchema ]).optional(),
  cursor: LabOrderSponsoredTestConsentWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const LabOrderSponsoredTestConsentGroupByArgsSchema: z.ZodType<Prisma.LabOrderSponsoredTestConsentGroupByArgs> = z.object({
  where: LabOrderSponsoredTestConsentWhereInputSchema.optional(),
  orderBy: z.union([ LabOrderSponsoredTestConsentOrderByWithAggregationInputSchema.array(),LabOrderSponsoredTestConsentOrderByWithAggregationInputSchema ]).optional(),
  by: LabOrderSponsoredTestConsentScalarFieldEnumSchema.array(),
  having: LabOrderSponsoredTestConsentScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const LabOrderSponsoredTestConsentFindUniqueArgsSchema: z.ZodType<Prisma.LabOrderSponsoredTestConsentFindUniqueArgs> = z.object({
  select: LabOrderSponsoredTestConsentSelectSchema.optional(),
  include: LabOrderSponsoredTestConsentIncludeSchema.optional(),
  where: LabOrderSponsoredTestConsentWhereUniqueInputSchema,
}).strict() ;

export const LabOrderSponsoredTestConsentFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.LabOrderSponsoredTestConsentFindUniqueOrThrowArgs> = z.object({
  select: LabOrderSponsoredTestConsentSelectSchema.optional(),
  include: LabOrderSponsoredTestConsentIncludeSchema.optional(),
  where: LabOrderSponsoredTestConsentWhereUniqueInputSchema,
}).strict() ;

export const LabOrderStatusFindFirstArgsSchema: z.ZodType<Prisma.LabOrderStatusFindFirstArgs> = z.object({
  select: LabOrderStatusSelectSchema.optional(),
  include: LabOrderStatusIncludeSchema.optional(),
  where: LabOrderStatusWhereInputSchema.optional(),
  orderBy: z.union([ LabOrderStatusOrderByWithRelationInputSchema.array(),LabOrderStatusOrderByWithRelationInputSchema ]).optional(),
  cursor: LabOrderStatusWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ LabOrderStatusScalarFieldEnumSchema,LabOrderStatusScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const LabOrderStatusFindFirstOrThrowArgsSchema: z.ZodType<Prisma.LabOrderStatusFindFirstOrThrowArgs> = z.object({
  select: LabOrderStatusSelectSchema.optional(),
  include: LabOrderStatusIncludeSchema.optional(),
  where: LabOrderStatusWhereInputSchema.optional(),
  orderBy: z.union([ LabOrderStatusOrderByWithRelationInputSchema.array(),LabOrderStatusOrderByWithRelationInputSchema ]).optional(),
  cursor: LabOrderStatusWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ LabOrderStatusScalarFieldEnumSchema,LabOrderStatusScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const LabOrderStatusFindManyArgsSchema: z.ZodType<Prisma.LabOrderStatusFindManyArgs> = z.object({
  select: LabOrderStatusSelectSchema.optional(),
  include: LabOrderStatusIncludeSchema.optional(),
  where: LabOrderStatusWhereInputSchema.optional(),
  orderBy: z.union([ LabOrderStatusOrderByWithRelationInputSchema.array(),LabOrderStatusOrderByWithRelationInputSchema ]).optional(),
  cursor: LabOrderStatusWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ LabOrderStatusScalarFieldEnumSchema,LabOrderStatusScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const LabOrderStatusAggregateArgsSchema: z.ZodType<Prisma.LabOrderStatusAggregateArgs> = z.object({
  where: LabOrderStatusWhereInputSchema.optional(),
  orderBy: z.union([ LabOrderStatusOrderByWithRelationInputSchema.array(),LabOrderStatusOrderByWithRelationInputSchema ]).optional(),
  cursor: LabOrderStatusWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const LabOrderStatusGroupByArgsSchema: z.ZodType<Prisma.LabOrderStatusGroupByArgs> = z.object({
  where: LabOrderStatusWhereInputSchema.optional(),
  orderBy: z.union([ LabOrderStatusOrderByWithAggregationInputSchema.array(),LabOrderStatusOrderByWithAggregationInputSchema ]).optional(),
  by: LabOrderStatusScalarFieldEnumSchema.array(),
  having: LabOrderStatusScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const LabOrderStatusFindUniqueArgsSchema: z.ZodType<Prisma.LabOrderStatusFindUniqueArgs> = z.object({
  select: LabOrderStatusSelectSchema.optional(),
  include: LabOrderStatusIncludeSchema.optional(),
  where: LabOrderStatusWhereUniqueInputSchema,
}).strict() ;

export const LabOrderStatusFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.LabOrderStatusFindUniqueOrThrowArgs> = z.object({
  select: LabOrderStatusSelectSchema.optional(),
  include: LabOrderStatusIncludeSchema.optional(),
  where: LabOrderStatusWhereUniqueInputSchema,
}).strict() ;

export const LabOrderTestFindFirstArgsSchema: z.ZodType<Prisma.LabOrderTestFindFirstArgs> = z.object({
  select: LabOrderTestSelectSchema.optional(),
  include: LabOrderTestIncludeSchema.optional(),
  where: LabOrderTestWhereInputSchema.optional(),
  orderBy: z.union([ LabOrderTestOrderByWithRelationInputSchema.array(),LabOrderTestOrderByWithRelationInputSchema ]).optional(),
  cursor: LabOrderTestWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ LabOrderTestScalarFieldEnumSchema,LabOrderTestScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const LabOrderTestFindFirstOrThrowArgsSchema: z.ZodType<Prisma.LabOrderTestFindFirstOrThrowArgs> = z.object({
  select: LabOrderTestSelectSchema.optional(),
  include: LabOrderTestIncludeSchema.optional(),
  where: LabOrderTestWhereInputSchema.optional(),
  orderBy: z.union([ LabOrderTestOrderByWithRelationInputSchema.array(),LabOrderTestOrderByWithRelationInputSchema ]).optional(),
  cursor: LabOrderTestWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ LabOrderTestScalarFieldEnumSchema,LabOrderTestScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const LabOrderTestFindManyArgsSchema: z.ZodType<Prisma.LabOrderTestFindManyArgs> = z.object({
  select: LabOrderTestSelectSchema.optional(),
  include: LabOrderTestIncludeSchema.optional(),
  where: LabOrderTestWhereInputSchema.optional(),
  orderBy: z.union([ LabOrderTestOrderByWithRelationInputSchema.array(),LabOrderTestOrderByWithRelationInputSchema ]).optional(),
  cursor: LabOrderTestWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ LabOrderTestScalarFieldEnumSchema,LabOrderTestScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const LabOrderTestAggregateArgsSchema: z.ZodType<Prisma.LabOrderTestAggregateArgs> = z.object({
  where: LabOrderTestWhereInputSchema.optional(),
  orderBy: z.union([ LabOrderTestOrderByWithRelationInputSchema.array(),LabOrderTestOrderByWithRelationInputSchema ]).optional(),
  cursor: LabOrderTestWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const LabOrderTestGroupByArgsSchema: z.ZodType<Prisma.LabOrderTestGroupByArgs> = z.object({
  where: LabOrderTestWhereInputSchema.optional(),
  orderBy: z.union([ LabOrderTestOrderByWithAggregationInputSchema.array(),LabOrderTestOrderByWithAggregationInputSchema ]).optional(),
  by: LabOrderTestScalarFieldEnumSchema.array(),
  having: LabOrderTestScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const LabOrderTestFindUniqueArgsSchema: z.ZodType<Prisma.LabOrderTestFindUniqueArgs> = z.object({
  select: LabOrderTestSelectSchema.optional(),
  include: LabOrderTestIncludeSchema.optional(),
  where: LabOrderTestWhereUniqueInputSchema,
}).strict() ;

export const LabOrderTestFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.LabOrderTestFindUniqueOrThrowArgs> = z.object({
  select: LabOrderTestSelectSchema.optional(),
  include: LabOrderTestIncludeSchema.optional(),
  where: LabOrderTestWhereUniqueInputSchema,
}).strict() ;

export const LoincComponentHierarchyFindFirstArgsSchema: z.ZodType<Prisma.LoincComponentHierarchyFindFirstArgs> = z.object({
  select: LoincComponentHierarchySelectSchema.optional(),
  where: LoincComponentHierarchyWhereInputSchema.optional(),
  orderBy: z.union([ LoincComponentHierarchyOrderByWithRelationInputSchema.array(),LoincComponentHierarchyOrderByWithRelationInputSchema ]).optional(),
  cursor: LoincComponentHierarchyWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ LoincComponentHierarchyScalarFieldEnumSchema,LoincComponentHierarchyScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const LoincComponentHierarchyFindFirstOrThrowArgsSchema: z.ZodType<Prisma.LoincComponentHierarchyFindFirstOrThrowArgs> = z.object({
  select: LoincComponentHierarchySelectSchema.optional(),
  where: LoincComponentHierarchyWhereInputSchema.optional(),
  orderBy: z.union([ LoincComponentHierarchyOrderByWithRelationInputSchema.array(),LoincComponentHierarchyOrderByWithRelationInputSchema ]).optional(),
  cursor: LoincComponentHierarchyWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ LoincComponentHierarchyScalarFieldEnumSchema,LoincComponentHierarchyScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const LoincComponentHierarchyFindManyArgsSchema: z.ZodType<Prisma.LoincComponentHierarchyFindManyArgs> = z.object({
  select: LoincComponentHierarchySelectSchema.optional(),
  where: LoincComponentHierarchyWhereInputSchema.optional(),
  orderBy: z.union([ LoincComponentHierarchyOrderByWithRelationInputSchema.array(),LoincComponentHierarchyOrderByWithRelationInputSchema ]).optional(),
  cursor: LoincComponentHierarchyWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ LoincComponentHierarchyScalarFieldEnumSchema,LoincComponentHierarchyScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const LoincComponentHierarchyAggregateArgsSchema: z.ZodType<Prisma.LoincComponentHierarchyAggregateArgs> = z.object({
  where: LoincComponentHierarchyWhereInputSchema.optional(),
  orderBy: z.union([ LoincComponentHierarchyOrderByWithRelationInputSchema.array(),LoincComponentHierarchyOrderByWithRelationInputSchema ]).optional(),
  cursor: LoincComponentHierarchyWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const LoincComponentHierarchyGroupByArgsSchema: z.ZodType<Prisma.LoincComponentHierarchyGroupByArgs> = z.object({
  where: LoincComponentHierarchyWhereInputSchema.optional(),
  orderBy: z.union([ LoincComponentHierarchyOrderByWithAggregationInputSchema.array(),LoincComponentHierarchyOrderByWithAggregationInputSchema ]).optional(),
  by: LoincComponentHierarchyScalarFieldEnumSchema.array(),
  having: LoincComponentHierarchyScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const LoincComponentHierarchyFindUniqueArgsSchema: z.ZodType<Prisma.LoincComponentHierarchyFindUniqueArgs> = z.object({
  select: LoincComponentHierarchySelectSchema.optional(),
  where: LoincComponentHierarchyWhereUniqueInputSchema,
}).strict() ;

export const LoincComponentHierarchyFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.LoincComponentHierarchyFindUniqueOrThrowArgs> = z.object({
  select: LoincComponentHierarchySelectSchema.optional(),
  where: LoincComponentHierarchyWhereUniqueInputSchema,
}).strict() ;

export const LoincPanelHierarchyFindFirstArgsSchema: z.ZodType<Prisma.LoincPanelHierarchyFindFirstArgs> = z.object({
  select: LoincPanelHierarchySelectSchema.optional(),
  where: LoincPanelHierarchyWhereInputSchema.optional(),
  orderBy: z.union([ LoincPanelHierarchyOrderByWithRelationInputSchema.array(),LoincPanelHierarchyOrderByWithRelationInputSchema ]).optional(),
  cursor: LoincPanelHierarchyWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ LoincPanelHierarchyScalarFieldEnumSchema,LoincPanelHierarchyScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const LoincPanelHierarchyFindFirstOrThrowArgsSchema: z.ZodType<Prisma.LoincPanelHierarchyFindFirstOrThrowArgs> = z.object({
  select: LoincPanelHierarchySelectSchema.optional(),
  where: LoincPanelHierarchyWhereInputSchema.optional(),
  orderBy: z.union([ LoincPanelHierarchyOrderByWithRelationInputSchema.array(),LoincPanelHierarchyOrderByWithRelationInputSchema ]).optional(),
  cursor: LoincPanelHierarchyWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ LoincPanelHierarchyScalarFieldEnumSchema,LoincPanelHierarchyScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const LoincPanelHierarchyFindManyArgsSchema: z.ZodType<Prisma.LoincPanelHierarchyFindManyArgs> = z.object({
  select: LoincPanelHierarchySelectSchema.optional(),
  where: LoincPanelHierarchyWhereInputSchema.optional(),
  orderBy: z.union([ LoincPanelHierarchyOrderByWithRelationInputSchema.array(),LoincPanelHierarchyOrderByWithRelationInputSchema ]).optional(),
  cursor: LoincPanelHierarchyWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ LoincPanelHierarchyScalarFieldEnumSchema,LoincPanelHierarchyScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const LoincPanelHierarchyAggregateArgsSchema: z.ZodType<Prisma.LoincPanelHierarchyAggregateArgs> = z.object({
  where: LoincPanelHierarchyWhereInputSchema.optional(),
  orderBy: z.union([ LoincPanelHierarchyOrderByWithRelationInputSchema.array(),LoincPanelHierarchyOrderByWithRelationInputSchema ]).optional(),
  cursor: LoincPanelHierarchyWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const LoincPanelHierarchyGroupByArgsSchema: z.ZodType<Prisma.LoincPanelHierarchyGroupByArgs> = z.object({
  where: LoincPanelHierarchyWhereInputSchema.optional(),
  orderBy: z.union([ LoincPanelHierarchyOrderByWithAggregationInputSchema.array(),LoincPanelHierarchyOrderByWithAggregationInputSchema ]).optional(),
  by: LoincPanelHierarchyScalarFieldEnumSchema.array(),
  having: LoincPanelHierarchyScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const LoincPanelHierarchyFindUniqueArgsSchema: z.ZodType<Prisma.LoincPanelHierarchyFindUniqueArgs> = z.object({
  select: LoincPanelHierarchySelectSchema.optional(),
  where: LoincPanelHierarchyWhereUniqueInputSchema,
}).strict() ;

export const LoincPanelHierarchyFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.LoincPanelHierarchyFindUniqueOrThrowArgs> = z.object({
  select: LoincPanelHierarchySelectSchema.optional(),
  where: LoincPanelHierarchyWhereUniqueInputSchema,
}).strict() ;

export const LoincUniveralLabOrdersFindFirstArgsSchema: z.ZodType<Prisma.LoincUniveralLabOrdersFindFirstArgs> = z.object({
  select: LoincUniveralLabOrdersSelectSchema.optional(),
  where: LoincUniveralLabOrdersWhereInputSchema.optional(),
  orderBy: z.union([ LoincUniveralLabOrdersOrderByWithRelationInputSchema.array(),LoincUniveralLabOrdersOrderByWithRelationInputSchema ]).optional(),
  cursor: LoincUniveralLabOrdersWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ LoincUniveralLabOrdersScalarFieldEnumSchema,LoincUniveralLabOrdersScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const LoincUniveralLabOrdersFindFirstOrThrowArgsSchema: z.ZodType<Prisma.LoincUniveralLabOrdersFindFirstOrThrowArgs> = z.object({
  select: LoincUniveralLabOrdersSelectSchema.optional(),
  where: LoincUniveralLabOrdersWhereInputSchema.optional(),
  orderBy: z.union([ LoincUniveralLabOrdersOrderByWithRelationInputSchema.array(),LoincUniveralLabOrdersOrderByWithRelationInputSchema ]).optional(),
  cursor: LoincUniveralLabOrdersWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ LoincUniveralLabOrdersScalarFieldEnumSchema,LoincUniveralLabOrdersScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const LoincUniveralLabOrdersFindManyArgsSchema: z.ZodType<Prisma.LoincUniveralLabOrdersFindManyArgs> = z.object({
  select: LoincUniveralLabOrdersSelectSchema.optional(),
  where: LoincUniveralLabOrdersWhereInputSchema.optional(),
  orderBy: z.union([ LoincUniveralLabOrdersOrderByWithRelationInputSchema.array(),LoincUniveralLabOrdersOrderByWithRelationInputSchema ]).optional(),
  cursor: LoincUniveralLabOrdersWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ LoincUniveralLabOrdersScalarFieldEnumSchema,LoincUniveralLabOrdersScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const LoincUniveralLabOrdersAggregateArgsSchema: z.ZodType<Prisma.LoincUniveralLabOrdersAggregateArgs> = z.object({
  where: LoincUniveralLabOrdersWhereInputSchema.optional(),
  orderBy: z.union([ LoincUniveralLabOrdersOrderByWithRelationInputSchema.array(),LoincUniveralLabOrdersOrderByWithRelationInputSchema ]).optional(),
  cursor: LoincUniveralLabOrdersWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const LoincUniveralLabOrdersGroupByArgsSchema: z.ZodType<Prisma.LoincUniveralLabOrdersGroupByArgs> = z.object({
  where: LoincUniveralLabOrdersWhereInputSchema.optional(),
  orderBy: z.union([ LoincUniveralLabOrdersOrderByWithAggregationInputSchema.array(),LoincUniveralLabOrdersOrderByWithAggregationInputSchema ]).optional(),
  by: LoincUniveralLabOrdersScalarFieldEnumSchema.array(),
  having: LoincUniveralLabOrdersScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const LoincUniveralLabOrdersFindUniqueArgsSchema: z.ZodType<Prisma.LoincUniveralLabOrdersFindUniqueArgs> = z.object({
  select: LoincUniveralLabOrdersSelectSchema.optional(),
  where: LoincUniveralLabOrdersWhereUniqueInputSchema,
}).strict() ;

export const LoincUniveralLabOrdersFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.LoincUniveralLabOrdersFindUniqueOrThrowArgs> = z.object({
  select: LoincUniveralLabOrdersSelectSchema.optional(),
  where: LoincUniveralLabOrdersWhereUniqueInputSchema,
}).strict() ;

export const OrganizationFindFirstArgsSchema: z.ZodType<Prisma.OrganizationFindFirstArgs> = z.object({
  select: OrganizationSelectSchema.optional(),
  include: OrganizationIncludeSchema.optional(),
  where: OrganizationWhereInputSchema.optional(),
  orderBy: z.union([ OrganizationOrderByWithRelationInputSchema.array(),OrganizationOrderByWithRelationInputSchema ]).optional(),
  cursor: OrganizationWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ OrganizationScalarFieldEnumSchema,OrganizationScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const OrganizationFindFirstOrThrowArgsSchema: z.ZodType<Prisma.OrganizationFindFirstOrThrowArgs> = z.object({
  select: OrganizationSelectSchema.optional(),
  include: OrganizationIncludeSchema.optional(),
  where: OrganizationWhereInputSchema.optional(),
  orderBy: z.union([ OrganizationOrderByWithRelationInputSchema.array(),OrganizationOrderByWithRelationInputSchema ]).optional(),
  cursor: OrganizationWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ OrganizationScalarFieldEnumSchema,OrganizationScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const OrganizationFindManyArgsSchema: z.ZodType<Prisma.OrganizationFindManyArgs> = z.object({
  select: OrganizationSelectSchema.optional(),
  include: OrganizationIncludeSchema.optional(),
  where: OrganizationWhereInputSchema.optional(),
  orderBy: z.union([ OrganizationOrderByWithRelationInputSchema.array(),OrganizationOrderByWithRelationInputSchema ]).optional(),
  cursor: OrganizationWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ OrganizationScalarFieldEnumSchema,OrganizationScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const OrganizationAggregateArgsSchema: z.ZodType<Prisma.OrganizationAggregateArgs> = z.object({
  where: OrganizationWhereInputSchema.optional(),
  orderBy: z.union([ OrganizationOrderByWithRelationInputSchema.array(),OrganizationOrderByWithRelationInputSchema ]).optional(),
  cursor: OrganizationWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const OrganizationGroupByArgsSchema: z.ZodType<Prisma.OrganizationGroupByArgs> = z.object({
  where: OrganizationWhereInputSchema.optional(),
  orderBy: z.union([ OrganizationOrderByWithAggregationInputSchema.array(),OrganizationOrderByWithAggregationInputSchema ]).optional(),
  by: OrganizationScalarFieldEnumSchema.array(),
  having: OrganizationScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const OrganizationFindUniqueArgsSchema: z.ZodType<Prisma.OrganizationFindUniqueArgs> = z.object({
  select: OrganizationSelectSchema.optional(),
  include: OrganizationIncludeSchema.optional(),
  where: OrganizationWhereUniqueInputSchema,
}).strict() ;

export const OrganizationFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.OrganizationFindUniqueOrThrowArgs> = z.object({
  select: OrganizationSelectSchema.optional(),
  include: OrganizationIncludeSchema.optional(),
  where: OrganizationWhereUniqueInputSchema,
}).strict() ;

export const OrganizationEndpointFindFirstArgsSchema: z.ZodType<Prisma.OrganizationEndpointFindFirstArgs> = z.object({
  select: OrganizationEndpointSelectSchema.optional(),
  where: OrganizationEndpointWhereInputSchema.optional(),
  orderBy: z.union([ OrganizationEndpointOrderByWithRelationInputSchema.array(),OrganizationEndpointOrderByWithRelationInputSchema ]).optional(),
  cursor: OrganizationEndpointWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ OrganizationEndpointScalarFieldEnumSchema,OrganizationEndpointScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const OrganizationEndpointFindFirstOrThrowArgsSchema: z.ZodType<Prisma.OrganizationEndpointFindFirstOrThrowArgs> = z.object({
  select: OrganizationEndpointSelectSchema.optional(),
  where: OrganizationEndpointWhereInputSchema.optional(),
  orderBy: z.union([ OrganizationEndpointOrderByWithRelationInputSchema.array(),OrganizationEndpointOrderByWithRelationInputSchema ]).optional(),
  cursor: OrganizationEndpointWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ OrganizationEndpointScalarFieldEnumSchema,OrganizationEndpointScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const OrganizationEndpointFindManyArgsSchema: z.ZodType<Prisma.OrganizationEndpointFindManyArgs> = z.object({
  select: OrganizationEndpointSelectSchema.optional(),
  where: OrganizationEndpointWhereInputSchema.optional(),
  orderBy: z.union([ OrganizationEndpointOrderByWithRelationInputSchema.array(),OrganizationEndpointOrderByWithRelationInputSchema ]).optional(),
  cursor: OrganizationEndpointWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ OrganizationEndpointScalarFieldEnumSchema,OrganizationEndpointScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const OrganizationEndpointAggregateArgsSchema: z.ZodType<Prisma.OrganizationEndpointAggregateArgs> = z.object({
  where: OrganizationEndpointWhereInputSchema.optional(),
  orderBy: z.union([ OrganizationEndpointOrderByWithRelationInputSchema.array(),OrganizationEndpointOrderByWithRelationInputSchema ]).optional(),
  cursor: OrganizationEndpointWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const OrganizationEndpointGroupByArgsSchema: z.ZodType<Prisma.OrganizationEndpointGroupByArgs> = z.object({
  where: OrganizationEndpointWhereInputSchema.optional(),
  orderBy: z.union([ OrganizationEndpointOrderByWithAggregationInputSchema.array(),OrganizationEndpointOrderByWithAggregationInputSchema ]).optional(),
  by: OrganizationEndpointScalarFieldEnumSchema.array(),
  having: OrganizationEndpointScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const OrganizationEndpointFindUniqueArgsSchema: z.ZodType<Prisma.OrganizationEndpointFindUniqueArgs> = z.object({
  select: OrganizationEndpointSelectSchema.optional(),
  where: OrganizationEndpointWhereUniqueInputSchema,
}).strict() ;

export const OrganizationEndpointFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.OrganizationEndpointFindUniqueOrThrowArgs> = z.object({
  select: OrganizationEndpointSelectSchema.optional(),
  where: OrganizationEndpointWhereUniqueInputSchema,
}).strict() ;

export const OrganizationFavoriteTestFindFirstArgsSchema: z.ZodType<Prisma.OrganizationFavoriteTestFindFirstArgs> = z.object({
  select: OrganizationFavoriteTestSelectSchema.optional(),
  include: OrganizationFavoriteTestIncludeSchema.optional(),
  where: OrganizationFavoriteTestWhereInputSchema.optional(),
  orderBy: z.union([ OrganizationFavoriteTestOrderByWithRelationInputSchema.array(),OrganizationFavoriteTestOrderByWithRelationInputSchema ]).optional(),
  cursor: OrganizationFavoriteTestWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ OrganizationFavoriteTestScalarFieldEnumSchema,OrganizationFavoriteTestScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const OrganizationFavoriteTestFindFirstOrThrowArgsSchema: z.ZodType<Prisma.OrganizationFavoriteTestFindFirstOrThrowArgs> = z.object({
  select: OrganizationFavoriteTestSelectSchema.optional(),
  include: OrganizationFavoriteTestIncludeSchema.optional(),
  where: OrganizationFavoriteTestWhereInputSchema.optional(),
  orderBy: z.union([ OrganizationFavoriteTestOrderByWithRelationInputSchema.array(),OrganizationFavoriteTestOrderByWithRelationInputSchema ]).optional(),
  cursor: OrganizationFavoriteTestWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ OrganizationFavoriteTestScalarFieldEnumSchema,OrganizationFavoriteTestScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const OrganizationFavoriteTestFindManyArgsSchema: z.ZodType<Prisma.OrganizationFavoriteTestFindManyArgs> = z.object({
  select: OrganizationFavoriteTestSelectSchema.optional(),
  include: OrganizationFavoriteTestIncludeSchema.optional(),
  where: OrganizationFavoriteTestWhereInputSchema.optional(),
  orderBy: z.union([ OrganizationFavoriteTestOrderByWithRelationInputSchema.array(),OrganizationFavoriteTestOrderByWithRelationInputSchema ]).optional(),
  cursor: OrganizationFavoriteTestWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ OrganizationFavoriteTestScalarFieldEnumSchema,OrganizationFavoriteTestScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const OrganizationFavoriteTestAggregateArgsSchema: z.ZodType<Prisma.OrganizationFavoriteTestAggregateArgs> = z.object({
  where: OrganizationFavoriteTestWhereInputSchema.optional(),
  orderBy: z.union([ OrganizationFavoriteTestOrderByWithRelationInputSchema.array(),OrganizationFavoriteTestOrderByWithRelationInputSchema ]).optional(),
  cursor: OrganizationFavoriteTestWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const OrganizationFavoriteTestGroupByArgsSchema: z.ZodType<Prisma.OrganizationFavoriteTestGroupByArgs> = z.object({
  where: OrganizationFavoriteTestWhereInputSchema.optional(),
  orderBy: z.union([ OrganizationFavoriteTestOrderByWithAggregationInputSchema.array(),OrganizationFavoriteTestOrderByWithAggregationInputSchema ]).optional(),
  by: OrganizationFavoriteTestScalarFieldEnumSchema.array(),
  having: OrganizationFavoriteTestScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const OrganizationFavoriteTestFindUniqueArgsSchema: z.ZodType<Prisma.OrganizationFavoriteTestFindUniqueArgs> = z.object({
  select: OrganizationFavoriteTestSelectSchema.optional(),
  include: OrganizationFavoriteTestIncludeSchema.optional(),
  where: OrganizationFavoriteTestWhereUniqueInputSchema,
}).strict() ;

export const OrganizationFavoriteTestFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.OrganizationFavoriteTestFindUniqueOrThrowArgs> = z.object({
  select: OrganizationFavoriteTestSelectSchema.optional(),
  include: OrganizationFavoriteTestIncludeSchema.optional(),
  where: OrganizationFavoriteTestWhereUniqueInputSchema,
}).strict() ;

export const PatientFindFirstArgsSchema: z.ZodType<Prisma.PatientFindFirstArgs> = z.object({
  select: PatientSelectSchema.optional(),
  include: PatientIncludeSchema.optional(),
  where: PatientWhereInputSchema.optional(),
  orderBy: z.union([ PatientOrderByWithRelationInputSchema.array(),PatientOrderByWithRelationInputSchema ]).optional(),
  cursor: PatientWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ PatientScalarFieldEnumSchema,PatientScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const PatientFindFirstOrThrowArgsSchema: z.ZodType<Prisma.PatientFindFirstOrThrowArgs> = z.object({
  select: PatientSelectSchema.optional(),
  include: PatientIncludeSchema.optional(),
  where: PatientWhereInputSchema.optional(),
  orderBy: z.union([ PatientOrderByWithRelationInputSchema.array(),PatientOrderByWithRelationInputSchema ]).optional(),
  cursor: PatientWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ PatientScalarFieldEnumSchema,PatientScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const PatientFindManyArgsSchema: z.ZodType<Prisma.PatientFindManyArgs> = z.object({
  select: PatientSelectSchema.optional(),
  include: PatientIncludeSchema.optional(),
  where: PatientWhereInputSchema.optional(),
  orderBy: z.union([ PatientOrderByWithRelationInputSchema.array(),PatientOrderByWithRelationInputSchema ]).optional(),
  cursor: PatientWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ PatientScalarFieldEnumSchema,PatientScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const PatientAggregateArgsSchema: z.ZodType<Prisma.PatientAggregateArgs> = z.object({
  where: PatientWhereInputSchema.optional(),
  orderBy: z.union([ PatientOrderByWithRelationInputSchema.array(),PatientOrderByWithRelationInputSchema ]).optional(),
  cursor: PatientWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const PatientGroupByArgsSchema: z.ZodType<Prisma.PatientGroupByArgs> = z.object({
  where: PatientWhereInputSchema.optional(),
  orderBy: z.union([ PatientOrderByWithAggregationInputSchema.array(),PatientOrderByWithAggregationInputSchema ]).optional(),
  by: PatientScalarFieldEnumSchema.array(),
  having: PatientScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const PatientFindUniqueArgsSchema: z.ZodType<Prisma.PatientFindUniqueArgs> = z.object({
  select: PatientSelectSchema.optional(),
  include: PatientIncludeSchema.optional(),
  where: PatientWhereUniqueInputSchema,
}).strict() ;

export const PatientFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.PatientFindUniqueOrThrowArgs> = z.object({
  select: PatientSelectSchema.optional(),
  include: PatientIncludeSchema.optional(),
  where: PatientWhereUniqueInputSchema,
}).strict() ;

export const PatientOrganizationFindFirstArgsSchema: z.ZodType<Prisma.PatientOrganizationFindFirstArgs> = z.object({
  select: PatientOrganizationSelectSchema.optional(),
  include: PatientOrganizationIncludeSchema.optional(),
  where: PatientOrganizationWhereInputSchema.optional(),
  orderBy: z.union([ PatientOrganizationOrderByWithRelationInputSchema.array(),PatientOrganizationOrderByWithRelationInputSchema ]).optional(),
  cursor: PatientOrganizationWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ PatientOrganizationScalarFieldEnumSchema,PatientOrganizationScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const PatientOrganizationFindFirstOrThrowArgsSchema: z.ZodType<Prisma.PatientOrganizationFindFirstOrThrowArgs> = z.object({
  select: PatientOrganizationSelectSchema.optional(),
  include: PatientOrganizationIncludeSchema.optional(),
  where: PatientOrganizationWhereInputSchema.optional(),
  orderBy: z.union([ PatientOrganizationOrderByWithRelationInputSchema.array(),PatientOrganizationOrderByWithRelationInputSchema ]).optional(),
  cursor: PatientOrganizationWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ PatientOrganizationScalarFieldEnumSchema,PatientOrganizationScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const PatientOrganizationFindManyArgsSchema: z.ZodType<Prisma.PatientOrganizationFindManyArgs> = z.object({
  select: PatientOrganizationSelectSchema.optional(),
  include: PatientOrganizationIncludeSchema.optional(),
  where: PatientOrganizationWhereInputSchema.optional(),
  orderBy: z.union([ PatientOrganizationOrderByWithRelationInputSchema.array(),PatientOrganizationOrderByWithRelationInputSchema ]).optional(),
  cursor: PatientOrganizationWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ PatientOrganizationScalarFieldEnumSchema,PatientOrganizationScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const PatientOrganizationAggregateArgsSchema: z.ZodType<Prisma.PatientOrganizationAggregateArgs> = z.object({
  where: PatientOrganizationWhereInputSchema.optional(),
  orderBy: z.union([ PatientOrganizationOrderByWithRelationInputSchema.array(),PatientOrganizationOrderByWithRelationInputSchema ]).optional(),
  cursor: PatientOrganizationWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const PatientOrganizationGroupByArgsSchema: z.ZodType<Prisma.PatientOrganizationGroupByArgs> = z.object({
  where: PatientOrganizationWhereInputSchema.optional(),
  orderBy: z.union([ PatientOrganizationOrderByWithAggregationInputSchema.array(),PatientOrganizationOrderByWithAggregationInputSchema ]).optional(),
  by: PatientOrganizationScalarFieldEnumSchema.array(),
  having: PatientOrganizationScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const PatientOrganizationFindUniqueArgsSchema: z.ZodType<Prisma.PatientOrganizationFindUniqueArgs> = z.object({
  select: PatientOrganizationSelectSchema.optional(),
  include: PatientOrganizationIncludeSchema.optional(),
  where: PatientOrganizationWhereUniqueInputSchema,
}).strict() ;

export const PatientOrganizationFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.PatientOrganizationFindUniqueOrThrowArgs> = z.object({
  select: PatientOrganizationSelectSchema.optional(),
  include: PatientOrganizationIncludeSchema.optional(),
  where: PatientOrganizationWhereUniqueInputSchema,
}).strict() ;

export const PostFindFirstArgsSchema: z.ZodType<Prisma.PostFindFirstArgs> = z.object({
  select: PostSelectSchema.optional(),
  where: PostWhereInputSchema.optional(),
  orderBy: z.union([ PostOrderByWithRelationInputSchema.array(),PostOrderByWithRelationInputSchema ]).optional(),
  cursor: PostWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ PostScalarFieldEnumSchema,PostScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const PostFindFirstOrThrowArgsSchema: z.ZodType<Prisma.PostFindFirstOrThrowArgs> = z.object({
  select: PostSelectSchema.optional(),
  where: PostWhereInputSchema.optional(),
  orderBy: z.union([ PostOrderByWithRelationInputSchema.array(),PostOrderByWithRelationInputSchema ]).optional(),
  cursor: PostWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ PostScalarFieldEnumSchema,PostScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const PostFindManyArgsSchema: z.ZodType<Prisma.PostFindManyArgs> = z.object({
  select: PostSelectSchema.optional(),
  where: PostWhereInputSchema.optional(),
  orderBy: z.union([ PostOrderByWithRelationInputSchema.array(),PostOrderByWithRelationInputSchema ]).optional(),
  cursor: PostWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ PostScalarFieldEnumSchema,PostScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const PostAggregateArgsSchema: z.ZodType<Prisma.PostAggregateArgs> = z.object({
  where: PostWhereInputSchema.optional(),
  orderBy: z.union([ PostOrderByWithRelationInputSchema.array(),PostOrderByWithRelationInputSchema ]).optional(),
  cursor: PostWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const PostGroupByArgsSchema: z.ZodType<Prisma.PostGroupByArgs> = z.object({
  where: PostWhereInputSchema.optional(),
  orderBy: z.union([ PostOrderByWithAggregationInputSchema.array(),PostOrderByWithAggregationInputSchema ]).optional(),
  by: PostScalarFieldEnumSchema.array(),
  having: PostScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const PostFindUniqueArgsSchema: z.ZodType<Prisma.PostFindUniqueArgs> = z.object({
  select: PostSelectSchema.optional(),
  where: PostWhereUniqueInputSchema,
}).strict() ;

export const PostFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.PostFindUniqueOrThrowArgs> = z.object({
  select: PostSelectSchema.optional(),
  where: PostWhereUniqueInputSchema,
}).strict() ;

export const ProviderFindFirstArgsSchema: z.ZodType<Prisma.ProviderFindFirstArgs> = z.object({
  select: ProviderSelectSchema.optional(),
  include: ProviderIncludeSchema.optional(),
  where: ProviderWhereInputSchema.optional(),
  orderBy: z.union([ ProviderOrderByWithRelationInputSchema.array(),ProviderOrderByWithRelationInputSchema ]).optional(),
  cursor: ProviderWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ ProviderScalarFieldEnumSchema,ProviderScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const ProviderFindFirstOrThrowArgsSchema: z.ZodType<Prisma.ProviderFindFirstOrThrowArgs> = z.object({
  select: ProviderSelectSchema.optional(),
  include: ProviderIncludeSchema.optional(),
  where: ProviderWhereInputSchema.optional(),
  orderBy: z.union([ ProviderOrderByWithRelationInputSchema.array(),ProviderOrderByWithRelationInputSchema ]).optional(),
  cursor: ProviderWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ ProviderScalarFieldEnumSchema,ProviderScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const ProviderFindManyArgsSchema: z.ZodType<Prisma.ProviderFindManyArgs> = z.object({
  select: ProviderSelectSchema.optional(),
  include: ProviderIncludeSchema.optional(),
  where: ProviderWhereInputSchema.optional(),
  orderBy: z.union([ ProviderOrderByWithRelationInputSchema.array(),ProviderOrderByWithRelationInputSchema ]).optional(),
  cursor: ProviderWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ ProviderScalarFieldEnumSchema,ProviderScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const ProviderAggregateArgsSchema: z.ZodType<Prisma.ProviderAggregateArgs> = z.object({
  where: ProviderWhereInputSchema.optional(),
  orderBy: z.union([ ProviderOrderByWithRelationInputSchema.array(),ProviderOrderByWithRelationInputSchema ]).optional(),
  cursor: ProviderWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const ProviderGroupByArgsSchema: z.ZodType<Prisma.ProviderGroupByArgs> = z.object({
  where: ProviderWhereInputSchema.optional(),
  orderBy: z.union([ ProviderOrderByWithAggregationInputSchema.array(),ProviderOrderByWithAggregationInputSchema ]).optional(),
  by: ProviderScalarFieldEnumSchema.array(),
  having: ProviderScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const ProviderFindUniqueArgsSchema: z.ZodType<Prisma.ProviderFindUniqueArgs> = z.object({
  select: ProviderSelectSchema.optional(),
  include: ProviderIncludeSchema.optional(),
  where: ProviderWhereUniqueInputSchema,
}).strict() ;

export const ProviderFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.ProviderFindUniqueOrThrowArgs> = z.object({
  select: ProviderSelectSchema.optional(),
  include: ProviderIncludeSchema.optional(),
  where: ProviderWhereUniqueInputSchema,
}).strict() ;

export const ProviderEducationFindFirstArgsSchema: z.ZodType<Prisma.ProviderEducationFindFirstArgs> = z.object({
  select: ProviderEducationSelectSchema.optional(),
  include: ProviderEducationIncludeSchema.optional(),
  where: ProviderEducationWhereInputSchema.optional(),
  orderBy: z.union([ ProviderEducationOrderByWithRelationInputSchema.array(),ProviderEducationOrderByWithRelationInputSchema ]).optional(),
  cursor: ProviderEducationWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ ProviderEducationScalarFieldEnumSchema,ProviderEducationScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const ProviderEducationFindFirstOrThrowArgsSchema: z.ZodType<Prisma.ProviderEducationFindFirstOrThrowArgs> = z.object({
  select: ProviderEducationSelectSchema.optional(),
  include: ProviderEducationIncludeSchema.optional(),
  where: ProviderEducationWhereInputSchema.optional(),
  orderBy: z.union([ ProviderEducationOrderByWithRelationInputSchema.array(),ProviderEducationOrderByWithRelationInputSchema ]).optional(),
  cursor: ProviderEducationWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ ProviderEducationScalarFieldEnumSchema,ProviderEducationScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const ProviderEducationFindManyArgsSchema: z.ZodType<Prisma.ProviderEducationFindManyArgs> = z.object({
  select: ProviderEducationSelectSchema.optional(),
  include: ProviderEducationIncludeSchema.optional(),
  where: ProviderEducationWhereInputSchema.optional(),
  orderBy: z.union([ ProviderEducationOrderByWithRelationInputSchema.array(),ProviderEducationOrderByWithRelationInputSchema ]).optional(),
  cursor: ProviderEducationWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ ProviderEducationScalarFieldEnumSchema,ProviderEducationScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const ProviderEducationAggregateArgsSchema: z.ZodType<Prisma.ProviderEducationAggregateArgs> = z.object({
  where: ProviderEducationWhereInputSchema.optional(),
  orderBy: z.union([ ProviderEducationOrderByWithRelationInputSchema.array(),ProviderEducationOrderByWithRelationInputSchema ]).optional(),
  cursor: ProviderEducationWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const ProviderEducationGroupByArgsSchema: z.ZodType<Prisma.ProviderEducationGroupByArgs> = z.object({
  where: ProviderEducationWhereInputSchema.optional(),
  orderBy: z.union([ ProviderEducationOrderByWithAggregationInputSchema.array(),ProviderEducationOrderByWithAggregationInputSchema ]).optional(),
  by: ProviderEducationScalarFieldEnumSchema.array(),
  having: ProviderEducationScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const ProviderEducationFindUniqueArgsSchema: z.ZodType<Prisma.ProviderEducationFindUniqueArgs> = z.object({
  select: ProviderEducationSelectSchema.optional(),
  include: ProviderEducationIncludeSchema.optional(),
  where: ProviderEducationWhereUniqueInputSchema,
}).strict() ;

export const ProviderEducationFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.ProviderEducationFindUniqueOrThrowArgs> = z.object({
  select: ProviderEducationSelectSchema.optional(),
  include: ProviderEducationIncludeSchema.optional(),
  where: ProviderEducationWhereUniqueInputSchema,
}).strict() ;

export const ProviderFavoriteTestFindFirstArgsSchema: z.ZodType<Prisma.ProviderFavoriteTestFindFirstArgs> = z.object({
  select: ProviderFavoriteTestSelectSchema.optional(),
  include: ProviderFavoriteTestIncludeSchema.optional(),
  where: ProviderFavoriteTestWhereInputSchema.optional(),
  orderBy: z.union([ ProviderFavoriteTestOrderByWithRelationInputSchema.array(),ProviderFavoriteTestOrderByWithRelationInputSchema ]).optional(),
  cursor: ProviderFavoriteTestWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ ProviderFavoriteTestScalarFieldEnumSchema,ProviderFavoriteTestScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const ProviderFavoriteTestFindFirstOrThrowArgsSchema: z.ZodType<Prisma.ProviderFavoriteTestFindFirstOrThrowArgs> = z.object({
  select: ProviderFavoriteTestSelectSchema.optional(),
  include: ProviderFavoriteTestIncludeSchema.optional(),
  where: ProviderFavoriteTestWhereInputSchema.optional(),
  orderBy: z.union([ ProviderFavoriteTestOrderByWithRelationInputSchema.array(),ProviderFavoriteTestOrderByWithRelationInputSchema ]).optional(),
  cursor: ProviderFavoriteTestWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ ProviderFavoriteTestScalarFieldEnumSchema,ProviderFavoriteTestScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const ProviderFavoriteTestFindManyArgsSchema: z.ZodType<Prisma.ProviderFavoriteTestFindManyArgs> = z.object({
  select: ProviderFavoriteTestSelectSchema.optional(),
  include: ProviderFavoriteTestIncludeSchema.optional(),
  where: ProviderFavoriteTestWhereInputSchema.optional(),
  orderBy: z.union([ ProviderFavoriteTestOrderByWithRelationInputSchema.array(),ProviderFavoriteTestOrderByWithRelationInputSchema ]).optional(),
  cursor: ProviderFavoriteTestWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ ProviderFavoriteTestScalarFieldEnumSchema,ProviderFavoriteTestScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const ProviderFavoriteTestAggregateArgsSchema: z.ZodType<Prisma.ProviderFavoriteTestAggregateArgs> = z.object({
  where: ProviderFavoriteTestWhereInputSchema.optional(),
  orderBy: z.union([ ProviderFavoriteTestOrderByWithRelationInputSchema.array(),ProviderFavoriteTestOrderByWithRelationInputSchema ]).optional(),
  cursor: ProviderFavoriteTestWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const ProviderFavoriteTestGroupByArgsSchema: z.ZodType<Prisma.ProviderFavoriteTestGroupByArgs> = z.object({
  where: ProviderFavoriteTestWhereInputSchema.optional(),
  orderBy: z.union([ ProviderFavoriteTestOrderByWithAggregationInputSchema.array(),ProviderFavoriteTestOrderByWithAggregationInputSchema ]).optional(),
  by: ProviderFavoriteTestScalarFieldEnumSchema.array(),
  having: ProviderFavoriteTestScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const ProviderFavoriteTestFindUniqueArgsSchema: z.ZodType<Prisma.ProviderFavoriteTestFindUniqueArgs> = z.object({
  select: ProviderFavoriteTestSelectSchema.optional(),
  include: ProviderFavoriteTestIncludeSchema.optional(),
  where: ProviderFavoriteTestWhereUniqueInputSchema,
}).strict() ;

export const ProviderFavoriteTestFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.ProviderFavoriteTestFindUniqueOrThrowArgs> = z.object({
  select: ProviderFavoriteTestSelectSchema.optional(),
  include: ProviderFavoriteTestIncludeSchema.optional(),
  where: ProviderFavoriteTestWhereUniqueInputSchema,
}).strict() ;

export const ProviderOrganizationFindFirstArgsSchema: z.ZodType<Prisma.ProviderOrganizationFindFirstArgs> = z.object({
  select: ProviderOrganizationSelectSchema.optional(),
  include: ProviderOrganizationIncludeSchema.optional(),
  where: ProviderOrganizationWhereInputSchema.optional(),
  orderBy: z.union([ ProviderOrganizationOrderByWithRelationInputSchema.array(),ProviderOrganizationOrderByWithRelationInputSchema ]).optional(),
  cursor: ProviderOrganizationWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ ProviderOrganizationScalarFieldEnumSchema,ProviderOrganizationScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const ProviderOrganizationFindFirstOrThrowArgsSchema: z.ZodType<Prisma.ProviderOrganizationFindFirstOrThrowArgs> = z.object({
  select: ProviderOrganizationSelectSchema.optional(),
  include: ProviderOrganizationIncludeSchema.optional(),
  where: ProviderOrganizationWhereInputSchema.optional(),
  orderBy: z.union([ ProviderOrganizationOrderByWithRelationInputSchema.array(),ProviderOrganizationOrderByWithRelationInputSchema ]).optional(),
  cursor: ProviderOrganizationWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ ProviderOrganizationScalarFieldEnumSchema,ProviderOrganizationScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const ProviderOrganizationFindManyArgsSchema: z.ZodType<Prisma.ProviderOrganizationFindManyArgs> = z.object({
  select: ProviderOrganizationSelectSchema.optional(),
  include: ProviderOrganizationIncludeSchema.optional(),
  where: ProviderOrganizationWhereInputSchema.optional(),
  orderBy: z.union([ ProviderOrganizationOrderByWithRelationInputSchema.array(),ProviderOrganizationOrderByWithRelationInputSchema ]).optional(),
  cursor: ProviderOrganizationWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ ProviderOrganizationScalarFieldEnumSchema,ProviderOrganizationScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const ProviderOrganizationAggregateArgsSchema: z.ZodType<Prisma.ProviderOrganizationAggregateArgs> = z.object({
  where: ProviderOrganizationWhereInputSchema.optional(),
  orderBy: z.union([ ProviderOrganizationOrderByWithRelationInputSchema.array(),ProviderOrganizationOrderByWithRelationInputSchema ]).optional(),
  cursor: ProviderOrganizationWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const ProviderOrganizationGroupByArgsSchema: z.ZodType<Prisma.ProviderOrganizationGroupByArgs> = z.object({
  where: ProviderOrganizationWhereInputSchema.optional(),
  orderBy: z.union([ ProviderOrganizationOrderByWithAggregationInputSchema.array(),ProviderOrganizationOrderByWithAggregationInputSchema ]).optional(),
  by: ProviderOrganizationScalarFieldEnumSchema.array(),
  having: ProviderOrganizationScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const ProviderOrganizationFindUniqueArgsSchema: z.ZodType<Prisma.ProviderOrganizationFindUniqueArgs> = z.object({
  select: ProviderOrganizationSelectSchema.optional(),
  include: ProviderOrganizationIncludeSchema.optional(),
  where: ProviderOrganizationWhereUniqueInputSchema,
}).strict() ;

export const ProviderOrganizationFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.ProviderOrganizationFindUniqueOrThrowArgs> = z.object({
  select: ProviderOrganizationSelectSchema.optional(),
  include: ProviderOrganizationIncludeSchema.optional(),
  where: ProviderOrganizationWhereUniqueInputSchema,
}).strict() ;

export const SessionFindFirstArgsSchema: z.ZodType<Prisma.SessionFindFirstArgs> = z.object({
  select: SessionSelectSchema.optional(),
  include: SessionIncludeSchema.optional(),
  where: SessionWhereInputSchema.optional(),
  orderBy: z.union([ SessionOrderByWithRelationInputSchema.array(),SessionOrderByWithRelationInputSchema ]).optional(),
  cursor: SessionWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ SessionScalarFieldEnumSchema,SessionScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const SessionFindFirstOrThrowArgsSchema: z.ZodType<Prisma.SessionFindFirstOrThrowArgs> = z.object({
  select: SessionSelectSchema.optional(),
  include: SessionIncludeSchema.optional(),
  where: SessionWhereInputSchema.optional(),
  orderBy: z.union([ SessionOrderByWithRelationInputSchema.array(),SessionOrderByWithRelationInputSchema ]).optional(),
  cursor: SessionWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ SessionScalarFieldEnumSchema,SessionScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const SessionFindManyArgsSchema: z.ZodType<Prisma.SessionFindManyArgs> = z.object({
  select: SessionSelectSchema.optional(),
  include: SessionIncludeSchema.optional(),
  where: SessionWhereInputSchema.optional(),
  orderBy: z.union([ SessionOrderByWithRelationInputSchema.array(),SessionOrderByWithRelationInputSchema ]).optional(),
  cursor: SessionWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ SessionScalarFieldEnumSchema,SessionScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const SessionAggregateArgsSchema: z.ZodType<Prisma.SessionAggregateArgs> = z.object({
  where: SessionWhereInputSchema.optional(),
  orderBy: z.union([ SessionOrderByWithRelationInputSchema.array(),SessionOrderByWithRelationInputSchema ]).optional(),
  cursor: SessionWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const SessionGroupByArgsSchema: z.ZodType<Prisma.SessionGroupByArgs> = z.object({
  where: SessionWhereInputSchema.optional(),
  orderBy: z.union([ SessionOrderByWithAggregationInputSchema.array(),SessionOrderByWithAggregationInputSchema ]).optional(),
  by: SessionScalarFieldEnumSchema.array(),
  having: SessionScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const SessionFindUniqueArgsSchema: z.ZodType<Prisma.SessionFindUniqueArgs> = z.object({
  select: SessionSelectSchema.optional(),
  include: SessionIncludeSchema.optional(),
  where: SessionWhereUniqueInputSchema,
}).strict() ;

export const SessionFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.SessionFindUniqueOrThrowArgs> = z.object({
  select: SessionSelectSchema.optional(),
  include: SessionIncludeSchema.optional(),
  where: SessionWhereUniqueInputSchema,
}).strict() ;

export const SponsorFindFirstArgsSchema: z.ZodType<Prisma.SponsorFindFirstArgs> = z.object({
  select: SponsorSelectSchema.optional(),
  include: SponsorIncludeSchema.optional(),
  where: SponsorWhereInputSchema.optional(),
  orderBy: z.union([ SponsorOrderByWithRelationInputSchema.array(),SponsorOrderByWithRelationInputSchema ]).optional(),
  cursor: SponsorWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ SponsorScalarFieldEnumSchema,SponsorScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const SponsorFindFirstOrThrowArgsSchema: z.ZodType<Prisma.SponsorFindFirstOrThrowArgs> = z.object({
  select: SponsorSelectSchema.optional(),
  include: SponsorIncludeSchema.optional(),
  where: SponsorWhereInputSchema.optional(),
  orderBy: z.union([ SponsorOrderByWithRelationInputSchema.array(),SponsorOrderByWithRelationInputSchema ]).optional(),
  cursor: SponsorWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ SponsorScalarFieldEnumSchema,SponsorScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const SponsorFindManyArgsSchema: z.ZodType<Prisma.SponsorFindManyArgs> = z.object({
  select: SponsorSelectSchema.optional(),
  include: SponsorIncludeSchema.optional(),
  where: SponsorWhereInputSchema.optional(),
  orderBy: z.union([ SponsorOrderByWithRelationInputSchema.array(),SponsorOrderByWithRelationInputSchema ]).optional(),
  cursor: SponsorWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ SponsorScalarFieldEnumSchema,SponsorScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const SponsorAggregateArgsSchema: z.ZodType<Prisma.SponsorAggregateArgs> = z.object({
  where: SponsorWhereInputSchema.optional(),
  orderBy: z.union([ SponsorOrderByWithRelationInputSchema.array(),SponsorOrderByWithRelationInputSchema ]).optional(),
  cursor: SponsorWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const SponsorGroupByArgsSchema: z.ZodType<Prisma.SponsorGroupByArgs> = z.object({
  where: SponsorWhereInputSchema.optional(),
  orderBy: z.union([ SponsorOrderByWithAggregationInputSchema.array(),SponsorOrderByWithAggregationInputSchema ]).optional(),
  by: SponsorScalarFieldEnumSchema.array(),
  having: SponsorScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const SponsorFindUniqueArgsSchema: z.ZodType<Prisma.SponsorFindUniqueArgs> = z.object({
  select: SponsorSelectSchema.optional(),
  include: SponsorIncludeSchema.optional(),
  where: SponsorWhereUniqueInputSchema,
}).strict() ;

export const SponsorFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.SponsorFindUniqueOrThrowArgs> = z.object({
  select: SponsorSelectSchema.optional(),
  include: SponsorIncludeSchema.optional(),
  where: SponsorWhereUniqueInputSchema,
}).strict() ;

export const SponsoredProgramFindFirstArgsSchema: z.ZodType<Prisma.SponsoredProgramFindFirstArgs> = z.object({
  select: SponsoredProgramSelectSchema.optional(),
  include: SponsoredProgramIncludeSchema.optional(),
  where: SponsoredProgramWhereInputSchema.optional(),
  orderBy: z.union([ SponsoredProgramOrderByWithRelationInputSchema.array(),SponsoredProgramOrderByWithRelationInputSchema ]).optional(),
  cursor: SponsoredProgramWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ SponsoredProgramScalarFieldEnumSchema,SponsoredProgramScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const SponsoredProgramFindFirstOrThrowArgsSchema: z.ZodType<Prisma.SponsoredProgramFindFirstOrThrowArgs> = z.object({
  select: SponsoredProgramSelectSchema.optional(),
  include: SponsoredProgramIncludeSchema.optional(),
  where: SponsoredProgramWhereInputSchema.optional(),
  orderBy: z.union([ SponsoredProgramOrderByWithRelationInputSchema.array(),SponsoredProgramOrderByWithRelationInputSchema ]).optional(),
  cursor: SponsoredProgramWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ SponsoredProgramScalarFieldEnumSchema,SponsoredProgramScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const SponsoredProgramFindManyArgsSchema: z.ZodType<Prisma.SponsoredProgramFindManyArgs> = z.object({
  select: SponsoredProgramSelectSchema.optional(),
  include: SponsoredProgramIncludeSchema.optional(),
  where: SponsoredProgramWhereInputSchema.optional(),
  orderBy: z.union([ SponsoredProgramOrderByWithRelationInputSchema.array(),SponsoredProgramOrderByWithRelationInputSchema ]).optional(),
  cursor: SponsoredProgramWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ SponsoredProgramScalarFieldEnumSchema,SponsoredProgramScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const SponsoredProgramAggregateArgsSchema: z.ZodType<Prisma.SponsoredProgramAggregateArgs> = z.object({
  where: SponsoredProgramWhereInputSchema.optional(),
  orderBy: z.union([ SponsoredProgramOrderByWithRelationInputSchema.array(),SponsoredProgramOrderByWithRelationInputSchema ]).optional(),
  cursor: SponsoredProgramWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const SponsoredProgramGroupByArgsSchema: z.ZodType<Prisma.SponsoredProgramGroupByArgs> = z.object({
  where: SponsoredProgramWhereInputSchema.optional(),
  orderBy: z.union([ SponsoredProgramOrderByWithAggregationInputSchema.array(),SponsoredProgramOrderByWithAggregationInputSchema ]).optional(),
  by: SponsoredProgramScalarFieldEnumSchema.array(),
  having: SponsoredProgramScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const SponsoredProgramFindUniqueArgsSchema: z.ZodType<Prisma.SponsoredProgramFindUniqueArgs> = z.object({
  select: SponsoredProgramSelectSchema.optional(),
  include: SponsoredProgramIncludeSchema.optional(),
  where: SponsoredProgramWhereUniqueInputSchema,
}).strict() ;

export const SponsoredProgramFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.SponsoredProgramFindUniqueOrThrowArgs> = z.object({
  select: SponsoredProgramSelectSchema.optional(),
  include: SponsoredProgramIncludeSchema.optional(),
  where: SponsoredProgramWhereUniqueInputSchema,
}).strict() ;

export const SponsoredTestFindFirstArgsSchema: z.ZodType<Prisma.SponsoredTestFindFirstArgs> = z.object({
  select: SponsoredTestSelectSchema.optional(),
  include: SponsoredTestIncludeSchema.optional(),
  where: SponsoredTestWhereInputSchema.optional(),
  orderBy: z.union([ SponsoredTestOrderByWithRelationInputSchema.array(),SponsoredTestOrderByWithRelationInputSchema ]).optional(),
  cursor: SponsoredTestWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ SponsoredTestScalarFieldEnumSchema,SponsoredTestScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const SponsoredTestFindFirstOrThrowArgsSchema: z.ZodType<Prisma.SponsoredTestFindFirstOrThrowArgs> = z.object({
  select: SponsoredTestSelectSchema.optional(),
  include: SponsoredTestIncludeSchema.optional(),
  where: SponsoredTestWhereInputSchema.optional(),
  orderBy: z.union([ SponsoredTestOrderByWithRelationInputSchema.array(),SponsoredTestOrderByWithRelationInputSchema ]).optional(),
  cursor: SponsoredTestWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ SponsoredTestScalarFieldEnumSchema,SponsoredTestScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const SponsoredTestFindManyArgsSchema: z.ZodType<Prisma.SponsoredTestFindManyArgs> = z.object({
  select: SponsoredTestSelectSchema.optional(),
  include: SponsoredTestIncludeSchema.optional(),
  where: SponsoredTestWhereInputSchema.optional(),
  orderBy: z.union([ SponsoredTestOrderByWithRelationInputSchema.array(),SponsoredTestOrderByWithRelationInputSchema ]).optional(),
  cursor: SponsoredTestWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ SponsoredTestScalarFieldEnumSchema,SponsoredTestScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const SponsoredTestAggregateArgsSchema: z.ZodType<Prisma.SponsoredTestAggregateArgs> = z.object({
  where: SponsoredTestWhereInputSchema.optional(),
  orderBy: z.union([ SponsoredTestOrderByWithRelationInputSchema.array(),SponsoredTestOrderByWithRelationInputSchema ]).optional(),
  cursor: SponsoredTestWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const SponsoredTestGroupByArgsSchema: z.ZodType<Prisma.SponsoredTestGroupByArgs> = z.object({
  where: SponsoredTestWhereInputSchema.optional(),
  orderBy: z.union([ SponsoredTestOrderByWithAggregationInputSchema.array(),SponsoredTestOrderByWithAggregationInputSchema ]).optional(),
  by: SponsoredTestScalarFieldEnumSchema.array(),
  having: SponsoredTestScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const SponsoredTestFindUniqueArgsSchema: z.ZodType<Prisma.SponsoredTestFindUniqueArgs> = z.object({
  select: SponsoredTestSelectSchema.optional(),
  include: SponsoredTestIncludeSchema.optional(),
  where: SponsoredTestWhereUniqueInputSchema,
}).strict() ;

export const SponsoredTestFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.SponsoredTestFindUniqueOrThrowArgs> = z.object({
  select: SponsoredTestSelectSchema.optional(),
  include: SponsoredTestIncludeSchema.optional(),
  where: SponsoredTestWhereUniqueInputSchema,
}).strict() ;

export const TestBiomarkerFindFirstArgsSchema: z.ZodType<Prisma.TestBiomarkerFindFirstArgs> = z.object({
  select: TestBiomarkerSelectSchema.optional(),
  include: TestBiomarkerIncludeSchema.optional(),
  where: TestBiomarkerWhereInputSchema.optional(),
  orderBy: z.union([ TestBiomarkerOrderByWithRelationInputSchema.array(),TestBiomarkerOrderByWithRelationInputSchema ]).optional(),
  cursor: TestBiomarkerWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ TestBiomarkerScalarFieldEnumSchema,TestBiomarkerScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const TestBiomarkerFindFirstOrThrowArgsSchema: z.ZodType<Prisma.TestBiomarkerFindFirstOrThrowArgs> = z.object({
  select: TestBiomarkerSelectSchema.optional(),
  include: TestBiomarkerIncludeSchema.optional(),
  where: TestBiomarkerWhereInputSchema.optional(),
  orderBy: z.union([ TestBiomarkerOrderByWithRelationInputSchema.array(),TestBiomarkerOrderByWithRelationInputSchema ]).optional(),
  cursor: TestBiomarkerWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ TestBiomarkerScalarFieldEnumSchema,TestBiomarkerScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const TestBiomarkerFindManyArgsSchema: z.ZodType<Prisma.TestBiomarkerFindManyArgs> = z.object({
  select: TestBiomarkerSelectSchema.optional(),
  include: TestBiomarkerIncludeSchema.optional(),
  where: TestBiomarkerWhereInputSchema.optional(),
  orderBy: z.union([ TestBiomarkerOrderByWithRelationInputSchema.array(),TestBiomarkerOrderByWithRelationInputSchema ]).optional(),
  cursor: TestBiomarkerWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ TestBiomarkerScalarFieldEnumSchema,TestBiomarkerScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const TestBiomarkerAggregateArgsSchema: z.ZodType<Prisma.TestBiomarkerAggregateArgs> = z.object({
  where: TestBiomarkerWhereInputSchema.optional(),
  orderBy: z.union([ TestBiomarkerOrderByWithRelationInputSchema.array(),TestBiomarkerOrderByWithRelationInputSchema ]).optional(),
  cursor: TestBiomarkerWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const TestBiomarkerGroupByArgsSchema: z.ZodType<Prisma.TestBiomarkerGroupByArgs> = z.object({
  where: TestBiomarkerWhereInputSchema.optional(),
  orderBy: z.union([ TestBiomarkerOrderByWithAggregationInputSchema.array(),TestBiomarkerOrderByWithAggregationInputSchema ]).optional(),
  by: TestBiomarkerScalarFieldEnumSchema.array(),
  having: TestBiomarkerScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const TestBiomarkerFindUniqueArgsSchema: z.ZodType<Prisma.TestBiomarkerFindUniqueArgs> = z.object({
  select: TestBiomarkerSelectSchema.optional(),
  include: TestBiomarkerIncludeSchema.optional(),
  where: TestBiomarkerWhereUniqueInputSchema,
}).strict() ;

export const TestBiomarkerFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.TestBiomarkerFindUniqueOrThrowArgs> = z.object({
  select: TestBiomarkerSelectSchema.optional(),
  include: TestBiomarkerIncludeSchema.optional(),
  where: TestBiomarkerWhereUniqueInputSchema,
}).strict() ;

export const TestCatalogFindFirstArgsSchema: z.ZodType<Prisma.TestCatalogFindFirstArgs> = z.object({
  select: TestCatalogSelectSchema.optional(),
  include: TestCatalogIncludeSchema.optional(),
  where: TestCatalogWhereInputSchema.optional(),
  orderBy: z.union([ TestCatalogOrderByWithRelationInputSchema.array(),TestCatalogOrderByWithRelationInputSchema ]).optional(),
  cursor: TestCatalogWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ TestCatalogScalarFieldEnumSchema,TestCatalogScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const TestCatalogFindFirstOrThrowArgsSchema: z.ZodType<Prisma.TestCatalogFindFirstOrThrowArgs> = z.object({
  select: TestCatalogSelectSchema.optional(),
  include: TestCatalogIncludeSchema.optional(),
  where: TestCatalogWhereInputSchema.optional(),
  orderBy: z.union([ TestCatalogOrderByWithRelationInputSchema.array(),TestCatalogOrderByWithRelationInputSchema ]).optional(),
  cursor: TestCatalogWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ TestCatalogScalarFieldEnumSchema,TestCatalogScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const TestCatalogFindManyArgsSchema: z.ZodType<Prisma.TestCatalogFindManyArgs> = z.object({
  select: TestCatalogSelectSchema.optional(),
  include: TestCatalogIncludeSchema.optional(),
  where: TestCatalogWhereInputSchema.optional(),
  orderBy: z.union([ TestCatalogOrderByWithRelationInputSchema.array(),TestCatalogOrderByWithRelationInputSchema ]).optional(),
  cursor: TestCatalogWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ TestCatalogScalarFieldEnumSchema,TestCatalogScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const TestCatalogAggregateArgsSchema: z.ZodType<Prisma.TestCatalogAggregateArgs> = z.object({
  where: TestCatalogWhereInputSchema.optional(),
  orderBy: z.union([ TestCatalogOrderByWithRelationInputSchema.array(),TestCatalogOrderByWithRelationInputSchema ]).optional(),
  cursor: TestCatalogWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const TestCatalogGroupByArgsSchema: z.ZodType<Prisma.TestCatalogGroupByArgs> = z.object({
  where: TestCatalogWhereInputSchema.optional(),
  orderBy: z.union([ TestCatalogOrderByWithAggregationInputSchema.array(),TestCatalogOrderByWithAggregationInputSchema ]).optional(),
  by: TestCatalogScalarFieldEnumSchema.array(),
  having: TestCatalogScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const TestCatalogFindUniqueArgsSchema: z.ZodType<Prisma.TestCatalogFindUniqueArgs> = z.object({
  select: TestCatalogSelectSchema.optional(),
  include: TestCatalogIncludeSchema.optional(),
  where: TestCatalogWhereUniqueInputSchema,
}).strict() ;

export const TestCatalogFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.TestCatalogFindUniqueOrThrowArgs> = z.object({
  select: TestCatalogSelectSchema.optional(),
  include: TestCatalogIncludeSchema.optional(),
  where: TestCatalogWhereUniqueInputSchema,
}).strict() ;

export const TestCptCodeFindFirstArgsSchema: z.ZodType<Prisma.TestCptCodeFindFirstArgs> = z.object({
  select: TestCptCodeSelectSchema.optional(),
  include: TestCptCodeIncludeSchema.optional(),
  where: TestCptCodeWhereInputSchema.optional(),
  orderBy: z.union([ TestCptCodeOrderByWithRelationInputSchema.array(),TestCptCodeOrderByWithRelationInputSchema ]).optional(),
  cursor: TestCptCodeWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ TestCptCodeScalarFieldEnumSchema,TestCptCodeScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const TestCptCodeFindFirstOrThrowArgsSchema: z.ZodType<Prisma.TestCptCodeFindFirstOrThrowArgs> = z.object({
  select: TestCptCodeSelectSchema.optional(),
  include: TestCptCodeIncludeSchema.optional(),
  where: TestCptCodeWhereInputSchema.optional(),
  orderBy: z.union([ TestCptCodeOrderByWithRelationInputSchema.array(),TestCptCodeOrderByWithRelationInputSchema ]).optional(),
  cursor: TestCptCodeWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ TestCptCodeScalarFieldEnumSchema,TestCptCodeScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const TestCptCodeFindManyArgsSchema: z.ZodType<Prisma.TestCptCodeFindManyArgs> = z.object({
  select: TestCptCodeSelectSchema.optional(),
  include: TestCptCodeIncludeSchema.optional(),
  where: TestCptCodeWhereInputSchema.optional(),
  orderBy: z.union([ TestCptCodeOrderByWithRelationInputSchema.array(),TestCptCodeOrderByWithRelationInputSchema ]).optional(),
  cursor: TestCptCodeWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ TestCptCodeScalarFieldEnumSchema,TestCptCodeScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const TestCptCodeAggregateArgsSchema: z.ZodType<Prisma.TestCptCodeAggregateArgs> = z.object({
  where: TestCptCodeWhereInputSchema.optional(),
  orderBy: z.union([ TestCptCodeOrderByWithRelationInputSchema.array(),TestCptCodeOrderByWithRelationInputSchema ]).optional(),
  cursor: TestCptCodeWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const TestCptCodeGroupByArgsSchema: z.ZodType<Prisma.TestCptCodeGroupByArgs> = z.object({
  where: TestCptCodeWhereInputSchema.optional(),
  orderBy: z.union([ TestCptCodeOrderByWithAggregationInputSchema.array(),TestCptCodeOrderByWithAggregationInputSchema ]).optional(),
  by: TestCptCodeScalarFieldEnumSchema.array(),
  having: TestCptCodeScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const TestCptCodeFindUniqueArgsSchema: z.ZodType<Prisma.TestCptCodeFindUniqueArgs> = z.object({
  select: TestCptCodeSelectSchema.optional(),
  include: TestCptCodeIncludeSchema.optional(),
  where: TestCptCodeWhereUniqueInputSchema,
}).strict() ;

export const TestCptCodeFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.TestCptCodeFindUniqueOrThrowArgs> = z.object({
  select: TestCptCodeSelectSchema.optional(),
  include: TestCptCodeIncludeSchema.optional(),
  where: TestCptCodeWhereUniqueInputSchema,
}).strict() ;

export const TestGeneFindFirstArgsSchema: z.ZodType<Prisma.TestGeneFindFirstArgs> = z.object({
  select: TestGeneSelectSchema.optional(),
  include: TestGeneIncludeSchema.optional(),
  where: TestGeneWhereInputSchema.optional(),
  orderBy: z.union([ TestGeneOrderByWithRelationInputSchema.array(),TestGeneOrderByWithRelationInputSchema ]).optional(),
  cursor: TestGeneWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ TestGeneScalarFieldEnumSchema,TestGeneScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const TestGeneFindFirstOrThrowArgsSchema: z.ZodType<Prisma.TestGeneFindFirstOrThrowArgs> = z.object({
  select: TestGeneSelectSchema.optional(),
  include: TestGeneIncludeSchema.optional(),
  where: TestGeneWhereInputSchema.optional(),
  orderBy: z.union([ TestGeneOrderByWithRelationInputSchema.array(),TestGeneOrderByWithRelationInputSchema ]).optional(),
  cursor: TestGeneWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ TestGeneScalarFieldEnumSchema,TestGeneScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const TestGeneFindManyArgsSchema: z.ZodType<Prisma.TestGeneFindManyArgs> = z.object({
  select: TestGeneSelectSchema.optional(),
  include: TestGeneIncludeSchema.optional(),
  where: TestGeneWhereInputSchema.optional(),
  orderBy: z.union([ TestGeneOrderByWithRelationInputSchema.array(),TestGeneOrderByWithRelationInputSchema ]).optional(),
  cursor: TestGeneWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ TestGeneScalarFieldEnumSchema,TestGeneScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const TestGeneAggregateArgsSchema: z.ZodType<Prisma.TestGeneAggregateArgs> = z.object({
  where: TestGeneWhereInputSchema.optional(),
  orderBy: z.union([ TestGeneOrderByWithRelationInputSchema.array(),TestGeneOrderByWithRelationInputSchema ]).optional(),
  cursor: TestGeneWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const TestGeneGroupByArgsSchema: z.ZodType<Prisma.TestGeneGroupByArgs> = z.object({
  where: TestGeneWhereInputSchema.optional(),
  orderBy: z.union([ TestGeneOrderByWithAggregationInputSchema.array(),TestGeneOrderByWithAggregationInputSchema ]).optional(),
  by: TestGeneScalarFieldEnumSchema.array(),
  having: TestGeneScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const TestGeneFindUniqueArgsSchema: z.ZodType<Prisma.TestGeneFindUniqueArgs> = z.object({
  select: TestGeneSelectSchema.optional(),
  include: TestGeneIncludeSchema.optional(),
  where: TestGeneWhereUniqueInputSchema,
}).strict() ;

export const TestGeneFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.TestGeneFindUniqueOrThrowArgs> = z.object({
  select: TestGeneSelectSchema.optional(),
  include: TestGeneIncludeSchema.optional(),
  where: TestGeneWhereUniqueInputSchema,
}).strict() ;

export const TestOrderLoincFindFirstArgsSchema: z.ZodType<Prisma.TestOrderLoincFindFirstArgs> = z.object({
  select: TestOrderLoincSelectSchema.optional(),
  include: TestOrderLoincIncludeSchema.optional(),
  where: TestOrderLoincWhereInputSchema.optional(),
  orderBy: z.union([ TestOrderLoincOrderByWithRelationInputSchema.array(),TestOrderLoincOrderByWithRelationInputSchema ]).optional(),
  cursor: TestOrderLoincWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ TestOrderLoincScalarFieldEnumSchema,TestOrderLoincScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const TestOrderLoincFindFirstOrThrowArgsSchema: z.ZodType<Prisma.TestOrderLoincFindFirstOrThrowArgs> = z.object({
  select: TestOrderLoincSelectSchema.optional(),
  include: TestOrderLoincIncludeSchema.optional(),
  where: TestOrderLoincWhereInputSchema.optional(),
  orderBy: z.union([ TestOrderLoincOrderByWithRelationInputSchema.array(),TestOrderLoincOrderByWithRelationInputSchema ]).optional(),
  cursor: TestOrderLoincWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ TestOrderLoincScalarFieldEnumSchema,TestOrderLoincScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const TestOrderLoincFindManyArgsSchema: z.ZodType<Prisma.TestOrderLoincFindManyArgs> = z.object({
  select: TestOrderLoincSelectSchema.optional(),
  include: TestOrderLoincIncludeSchema.optional(),
  where: TestOrderLoincWhereInputSchema.optional(),
  orderBy: z.union([ TestOrderLoincOrderByWithRelationInputSchema.array(),TestOrderLoincOrderByWithRelationInputSchema ]).optional(),
  cursor: TestOrderLoincWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ TestOrderLoincScalarFieldEnumSchema,TestOrderLoincScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const TestOrderLoincAggregateArgsSchema: z.ZodType<Prisma.TestOrderLoincAggregateArgs> = z.object({
  where: TestOrderLoincWhereInputSchema.optional(),
  orderBy: z.union([ TestOrderLoincOrderByWithRelationInputSchema.array(),TestOrderLoincOrderByWithRelationInputSchema ]).optional(),
  cursor: TestOrderLoincWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const TestOrderLoincGroupByArgsSchema: z.ZodType<Prisma.TestOrderLoincGroupByArgs> = z.object({
  where: TestOrderLoincWhereInputSchema.optional(),
  orderBy: z.union([ TestOrderLoincOrderByWithAggregationInputSchema.array(),TestOrderLoincOrderByWithAggregationInputSchema ]).optional(),
  by: TestOrderLoincScalarFieldEnumSchema.array(),
  having: TestOrderLoincScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const TestOrderLoincFindUniqueArgsSchema: z.ZodType<Prisma.TestOrderLoincFindUniqueArgs> = z.object({
  select: TestOrderLoincSelectSchema.optional(),
  include: TestOrderLoincIncludeSchema.optional(),
  where: TestOrderLoincWhereUniqueInputSchema,
}).strict() ;

export const TestOrderLoincFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.TestOrderLoincFindUniqueOrThrowArgs> = z.object({
  select: TestOrderLoincSelectSchema.optional(),
  include: TestOrderLoincIncludeSchema.optional(),
  where: TestOrderLoincWhereUniqueInputSchema,
}).strict() ;

export const TestResultLoincFindFirstArgsSchema: z.ZodType<Prisma.TestResultLoincFindFirstArgs> = z.object({
  select: TestResultLoincSelectSchema.optional(),
  include: TestResultLoincIncludeSchema.optional(),
  where: TestResultLoincWhereInputSchema.optional(),
  orderBy: z.union([ TestResultLoincOrderByWithRelationInputSchema.array(),TestResultLoincOrderByWithRelationInputSchema ]).optional(),
  cursor: TestResultLoincWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ TestResultLoincScalarFieldEnumSchema,TestResultLoincScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const TestResultLoincFindFirstOrThrowArgsSchema: z.ZodType<Prisma.TestResultLoincFindFirstOrThrowArgs> = z.object({
  select: TestResultLoincSelectSchema.optional(),
  include: TestResultLoincIncludeSchema.optional(),
  where: TestResultLoincWhereInputSchema.optional(),
  orderBy: z.union([ TestResultLoincOrderByWithRelationInputSchema.array(),TestResultLoincOrderByWithRelationInputSchema ]).optional(),
  cursor: TestResultLoincWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ TestResultLoincScalarFieldEnumSchema,TestResultLoincScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const TestResultLoincFindManyArgsSchema: z.ZodType<Prisma.TestResultLoincFindManyArgs> = z.object({
  select: TestResultLoincSelectSchema.optional(),
  include: TestResultLoincIncludeSchema.optional(),
  where: TestResultLoincWhereInputSchema.optional(),
  orderBy: z.union([ TestResultLoincOrderByWithRelationInputSchema.array(),TestResultLoincOrderByWithRelationInputSchema ]).optional(),
  cursor: TestResultLoincWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ TestResultLoincScalarFieldEnumSchema,TestResultLoincScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const TestResultLoincAggregateArgsSchema: z.ZodType<Prisma.TestResultLoincAggregateArgs> = z.object({
  where: TestResultLoincWhereInputSchema.optional(),
  orderBy: z.union([ TestResultLoincOrderByWithRelationInputSchema.array(),TestResultLoincOrderByWithRelationInputSchema ]).optional(),
  cursor: TestResultLoincWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const TestResultLoincGroupByArgsSchema: z.ZodType<Prisma.TestResultLoincGroupByArgs> = z.object({
  where: TestResultLoincWhereInputSchema.optional(),
  orderBy: z.union([ TestResultLoincOrderByWithAggregationInputSchema.array(),TestResultLoincOrderByWithAggregationInputSchema ]).optional(),
  by: TestResultLoincScalarFieldEnumSchema.array(),
  having: TestResultLoincScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const TestResultLoincFindUniqueArgsSchema: z.ZodType<Prisma.TestResultLoincFindUniqueArgs> = z.object({
  select: TestResultLoincSelectSchema.optional(),
  include: TestResultLoincIncludeSchema.optional(),
  where: TestResultLoincWhereUniqueInputSchema,
}).strict() ;

export const TestResultLoincFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.TestResultLoincFindUniqueOrThrowArgs> = z.object({
  select: TestResultLoincSelectSchema.optional(),
  include: TestResultLoincIncludeSchema.optional(),
  where: TestResultLoincWhereUniqueInputSchema,
}).strict() ;

export const UserFindFirstArgsSchema: z.ZodType<Prisma.UserFindFirstArgs> = z.object({
  select: UserSelectSchema.optional(),
  include: UserIncludeSchema.optional(),
  where: UserWhereInputSchema.optional(),
  orderBy: z.union([ UserOrderByWithRelationInputSchema.array(),UserOrderByWithRelationInputSchema ]).optional(),
  cursor: UserWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ UserScalarFieldEnumSchema,UserScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const UserFindFirstOrThrowArgsSchema: z.ZodType<Prisma.UserFindFirstOrThrowArgs> = z.object({
  select: UserSelectSchema.optional(),
  include: UserIncludeSchema.optional(),
  where: UserWhereInputSchema.optional(),
  orderBy: z.union([ UserOrderByWithRelationInputSchema.array(),UserOrderByWithRelationInputSchema ]).optional(),
  cursor: UserWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ UserScalarFieldEnumSchema,UserScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const UserFindManyArgsSchema: z.ZodType<Prisma.UserFindManyArgs> = z.object({
  select: UserSelectSchema.optional(),
  include: UserIncludeSchema.optional(),
  where: UserWhereInputSchema.optional(),
  orderBy: z.union([ UserOrderByWithRelationInputSchema.array(),UserOrderByWithRelationInputSchema ]).optional(),
  cursor: UserWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ UserScalarFieldEnumSchema,UserScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const UserAggregateArgsSchema: z.ZodType<Prisma.UserAggregateArgs> = z.object({
  where: UserWhereInputSchema.optional(),
  orderBy: z.union([ UserOrderByWithRelationInputSchema.array(),UserOrderByWithRelationInputSchema ]).optional(),
  cursor: UserWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const UserGroupByArgsSchema: z.ZodType<Prisma.UserGroupByArgs> = z.object({
  where: UserWhereInputSchema.optional(),
  orderBy: z.union([ UserOrderByWithAggregationInputSchema.array(),UserOrderByWithAggregationInputSchema ]).optional(),
  by: UserScalarFieldEnumSchema.array(),
  having: UserScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const UserFindUniqueArgsSchema: z.ZodType<Prisma.UserFindUniqueArgs> = z.object({
  select: UserSelectSchema.optional(),
  include: UserIncludeSchema.optional(),
  where: UserWhereUniqueInputSchema,
}).strict() ;

export const UserFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.UserFindUniqueOrThrowArgs> = z.object({
  select: UserSelectSchema.optional(),
  include: UserIncludeSchema.optional(),
  where: UserWhereUniqueInputSchema,
}).strict() ;

export const UserAttributeFindFirstArgsSchema: z.ZodType<Prisma.UserAttributeFindFirstArgs> = z.object({
  select: UserAttributeSelectSchema.optional(),
  include: UserAttributeIncludeSchema.optional(),
  where: UserAttributeWhereInputSchema.optional(),
  orderBy: z.union([ UserAttributeOrderByWithRelationInputSchema.array(),UserAttributeOrderByWithRelationInputSchema ]).optional(),
  cursor: UserAttributeWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ UserAttributeScalarFieldEnumSchema,UserAttributeScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const UserAttributeFindFirstOrThrowArgsSchema: z.ZodType<Prisma.UserAttributeFindFirstOrThrowArgs> = z.object({
  select: UserAttributeSelectSchema.optional(),
  include: UserAttributeIncludeSchema.optional(),
  where: UserAttributeWhereInputSchema.optional(),
  orderBy: z.union([ UserAttributeOrderByWithRelationInputSchema.array(),UserAttributeOrderByWithRelationInputSchema ]).optional(),
  cursor: UserAttributeWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ UserAttributeScalarFieldEnumSchema,UserAttributeScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const UserAttributeFindManyArgsSchema: z.ZodType<Prisma.UserAttributeFindManyArgs> = z.object({
  select: UserAttributeSelectSchema.optional(),
  include: UserAttributeIncludeSchema.optional(),
  where: UserAttributeWhereInputSchema.optional(),
  orderBy: z.union([ UserAttributeOrderByWithRelationInputSchema.array(),UserAttributeOrderByWithRelationInputSchema ]).optional(),
  cursor: UserAttributeWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ UserAttributeScalarFieldEnumSchema,UserAttributeScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const UserAttributeAggregateArgsSchema: z.ZodType<Prisma.UserAttributeAggregateArgs> = z.object({
  where: UserAttributeWhereInputSchema.optional(),
  orderBy: z.union([ UserAttributeOrderByWithRelationInputSchema.array(),UserAttributeOrderByWithRelationInputSchema ]).optional(),
  cursor: UserAttributeWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const UserAttributeGroupByArgsSchema: z.ZodType<Prisma.UserAttributeGroupByArgs> = z.object({
  where: UserAttributeWhereInputSchema.optional(),
  orderBy: z.union([ UserAttributeOrderByWithAggregationInputSchema.array(),UserAttributeOrderByWithAggregationInputSchema ]).optional(),
  by: UserAttributeScalarFieldEnumSchema.array(),
  having: UserAttributeScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const UserAttributeFindUniqueArgsSchema: z.ZodType<Prisma.UserAttributeFindUniqueArgs> = z.object({
  select: UserAttributeSelectSchema.optional(),
  include: UserAttributeIncludeSchema.optional(),
  where: UserAttributeWhereUniqueInputSchema,
}).strict() ;

export const UserAttributeFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.UserAttributeFindUniqueOrThrowArgs> = z.object({
  select: UserAttributeSelectSchema.optional(),
  include: UserAttributeIncludeSchema.optional(),
  where: UserAttributeWhereUniqueInputSchema,
}).strict() ;

export const VerificationTokenFindFirstArgsSchema: z.ZodType<Prisma.VerificationTokenFindFirstArgs> = z.object({
  select: VerificationTokenSelectSchema.optional(),
  where: VerificationTokenWhereInputSchema.optional(),
  orderBy: z.union([ VerificationTokenOrderByWithRelationInputSchema.array(),VerificationTokenOrderByWithRelationInputSchema ]).optional(),
  cursor: VerificationTokenWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ VerificationTokenScalarFieldEnumSchema,VerificationTokenScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const VerificationTokenFindFirstOrThrowArgsSchema: z.ZodType<Prisma.VerificationTokenFindFirstOrThrowArgs> = z.object({
  select: VerificationTokenSelectSchema.optional(),
  where: VerificationTokenWhereInputSchema.optional(),
  orderBy: z.union([ VerificationTokenOrderByWithRelationInputSchema.array(),VerificationTokenOrderByWithRelationInputSchema ]).optional(),
  cursor: VerificationTokenWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ VerificationTokenScalarFieldEnumSchema,VerificationTokenScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const VerificationTokenFindManyArgsSchema: z.ZodType<Prisma.VerificationTokenFindManyArgs> = z.object({
  select: VerificationTokenSelectSchema.optional(),
  where: VerificationTokenWhereInputSchema.optional(),
  orderBy: z.union([ VerificationTokenOrderByWithRelationInputSchema.array(),VerificationTokenOrderByWithRelationInputSchema ]).optional(),
  cursor: VerificationTokenWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ VerificationTokenScalarFieldEnumSchema,VerificationTokenScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const VerificationTokenAggregateArgsSchema: z.ZodType<Prisma.VerificationTokenAggregateArgs> = z.object({
  where: VerificationTokenWhereInputSchema.optional(),
  orderBy: z.union([ VerificationTokenOrderByWithRelationInputSchema.array(),VerificationTokenOrderByWithRelationInputSchema ]).optional(),
  cursor: VerificationTokenWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const VerificationTokenGroupByArgsSchema: z.ZodType<Prisma.VerificationTokenGroupByArgs> = z.object({
  where: VerificationTokenWhereInputSchema.optional(),
  orderBy: z.union([ VerificationTokenOrderByWithAggregationInputSchema.array(),VerificationTokenOrderByWithAggregationInputSchema ]).optional(),
  by: VerificationTokenScalarFieldEnumSchema.array(),
  having: VerificationTokenScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const VerificationTokenFindUniqueArgsSchema: z.ZodType<Prisma.VerificationTokenFindUniqueArgs> = z.object({
  select: VerificationTokenSelectSchema.optional(),
  where: VerificationTokenWhereUniqueInputSchema,
}).strict() ;

export const VerificationTokenFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.VerificationTokenFindUniqueOrThrowArgs> = z.object({
  select: VerificationTokenSelectSchema.optional(),
  where: VerificationTokenWhereUniqueInputSchema,
}).strict() ;

export const AccountCreateArgsSchema: z.ZodType<Prisma.AccountCreateArgs> = z.object({
  select: AccountSelectSchema.optional(),
  include: AccountIncludeSchema.optional(),
  data: z.union([ AccountCreateInputSchema,AccountUncheckedCreateInputSchema ]),
}).strict() ;

export const AccountUpsertArgsSchema: z.ZodType<Prisma.AccountUpsertArgs> = z.object({
  select: AccountSelectSchema.optional(),
  include: AccountIncludeSchema.optional(),
  where: AccountWhereUniqueInputSchema,
  create: z.union([ AccountCreateInputSchema,AccountUncheckedCreateInputSchema ]),
  update: z.union([ AccountUpdateInputSchema,AccountUncheckedUpdateInputSchema ]),
}).strict() ;

export const AccountCreateManyArgsSchema: z.ZodType<Prisma.AccountCreateManyArgs> = z.object({
  data: z.union([ AccountCreateManyInputSchema,AccountCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const AccountDeleteArgsSchema: z.ZodType<Prisma.AccountDeleteArgs> = z.object({
  select: AccountSelectSchema.optional(),
  include: AccountIncludeSchema.optional(),
  where: AccountWhereUniqueInputSchema,
}).strict() ;

export const AccountUpdateArgsSchema: z.ZodType<Prisma.AccountUpdateArgs> = z.object({
  select: AccountSelectSchema.optional(),
  include: AccountIncludeSchema.optional(),
  data: z.union([ AccountUpdateInputSchema,AccountUncheckedUpdateInputSchema ]),
  where: AccountWhereUniqueInputSchema,
}).strict() ;

export const AccountUpdateManyArgsSchema: z.ZodType<Prisma.AccountUpdateManyArgs> = z.object({
  data: z.union([ AccountUpdateManyMutationInputSchema,AccountUncheckedUpdateManyInputSchema ]),
  where: AccountWhereInputSchema.optional(),
}).strict() ;

export const AccountDeleteManyArgsSchema: z.ZodType<Prisma.AccountDeleteManyArgs> = z.object({
  where: AccountWhereInputSchema.optional(),
}).strict() ;

export const AdminCreateArgsSchema: z.ZodType<Prisma.AdminCreateArgs> = z.object({
  select: AdminSelectSchema.optional(),
  include: AdminIncludeSchema.optional(),
  data: z.union([ AdminCreateInputSchema,AdminUncheckedCreateInputSchema ]),
}).strict() ;

export const AdminUpsertArgsSchema: z.ZodType<Prisma.AdminUpsertArgs> = z.object({
  select: AdminSelectSchema.optional(),
  include: AdminIncludeSchema.optional(),
  where: AdminWhereUniqueInputSchema,
  create: z.union([ AdminCreateInputSchema,AdminUncheckedCreateInputSchema ]),
  update: z.union([ AdminUpdateInputSchema,AdminUncheckedUpdateInputSchema ]),
}).strict() ;

export const AdminCreateManyArgsSchema: z.ZodType<Prisma.AdminCreateManyArgs> = z.object({
  data: z.union([ AdminCreateManyInputSchema,AdminCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const AdminDeleteArgsSchema: z.ZodType<Prisma.AdminDeleteArgs> = z.object({
  select: AdminSelectSchema.optional(),
  include: AdminIncludeSchema.optional(),
  where: AdminWhereUniqueInputSchema,
}).strict() ;

export const AdminUpdateArgsSchema: z.ZodType<Prisma.AdminUpdateArgs> = z.object({
  select: AdminSelectSchema.optional(),
  include: AdminIncludeSchema.optional(),
  data: z.union([ AdminUpdateInputSchema,AdminUncheckedUpdateInputSchema ]),
  where: AdminWhereUniqueInputSchema,
}).strict() ;

export const AdminUpdateManyArgsSchema: z.ZodType<Prisma.AdminUpdateManyArgs> = z.object({
  data: z.union([ AdminUpdateManyMutationInputSchema,AdminUncheckedUpdateManyInputSchema ]),
  where: AdminWhereInputSchema.optional(),
}).strict() ;

export const AdminDeleteManyArgsSchema: z.ZodType<Prisma.AdminDeleteManyArgs> = z.object({
  where: AdminWhereInputSchema.optional(),
}).strict() ;

export const AttachmentCreateArgsSchema: z.ZodType<Prisma.AttachmentCreateArgs> = z.object({
  select: AttachmentSelectSchema.optional(),
  include: AttachmentIncludeSchema.optional(),
  data: z.union([ AttachmentCreateInputSchema,AttachmentUncheckedCreateInputSchema ]).optional(),
}).strict() ;

export const AttachmentUpsertArgsSchema: z.ZodType<Prisma.AttachmentUpsertArgs> = z.object({
  select: AttachmentSelectSchema.optional(),
  include: AttachmentIncludeSchema.optional(),
  where: AttachmentWhereUniqueInputSchema,
  create: z.union([ AttachmentCreateInputSchema,AttachmentUncheckedCreateInputSchema ]),
  update: z.union([ AttachmentUpdateInputSchema,AttachmentUncheckedUpdateInputSchema ]),
}).strict() ;

export const AttachmentCreateManyArgsSchema: z.ZodType<Prisma.AttachmentCreateManyArgs> = z.object({
  data: z.union([ AttachmentCreateManyInputSchema,AttachmentCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const AttachmentDeleteArgsSchema: z.ZodType<Prisma.AttachmentDeleteArgs> = z.object({
  select: AttachmentSelectSchema.optional(),
  include: AttachmentIncludeSchema.optional(),
  where: AttachmentWhereUniqueInputSchema,
}).strict() ;

export const AttachmentUpdateArgsSchema: z.ZodType<Prisma.AttachmentUpdateArgs> = z.object({
  select: AttachmentSelectSchema.optional(),
  include: AttachmentIncludeSchema.optional(),
  data: z.union([ AttachmentUpdateInputSchema,AttachmentUncheckedUpdateInputSchema ]),
  where: AttachmentWhereUniqueInputSchema,
}).strict() ;

export const AttachmentUpdateManyArgsSchema: z.ZodType<Prisma.AttachmentUpdateManyArgs> = z.object({
  data: z.union([ AttachmentUpdateManyMutationInputSchema,AttachmentUncheckedUpdateManyInputSchema ]),
  where: AttachmentWhereInputSchema.optional(),
}).strict() ;

export const AttachmentDeleteManyArgsSchema: z.ZodType<Prisma.AttachmentDeleteManyArgs> = z.object({
  where: AttachmentWhereInputSchema.optional(),
}).strict() ;

export const BIOMARKERCreateArgsSchema: z.ZodType<Prisma.BIOMARKERCreateArgs> = z.object({
  select: BIOMARKERSelectSchema.optional(),
  include: BIOMARKERIncludeSchema.optional(),
  data: z.union([ BIOMARKERCreateInputSchema,BIOMARKERUncheckedCreateInputSchema ]),
}).strict() ;

export const BIOMARKERUpsertArgsSchema: z.ZodType<Prisma.BIOMARKERUpsertArgs> = z.object({
  select: BIOMARKERSelectSchema.optional(),
  include: BIOMARKERIncludeSchema.optional(),
  where: BIOMARKERWhereUniqueInputSchema,
  create: z.union([ BIOMARKERCreateInputSchema,BIOMARKERUncheckedCreateInputSchema ]),
  update: z.union([ BIOMARKERUpdateInputSchema,BIOMARKERUncheckedUpdateInputSchema ]),
}).strict() ;

export const BIOMARKERCreateManyArgsSchema: z.ZodType<Prisma.BIOMARKERCreateManyArgs> = z.object({
  data: z.union([ BIOMARKERCreateManyInputSchema,BIOMARKERCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const BIOMARKERDeleteArgsSchema: z.ZodType<Prisma.BIOMARKERDeleteArgs> = z.object({
  select: BIOMARKERSelectSchema.optional(),
  include: BIOMARKERIncludeSchema.optional(),
  where: BIOMARKERWhereUniqueInputSchema,
}).strict() ;

export const BIOMARKERUpdateArgsSchema: z.ZodType<Prisma.BIOMARKERUpdateArgs> = z.object({
  select: BIOMARKERSelectSchema.optional(),
  include: BIOMARKERIncludeSchema.optional(),
  data: z.union([ BIOMARKERUpdateInputSchema,BIOMARKERUncheckedUpdateInputSchema ]),
  where: BIOMARKERWhereUniqueInputSchema,
}).strict() ;

export const BIOMARKERUpdateManyArgsSchema: z.ZodType<Prisma.BIOMARKERUpdateManyArgs> = z.object({
  data: z.union([ BIOMARKERUpdateManyMutationInputSchema,BIOMARKERUncheckedUpdateManyInputSchema ]),
  where: BIOMARKERWhereInputSchema.optional(),
}).strict() ;

export const BIOMARKERDeleteManyArgsSchema: z.ZodType<Prisma.BIOMARKERDeleteManyArgs> = z.object({
  where: BIOMARKERWhereInputSchema.optional(),
}).strict() ;

export const ICDCreateArgsSchema: z.ZodType<Prisma.ICDCreateArgs> = z.object({
  select: ICDSelectSchema.optional(),
  include: ICDIncludeSchema.optional(),
  data: z.union([ ICDCreateInputSchema,ICDUncheckedCreateInputSchema ]).optional(),
}).strict() ;

export const ICDUpsertArgsSchema: z.ZodType<Prisma.ICDUpsertArgs> = z.object({
  select: ICDSelectSchema.optional(),
  include: ICDIncludeSchema.optional(),
  where: ICDWhereUniqueInputSchema,
  create: z.union([ ICDCreateInputSchema,ICDUncheckedCreateInputSchema ]),
  update: z.union([ ICDUpdateInputSchema,ICDUncheckedUpdateInputSchema ]),
}).strict() ;

export const ICDCreateManyArgsSchema: z.ZodType<Prisma.ICDCreateManyArgs> = z.object({
  data: z.union([ ICDCreateManyInputSchema,ICDCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const ICDDeleteArgsSchema: z.ZodType<Prisma.ICDDeleteArgs> = z.object({
  select: ICDSelectSchema.optional(),
  include: ICDIncludeSchema.optional(),
  where: ICDWhereUniqueInputSchema,
}).strict() ;

export const ICDUpdateArgsSchema: z.ZodType<Prisma.ICDUpdateArgs> = z.object({
  select: ICDSelectSchema.optional(),
  include: ICDIncludeSchema.optional(),
  data: z.union([ ICDUpdateInputSchema,ICDUncheckedUpdateInputSchema ]),
  where: ICDWhereUniqueInputSchema,
}).strict() ;

export const ICDUpdateManyArgsSchema: z.ZodType<Prisma.ICDUpdateManyArgs> = z.object({
  data: z.union([ ICDUpdateManyMutationInputSchema,ICDUncheckedUpdateManyInputSchema ]),
  where: ICDWhereInputSchema.optional(),
}).strict() ;

export const ICDDeleteManyArgsSchema: z.ZodType<Prisma.ICDDeleteManyArgs> = z.object({
  where: ICDWhereInputSchema.optional(),
}).strict() ;

export const LOINCCreateArgsSchema: z.ZodType<Prisma.LOINCCreateArgs> = z.object({
  select: LOINCSelectSchema.optional(),
  include: LOINCIncludeSchema.optional(),
  data: z.union([ LOINCCreateInputSchema,LOINCUncheckedCreateInputSchema ]),
}).strict() ;

export const LOINCUpsertArgsSchema: z.ZodType<Prisma.LOINCUpsertArgs> = z.object({
  select: LOINCSelectSchema.optional(),
  include: LOINCIncludeSchema.optional(),
  where: LOINCWhereUniqueInputSchema,
  create: z.union([ LOINCCreateInputSchema,LOINCUncheckedCreateInputSchema ]),
  update: z.union([ LOINCUpdateInputSchema,LOINCUncheckedUpdateInputSchema ]),
}).strict() ;

export const LOINCCreateManyArgsSchema: z.ZodType<Prisma.LOINCCreateManyArgs> = z.object({
  data: z.union([ LOINCCreateManyInputSchema,LOINCCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const LOINCDeleteArgsSchema: z.ZodType<Prisma.LOINCDeleteArgs> = z.object({
  select: LOINCSelectSchema.optional(),
  include: LOINCIncludeSchema.optional(),
  where: LOINCWhereUniqueInputSchema,
}).strict() ;

export const LOINCUpdateArgsSchema: z.ZodType<Prisma.LOINCUpdateArgs> = z.object({
  select: LOINCSelectSchema.optional(),
  include: LOINCIncludeSchema.optional(),
  data: z.union([ LOINCUpdateInputSchema,LOINCUncheckedUpdateInputSchema ]),
  where: LOINCWhereUniqueInputSchema,
}).strict() ;

export const LOINCUpdateManyArgsSchema: z.ZodType<Prisma.LOINCUpdateManyArgs> = z.object({
  data: z.union([ LOINCUpdateManyMutationInputSchema,LOINCUncheckedUpdateManyInputSchema ]),
  where: LOINCWhereInputSchema.optional(),
}).strict() ;

export const LOINCDeleteManyArgsSchema: z.ZodType<Prisma.LOINCDeleteManyArgs> = z.object({
  where: LOINCWhereInputSchema.optional(),
}).strict() ;

export const LabCreateArgsSchema: z.ZodType<Prisma.LabCreateArgs> = z.object({
  select: LabSelectSchema.optional(),
  include: LabIncludeSchema.optional(),
  data: z.union([ LabCreateInputSchema,LabUncheckedCreateInputSchema ]).optional(),
}).strict() ;

export const LabUpsertArgsSchema: z.ZodType<Prisma.LabUpsertArgs> = z.object({
  select: LabSelectSchema.optional(),
  include: LabIncludeSchema.optional(),
  where: LabWhereUniqueInputSchema,
  create: z.union([ LabCreateInputSchema,LabUncheckedCreateInputSchema ]),
  update: z.union([ LabUpdateInputSchema,LabUncheckedUpdateInputSchema ]),
}).strict() ;

export const LabCreateManyArgsSchema: z.ZodType<Prisma.LabCreateManyArgs> = z.object({
  data: z.union([ LabCreateManyInputSchema,LabCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const LabDeleteArgsSchema: z.ZodType<Prisma.LabDeleteArgs> = z.object({
  select: LabSelectSchema.optional(),
  include: LabIncludeSchema.optional(),
  where: LabWhereUniqueInputSchema,
}).strict() ;

export const LabUpdateArgsSchema: z.ZodType<Prisma.LabUpdateArgs> = z.object({
  select: LabSelectSchema.optional(),
  include: LabIncludeSchema.optional(),
  data: z.union([ LabUpdateInputSchema,LabUncheckedUpdateInputSchema ]),
  where: LabWhereUniqueInputSchema,
}).strict() ;

export const LabUpdateManyArgsSchema: z.ZodType<Prisma.LabUpdateManyArgs> = z.object({
  data: z.union([ LabUpdateManyMutationInputSchema,LabUncheckedUpdateManyInputSchema ]),
  where: LabWhereInputSchema.optional(),
}).strict() ;

export const LabDeleteManyArgsSchema: z.ZodType<Prisma.LabDeleteManyArgs> = z.object({
  where: LabWhereInputSchema.optional(),
}).strict() ;

export const LabOrderCreateArgsSchema: z.ZodType<Prisma.LabOrderCreateArgs> = z.object({
  select: LabOrderSelectSchema.optional(),
  include: LabOrderIncludeSchema.optional(),
  data: z.union([ LabOrderCreateInputSchema,LabOrderUncheckedCreateInputSchema ]).optional(),
}).strict() ;

export const LabOrderUpsertArgsSchema: z.ZodType<Prisma.LabOrderUpsertArgs> = z.object({
  select: LabOrderSelectSchema.optional(),
  include: LabOrderIncludeSchema.optional(),
  where: LabOrderWhereUniqueInputSchema,
  create: z.union([ LabOrderCreateInputSchema,LabOrderUncheckedCreateInputSchema ]),
  update: z.union([ LabOrderUpdateInputSchema,LabOrderUncheckedUpdateInputSchema ]),
}).strict() ;

export const LabOrderCreateManyArgsSchema: z.ZodType<Prisma.LabOrderCreateManyArgs> = z.object({
  data: z.union([ LabOrderCreateManyInputSchema,LabOrderCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const LabOrderDeleteArgsSchema: z.ZodType<Prisma.LabOrderDeleteArgs> = z.object({
  select: LabOrderSelectSchema.optional(),
  include: LabOrderIncludeSchema.optional(),
  where: LabOrderWhereUniqueInputSchema,
}).strict() ;

export const LabOrderUpdateArgsSchema: z.ZodType<Prisma.LabOrderUpdateArgs> = z.object({
  select: LabOrderSelectSchema.optional(),
  include: LabOrderIncludeSchema.optional(),
  data: z.union([ LabOrderUpdateInputSchema,LabOrderUncheckedUpdateInputSchema ]),
  where: LabOrderWhereUniqueInputSchema,
}).strict() ;

export const LabOrderUpdateManyArgsSchema: z.ZodType<Prisma.LabOrderUpdateManyArgs> = z.object({
  data: z.union([ LabOrderUpdateManyMutationInputSchema,LabOrderUncheckedUpdateManyInputSchema ]),
  where: LabOrderWhereInputSchema.optional(),
}).strict() ;

export const LabOrderDeleteManyArgsSchema: z.ZodType<Prisma.LabOrderDeleteManyArgs> = z.object({
  where: LabOrderWhereInputSchema.optional(),
}).strict() ;

export const LabOrderAttachmentCreateArgsSchema: z.ZodType<Prisma.LabOrderAttachmentCreateArgs> = z.object({
  select: LabOrderAttachmentSelectSchema.optional(),
  include: LabOrderAttachmentIncludeSchema.optional(),
  data: z.union([ LabOrderAttachmentCreateInputSchema,LabOrderAttachmentUncheckedCreateInputSchema ]).optional(),
}).strict() ;

export const LabOrderAttachmentUpsertArgsSchema: z.ZodType<Prisma.LabOrderAttachmentUpsertArgs> = z.object({
  select: LabOrderAttachmentSelectSchema.optional(),
  include: LabOrderAttachmentIncludeSchema.optional(),
  where: LabOrderAttachmentWhereUniqueInputSchema,
  create: z.union([ LabOrderAttachmentCreateInputSchema,LabOrderAttachmentUncheckedCreateInputSchema ]),
  update: z.union([ LabOrderAttachmentUpdateInputSchema,LabOrderAttachmentUncheckedUpdateInputSchema ]),
}).strict() ;

export const LabOrderAttachmentCreateManyArgsSchema: z.ZodType<Prisma.LabOrderAttachmentCreateManyArgs> = z.object({
  data: z.union([ LabOrderAttachmentCreateManyInputSchema,LabOrderAttachmentCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const LabOrderAttachmentDeleteArgsSchema: z.ZodType<Prisma.LabOrderAttachmentDeleteArgs> = z.object({
  select: LabOrderAttachmentSelectSchema.optional(),
  include: LabOrderAttachmentIncludeSchema.optional(),
  where: LabOrderAttachmentWhereUniqueInputSchema,
}).strict() ;

export const LabOrderAttachmentUpdateArgsSchema: z.ZodType<Prisma.LabOrderAttachmentUpdateArgs> = z.object({
  select: LabOrderAttachmentSelectSchema.optional(),
  include: LabOrderAttachmentIncludeSchema.optional(),
  data: z.union([ LabOrderAttachmentUpdateInputSchema,LabOrderAttachmentUncheckedUpdateInputSchema ]),
  where: LabOrderAttachmentWhereUniqueInputSchema,
}).strict() ;

export const LabOrderAttachmentUpdateManyArgsSchema: z.ZodType<Prisma.LabOrderAttachmentUpdateManyArgs> = z.object({
  data: z.union([ LabOrderAttachmentUpdateManyMutationInputSchema,LabOrderAttachmentUncheckedUpdateManyInputSchema ]),
  where: LabOrderAttachmentWhereInputSchema.optional(),
}).strict() ;

export const LabOrderAttachmentDeleteManyArgsSchema: z.ZodType<Prisma.LabOrderAttachmentDeleteManyArgs> = z.object({
  where: LabOrderAttachmentWhereInputSchema.optional(),
}).strict() ;

export const LabOrderBillingCreateArgsSchema: z.ZodType<Prisma.LabOrderBillingCreateArgs> = z.object({
  select: LabOrderBillingSelectSchema.optional(),
  include: LabOrderBillingIncludeSchema.optional(),
  data: z.union([ LabOrderBillingCreateInputSchema,LabOrderBillingUncheckedCreateInputSchema ]).optional(),
}).strict() ;

export const LabOrderBillingUpsertArgsSchema: z.ZodType<Prisma.LabOrderBillingUpsertArgs> = z.object({
  select: LabOrderBillingSelectSchema.optional(),
  include: LabOrderBillingIncludeSchema.optional(),
  where: LabOrderBillingWhereUniqueInputSchema,
  create: z.union([ LabOrderBillingCreateInputSchema,LabOrderBillingUncheckedCreateInputSchema ]),
  update: z.union([ LabOrderBillingUpdateInputSchema,LabOrderBillingUncheckedUpdateInputSchema ]),
}).strict() ;

export const LabOrderBillingCreateManyArgsSchema: z.ZodType<Prisma.LabOrderBillingCreateManyArgs> = z.object({
  data: z.union([ LabOrderBillingCreateManyInputSchema,LabOrderBillingCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const LabOrderBillingDeleteArgsSchema: z.ZodType<Prisma.LabOrderBillingDeleteArgs> = z.object({
  select: LabOrderBillingSelectSchema.optional(),
  include: LabOrderBillingIncludeSchema.optional(),
  where: LabOrderBillingWhereUniqueInputSchema,
}).strict() ;

export const LabOrderBillingUpdateArgsSchema: z.ZodType<Prisma.LabOrderBillingUpdateArgs> = z.object({
  select: LabOrderBillingSelectSchema.optional(),
  include: LabOrderBillingIncludeSchema.optional(),
  data: z.union([ LabOrderBillingUpdateInputSchema,LabOrderBillingUncheckedUpdateInputSchema ]),
  where: LabOrderBillingWhereUniqueInputSchema,
}).strict() ;

export const LabOrderBillingUpdateManyArgsSchema: z.ZodType<Prisma.LabOrderBillingUpdateManyArgs> = z.object({
  data: z.union([ LabOrderBillingUpdateManyMutationInputSchema,LabOrderBillingUncheckedUpdateManyInputSchema ]),
  where: LabOrderBillingWhereInputSchema.optional(),
}).strict() ;

export const LabOrderBillingDeleteManyArgsSchema: z.ZodType<Prisma.LabOrderBillingDeleteManyArgs> = z.object({
  where: LabOrderBillingWhereInputSchema.optional(),
}).strict() ;

export const LabOrderIcdCreateArgsSchema: z.ZodType<Prisma.LabOrderIcdCreateArgs> = z.object({
  select: LabOrderIcdSelectSchema.optional(),
  include: LabOrderIcdIncludeSchema.optional(),
  data: z.union([ LabOrderIcdCreateInputSchema,LabOrderIcdUncheckedCreateInputSchema ]).optional(),
}).strict() ;

export const LabOrderIcdUpsertArgsSchema: z.ZodType<Prisma.LabOrderIcdUpsertArgs> = z.object({
  select: LabOrderIcdSelectSchema.optional(),
  include: LabOrderIcdIncludeSchema.optional(),
  where: LabOrderIcdWhereUniqueInputSchema,
  create: z.union([ LabOrderIcdCreateInputSchema,LabOrderIcdUncheckedCreateInputSchema ]),
  update: z.union([ LabOrderIcdUpdateInputSchema,LabOrderIcdUncheckedUpdateInputSchema ]),
}).strict() ;

export const LabOrderIcdCreateManyArgsSchema: z.ZodType<Prisma.LabOrderIcdCreateManyArgs> = z.object({
  data: z.union([ LabOrderIcdCreateManyInputSchema,LabOrderIcdCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const LabOrderIcdDeleteArgsSchema: z.ZodType<Prisma.LabOrderIcdDeleteArgs> = z.object({
  select: LabOrderIcdSelectSchema.optional(),
  include: LabOrderIcdIncludeSchema.optional(),
  where: LabOrderIcdWhereUniqueInputSchema,
}).strict() ;

export const LabOrderIcdUpdateArgsSchema: z.ZodType<Prisma.LabOrderIcdUpdateArgs> = z.object({
  select: LabOrderIcdSelectSchema.optional(),
  include: LabOrderIcdIncludeSchema.optional(),
  data: z.union([ LabOrderIcdUpdateInputSchema,LabOrderIcdUncheckedUpdateInputSchema ]),
  where: LabOrderIcdWhereUniqueInputSchema,
}).strict() ;

export const LabOrderIcdUpdateManyArgsSchema: z.ZodType<Prisma.LabOrderIcdUpdateManyArgs> = z.object({
  data: z.union([ LabOrderIcdUpdateManyMutationInputSchema,LabOrderIcdUncheckedUpdateManyInputSchema ]),
  where: LabOrderIcdWhereInputSchema.optional(),
}).strict() ;

export const LabOrderIcdDeleteManyArgsSchema: z.ZodType<Prisma.LabOrderIcdDeleteManyArgs> = z.object({
  where: LabOrderIcdWhereInputSchema.optional(),
}).strict() ;

export const LabOrderSpecimenCreateArgsSchema: z.ZodType<Prisma.LabOrderSpecimenCreateArgs> = z.object({
  select: LabOrderSpecimenSelectSchema.optional(),
  include: LabOrderSpecimenIncludeSchema.optional(),
  data: z.union([ LabOrderSpecimenCreateInputSchema,LabOrderSpecimenUncheckedCreateInputSchema ]).optional(),
}).strict() ;

export const LabOrderSpecimenUpsertArgsSchema: z.ZodType<Prisma.LabOrderSpecimenUpsertArgs> = z.object({
  select: LabOrderSpecimenSelectSchema.optional(),
  include: LabOrderSpecimenIncludeSchema.optional(),
  where: LabOrderSpecimenWhereUniqueInputSchema,
  create: z.union([ LabOrderSpecimenCreateInputSchema,LabOrderSpecimenUncheckedCreateInputSchema ]),
  update: z.union([ LabOrderSpecimenUpdateInputSchema,LabOrderSpecimenUncheckedUpdateInputSchema ]),
}).strict() ;

export const LabOrderSpecimenCreateManyArgsSchema: z.ZodType<Prisma.LabOrderSpecimenCreateManyArgs> = z.object({
  data: z.union([ LabOrderSpecimenCreateManyInputSchema,LabOrderSpecimenCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const LabOrderSpecimenDeleteArgsSchema: z.ZodType<Prisma.LabOrderSpecimenDeleteArgs> = z.object({
  select: LabOrderSpecimenSelectSchema.optional(),
  include: LabOrderSpecimenIncludeSchema.optional(),
  where: LabOrderSpecimenWhereUniqueInputSchema,
}).strict() ;

export const LabOrderSpecimenUpdateArgsSchema: z.ZodType<Prisma.LabOrderSpecimenUpdateArgs> = z.object({
  select: LabOrderSpecimenSelectSchema.optional(),
  include: LabOrderSpecimenIncludeSchema.optional(),
  data: z.union([ LabOrderSpecimenUpdateInputSchema,LabOrderSpecimenUncheckedUpdateInputSchema ]),
  where: LabOrderSpecimenWhereUniqueInputSchema,
}).strict() ;

export const LabOrderSpecimenUpdateManyArgsSchema: z.ZodType<Prisma.LabOrderSpecimenUpdateManyArgs> = z.object({
  data: z.union([ LabOrderSpecimenUpdateManyMutationInputSchema,LabOrderSpecimenUncheckedUpdateManyInputSchema ]),
  where: LabOrderSpecimenWhereInputSchema.optional(),
}).strict() ;

export const LabOrderSpecimenDeleteManyArgsSchema: z.ZodType<Prisma.LabOrderSpecimenDeleteManyArgs> = z.object({
  where: LabOrderSpecimenWhereInputSchema.optional(),
}).strict() ;

export const LabOrderSponsoredTestConsentCreateArgsSchema: z.ZodType<Prisma.LabOrderSponsoredTestConsentCreateArgs> = z.object({
  select: LabOrderSponsoredTestConsentSelectSchema.optional(),
  include: LabOrderSponsoredTestConsentIncludeSchema.optional(),
  data: z.union([ LabOrderSponsoredTestConsentCreateInputSchema,LabOrderSponsoredTestConsentUncheckedCreateInputSchema ]).optional(),
}).strict() ;

export const LabOrderSponsoredTestConsentUpsertArgsSchema: z.ZodType<Prisma.LabOrderSponsoredTestConsentUpsertArgs> = z.object({
  select: LabOrderSponsoredTestConsentSelectSchema.optional(),
  include: LabOrderSponsoredTestConsentIncludeSchema.optional(),
  where: LabOrderSponsoredTestConsentWhereUniqueInputSchema,
  create: z.union([ LabOrderSponsoredTestConsentCreateInputSchema,LabOrderSponsoredTestConsentUncheckedCreateInputSchema ]),
  update: z.union([ LabOrderSponsoredTestConsentUpdateInputSchema,LabOrderSponsoredTestConsentUncheckedUpdateInputSchema ]),
}).strict() ;

export const LabOrderSponsoredTestConsentCreateManyArgsSchema: z.ZodType<Prisma.LabOrderSponsoredTestConsentCreateManyArgs> = z.object({
  data: z.union([ LabOrderSponsoredTestConsentCreateManyInputSchema,LabOrderSponsoredTestConsentCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const LabOrderSponsoredTestConsentDeleteArgsSchema: z.ZodType<Prisma.LabOrderSponsoredTestConsentDeleteArgs> = z.object({
  select: LabOrderSponsoredTestConsentSelectSchema.optional(),
  include: LabOrderSponsoredTestConsentIncludeSchema.optional(),
  where: LabOrderSponsoredTestConsentWhereUniqueInputSchema,
}).strict() ;

export const LabOrderSponsoredTestConsentUpdateArgsSchema: z.ZodType<Prisma.LabOrderSponsoredTestConsentUpdateArgs> = z.object({
  select: LabOrderSponsoredTestConsentSelectSchema.optional(),
  include: LabOrderSponsoredTestConsentIncludeSchema.optional(),
  data: z.union([ LabOrderSponsoredTestConsentUpdateInputSchema,LabOrderSponsoredTestConsentUncheckedUpdateInputSchema ]),
  where: LabOrderSponsoredTestConsentWhereUniqueInputSchema,
}).strict() ;

export const LabOrderSponsoredTestConsentUpdateManyArgsSchema: z.ZodType<Prisma.LabOrderSponsoredTestConsentUpdateManyArgs> = z.object({
  data: z.union([ LabOrderSponsoredTestConsentUpdateManyMutationInputSchema,LabOrderSponsoredTestConsentUncheckedUpdateManyInputSchema ]),
  where: LabOrderSponsoredTestConsentWhereInputSchema.optional(),
}).strict() ;

export const LabOrderSponsoredTestConsentDeleteManyArgsSchema: z.ZodType<Prisma.LabOrderSponsoredTestConsentDeleteManyArgs> = z.object({
  where: LabOrderSponsoredTestConsentWhereInputSchema.optional(),
}).strict() ;

export const LabOrderStatusCreateArgsSchema: z.ZodType<Prisma.LabOrderStatusCreateArgs> = z.object({
  select: LabOrderStatusSelectSchema.optional(),
  include: LabOrderStatusIncludeSchema.optional(),
  data: z.union([ LabOrderStatusCreateInputSchema,LabOrderStatusUncheckedCreateInputSchema ]).optional(),
}).strict() ;

export const LabOrderStatusUpsertArgsSchema: z.ZodType<Prisma.LabOrderStatusUpsertArgs> = z.object({
  select: LabOrderStatusSelectSchema.optional(),
  include: LabOrderStatusIncludeSchema.optional(),
  where: LabOrderStatusWhereUniqueInputSchema,
  create: z.union([ LabOrderStatusCreateInputSchema,LabOrderStatusUncheckedCreateInputSchema ]),
  update: z.union([ LabOrderStatusUpdateInputSchema,LabOrderStatusUncheckedUpdateInputSchema ]),
}).strict() ;

export const LabOrderStatusCreateManyArgsSchema: z.ZodType<Prisma.LabOrderStatusCreateManyArgs> = z.object({
  data: z.union([ LabOrderStatusCreateManyInputSchema,LabOrderStatusCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const LabOrderStatusDeleteArgsSchema: z.ZodType<Prisma.LabOrderStatusDeleteArgs> = z.object({
  select: LabOrderStatusSelectSchema.optional(),
  include: LabOrderStatusIncludeSchema.optional(),
  where: LabOrderStatusWhereUniqueInputSchema,
}).strict() ;

export const LabOrderStatusUpdateArgsSchema: z.ZodType<Prisma.LabOrderStatusUpdateArgs> = z.object({
  select: LabOrderStatusSelectSchema.optional(),
  include: LabOrderStatusIncludeSchema.optional(),
  data: z.union([ LabOrderStatusUpdateInputSchema,LabOrderStatusUncheckedUpdateInputSchema ]),
  where: LabOrderStatusWhereUniqueInputSchema,
}).strict() ;

export const LabOrderStatusUpdateManyArgsSchema: z.ZodType<Prisma.LabOrderStatusUpdateManyArgs> = z.object({
  data: z.union([ LabOrderStatusUpdateManyMutationInputSchema,LabOrderStatusUncheckedUpdateManyInputSchema ]),
  where: LabOrderStatusWhereInputSchema.optional(),
}).strict() ;

export const LabOrderStatusDeleteManyArgsSchema: z.ZodType<Prisma.LabOrderStatusDeleteManyArgs> = z.object({
  where: LabOrderStatusWhereInputSchema.optional(),
}).strict() ;

export const LabOrderTestCreateArgsSchema: z.ZodType<Prisma.LabOrderTestCreateArgs> = z.object({
  select: LabOrderTestSelectSchema.optional(),
  include: LabOrderTestIncludeSchema.optional(),
  data: z.union([ LabOrderTestCreateInputSchema,LabOrderTestUncheckedCreateInputSchema ]).optional(),
}).strict() ;

export const LabOrderTestUpsertArgsSchema: z.ZodType<Prisma.LabOrderTestUpsertArgs> = z.object({
  select: LabOrderTestSelectSchema.optional(),
  include: LabOrderTestIncludeSchema.optional(),
  where: LabOrderTestWhereUniqueInputSchema,
  create: z.union([ LabOrderTestCreateInputSchema,LabOrderTestUncheckedCreateInputSchema ]),
  update: z.union([ LabOrderTestUpdateInputSchema,LabOrderTestUncheckedUpdateInputSchema ]),
}).strict() ;

export const LabOrderTestCreateManyArgsSchema: z.ZodType<Prisma.LabOrderTestCreateManyArgs> = z.object({
  data: z.union([ LabOrderTestCreateManyInputSchema,LabOrderTestCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const LabOrderTestDeleteArgsSchema: z.ZodType<Prisma.LabOrderTestDeleteArgs> = z.object({
  select: LabOrderTestSelectSchema.optional(),
  include: LabOrderTestIncludeSchema.optional(),
  where: LabOrderTestWhereUniqueInputSchema,
}).strict() ;

export const LabOrderTestUpdateArgsSchema: z.ZodType<Prisma.LabOrderTestUpdateArgs> = z.object({
  select: LabOrderTestSelectSchema.optional(),
  include: LabOrderTestIncludeSchema.optional(),
  data: z.union([ LabOrderTestUpdateInputSchema,LabOrderTestUncheckedUpdateInputSchema ]),
  where: LabOrderTestWhereUniqueInputSchema,
}).strict() ;

export const LabOrderTestUpdateManyArgsSchema: z.ZodType<Prisma.LabOrderTestUpdateManyArgs> = z.object({
  data: z.union([ LabOrderTestUpdateManyMutationInputSchema,LabOrderTestUncheckedUpdateManyInputSchema ]),
  where: LabOrderTestWhereInputSchema.optional(),
}).strict() ;

export const LabOrderTestDeleteManyArgsSchema: z.ZodType<Prisma.LabOrderTestDeleteManyArgs> = z.object({
  where: LabOrderTestWhereInputSchema.optional(),
}).strict() ;

export const LoincComponentHierarchyCreateArgsSchema: z.ZodType<Prisma.LoincComponentHierarchyCreateArgs> = z.object({
  select: LoincComponentHierarchySelectSchema.optional(),
  data: z.union([ LoincComponentHierarchyCreateInputSchema,LoincComponentHierarchyUncheckedCreateInputSchema ]),
}).strict() ;

export const LoincComponentHierarchyUpsertArgsSchema: z.ZodType<Prisma.LoincComponentHierarchyUpsertArgs> = z.object({
  select: LoincComponentHierarchySelectSchema.optional(),
  where: LoincComponentHierarchyWhereUniqueInputSchema,
  create: z.union([ LoincComponentHierarchyCreateInputSchema,LoincComponentHierarchyUncheckedCreateInputSchema ]),
  update: z.union([ LoincComponentHierarchyUpdateInputSchema,LoincComponentHierarchyUncheckedUpdateInputSchema ]),
}).strict() ;

export const LoincComponentHierarchyCreateManyArgsSchema: z.ZodType<Prisma.LoincComponentHierarchyCreateManyArgs> = z.object({
  data: z.union([ LoincComponentHierarchyCreateManyInputSchema,LoincComponentHierarchyCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const LoincComponentHierarchyDeleteArgsSchema: z.ZodType<Prisma.LoincComponentHierarchyDeleteArgs> = z.object({
  select: LoincComponentHierarchySelectSchema.optional(),
  where: LoincComponentHierarchyWhereUniqueInputSchema,
}).strict() ;

export const LoincComponentHierarchyUpdateArgsSchema: z.ZodType<Prisma.LoincComponentHierarchyUpdateArgs> = z.object({
  select: LoincComponentHierarchySelectSchema.optional(),
  data: z.union([ LoincComponentHierarchyUpdateInputSchema,LoincComponentHierarchyUncheckedUpdateInputSchema ]),
  where: LoincComponentHierarchyWhereUniqueInputSchema,
}).strict() ;

export const LoincComponentHierarchyUpdateManyArgsSchema: z.ZodType<Prisma.LoincComponentHierarchyUpdateManyArgs> = z.object({
  data: z.union([ LoincComponentHierarchyUpdateManyMutationInputSchema,LoincComponentHierarchyUncheckedUpdateManyInputSchema ]),
  where: LoincComponentHierarchyWhereInputSchema.optional(),
}).strict() ;

export const LoincComponentHierarchyDeleteManyArgsSchema: z.ZodType<Prisma.LoincComponentHierarchyDeleteManyArgs> = z.object({
  where: LoincComponentHierarchyWhereInputSchema.optional(),
}).strict() ;

export const LoincPanelHierarchyCreateArgsSchema: z.ZodType<Prisma.LoincPanelHierarchyCreateArgs> = z.object({
  select: LoincPanelHierarchySelectSchema.optional(),
  data: z.union([ LoincPanelHierarchyCreateInputSchema,LoincPanelHierarchyUncheckedCreateInputSchema ]),
}).strict() ;

export const LoincPanelHierarchyUpsertArgsSchema: z.ZodType<Prisma.LoincPanelHierarchyUpsertArgs> = z.object({
  select: LoincPanelHierarchySelectSchema.optional(),
  where: LoincPanelHierarchyWhereUniqueInputSchema,
  create: z.union([ LoincPanelHierarchyCreateInputSchema,LoincPanelHierarchyUncheckedCreateInputSchema ]),
  update: z.union([ LoincPanelHierarchyUpdateInputSchema,LoincPanelHierarchyUncheckedUpdateInputSchema ]),
}).strict() ;

export const LoincPanelHierarchyCreateManyArgsSchema: z.ZodType<Prisma.LoincPanelHierarchyCreateManyArgs> = z.object({
  data: z.union([ LoincPanelHierarchyCreateManyInputSchema,LoincPanelHierarchyCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const LoincPanelHierarchyDeleteArgsSchema: z.ZodType<Prisma.LoincPanelHierarchyDeleteArgs> = z.object({
  select: LoincPanelHierarchySelectSchema.optional(),
  where: LoincPanelHierarchyWhereUniqueInputSchema,
}).strict() ;

export const LoincPanelHierarchyUpdateArgsSchema: z.ZodType<Prisma.LoincPanelHierarchyUpdateArgs> = z.object({
  select: LoincPanelHierarchySelectSchema.optional(),
  data: z.union([ LoincPanelHierarchyUpdateInputSchema,LoincPanelHierarchyUncheckedUpdateInputSchema ]),
  where: LoincPanelHierarchyWhereUniqueInputSchema,
}).strict() ;

export const LoincPanelHierarchyUpdateManyArgsSchema: z.ZodType<Prisma.LoincPanelHierarchyUpdateManyArgs> = z.object({
  data: z.union([ LoincPanelHierarchyUpdateManyMutationInputSchema,LoincPanelHierarchyUncheckedUpdateManyInputSchema ]),
  where: LoincPanelHierarchyWhereInputSchema.optional(),
}).strict() ;

export const LoincPanelHierarchyDeleteManyArgsSchema: z.ZodType<Prisma.LoincPanelHierarchyDeleteManyArgs> = z.object({
  where: LoincPanelHierarchyWhereInputSchema.optional(),
}).strict() ;

export const LoincUniveralLabOrdersCreateArgsSchema: z.ZodType<Prisma.LoincUniveralLabOrdersCreateArgs> = z.object({
  select: LoincUniveralLabOrdersSelectSchema.optional(),
  data: z.union([ LoincUniveralLabOrdersCreateInputSchema,LoincUniveralLabOrdersUncheckedCreateInputSchema ]),
}).strict() ;

export const LoincUniveralLabOrdersUpsertArgsSchema: z.ZodType<Prisma.LoincUniveralLabOrdersUpsertArgs> = z.object({
  select: LoincUniveralLabOrdersSelectSchema.optional(),
  where: LoincUniveralLabOrdersWhereUniqueInputSchema,
  create: z.union([ LoincUniveralLabOrdersCreateInputSchema,LoincUniveralLabOrdersUncheckedCreateInputSchema ]),
  update: z.union([ LoincUniveralLabOrdersUpdateInputSchema,LoincUniveralLabOrdersUncheckedUpdateInputSchema ]),
}).strict() ;

export const LoincUniveralLabOrdersCreateManyArgsSchema: z.ZodType<Prisma.LoincUniveralLabOrdersCreateManyArgs> = z.object({
  data: z.union([ LoincUniveralLabOrdersCreateManyInputSchema,LoincUniveralLabOrdersCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const LoincUniveralLabOrdersDeleteArgsSchema: z.ZodType<Prisma.LoincUniveralLabOrdersDeleteArgs> = z.object({
  select: LoincUniveralLabOrdersSelectSchema.optional(),
  where: LoincUniveralLabOrdersWhereUniqueInputSchema,
}).strict() ;

export const LoincUniveralLabOrdersUpdateArgsSchema: z.ZodType<Prisma.LoincUniveralLabOrdersUpdateArgs> = z.object({
  select: LoincUniveralLabOrdersSelectSchema.optional(),
  data: z.union([ LoincUniveralLabOrdersUpdateInputSchema,LoincUniveralLabOrdersUncheckedUpdateInputSchema ]),
  where: LoincUniveralLabOrdersWhereUniqueInputSchema,
}).strict() ;

export const LoincUniveralLabOrdersUpdateManyArgsSchema: z.ZodType<Prisma.LoincUniveralLabOrdersUpdateManyArgs> = z.object({
  data: z.union([ LoincUniveralLabOrdersUpdateManyMutationInputSchema,LoincUniveralLabOrdersUncheckedUpdateManyInputSchema ]),
  where: LoincUniveralLabOrdersWhereInputSchema.optional(),
}).strict() ;

export const LoincUniveralLabOrdersDeleteManyArgsSchema: z.ZodType<Prisma.LoincUniveralLabOrdersDeleteManyArgs> = z.object({
  where: LoincUniveralLabOrdersWhereInputSchema.optional(),
}).strict() ;

export const OrganizationCreateArgsSchema: z.ZodType<Prisma.OrganizationCreateArgs> = z.object({
  select: OrganizationSelectSchema.optional(),
  include: OrganizationIncludeSchema.optional(),
  data: z.union([ OrganizationCreateInputSchema,OrganizationUncheckedCreateInputSchema ]),
}).strict() ;

export const OrganizationUpsertArgsSchema: z.ZodType<Prisma.OrganizationUpsertArgs> = z.object({
  select: OrganizationSelectSchema.optional(),
  include: OrganizationIncludeSchema.optional(),
  where: OrganizationWhereUniqueInputSchema,
  create: z.union([ OrganizationCreateInputSchema,OrganizationUncheckedCreateInputSchema ]),
  update: z.union([ OrganizationUpdateInputSchema,OrganizationUncheckedUpdateInputSchema ]),
}).strict() ;

export const OrganizationCreateManyArgsSchema: z.ZodType<Prisma.OrganizationCreateManyArgs> = z.object({
  data: z.union([ OrganizationCreateManyInputSchema,OrganizationCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const OrganizationDeleteArgsSchema: z.ZodType<Prisma.OrganizationDeleteArgs> = z.object({
  select: OrganizationSelectSchema.optional(),
  include: OrganizationIncludeSchema.optional(),
  where: OrganizationWhereUniqueInputSchema,
}).strict() ;

export const OrganizationUpdateArgsSchema: z.ZodType<Prisma.OrganizationUpdateArgs> = z.object({
  select: OrganizationSelectSchema.optional(),
  include: OrganizationIncludeSchema.optional(),
  data: z.union([ OrganizationUpdateInputSchema,OrganizationUncheckedUpdateInputSchema ]),
  where: OrganizationWhereUniqueInputSchema,
}).strict() ;

export const OrganizationUpdateManyArgsSchema: z.ZodType<Prisma.OrganizationUpdateManyArgs> = z.object({
  data: z.union([ OrganizationUpdateManyMutationInputSchema,OrganizationUncheckedUpdateManyInputSchema ]),
  where: OrganizationWhereInputSchema.optional(),
}).strict() ;

export const OrganizationDeleteManyArgsSchema: z.ZodType<Prisma.OrganizationDeleteManyArgs> = z.object({
  where: OrganizationWhereInputSchema.optional(),
}).strict() ;

export const OrganizationEndpointCreateArgsSchema: z.ZodType<Prisma.OrganizationEndpointCreateArgs> = z.object({
  select: OrganizationEndpointSelectSchema.optional(),
  data: z.union([ OrganizationEndpointCreateInputSchema,OrganizationEndpointUncheckedCreateInputSchema ]).optional(),
}).strict() ;

export const OrganizationEndpointUpsertArgsSchema: z.ZodType<Prisma.OrganizationEndpointUpsertArgs> = z.object({
  select: OrganizationEndpointSelectSchema.optional(),
  where: OrganizationEndpointWhereUniqueInputSchema,
  create: z.union([ OrganizationEndpointCreateInputSchema,OrganizationEndpointUncheckedCreateInputSchema ]),
  update: z.union([ OrganizationEndpointUpdateInputSchema,OrganizationEndpointUncheckedUpdateInputSchema ]),
}).strict() ;

export const OrganizationEndpointCreateManyArgsSchema: z.ZodType<Prisma.OrganizationEndpointCreateManyArgs> = z.object({
  data: z.union([ OrganizationEndpointCreateManyInputSchema,OrganizationEndpointCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const OrganizationEndpointDeleteArgsSchema: z.ZodType<Prisma.OrganizationEndpointDeleteArgs> = z.object({
  select: OrganizationEndpointSelectSchema.optional(),
  where: OrganizationEndpointWhereUniqueInputSchema,
}).strict() ;

export const OrganizationEndpointUpdateArgsSchema: z.ZodType<Prisma.OrganizationEndpointUpdateArgs> = z.object({
  select: OrganizationEndpointSelectSchema.optional(),
  data: z.union([ OrganizationEndpointUpdateInputSchema,OrganizationEndpointUncheckedUpdateInputSchema ]),
  where: OrganizationEndpointWhereUniqueInputSchema,
}).strict() ;

export const OrganizationEndpointUpdateManyArgsSchema: z.ZodType<Prisma.OrganizationEndpointUpdateManyArgs> = z.object({
  data: z.union([ OrganizationEndpointUpdateManyMutationInputSchema,OrganizationEndpointUncheckedUpdateManyInputSchema ]),
  where: OrganizationEndpointWhereInputSchema.optional(),
}).strict() ;

export const OrganizationEndpointDeleteManyArgsSchema: z.ZodType<Prisma.OrganizationEndpointDeleteManyArgs> = z.object({
  where: OrganizationEndpointWhereInputSchema.optional(),
}).strict() ;

export const OrganizationFavoriteTestCreateArgsSchema: z.ZodType<Prisma.OrganizationFavoriteTestCreateArgs> = z.object({
  select: OrganizationFavoriteTestSelectSchema.optional(),
  include: OrganizationFavoriteTestIncludeSchema.optional(),
  data: z.union([ OrganizationFavoriteTestCreateInputSchema,OrganizationFavoriteTestUncheckedCreateInputSchema ]).optional(),
}).strict() ;

export const OrganizationFavoriteTestUpsertArgsSchema: z.ZodType<Prisma.OrganizationFavoriteTestUpsertArgs> = z.object({
  select: OrganizationFavoriteTestSelectSchema.optional(),
  include: OrganizationFavoriteTestIncludeSchema.optional(),
  where: OrganizationFavoriteTestWhereUniqueInputSchema,
  create: z.union([ OrganizationFavoriteTestCreateInputSchema,OrganizationFavoriteTestUncheckedCreateInputSchema ]),
  update: z.union([ OrganizationFavoriteTestUpdateInputSchema,OrganizationFavoriteTestUncheckedUpdateInputSchema ]),
}).strict() ;

export const OrganizationFavoriteTestCreateManyArgsSchema: z.ZodType<Prisma.OrganizationFavoriteTestCreateManyArgs> = z.object({
  data: z.union([ OrganizationFavoriteTestCreateManyInputSchema,OrganizationFavoriteTestCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const OrganizationFavoriteTestDeleteArgsSchema: z.ZodType<Prisma.OrganizationFavoriteTestDeleteArgs> = z.object({
  select: OrganizationFavoriteTestSelectSchema.optional(),
  include: OrganizationFavoriteTestIncludeSchema.optional(),
  where: OrganizationFavoriteTestWhereUniqueInputSchema,
}).strict() ;

export const OrganizationFavoriteTestUpdateArgsSchema: z.ZodType<Prisma.OrganizationFavoriteTestUpdateArgs> = z.object({
  select: OrganizationFavoriteTestSelectSchema.optional(),
  include: OrganizationFavoriteTestIncludeSchema.optional(),
  data: z.union([ OrganizationFavoriteTestUpdateInputSchema,OrganizationFavoriteTestUncheckedUpdateInputSchema ]),
  where: OrganizationFavoriteTestWhereUniqueInputSchema,
}).strict() ;

export const OrganizationFavoriteTestUpdateManyArgsSchema: z.ZodType<Prisma.OrganizationFavoriteTestUpdateManyArgs> = z.object({
  data: z.union([ OrganizationFavoriteTestUpdateManyMutationInputSchema,OrganizationFavoriteTestUncheckedUpdateManyInputSchema ]),
  where: OrganizationFavoriteTestWhereInputSchema.optional(),
}).strict() ;

export const OrganizationFavoriteTestDeleteManyArgsSchema: z.ZodType<Prisma.OrganizationFavoriteTestDeleteManyArgs> = z.object({
  where: OrganizationFavoriteTestWhereInputSchema.optional(),
}).strict() ;

export const PatientCreateArgsSchema: z.ZodType<Prisma.PatientCreateArgs> = z.object({
  select: PatientSelectSchema.optional(),
  include: PatientIncludeSchema.optional(),
  data: z.union([ PatientCreateInputSchema,PatientUncheckedCreateInputSchema ]).optional(),
}).strict() ;

export const PatientUpsertArgsSchema: z.ZodType<Prisma.PatientUpsertArgs> = z.object({
  select: PatientSelectSchema.optional(),
  include: PatientIncludeSchema.optional(),
  where: PatientWhereUniqueInputSchema,
  create: z.union([ PatientCreateInputSchema,PatientUncheckedCreateInputSchema ]),
  update: z.union([ PatientUpdateInputSchema,PatientUncheckedUpdateInputSchema ]),
}).strict() ;

export const PatientCreateManyArgsSchema: z.ZodType<Prisma.PatientCreateManyArgs> = z.object({
  data: z.union([ PatientCreateManyInputSchema,PatientCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const PatientDeleteArgsSchema: z.ZodType<Prisma.PatientDeleteArgs> = z.object({
  select: PatientSelectSchema.optional(),
  include: PatientIncludeSchema.optional(),
  where: PatientWhereUniqueInputSchema,
}).strict() ;

export const PatientUpdateArgsSchema: z.ZodType<Prisma.PatientUpdateArgs> = z.object({
  select: PatientSelectSchema.optional(),
  include: PatientIncludeSchema.optional(),
  data: z.union([ PatientUpdateInputSchema,PatientUncheckedUpdateInputSchema ]),
  where: PatientWhereUniqueInputSchema,
}).strict() ;

export const PatientUpdateManyArgsSchema: z.ZodType<Prisma.PatientUpdateManyArgs> = z.object({
  data: z.union([ PatientUpdateManyMutationInputSchema,PatientUncheckedUpdateManyInputSchema ]),
  where: PatientWhereInputSchema.optional(),
}).strict() ;

export const PatientDeleteManyArgsSchema: z.ZodType<Prisma.PatientDeleteManyArgs> = z.object({
  where: PatientWhereInputSchema.optional(),
}).strict() ;

export const PatientOrganizationCreateArgsSchema: z.ZodType<Prisma.PatientOrganizationCreateArgs> = z.object({
  select: PatientOrganizationSelectSchema.optional(),
  include: PatientOrganizationIncludeSchema.optional(),
  data: z.union([ PatientOrganizationCreateInputSchema,PatientOrganizationUncheckedCreateInputSchema ]),
}).strict() ;

export const PatientOrganizationUpsertArgsSchema: z.ZodType<Prisma.PatientOrganizationUpsertArgs> = z.object({
  select: PatientOrganizationSelectSchema.optional(),
  include: PatientOrganizationIncludeSchema.optional(),
  where: PatientOrganizationWhereUniqueInputSchema,
  create: z.union([ PatientOrganizationCreateInputSchema,PatientOrganizationUncheckedCreateInputSchema ]),
  update: z.union([ PatientOrganizationUpdateInputSchema,PatientOrganizationUncheckedUpdateInputSchema ]),
}).strict() ;

export const PatientOrganizationCreateManyArgsSchema: z.ZodType<Prisma.PatientOrganizationCreateManyArgs> = z.object({
  data: z.union([ PatientOrganizationCreateManyInputSchema,PatientOrganizationCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const PatientOrganizationDeleteArgsSchema: z.ZodType<Prisma.PatientOrganizationDeleteArgs> = z.object({
  select: PatientOrganizationSelectSchema.optional(),
  include: PatientOrganizationIncludeSchema.optional(),
  where: PatientOrganizationWhereUniqueInputSchema,
}).strict() ;

export const PatientOrganizationUpdateArgsSchema: z.ZodType<Prisma.PatientOrganizationUpdateArgs> = z.object({
  select: PatientOrganizationSelectSchema.optional(),
  include: PatientOrganizationIncludeSchema.optional(),
  data: z.union([ PatientOrganizationUpdateInputSchema,PatientOrganizationUncheckedUpdateInputSchema ]),
  where: PatientOrganizationWhereUniqueInputSchema,
}).strict() ;

export const PatientOrganizationUpdateManyArgsSchema: z.ZodType<Prisma.PatientOrganizationUpdateManyArgs> = z.object({
  data: z.union([ PatientOrganizationUpdateManyMutationInputSchema,PatientOrganizationUncheckedUpdateManyInputSchema ]),
  where: PatientOrganizationWhereInputSchema.optional(),
}).strict() ;

export const PatientOrganizationDeleteManyArgsSchema: z.ZodType<Prisma.PatientOrganizationDeleteManyArgs> = z.object({
  where: PatientOrganizationWhereInputSchema.optional(),
}).strict() ;

export const PostCreateArgsSchema: z.ZodType<Prisma.PostCreateArgs> = z.object({
  select: PostSelectSchema.optional(),
  data: z.union([ PostCreateInputSchema,PostUncheckedCreateInputSchema ]),
}).strict() ;

export const PostUpsertArgsSchema: z.ZodType<Prisma.PostUpsertArgs> = z.object({
  select: PostSelectSchema.optional(),
  where: PostWhereUniqueInputSchema,
  create: z.union([ PostCreateInputSchema,PostUncheckedCreateInputSchema ]),
  update: z.union([ PostUpdateInputSchema,PostUncheckedUpdateInputSchema ]),
}).strict() ;

export const PostCreateManyArgsSchema: z.ZodType<Prisma.PostCreateManyArgs> = z.object({
  data: z.union([ PostCreateManyInputSchema,PostCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const PostDeleteArgsSchema: z.ZodType<Prisma.PostDeleteArgs> = z.object({
  select: PostSelectSchema.optional(),
  where: PostWhereUniqueInputSchema,
}).strict() ;

export const PostUpdateArgsSchema: z.ZodType<Prisma.PostUpdateArgs> = z.object({
  select: PostSelectSchema.optional(),
  data: z.union([ PostUpdateInputSchema,PostUncheckedUpdateInputSchema ]),
  where: PostWhereUniqueInputSchema,
}).strict() ;

export const PostUpdateManyArgsSchema: z.ZodType<Prisma.PostUpdateManyArgs> = z.object({
  data: z.union([ PostUpdateManyMutationInputSchema,PostUncheckedUpdateManyInputSchema ]),
  where: PostWhereInputSchema.optional(),
}).strict() ;

export const PostDeleteManyArgsSchema: z.ZodType<Prisma.PostDeleteManyArgs> = z.object({
  where: PostWhereInputSchema.optional(),
}).strict() ;

export const ProviderCreateArgsSchema: z.ZodType<Prisma.ProviderCreateArgs> = z.object({
  select: ProviderSelectSchema.optional(),
  include: ProviderIncludeSchema.optional(),
  data: z.union([ ProviderCreateInputSchema,ProviderUncheckedCreateInputSchema ]).optional(),
}).strict() ;

export const ProviderUpsertArgsSchema: z.ZodType<Prisma.ProviderUpsertArgs> = z.object({
  select: ProviderSelectSchema.optional(),
  include: ProviderIncludeSchema.optional(),
  where: ProviderWhereUniqueInputSchema,
  create: z.union([ ProviderCreateInputSchema,ProviderUncheckedCreateInputSchema ]),
  update: z.union([ ProviderUpdateInputSchema,ProviderUncheckedUpdateInputSchema ]),
}).strict() ;

export const ProviderCreateManyArgsSchema: z.ZodType<Prisma.ProviderCreateManyArgs> = z.object({
  data: z.union([ ProviderCreateManyInputSchema,ProviderCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const ProviderDeleteArgsSchema: z.ZodType<Prisma.ProviderDeleteArgs> = z.object({
  select: ProviderSelectSchema.optional(),
  include: ProviderIncludeSchema.optional(),
  where: ProviderWhereUniqueInputSchema,
}).strict() ;

export const ProviderUpdateArgsSchema: z.ZodType<Prisma.ProviderUpdateArgs> = z.object({
  select: ProviderSelectSchema.optional(),
  include: ProviderIncludeSchema.optional(),
  data: z.union([ ProviderUpdateInputSchema,ProviderUncheckedUpdateInputSchema ]),
  where: ProviderWhereUniqueInputSchema,
}).strict() ;

export const ProviderUpdateManyArgsSchema: z.ZodType<Prisma.ProviderUpdateManyArgs> = z.object({
  data: z.union([ ProviderUpdateManyMutationInputSchema,ProviderUncheckedUpdateManyInputSchema ]),
  where: ProviderWhereInputSchema.optional(),
}).strict() ;

export const ProviderDeleteManyArgsSchema: z.ZodType<Prisma.ProviderDeleteManyArgs> = z.object({
  where: ProviderWhereInputSchema.optional(),
}).strict() ;

export const ProviderEducationCreateArgsSchema: z.ZodType<Prisma.ProviderEducationCreateArgs> = z.object({
  select: ProviderEducationSelectSchema.optional(),
  include: ProviderEducationIncludeSchema.optional(),
  data: z.union([ ProviderEducationCreateInputSchema,ProviderEducationUncheckedCreateInputSchema ]),
}).strict() ;

export const ProviderEducationUpsertArgsSchema: z.ZodType<Prisma.ProviderEducationUpsertArgs> = z.object({
  select: ProviderEducationSelectSchema.optional(),
  include: ProviderEducationIncludeSchema.optional(),
  where: ProviderEducationWhereUniqueInputSchema,
  create: z.union([ ProviderEducationCreateInputSchema,ProviderEducationUncheckedCreateInputSchema ]),
  update: z.union([ ProviderEducationUpdateInputSchema,ProviderEducationUncheckedUpdateInputSchema ]),
}).strict() ;

export const ProviderEducationCreateManyArgsSchema: z.ZodType<Prisma.ProviderEducationCreateManyArgs> = z.object({
  data: z.union([ ProviderEducationCreateManyInputSchema,ProviderEducationCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const ProviderEducationDeleteArgsSchema: z.ZodType<Prisma.ProviderEducationDeleteArgs> = z.object({
  select: ProviderEducationSelectSchema.optional(),
  include: ProviderEducationIncludeSchema.optional(),
  where: ProviderEducationWhereUniqueInputSchema,
}).strict() ;

export const ProviderEducationUpdateArgsSchema: z.ZodType<Prisma.ProviderEducationUpdateArgs> = z.object({
  select: ProviderEducationSelectSchema.optional(),
  include: ProviderEducationIncludeSchema.optional(),
  data: z.union([ ProviderEducationUpdateInputSchema,ProviderEducationUncheckedUpdateInputSchema ]),
  where: ProviderEducationWhereUniqueInputSchema,
}).strict() ;

export const ProviderEducationUpdateManyArgsSchema: z.ZodType<Prisma.ProviderEducationUpdateManyArgs> = z.object({
  data: z.union([ ProviderEducationUpdateManyMutationInputSchema,ProviderEducationUncheckedUpdateManyInputSchema ]),
  where: ProviderEducationWhereInputSchema.optional(),
}).strict() ;

export const ProviderEducationDeleteManyArgsSchema: z.ZodType<Prisma.ProviderEducationDeleteManyArgs> = z.object({
  where: ProviderEducationWhereInputSchema.optional(),
}).strict() ;

export const ProviderFavoriteTestCreateArgsSchema: z.ZodType<Prisma.ProviderFavoriteTestCreateArgs> = z.object({
  select: ProviderFavoriteTestSelectSchema.optional(),
  include: ProviderFavoriteTestIncludeSchema.optional(),
  data: z.union([ ProviderFavoriteTestCreateInputSchema,ProviderFavoriteTestUncheckedCreateInputSchema ]).optional(),
}).strict() ;

export const ProviderFavoriteTestUpsertArgsSchema: z.ZodType<Prisma.ProviderFavoriteTestUpsertArgs> = z.object({
  select: ProviderFavoriteTestSelectSchema.optional(),
  include: ProviderFavoriteTestIncludeSchema.optional(),
  where: ProviderFavoriteTestWhereUniqueInputSchema,
  create: z.union([ ProviderFavoriteTestCreateInputSchema,ProviderFavoriteTestUncheckedCreateInputSchema ]),
  update: z.union([ ProviderFavoriteTestUpdateInputSchema,ProviderFavoriteTestUncheckedUpdateInputSchema ]),
}).strict() ;

export const ProviderFavoriteTestCreateManyArgsSchema: z.ZodType<Prisma.ProviderFavoriteTestCreateManyArgs> = z.object({
  data: z.union([ ProviderFavoriteTestCreateManyInputSchema,ProviderFavoriteTestCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const ProviderFavoriteTestDeleteArgsSchema: z.ZodType<Prisma.ProviderFavoriteTestDeleteArgs> = z.object({
  select: ProviderFavoriteTestSelectSchema.optional(),
  include: ProviderFavoriteTestIncludeSchema.optional(),
  where: ProviderFavoriteTestWhereUniqueInputSchema,
}).strict() ;

export const ProviderFavoriteTestUpdateArgsSchema: z.ZodType<Prisma.ProviderFavoriteTestUpdateArgs> = z.object({
  select: ProviderFavoriteTestSelectSchema.optional(),
  include: ProviderFavoriteTestIncludeSchema.optional(),
  data: z.union([ ProviderFavoriteTestUpdateInputSchema,ProviderFavoriteTestUncheckedUpdateInputSchema ]),
  where: ProviderFavoriteTestWhereUniqueInputSchema,
}).strict() ;

export const ProviderFavoriteTestUpdateManyArgsSchema: z.ZodType<Prisma.ProviderFavoriteTestUpdateManyArgs> = z.object({
  data: z.union([ ProviderFavoriteTestUpdateManyMutationInputSchema,ProviderFavoriteTestUncheckedUpdateManyInputSchema ]),
  where: ProviderFavoriteTestWhereInputSchema.optional(),
}).strict() ;

export const ProviderFavoriteTestDeleteManyArgsSchema: z.ZodType<Prisma.ProviderFavoriteTestDeleteManyArgs> = z.object({
  where: ProviderFavoriteTestWhereInputSchema.optional(),
}).strict() ;

export const ProviderOrganizationCreateArgsSchema: z.ZodType<Prisma.ProviderOrganizationCreateArgs> = z.object({
  select: ProviderOrganizationSelectSchema.optional(),
  include: ProviderOrganizationIncludeSchema.optional(),
  data: z.union([ ProviderOrganizationCreateInputSchema,ProviderOrganizationUncheckedCreateInputSchema ]),
}).strict() ;

export const ProviderOrganizationUpsertArgsSchema: z.ZodType<Prisma.ProviderOrganizationUpsertArgs> = z.object({
  select: ProviderOrganizationSelectSchema.optional(),
  include: ProviderOrganizationIncludeSchema.optional(),
  where: ProviderOrganizationWhereUniqueInputSchema,
  create: z.union([ ProviderOrganizationCreateInputSchema,ProviderOrganizationUncheckedCreateInputSchema ]),
  update: z.union([ ProviderOrganizationUpdateInputSchema,ProviderOrganizationUncheckedUpdateInputSchema ]),
}).strict() ;

export const ProviderOrganizationCreateManyArgsSchema: z.ZodType<Prisma.ProviderOrganizationCreateManyArgs> = z.object({
  data: z.union([ ProviderOrganizationCreateManyInputSchema,ProviderOrganizationCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const ProviderOrganizationDeleteArgsSchema: z.ZodType<Prisma.ProviderOrganizationDeleteArgs> = z.object({
  select: ProviderOrganizationSelectSchema.optional(),
  include: ProviderOrganizationIncludeSchema.optional(),
  where: ProviderOrganizationWhereUniqueInputSchema,
}).strict() ;

export const ProviderOrganizationUpdateArgsSchema: z.ZodType<Prisma.ProviderOrganizationUpdateArgs> = z.object({
  select: ProviderOrganizationSelectSchema.optional(),
  include: ProviderOrganizationIncludeSchema.optional(),
  data: z.union([ ProviderOrganizationUpdateInputSchema,ProviderOrganizationUncheckedUpdateInputSchema ]),
  where: ProviderOrganizationWhereUniqueInputSchema,
}).strict() ;

export const ProviderOrganizationUpdateManyArgsSchema: z.ZodType<Prisma.ProviderOrganizationUpdateManyArgs> = z.object({
  data: z.union([ ProviderOrganizationUpdateManyMutationInputSchema,ProviderOrganizationUncheckedUpdateManyInputSchema ]),
  where: ProviderOrganizationWhereInputSchema.optional(),
}).strict() ;

export const ProviderOrganizationDeleteManyArgsSchema: z.ZodType<Prisma.ProviderOrganizationDeleteManyArgs> = z.object({
  where: ProviderOrganizationWhereInputSchema.optional(),
}).strict() ;

export const SessionCreateArgsSchema: z.ZodType<Prisma.SessionCreateArgs> = z.object({
  select: SessionSelectSchema.optional(),
  include: SessionIncludeSchema.optional(),
  data: z.union([ SessionCreateInputSchema,SessionUncheckedCreateInputSchema ]),
}).strict() ;

export const SessionUpsertArgsSchema: z.ZodType<Prisma.SessionUpsertArgs> = z.object({
  select: SessionSelectSchema.optional(),
  include: SessionIncludeSchema.optional(),
  where: SessionWhereUniqueInputSchema,
  create: z.union([ SessionCreateInputSchema,SessionUncheckedCreateInputSchema ]),
  update: z.union([ SessionUpdateInputSchema,SessionUncheckedUpdateInputSchema ]),
}).strict() ;

export const SessionCreateManyArgsSchema: z.ZodType<Prisma.SessionCreateManyArgs> = z.object({
  data: z.union([ SessionCreateManyInputSchema,SessionCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const SessionDeleteArgsSchema: z.ZodType<Prisma.SessionDeleteArgs> = z.object({
  select: SessionSelectSchema.optional(),
  include: SessionIncludeSchema.optional(),
  where: SessionWhereUniqueInputSchema,
}).strict() ;

export const SessionUpdateArgsSchema: z.ZodType<Prisma.SessionUpdateArgs> = z.object({
  select: SessionSelectSchema.optional(),
  include: SessionIncludeSchema.optional(),
  data: z.union([ SessionUpdateInputSchema,SessionUncheckedUpdateInputSchema ]),
  where: SessionWhereUniqueInputSchema,
}).strict() ;

export const SessionUpdateManyArgsSchema: z.ZodType<Prisma.SessionUpdateManyArgs> = z.object({
  data: z.union([ SessionUpdateManyMutationInputSchema,SessionUncheckedUpdateManyInputSchema ]),
  where: SessionWhereInputSchema.optional(),
}).strict() ;

export const SessionDeleteManyArgsSchema: z.ZodType<Prisma.SessionDeleteManyArgs> = z.object({
  where: SessionWhereInputSchema.optional(),
}).strict() ;

export const SponsorCreateArgsSchema: z.ZodType<Prisma.SponsorCreateArgs> = z.object({
  select: SponsorSelectSchema.optional(),
  include: SponsorIncludeSchema.optional(),
  data: z.union([ SponsorCreateInputSchema,SponsorUncheckedCreateInputSchema ]).optional(),
}).strict() ;

export const SponsorUpsertArgsSchema: z.ZodType<Prisma.SponsorUpsertArgs> = z.object({
  select: SponsorSelectSchema.optional(),
  include: SponsorIncludeSchema.optional(),
  where: SponsorWhereUniqueInputSchema,
  create: z.union([ SponsorCreateInputSchema,SponsorUncheckedCreateInputSchema ]),
  update: z.union([ SponsorUpdateInputSchema,SponsorUncheckedUpdateInputSchema ]),
}).strict() ;

export const SponsorCreateManyArgsSchema: z.ZodType<Prisma.SponsorCreateManyArgs> = z.object({
  data: z.union([ SponsorCreateManyInputSchema,SponsorCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const SponsorDeleteArgsSchema: z.ZodType<Prisma.SponsorDeleteArgs> = z.object({
  select: SponsorSelectSchema.optional(),
  include: SponsorIncludeSchema.optional(),
  where: SponsorWhereUniqueInputSchema,
}).strict() ;

export const SponsorUpdateArgsSchema: z.ZodType<Prisma.SponsorUpdateArgs> = z.object({
  select: SponsorSelectSchema.optional(),
  include: SponsorIncludeSchema.optional(),
  data: z.union([ SponsorUpdateInputSchema,SponsorUncheckedUpdateInputSchema ]),
  where: SponsorWhereUniqueInputSchema,
}).strict() ;

export const SponsorUpdateManyArgsSchema: z.ZodType<Prisma.SponsorUpdateManyArgs> = z.object({
  data: z.union([ SponsorUpdateManyMutationInputSchema,SponsorUncheckedUpdateManyInputSchema ]),
  where: SponsorWhereInputSchema.optional(),
}).strict() ;

export const SponsorDeleteManyArgsSchema: z.ZodType<Prisma.SponsorDeleteManyArgs> = z.object({
  where: SponsorWhereInputSchema.optional(),
}).strict() ;

export const SponsoredProgramCreateArgsSchema: z.ZodType<Prisma.SponsoredProgramCreateArgs> = z.object({
  select: SponsoredProgramSelectSchema.optional(),
  include: SponsoredProgramIncludeSchema.optional(),
  data: z.union([ SponsoredProgramCreateInputSchema,SponsoredProgramUncheckedCreateInputSchema ]).optional(),
}).strict() ;

export const SponsoredProgramUpsertArgsSchema: z.ZodType<Prisma.SponsoredProgramUpsertArgs> = z.object({
  select: SponsoredProgramSelectSchema.optional(),
  include: SponsoredProgramIncludeSchema.optional(),
  where: SponsoredProgramWhereUniqueInputSchema,
  create: z.union([ SponsoredProgramCreateInputSchema,SponsoredProgramUncheckedCreateInputSchema ]),
  update: z.union([ SponsoredProgramUpdateInputSchema,SponsoredProgramUncheckedUpdateInputSchema ]),
}).strict() ;

export const SponsoredProgramCreateManyArgsSchema: z.ZodType<Prisma.SponsoredProgramCreateManyArgs> = z.object({
  data: z.union([ SponsoredProgramCreateManyInputSchema,SponsoredProgramCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const SponsoredProgramDeleteArgsSchema: z.ZodType<Prisma.SponsoredProgramDeleteArgs> = z.object({
  select: SponsoredProgramSelectSchema.optional(),
  include: SponsoredProgramIncludeSchema.optional(),
  where: SponsoredProgramWhereUniqueInputSchema,
}).strict() ;

export const SponsoredProgramUpdateArgsSchema: z.ZodType<Prisma.SponsoredProgramUpdateArgs> = z.object({
  select: SponsoredProgramSelectSchema.optional(),
  include: SponsoredProgramIncludeSchema.optional(),
  data: z.union([ SponsoredProgramUpdateInputSchema,SponsoredProgramUncheckedUpdateInputSchema ]),
  where: SponsoredProgramWhereUniqueInputSchema,
}).strict() ;

export const SponsoredProgramUpdateManyArgsSchema: z.ZodType<Prisma.SponsoredProgramUpdateManyArgs> = z.object({
  data: z.union([ SponsoredProgramUpdateManyMutationInputSchema,SponsoredProgramUncheckedUpdateManyInputSchema ]),
  where: SponsoredProgramWhereInputSchema.optional(),
}).strict() ;

export const SponsoredProgramDeleteManyArgsSchema: z.ZodType<Prisma.SponsoredProgramDeleteManyArgs> = z.object({
  where: SponsoredProgramWhereInputSchema.optional(),
}).strict() ;

export const SponsoredTestCreateArgsSchema: z.ZodType<Prisma.SponsoredTestCreateArgs> = z.object({
  select: SponsoredTestSelectSchema.optional(),
  include: SponsoredTestIncludeSchema.optional(),
  data: z.union([ SponsoredTestCreateInputSchema,SponsoredTestUncheckedCreateInputSchema ]),
}).strict() ;

export const SponsoredTestUpsertArgsSchema: z.ZodType<Prisma.SponsoredTestUpsertArgs> = z.object({
  select: SponsoredTestSelectSchema.optional(),
  include: SponsoredTestIncludeSchema.optional(),
  where: SponsoredTestWhereUniqueInputSchema,
  create: z.union([ SponsoredTestCreateInputSchema,SponsoredTestUncheckedCreateInputSchema ]),
  update: z.union([ SponsoredTestUpdateInputSchema,SponsoredTestUncheckedUpdateInputSchema ]),
}).strict() ;

export const SponsoredTestCreateManyArgsSchema: z.ZodType<Prisma.SponsoredTestCreateManyArgs> = z.object({
  data: z.union([ SponsoredTestCreateManyInputSchema,SponsoredTestCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const SponsoredTestDeleteArgsSchema: z.ZodType<Prisma.SponsoredTestDeleteArgs> = z.object({
  select: SponsoredTestSelectSchema.optional(),
  include: SponsoredTestIncludeSchema.optional(),
  where: SponsoredTestWhereUniqueInputSchema,
}).strict() ;

export const SponsoredTestUpdateArgsSchema: z.ZodType<Prisma.SponsoredTestUpdateArgs> = z.object({
  select: SponsoredTestSelectSchema.optional(),
  include: SponsoredTestIncludeSchema.optional(),
  data: z.union([ SponsoredTestUpdateInputSchema,SponsoredTestUncheckedUpdateInputSchema ]),
  where: SponsoredTestWhereUniqueInputSchema,
}).strict() ;

export const SponsoredTestUpdateManyArgsSchema: z.ZodType<Prisma.SponsoredTestUpdateManyArgs> = z.object({
  data: z.union([ SponsoredTestUpdateManyMutationInputSchema,SponsoredTestUncheckedUpdateManyInputSchema ]),
  where: SponsoredTestWhereInputSchema.optional(),
}).strict() ;

export const SponsoredTestDeleteManyArgsSchema: z.ZodType<Prisma.SponsoredTestDeleteManyArgs> = z.object({
  where: SponsoredTestWhereInputSchema.optional(),
}).strict() ;

export const TestBiomarkerCreateArgsSchema: z.ZodType<Prisma.TestBiomarkerCreateArgs> = z.object({
  select: TestBiomarkerSelectSchema.optional(),
  include: TestBiomarkerIncludeSchema.optional(),
  data: z.union([ TestBiomarkerCreateInputSchema,TestBiomarkerUncheckedCreateInputSchema ]),
}).strict() ;

export const TestBiomarkerUpsertArgsSchema: z.ZodType<Prisma.TestBiomarkerUpsertArgs> = z.object({
  select: TestBiomarkerSelectSchema.optional(),
  include: TestBiomarkerIncludeSchema.optional(),
  where: TestBiomarkerWhereUniqueInputSchema,
  create: z.union([ TestBiomarkerCreateInputSchema,TestBiomarkerUncheckedCreateInputSchema ]),
  update: z.union([ TestBiomarkerUpdateInputSchema,TestBiomarkerUncheckedUpdateInputSchema ]),
}).strict() ;

export const TestBiomarkerCreateManyArgsSchema: z.ZodType<Prisma.TestBiomarkerCreateManyArgs> = z.object({
  data: z.union([ TestBiomarkerCreateManyInputSchema,TestBiomarkerCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const TestBiomarkerDeleteArgsSchema: z.ZodType<Prisma.TestBiomarkerDeleteArgs> = z.object({
  select: TestBiomarkerSelectSchema.optional(),
  include: TestBiomarkerIncludeSchema.optional(),
  where: TestBiomarkerWhereUniqueInputSchema,
}).strict() ;

export const TestBiomarkerUpdateArgsSchema: z.ZodType<Prisma.TestBiomarkerUpdateArgs> = z.object({
  select: TestBiomarkerSelectSchema.optional(),
  include: TestBiomarkerIncludeSchema.optional(),
  data: z.union([ TestBiomarkerUpdateInputSchema,TestBiomarkerUncheckedUpdateInputSchema ]),
  where: TestBiomarkerWhereUniqueInputSchema,
}).strict() ;

export const TestBiomarkerUpdateManyArgsSchema: z.ZodType<Prisma.TestBiomarkerUpdateManyArgs> = z.object({
  data: z.union([ TestBiomarkerUpdateManyMutationInputSchema,TestBiomarkerUncheckedUpdateManyInputSchema ]),
  where: TestBiomarkerWhereInputSchema.optional(),
}).strict() ;

export const TestBiomarkerDeleteManyArgsSchema: z.ZodType<Prisma.TestBiomarkerDeleteManyArgs> = z.object({
  where: TestBiomarkerWhereInputSchema.optional(),
}).strict() ;

export const TestCatalogCreateArgsSchema: z.ZodType<Prisma.TestCatalogCreateArgs> = z.object({
  select: TestCatalogSelectSchema.optional(),
  include: TestCatalogIncludeSchema.optional(),
  data: z.union([ TestCatalogCreateInputSchema,TestCatalogUncheckedCreateInputSchema ]),
}).strict() ;

export const TestCatalogUpsertArgsSchema: z.ZodType<Prisma.TestCatalogUpsertArgs> = z.object({
  select: TestCatalogSelectSchema.optional(),
  include: TestCatalogIncludeSchema.optional(),
  where: TestCatalogWhereUniqueInputSchema,
  create: z.union([ TestCatalogCreateInputSchema,TestCatalogUncheckedCreateInputSchema ]),
  update: z.union([ TestCatalogUpdateInputSchema,TestCatalogUncheckedUpdateInputSchema ]),
}).strict() ;

export const TestCatalogCreateManyArgsSchema: z.ZodType<Prisma.TestCatalogCreateManyArgs> = z.object({
  data: z.union([ TestCatalogCreateManyInputSchema,TestCatalogCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const TestCatalogDeleteArgsSchema: z.ZodType<Prisma.TestCatalogDeleteArgs> = z.object({
  select: TestCatalogSelectSchema.optional(),
  include: TestCatalogIncludeSchema.optional(),
  where: TestCatalogWhereUniqueInputSchema,
}).strict() ;

export const TestCatalogUpdateArgsSchema: z.ZodType<Prisma.TestCatalogUpdateArgs> = z.object({
  select: TestCatalogSelectSchema.optional(),
  include: TestCatalogIncludeSchema.optional(),
  data: z.union([ TestCatalogUpdateInputSchema,TestCatalogUncheckedUpdateInputSchema ]),
  where: TestCatalogWhereUniqueInputSchema,
}).strict() ;

export const TestCatalogUpdateManyArgsSchema: z.ZodType<Prisma.TestCatalogUpdateManyArgs> = z.object({
  data: z.union([ TestCatalogUpdateManyMutationInputSchema,TestCatalogUncheckedUpdateManyInputSchema ]),
  where: TestCatalogWhereInputSchema.optional(),
}).strict() ;

export const TestCatalogDeleteManyArgsSchema: z.ZodType<Prisma.TestCatalogDeleteManyArgs> = z.object({
  where: TestCatalogWhereInputSchema.optional(),
}).strict() ;

export const TestCptCodeCreateArgsSchema: z.ZodType<Prisma.TestCptCodeCreateArgs> = z.object({
  select: TestCptCodeSelectSchema.optional(),
  include: TestCptCodeIncludeSchema.optional(),
  data: z.union([ TestCptCodeCreateInputSchema,TestCptCodeUncheckedCreateInputSchema ]),
}).strict() ;

export const TestCptCodeUpsertArgsSchema: z.ZodType<Prisma.TestCptCodeUpsertArgs> = z.object({
  select: TestCptCodeSelectSchema.optional(),
  include: TestCptCodeIncludeSchema.optional(),
  where: TestCptCodeWhereUniqueInputSchema,
  create: z.union([ TestCptCodeCreateInputSchema,TestCptCodeUncheckedCreateInputSchema ]),
  update: z.union([ TestCptCodeUpdateInputSchema,TestCptCodeUncheckedUpdateInputSchema ]),
}).strict() ;

export const TestCptCodeCreateManyArgsSchema: z.ZodType<Prisma.TestCptCodeCreateManyArgs> = z.object({
  data: z.union([ TestCptCodeCreateManyInputSchema,TestCptCodeCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const TestCptCodeDeleteArgsSchema: z.ZodType<Prisma.TestCptCodeDeleteArgs> = z.object({
  select: TestCptCodeSelectSchema.optional(),
  include: TestCptCodeIncludeSchema.optional(),
  where: TestCptCodeWhereUniqueInputSchema,
}).strict() ;

export const TestCptCodeUpdateArgsSchema: z.ZodType<Prisma.TestCptCodeUpdateArgs> = z.object({
  select: TestCptCodeSelectSchema.optional(),
  include: TestCptCodeIncludeSchema.optional(),
  data: z.union([ TestCptCodeUpdateInputSchema,TestCptCodeUncheckedUpdateInputSchema ]),
  where: TestCptCodeWhereUniqueInputSchema,
}).strict() ;

export const TestCptCodeUpdateManyArgsSchema: z.ZodType<Prisma.TestCptCodeUpdateManyArgs> = z.object({
  data: z.union([ TestCptCodeUpdateManyMutationInputSchema,TestCptCodeUncheckedUpdateManyInputSchema ]),
  where: TestCptCodeWhereInputSchema.optional(),
}).strict() ;

export const TestCptCodeDeleteManyArgsSchema: z.ZodType<Prisma.TestCptCodeDeleteManyArgs> = z.object({
  where: TestCptCodeWhereInputSchema.optional(),
}).strict() ;

export const TestGeneCreateArgsSchema: z.ZodType<Prisma.TestGeneCreateArgs> = z.object({
  select: TestGeneSelectSchema.optional(),
  include: TestGeneIncludeSchema.optional(),
  data: z.union([ TestGeneCreateInputSchema,TestGeneUncheckedCreateInputSchema ]),
}).strict() ;

export const TestGeneUpsertArgsSchema: z.ZodType<Prisma.TestGeneUpsertArgs> = z.object({
  select: TestGeneSelectSchema.optional(),
  include: TestGeneIncludeSchema.optional(),
  where: TestGeneWhereUniqueInputSchema,
  create: z.union([ TestGeneCreateInputSchema,TestGeneUncheckedCreateInputSchema ]),
  update: z.union([ TestGeneUpdateInputSchema,TestGeneUncheckedUpdateInputSchema ]),
}).strict() ;

export const TestGeneCreateManyArgsSchema: z.ZodType<Prisma.TestGeneCreateManyArgs> = z.object({
  data: z.union([ TestGeneCreateManyInputSchema,TestGeneCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const TestGeneDeleteArgsSchema: z.ZodType<Prisma.TestGeneDeleteArgs> = z.object({
  select: TestGeneSelectSchema.optional(),
  include: TestGeneIncludeSchema.optional(),
  where: TestGeneWhereUniqueInputSchema,
}).strict() ;

export const TestGeneUpdateArgsSchema: z.ZodType<Prisma.TestGeneUpdateArgs> = z.object({
  select: TestGeneSelectSchema.optional(),
  include: TestGeneIncludeSchema.optional(),
  data: z.union([ TestGeneUpdateInputSchema,TestGeneUncheckedUpdateInputSchema ]),
  where: TestGeneWhereUniqueInputSchema,
}).strict() ;

export const TestGeneUpdateManyArgsSchema: z.ZodType<Prisma.TestGeneUpdateManyArgs> = z.object({
  data: z.union([ TestGeneUpdateManyMutationInputSchema,TestGeneUncheckedUpdateManyInputSchema ]),
  where: TestGeneWhereInputSchema.optional(),
}).strict() ;

export const TestGeneDeleteManyArgsSchema: z.ZodType<Prisma.TestGeneDeleteManyArgs> = z.object({
  where: TestGeneWhereInputSchema.optional(),
}).strict() ;

export const TestOrderLoincCreateArgsSchema: z.ZodType<Prisma.TestOrderLoincCreateArgs> = z.object({
  select: TestOrderLoincSelectSchema.optional(),
  include: TestOrderLoincIncludeSchema.optional(),
  data: z.union([ TestOrderLoincCreateInputSchema,TestOrderLoincUncheckedCreateInputSchema ]),
}).strict() ;

export const TestOrderLoincUpsertArgsSchema: z.ZodType<Prisma.TestOrderLoincUpsertArgs> = z.object({
  select: TestOrderLoincSelectSchema.optional(),
  include: TestOrderLoincIncludeSchema.optional(),
  where: TestOrderLoincWhereUniqueInputSchema,
  create: z.union([ TestOrderLoincCreateInputSchema,TestOrderLoincUncheckedCreateInputSchema ]),
  update: z.union([ TestOrderLoincUpdateInputSchema,TestOrderLoincUncheckedUpdateInputSchema ]),
}).strict() ;

export const TestOrderLoincCreateManyArgsSchema: z.ZodType<Prisma.TestOrderLoincCreateManyArgs> = z.object({
  data: z.union([ TestOrderLoincCreateManyInputSchema,TestOrderLoincCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const TestOrderLoincDeleteArgsSchema: z.ZodType<Prisma.TestOrderLoincDeleteArgs> = z.object({
  select: TestOrderLoincSelectSchema.optional(),
  include: TestOrderLoincIncludeSchema.optional(),
  where: TestOrderLoincWhereUniqueInputSchema,
}).strict() ;

export const TestOrderLoincUpdateArgsSchema: z.ZodType<Prisma.TestOrderLoincUpdateArgs> = z.object({
  select: TestOrderLoincSelectSchema.optional(),
  include: TestOrderLoincIncludeSchema.optional(),
  data: z.union([ TestOrderLoincUpdateInputSchema,TestOrderLoincUncheckedUpdateInputSchema ]),
  where: TestOrderLoincWhereUniqueInputSchema,
}).strict() ;

export const TestOrderLoincUpdateManyArgsSchema: z.ZodType<Prisma.TestOrderLoincUpdateManyArgs> = z.object({
  data: z.union([ TestOrderLoincUpdateManyMutationInputSchema,TestOrderLoincUncheckedUpdateManyInputSchema ]),
  where: TestOrderLoincWhereInputSchema.optional(),
}).strict() ;

export const TestOrderLoincDeleteManyArgsSchema: z.ZodType<Prisma.TestOrderLoincDeleteManyArgs> = z.object({
  where: TestOrderLoincWhereInputSchema.optional(),
}).strict() ;

export const TestResultLoincCreateArgsSchema: z.ZodType<Prisma.TestResultLoincCreateArgs> = z.object({
  select: TestResultLoincSelectSchema.optional(),
  include: TestResultLoincIncludeSchema.optional(),
  data: z.union([ TestResultLoincCreateInputSchema,TestResultLoincUncheckedCreateInputSchema ]),
}).strict() ;

export const TestResultLoincUpsertArgsSchema: z.ZodType<Prisma.TestResultLoincUpsertArgs> = z.object({
  select: TestResultLoincSelectSchema.optional(),
  include: TestResultLoincIncludeSchema.optional(),
  where: TestResultLoincWhereUniqueInputSchema,
  create: z.union([ TestResultLoincCreateInputSchema,TestResultLoincUncheckedCreateInputSchema ]),
  update: z.union([ TestResultLoincUpdateInputSchema,TestResultLoincUncheckedUpdateInputSchema ]),
}).strict() ;

export const TestResultLoincCreateManyArgsSchema: z.ZodType<Prisma.TestResultLoincCreateManyArgs> = z.object({
  data: z.union([ TestResultLoincCreateManyInputSchema,TestResultLoincCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const TestResultLoincDeleteArgsSchema: z.ZodType<Prisma.TestResultLoincDeleteArgs> = z.object({
  select: TestResultLoincSelectSchema.optional(),
  include: TestResultLoincIncludeSchema.optional(),
  where: TestResultLoincWhereUniqueInputSchema,
}).strict() ;

export const TestResultLoincUpdateArgsSchema: z.ZodType<Prisma.TestResultLoincUpdateArgs> = z.object({
  select: TestResultLoincSelectSchema.optional(),
  include: TestResultLoincIncludeSchema.optional(),
  data: z.union([ TestResultLoincUpdateInputSchema,TestResultLoincUncheckedUpdateInputSchema ]),
  where: TestResultLoincWhereUniqueInputSchema,
}).strict() ;

export const TestResultLoincUpdateManyArgsSchema: z.ZodType<Prisma.TestResultLoincUpdateManyArgs> = z.object({
  data: z.union([ TestResultLoincUpdateManyMutationInputSchema,TestResultLoincUncheckedUpdateManyInputSchema ]),
  where: TestResultLoincWhereInputSchema.optional(),
}).strict() ;

export const TestResultLoincDeleteManyArgsSchema: z.ZodType<Prisma.TestResultLoincDeleteManyArgs> = z.object({
  where: TestResultLoincWhereInputSchema.optional(),
}).strict() ;

export const UserCreateArgsSchema: z.ZodType<Prisma.UserCreateArgs> = z.object({
  select: UserSelectSchema.optional(),
  include: UserIncludeSchema.optional(),
  data: z.union([ UserCreateInputSchema,UserUncheckedCreateInputSchema ]).optional(),
}).strict() ;

export const UserUpsertArgsSchema: z.ZodType<Prisma.UserUpsertArgs> = z.object({
  select: UserSelectSchema.optional(),
  include: UserIncludeSchema.optional(),
  where: UserWhereUniqueInputSchema,
  create: z.union([ UserCreateInputSchema,UserUncheckedCreateInputSchema ]),
  update: z.union([ UserUpdateInputSchema,UserUncheckedUpdateInputSchema ]),
}).strict() ;

export const UserCreateManyArgsSchema: z.ZodType<Prisma.UserCreateManyArgs> = z.object({
  data: z.union([ UserCreateManyInputSchema,UserCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const UserDeleteArgsSchema: z.ZodType<Prisma.UserDeleteArgs> = z.object({
  select: UserSelectSchema.optional(),
  include: UserIncludeSchema.optional(),
  where: UserWhereUniqueInputSchema,
}).strict() ;

export const UserUpdateArgsSchema: z.ZodType<Prisma.UserUpdateArgs> = z.object({
  select: UserSelectSchema.optional(),
  include: UserIncludeSchema.optional(),
  data: z.union([ UserUpdateInputSchema,UserUncheckedUpdateInputSchema ]),
  where: UserWhereUniqueInputSchema,
}).strict() ;

export const UserUpdateManyArgsSchema: z.ZodType<Prisma.UserUpdateManyArgs> = z.object({
  data: z.union([ UserUpdateManyMutationInputSchema,UserUncheckedUpdateManyInputSchema ]),
  where: UserWhereInputSchema.optional(),
}).strict() ;

export const UserDeleteManyArgsSchema: z.ZodType<Prisma.UserDeleteManyArgs> = z.object({
  where: UserWhereInputSchema.optional(),
}).strict() ;

export const UserAttributeCreateArgsSchema: z.ZodType<Prisma.UserAttributeCreateArgs> = z.object({
  select: UserAttributeSelectSchema.optional(),
  include: UserAttributeIncludeSchema.optional(),
  data: z.union([ UserAttributeCreateInputSchema,UserAttributeUncheckedCreateInputSchema ]),
}).strict() ;

export const UserAttributeUpsertArgsSchema: z.ZodType<Prisma.UserAttributeUpsertArgs> = z.object({
  select: UserAttributeSelectSchema.optional(),
  include: UserAttributeIncludeSchema.optional(),
  where: UserAttributeWhereUniqueInputSchema,
  create: z.union([ UserAttributeCreateInputSchema,UserAttributeUncheckedCreateInputSchema ]),
  update: z.union([ UserAttributeUpdateInputSchema,UserAttributeUncheckedUpdateInputSchema ]),
}).strict() ;

export const UserAttributeCreateManyArgsSchema: z.ZodType<Prisma.UserAttributeCreateManyArgs> = z.object({
  data: z.union([ UserAttributeCreateManyInputSchema,UserAttributeCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const UserAttributeDeleteArgsSchema: z.ZodType<Prisma.UserAttributeDeleteArgs> = z.object({
  select: UserAttributeSelectSchema.optional(),
  include: UserAttributeIncludeSchema.optional(),
  where: UserAttributeWhereUniqueInputSchema,
}).strict() ;

export const UserAttributeUpdateArgsSchema: z.ZodType<Prisma.UserAttributeUpdateArgs> = z.object({
  select: UserAttributeSelectSchema.optional(),
  include: UserAttributeIncludeSchema.optional(),
  data: z.union([ UserAttributeUpdateInputSchema,UserAttributeUncheckedUpdateInputSchema ]),
  where: UserAttributeWhereUniqueInputSchema,
}).strict() ;

export const UserAttributeUpdateManyArgsSchema: z.ZodType<Prisma.UserAttributeUpdateManyArgs> = z.object({
  data: z.union([ UserAttributeUpdateManyMutationInputSchema,UserAttributeUncheckedUpdateManyInputSchema ]),
  where: UserAttributeWhereInputSchema.optional(),
}).strict() ;

export const UserAttributeDeleteManyArgsSchema: z.ZodType<Prisma.UserAttributeDeleteManyArgs> = z.object({
  where: UserAttributeWhereInputSchema.optional(),
}).strict() ;

export const VerificationTokenCreateArgsSchema: z.ZodType<Prisma.VerificationTokenCreateArgs> = z.object({
  select: VerificationTokenSelectSchema.optional(),
  data: z.union([ VerificationTokenCreateInputSchema,VerificationTokenUncheckedCreateInputSchema ]),
}).strict() ;

export const VerificationTokenUpsertArgsSchema: z.ZodType<Prisma.VerificationTokenUpsertArgs> = z.object({
  select: VerificationTokenSelectSchema.optional(),
  where: VerificationTokenWhereUniqueInputSchema,
  create: z.union([ VerificationTokenCreateInputSchema,VerificationTokenUncheckedCreateInputSchema ]),
  update: z.union([ VerificationTokenUpdateInputSchema,VerificationTokenUncheckedUpdateInputSchema ]),
}).strict() ;

export const VerificationTokenCreateManyArgsSchema: z.ZodType<Prisma.VerificationTokenCreateManyArgs> = z.object({
  data: z.union([ VerificationTokenCreateManyInputSchema,VerificationTokenCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const VerificationTokenDeleteArgsSchema: z.ZodType<Prisma.VerificationTokenDeleteArgs> = z.object({
  select: VerificationTokenSelectSchema.optional(),
  where: VerificationTokenWhereUniqueInputSchema,
}).strict() ;

export const VerificationTokenUpdateArgsSchema: z.ZodType<Prisma.VerificationTokenUpdateArgs> = z.object({
  select: VerificationTokenSelectSchema.optional(),
  data: z.union([ VerificationTokenUpdateInputSchema,VerificationTokenUncheckedUpdateInputSchema ]),
  where: VerificationTokenWhereUniqueInputSchema,
}).strict() ;

export const VerificationTokenUpdateManyArgsSchema: z.ZodType<Prisma.VerificationTokenUpdateManyArgs> = z.object({
  data: z.union([ VerificationTokenUpdateManyMutationInputSchema,VerificationTokenUncheckedUpdateManyInputSchema ]),
  where: VerificationTokenWhereInputSchema.optional(),
}).strict() ;

export const VerificationTokenDeleteManyArgsSchema: z.ZodType<Prisma.VerificationTokenDeleteManyArgs> = z.object({
  where: VerificationTokenWhereInputSchema.optional(),
}).strict() ;