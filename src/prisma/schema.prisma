generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextIndex", "fullTextSearch"]
  binaryTargets   = ["native", "debian-openssl-3.0.x", "linux-arm64-openssl-1.1.x", "rhel-openssl-3.0.x", "linux-musl-openssl-3.0.x"]
}

generator zod {
  provider                         = "pnpm dlx zod-prisma-types"
  writeBarrelFiles                 = "false"
  useMultipleFiles                 = "false"
  createRelationValuesTypes        = "true"
  writeNullishInModelTypes         = "false"
  addSelectType                    = "true"
  createOptionalDefaultValuesTypes = "false"
  validateWhereUniqueInput         = "false"
  useDefaultValidators             = "false"
  addIncludeType                   = "true"
  createModelTypes                 = "true"
  createPartialTypes               = "true"
  addInputTypeValidation           = "false"
  createInputTypes                 = "true"
  coerceDate                       = "false"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Account {
  id                       String    @id
  userId                   String    @unique(map: "userId_UNIQUE")
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String?   @db.Text
  access_token             String?   @db.Text
  expires_at               Int?
  token_type               String?
  scope                    String?
  state                    String?   @db.VarChar(256)
  id_token                 String?   @db.Text
  session_state            String?
  refresh_token_expires_in Int?
  epic_dstu2_patient       String?   @db.VarChar(45)
  appointment              String?   @db.VarChar(45)
  dob                      String?   @db.VarChar(45)
  encounter                String?   @db.VarChar(45)
  location                 String?   @db.VarChar(45)
  loginDepartment          String?   @db.VarChar(45)
  need_patient_banner      String?   @db.VarChar(45)
  patient                  String?   @db.VarChar(45)
  smart_style_url          String?   @db.Text
  unconfirmed_status       String?   @db.VarChar(45)
  user_email               String?   @db.VarChar(45)
  createdAt                DateTime? @default(now()) @db.DateTime(0)
  updatedAt                DateTime? @db.DateTime(0)
  user                     User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Admin {
  Id              String        @id @default(dbgenerated("(uuid())")) @db.VarChar(45)
  Name            String?
  Email           String?       @db.VarChar(255)
  UserAttributeId String        @unique(map: "UserAttributeId") @db.VarChar(45)
  UserAttribute   UserAttribute @relation(fields: [UserAttributeId], references: [Id], onDelete: NoAction, onUpdate: NoAction, map: "admin_ibfk_1")
}

model Attachment {
  Id                 String               @id @default(dbgenerated("(uuid())")) @db.VarChar(45)
  AttachmentType     String?              @db.VarChar(45)
  AttachmentUrl      String?              @db.VarChar(512)
  CreatedAt          DateTime?            @default(now()) @db.DateTime(0)
  UpdatedAt          DateTime?            @default(now()) @db.DateTime(0)
  LabOrderAttachment LabOrderAttachment[]
}

model BIOMARKER {
  HGNCId             String          @id @db.VarChar(20)
  HGNCStatus         String?         @db.VarChar(128)
  HGNCApprovedSymbol String?         @unique(map: "idx_unique_HGNCApprovedSymbol") @db.VarChar(512)
  HGNCApprovedName   String?         @db.VarChar(512)
  TestBiomarker      TestBiomarker[]
}

model ICD {
  Id               String        @id @default(dbgenerated("(uuid())")) @db.VarChar(45)
  Code             String?       @db.VarChar(45)
  ShortDescription String?       @db.Text
  CreatedAt        DateTime?     @default(now()) @db.DateTime(0)
  UpdatedAt        DateTime?     @default(now()) @db.DateTime(0)
  LabOrderIcd      LabOrderIcd[]
}

model LOINC {
  Loinc_Num                 String            @id @db.VarChar(128)
  COMPONENT                 String?           @db.Text
  PROPERTY                  String?           @db.Text
  TIME_ASPCT                String?           @db.Text
  SYSTEM                    String?           @db.Text
  SCALE_TYP                 String?           @db.Text
  METHOD_TYP                String?           @db.Text
  CLASS                     String?           @db.Text
  VersionLastChanged        String?           @db.Text
  CHNG_TYPE                 String?           @db.Text
  DefinitionDescription     String?           @db.Text
  STATUS                    String?           @db.Text
  CONSUMER_NAME             String?           @db.Text
  CLASSTYPE                 Int?
  FORMULA                   String?           @db.Text
  EXMPL_ANSWERS             String?           @db.Text
  SURVEY_QUEST_TEXT         String?           @db.Text
  SURVEY_QUEST_SRC          String?           @db.Text
  UNITSREQUIRED             String?           @db.Text
  RELATEDNAMES2             String?           @db.Text
  SHORTNAME                 String?           @db.Text
  ORDER_OBS                 String?           @db.Text
  HL7_FIELD_SUBFIELD_ID     String?           @db.Text
  EXTERNAL_COPYRIGHT_NOTICE String?           @db.Text
  EXAMPLE_UNITS             String?           @db.Text
  LONG_COMMON_NAME          String?           @db.Text
  EXAMPLE_UCUM_UNITS        String?           @db.Text
  STATUS_REASON             String?           @db.Text
  STATUS_TEXT               String?           @db.Text
  CHANGE_REASON_PUBLIC      String?           @db.Text
  COMMON_TEST_RANK          Int?
  COMMON_ORDER_RANK         Int?
  HL7_ATTACHMENT_STRUCTURE  String?           @db.Text
  EXTERNAL_COPYRIGHT_LINK   String?           @db.Text
  PanelType                 String?           @db.Text
  AskAtOrderEntry           String?           @db.Text
  AssociatedObservations    String?           @db.Text
  VersionFirstReleased      String?           @db.Text
  ValidHL7AttachmentRequest String?           @db.Text
  DisplayName               String?           @db.Text
  TestOrderLoinc            TestOrderLoinc[]
  TestResultLoinc           TestResultLoinc[]
}

model Lab {
  LabId         Int             @id @default(autoincrement())
  LabName       String?         @db.VarChar(512)
  LabCode       String?         @db.VarChar(2)
  Address       String?         @db.VarChar(512)
  City          String?         @db.VarChar(512)
  State         String?         @db.VarChar(512)
  Zip           String?         @db.VarChar(512)
  SponsoredTest SponsoredTest[]
  TestCatalog   TestCatalog[]
}

model LabOrder {
  Id                                             String                       @id @default(dbgenerated("(uuid())")) @db.VarChar(45)
  OrderNumber                                    String?                      @db.VarChar(45)
  AccessionNumber                                String?                      @db.VarChar(45)
  OrderingProviderId                             String?                      @db.VarChar(45)
  TreatingProviderId                             String?                      @db.VarChar(45)
  PatientId                                      String?                      @db.VarChar(45)
  PatientMRN                                     String?                      @db.VarChar(45)
  PatientMobile                                  String?                      @db.Text
  PatientEmail                                   String?                      @db.Text
  OrganizationId                                 String?                      @db.VarChar(45)
  OrderDate                                      DateTime?                    @default(now()) @db.DateTime(0)
  OrderNotes                                     String?                      @db.Text
  CreatedAt                                      DateTime?                    @default(now()) @db.DateTime(0)
  UpdatedAt                                      DateTime?                    @default(now()) @db.DateTime(0)
  OrderingProvider                               Provider?                    @relation("LabOrder_OrderingProviderIdToProvider", fields: [OrderingProviderId], references: [Id], onDelete: NoAction, onUpdate: NoAction, map: "laborder_ibfk_1")
  TreatingProvider                               Provider?                    @relation("LabOrder_TreatingProviderIdToProvider", fields: [TreatingProviderId], references: [Id], onDelete: NoAction, onUpdate: NoAction, map: "laborder_ibfk_2")
  Patient                                        Patient?                     @relation(fields: [PatientId], references: [Id], onDelete: NoAction, onUpdate: NoAction, map: "laborder_ibfk_3")
  Organization                                   Organization?                @relation(fields: [OrganizationId], references: [Id], onDelete: NoAction, onUpdate: NoAction, map: "laborder_ibfk_4")
  LabOrderAttachment                             LabOrderAttachment[]
  LabOrderBilling                                LabOrderBilling[]
  LabOrderIcd                                    LabOrderIcd[]
  LabOrderSpecimen                               LabOrderSpecimen[]
  LabOrderSponsoredTestConsent                   LabOrderSponsoredTestConsent[]
  LabOrderStatus                                 LabOrderStatus[]
  LabOrderTest                                   LabOrderTest[]

  @@index([OrderingProviderId], map: "ordering_provider_order_idx")
  @@index([OrganizationId], map: "organization_order_idx")
  @@index([PatientId], map: "patient_order_idx")
  @@index([TreatingProviderId], map: "treating_provider_order_idx")
}

model LabOrderAttachment {
  Id           String      @id @default(dbgenerated("(uuid())")) @db.VarChar(45)
  LabOrderId   String?     @db.VarChar(45)
  AttachmentId String?     @db.VarChar(45)
  CreatedAt    DateTime?   @default(now()) @db.DateTime(0)
  UpdatedAt    DateTime?   @default(now()) @db.DateTime(0)
  LabOrder     LabOrder?   @relation(fields: [LabOrderId], references: [Id], onDelete: NoAction, onUpdate: NoAction, map: "laborderattachment_ibfk_1")
  Attachment   Attachment? @relation(fields: [AttachmentId], references: [Id], onDelete: NoAction, onUpdate: NoAction, map: "laborderattachment_ibfk_2")

  @@index([AttachmentId], map: "laborder_attachment_attachment_idx")
  @@index([LabOrderId], map: "laborder_attachment_idx")
}

model LabOrderBilling {
  Id                       String    @id @default(dbgenerated("(uuid())")) @db.VarChar(45)
  LabOrderId               String?   @db.VarChar(45)
  BillToId                 String?   @db.VarChar(45)
  HealthPalnId             String?   @db.VarChar(45)
  PatientStatus            String?   @db.VarChar(45)
  SponoseredTestCouponCode String?   @db.VarChar(45)
  CreatedAt                DateTime? @default(now()) @db.DateTime(0)
  UpdatedAt                DateTime? @default(now()) @db.DateTime(0)
  LabOrder                 LabOrder? @relation(fields: [LabOrderId], references: [Id], onDelete: NoAction, onUpdate: NoAction, map: "laborderbilling_ibfk_1")

  @@index([LabOrderId], map: "laborder_billing_idx")
}

model LabOrderIcd {
  Id         String    @id @default(dbgenerated("(uuid())")) @db.VarChar(45)
  LabOrderId String?   @db.VarChar(45)
  ICDId      String?   @db.VarChar(45)
  CreatedAt  DateTime? @default(now()) @db.DateTime(0)
  UpdatedAt  DateTime? @default(now()) @db.DateTime(0)
  LabOrder   LabOrder? @relation(fields: [LabOrderId], references: [Id], onDelete: NoAction, onUpdate: NoAction, map: "labordericd_ibfk_1")
  ICD        ICD?      @relation(fields: [ICDId], references: [Id], onDelete: NoAction, onUpdate: NoAction, map: "labordericd_ibfk_2")

  @@index([ICDId], map: "laborder_icd_icd_idx")
  @@index([LabOrderId], map: "laborder_icd_idx")
}

model LabOrderSpecimen {
  Id               String    @id @default(dbgenerated("(uuid())")) @db.VarChar(45)
  LabOrderId       String?   @db.VarChar(45)
  SpecimenType     String?   @db.VarChar(45)
  SpecimenCount    String?   @db.VarChar(45)
  CollectedDate    DateTime? @db.Date
  CollectedTime    String?   @db.VarChar(45)
  SpecimenID       String?   @db.VarChar(45)
  BodySite         String?   @db.VarChar(45)
  TumorType        String?   @db.VarChar(45)
  Fixative         String?   @db.VarChar(45)
  FixativeDuration String?   @db.VarChar(45)
  ColdIschemicTime String?   @db.VarChar(45)
  CreatedAt        DateTime? @default(now()) @db.DateTime(0)
  UpdatedAt        DateTime? @default(now()) @db.DateTime(0)
  LabOrder         LabOrder? @relation(fields: [LabOrderId], references: [Id], onDelete: NoAction, onUpdate: NoAction, map: "laborderspecimen_ibfk_1")

  @@index([LabOrderId], map: "laborder_specimen_idx")
}

model LabOrderSponsoredTestConsent {
  Id                      String         @id @default(dbgenerated("(uuid())")) @db.VarChar(45)
  LabOrderId              String?        @db.VarChar(45)
  SponsoredCasandraTestId String?        @db.VarChar(512)
  ProviderName            String?        @db.VarChar(45)
  ProviderNPI             String?        @db.VarChar(45)
  ConsentAt               DateTime?      @default(now()) @db.DateTime(0)
  CreatedAt               DateTime?      @default(now()) @db.DateTime(0)
  UpdatedAt               DateTime?      @default(now()) @db.DateTime(0)
  SponsoredTest           SponsoredTest? @relation(fields: [SponsoredCasandraTestId], references: [CasandraTestId], onDelete: NoAction, onUpdate: NoAction, map: "consent_casandra_id_ibfk_2")
  LabOrder                LabOrder?      @relation(fields: [LabOrderId], references: [Id], onDelete: NoAction, onUpdate: NoAction, map: "consent_ibfk_1")

  @@index([SponsoredCasandraTestId], map: "consent_casandra_id_idx")
  @@index([LabOrderId], map: "consent_id_idx")
}


model LabOrderStatus {
  Id         String    @id @default(dbgenerated("(uuid())")) @db.VarChar(45)
  LabOrderId String?   @db.VarChar(45)
  Status     String?   @db.VarChar(45)
  StatusDate DateTime? @db.DateTime(0)
  CreatedAt  DateTime? @default(now()) @db.DateTime(0)
  UpdatedAt  DateTime? @default(now()) @db.DateTime(0)
  LabOrder   LabOrder? @relation(fields: [LabOrderId], references: [Id], onDelete: NoAction, onUpdate: NoAction, map: "laborderstatus_ibfk_1")

  @@index([LabOrderId], map: "laborder_status_idx")
}

model LabOrderTest {
  Id          String       @id @default(dbgenerated("(uuid())")) @db.VarChar(45)
  LabOrderId  String?      @db.VarChar(45)
  TestId      Int?
  CreatedAt   DateTime?    @default(now()) @db.DateTime(0)
  UpdatedAt   DateTime?    @default(now()) @db.DateTime(0)
  LabOrder    LabOrder?    @relation(fields: [LabOrderId], references: [Id], onDelete: NoAction, onUpdate: NoAction, map: "labordertest_ibfk_1")
  TestCatalog TestCatalog? @relation(fields: [TestId], references: [TestId], onDelete: NoAction, onUpdate: NoAction, map: "labordertest_ibfk_2")

  @@index([LabOrderId], map: "laborder_test_idx")
  @@index([TestId], map: "laborder_test_test_id_idx")
}

model LoincComponentHierarchy {
  Id        BigInt @id
  ParentId  BigInt
  Level     Int
  Code      String @db.VarChar(128)
  Sequence  String @db.VarChar(128)
  CodeText  String @db.VarChar(128)
  Component String @db.VarChar(128)
  Property  String @db.VarChar(128)
  Timing    String @db.VarChar(128)
  Scale     String @db.VarChar(128)
  Method    String @db.VarChar(128)
}

model LoincPanelHierarchy {
  Id        Int    @id
  ParentId  Int
  Level     Int
  Code      String @db.VarChar(128)
  Sequence  String @db.VarChar(128)
  CodeText  String @db.VarChar(128)
  Component String @db.VarChar(128)
  Property  String @db.VarChar(128)
  Timing    String @db.VarChar(128)
  Scale     String @db.VarChar(128)
  Method    String @db.VarChar(128)
}

model LoincUniveralLabOrders {
  Loinc_Num        String  @id @db.VarChar(128)
  Long_Common_Name String? @db.Text
  ORDER_OBS        String? @db.Text
}

model Organization {
  Id                       String                     @id @db.VarChar(128)
  href                     String?                    @db.Text
  ParentId                 String?                    @db.VarChar(128)
  Level                    Int?
  ParentOrgName            String?                    @db.VarChar(512)
  OrgName                  String?                    @db.VarChar(512)
  OrgType                  String?                    @db.VarChar(512)
  OrgSpecialty             String?                    @db.VarChar(512)
  OrgAddress               String?                    @db.VarChar(512)
  OrgCity                  String?                    @db.VarChar(512)
  OrgState                 String?                    @db.VarChar(512)
  OrgZip                   String?                    @db.VarChar(512)
  LabOrder                 LabOrder[]
  Organization             Organization?              @relation("OrganizationToOrganization", fields: [ParentId], references: [Id], onDelete: NoAction, onUpdate: NoAction, map: "parent_fk")
  ChildOrganization       Organization[]             @relation("OrganizationToOrganization")
  OrganizationFavoriteTest OrganizationFavoriteTest[]
  PatientOrganization      PatientOrganization[]
  ProviderOrganization     ProviderOrganization[]

  @@index([ParentId], map: "parentid_idx")
}

model OrganizationEndpoint {
  Id          String  @id @default(dbgenerated("(uuid())")) @db.VarChar(45)
  OrgName     String? @db.VarChar(512)
  EHRVendor   String? @db.VarChar(45)
  FHIRVersion String? @db.VarChar(45)
  Endpoint    String? @db.VarChar(512)
}

model OrganizationFavoriteTest {
  Id             String        @id @default(dbgenerated("(uuid())")) @db.VarChar(45)
  OrganizationId String?       @db.VarChar(45)
  ParentId       String?       @default(dbgenerated("(uuid())")) @db.VarChar(45)
  ParentName     String?       @default(dbgenerated("(uuid())")) @db.VarChar(45)
  Level          Int?          @default(0)
  TestId         Int?
  CreatedAt      DateTime?     @default(now()) @db.DateTime(0)
  UpdatedAt      DateTime?     @default(now()) @db.DateTime(0)
  Organization   Organization? @relation(fields: [OrganizationId], references: [Id], onDelete: NoAction, onUpdate: NoAction, map: "organizationfavoritetest_ibfk_1")
  TestCatalog    TestCatalog?  @relation(fields: [TestId], references: [TestId], onDelete: NoAction, onUpdate: NoAction, map: "organizationfavoritetest_ibfk_2")

  @@index([ParentId], map: "org_parent_id_idx")
  @@index([OrganizationId], map: "org_test_idx")
  @@index([TestId], map: "org_test_test_id_idx")
}

model Patient {
  Id                  String                @id @default(dbgenerated("(uuid())")) @db.VarChar(45)
  FirstName           String?               @db.VarChar(45)
  LastName            String?               @db.VarChar(512)
  DateOfBirth         DateTime?             @db.Date
  Gender              String?               @db.VarChar(512)
  Email               String?               @db.VarChar(512)
  Mobile              String?               @db.Text
  CreatedAt           DateTime?             @default(now()) @db.DateTime(0)
  UpdatedAt           DateTime?             @default(now()) @db.DateTime(0)
  LabOrder            LabOrder[]
  PatientOrganization PatientOrganization[]
}

model PatientOrganization {
  Id             String       @id @default(dbgenerated("(uuid())")) @db.VarChar(45)
  PatientId      String       @db.VarChar(45)
  OrganizationId String       @db.VarChar(128)
  MRN            String?      @db.VarChar(45)
  Mobile         String?      @db.VarChar(45)
  Email          String?      @db.VarChar(512)
  Organization   Organization @relation(fields: [OrganizationId], references: [Id], onDelete: NoAction, onUpdate: NoAction, map: "patorg_organization_fk")
  Patient        Patient      @relation(fields: [PatientId], references: [Id], onDelete: NoAction, onUpdate: NoAction, map: "patorg_patient_fk")

  @@index([OrganizationId], map: "patorg_organization_fk")
  @@index([PatientId], map: "patorg_patient_fk")
}

model Post {
  id        Int      @id @default(autoincrement())
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime

  @@index([name])
}

model Provider {
  Id                                             String                 @id @default(dbgenerated("(uuid())")) @db.VarChar(45)
  href                                           String?                @db.Text
  NPI                                            String?                @db.VarChar(45)
  Name                                           String?                @db.VarChar(512)
  Email                                          String?                @db.VarChar(255)
  Credentials                                    String?                @db.VarChar(512)
  Specialty                                      String?                @db.VarChar(512)
  Aboutme                                        String?                @db.Text
  Gender                                         String?                @db.VarChar(512)
  ProviderType                                   String?                @db.VarChar(512)
  Affiliation                                    String?                @db.VarChar(512)
  ProceduresAndResearch                          String?                @db.Text
  SpecialInterests                               String?                @db.Text
  UserAttributeId                                String?                @unique(map: "UserAttributeId") @db.VarChar(45)
  OrderingProviderLabOrder                       LabOrder[]             @relation("LabOrder_OrderingProviderIdToProvider")
  TreatingProviderLabOrder                       LabOrder[]             @relation("LabOrder_TreatingProviderIdToProvider")
  UserAttribute                                  UserAttribute?         @relation(fields: [UserAttributeId], references: [Id], onDelete: NoAction, onUpdate: NoAction, map: "provider_ibfk_1")
  ProviderEducation                              ProviderEducation[]
  ProviderFavoriteTest                           ProviderFavoriteTest[]
  ProviderOrganization                           ProviderOrganization[]

  @@index([UserAttributeId], map: "userattributeid_idx")
}

model ProviderEducation {
  Id              String   @id @default(dbgenerated("(uuid())")) @db.VarChar(45)
  ProviderId      String   @db.VarChar(45)
  ProviderNPI     String?  @db.VarChar(45)
  Name            String?  @db.VarChar(512)
  EducationType   String?  @db.VarChar(512)
  SchoolName      String?  @db.VarChar(512)
  AreaOfEducation String?  @db.Text
  Provider        Provider @relation(fields: [ProviderId], references: [Id], onDelete: NoAction, onUpdate: NoAction, map: "provider_education_fk")

  @@index([ProviderId], map: "provider_education_fk")
}

model ProviderFavoriteTest {
  Id          String       @id @default(dbgenerated("(uuid())")) @db.VarChar(45)
  ProviderId  String?      @db.VarChar(45)
  ParentId    String?      @default(dbgenerated("(uuid())")) @db.VarChar(45)
  ParentName  String?      @default(dbgenerated("(uuid())")) @db.VarChar(45)
  Level       Int?         @default(0)
  TestId      Int?
  CreatedAt   DateTime?    @default(now()) @db.DateTime(0)
  UpdatedAt   DateTime?    @default(now()) @db.DateTime(0)
  Provider    Provider?    @relation(fields: [ProviderId], references: [Id], onDelete: NoAction, onUpdate: NoAction, map: "providerfavoritetest_ibfk_1")
  TestCatalog TestCatalog? @relation(fields: [TestId], references: [TestId], onDelete: NoAction, onUpdate: NoAction, map: "providerfavoritetest_ibfk_2")

  @@index([ParentId], map: "provider_parent_id_idx")
  @@index([ProviderId], map: "provider_test_idx")
  @@index([TestId], map: "provider_test_test_id_idx")
}

model ProviderOrganization {
  Id             String       @id @default(dbgenerated("(uuid())")) @db.VarChar(45)
  ProviderId     String       @db.VarChar(45)
  OrganizationId String       @db.VarChar(128)
  ProviderNPI    String?      @db.VarChar(45)
  Name           String?      @db.VarChar(512)
  ParentOrgName  String?      @db.VarChar(512)
  OrgName        String?      @db.VarChar(512)
  OrgAddress     String?      @db.VarChar(512)
  OrgCity        String?      @db.VarChar(512)
  OrgState       String?      @db.VarChar(512)
  OrgZip         String?      @db.VarChar(512)
  Organization   Organization @relation(fields: [OrganizationId], references: [Id], onDelete: NoAction, onUpdate: NoAction, map: "organization_fk")
  Provider       Provider     @relation(fields: [ProviderId], references: [Id], onDelete: NoAction, onUpdate: NoAction, map: "provider_fk")

  @@index([OrganizationId], map: "organization_fk")
  @@index([ProviderId], map: "provider_fk")
}

model Session {
  id           String   @id
  sessionToken String   @unique
  userId       String
  expires      DateTime
  User         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId], map: "Session_userId_fkey")
}

model Sponsor {
  SponsorId        Int                @id @default(autoincrement())
  SponsorName      String?            @db.VarChar(512)
  SponsorCode      String?            @db.VarChar(2)
  SponsorWebsite   String?            @db.VarChar(512)
  SponsorType      String?            @db.VarChar(45)
  Address          String?            @db.VarChar(512)
  City             String?            @db.VarChar(512)
  State            String?            @db.VarChar(512)
  Zip              String?            @db.VarChar(512)
  SponsoredProgram SponsoredProgram[]
}

model SponsoredProgram {
  ProgramId            Int             @id @default(autoincrement())
  SponsorId            Int?
  TherapeuticArea      String?         @db.VarChar(128)
  ProgramName          String?         @db.VarChar(512)
  ProgramUrl           String?         @db.VarChar(512)
  ProgramLabUrl        String?         @db.VarChar(512)
  SponosoredTestingUrl String?         @db.VarChar(512)
  ProgramEligibility   String?         @db.LongText
  CreatedAt            DateTime?       @default(now()) @db.DateTime(0)
  UpdatedAt            DateTime?       @default(now()) @db.DateTime(0)
  Sponsor              Sponsor?        @relation(fields: [SponsorId], references: [SponsorId], onDelete: NoAction, onUpdate: NoAction, map: "sponsor_fk_constraint")
  SponsoredTest        SponsoredTest[]

  @@index([SponsorId], map: "sponsor_fk_constraint")
}

model SponsoredTest {
  Id                           String                         @id @default(dbgenerated("(uuid())")) @db.VarChar(45)
  TestId                       Int
  LabTestId                    String?                        @db.VarChar(512)
  SponsoredProgramId           Int?
  LabId                        Int?
  CasandraTestId               String                         @unique(map: "CasandraTestId_UNIQUE") @db.VarChar(512)
  Category                     String                         @db.VarChar(512)
  SubCategory                  String?                        @db.VarChar(512)
  CreatedAt                    DateTime?                      @default(now()) @db.DateTime(0)
  UpdatedAt                    DateTime?                      @default(now()) @db.DateTime(0)
  LabOrderSponsoredTestConsent LabOrderSponsoredTestConsent[]
  Lab                          Lab?                           @relation(fields: [LabId], references: [LabId], onDelete: NoAction, onUpdate: NoAction, map: "lab_sponsored_fk_constraint")
  SponsoredProgram             SponsoredProgram?              @relation(fields: [SponsoredProgramId], references: [ProgramId], onDelete: NoAction, onUpdate: NoAction, map: "program_fk_constraint")
  TestCatalog                  TestCatalog                    @relation(fields: [TestId], references: [TestId], onDelete: NoAction, onUpdate: NoAction, map: "tc_sponsored_fk_constraint")

  @@index([LabId], map: "lab_sponsored_idx")
  @@index([SponsoredProgramId], map: "program_fk_constraint")
  @@index([CasandraTestId], map: "spt_casandra_test_id_idx")
  @@index([TestId], map: "test_sponsored_idx")
}

model TestBiomarker {
  Id                  Int         @id @default(autoincrement())
  TestId              Int
  LabTestId           String?     @db.VarChar(512)
  HGNCId              String      @db.VarChar(20)
  TranscriptReference String?     @db.VarChar(512)
  CreatedAt           DateTime    @default(now()) @db.DateTime(0)
  UpdatedAt           DateTime    @default(now()) @db.DateTime(0)
  BIOMARKER           BIOMARKER   @relation(fields: [HGNCId], references: [HGNCId], onDelete: NoAction, onUpdate: NoAction, map: "fk_HGNCId")
  TestCatalog         TestCatalog @relation(fields: [TestId], references: [TestId], onDelete: NoAction, onUpdate: NoAction, map: "tc_biomarker_fk_constraint")

  @@unique([TestId, HGNCId], map: "TestBiomarker_UNIQUE")
  @@index([HGNCId], map: "idx_HGNCId")
  @@index([TestId], map: "idx_TestId")
}

model TestCatalog {
  TestId                     Int                          @id @default(autoincrement())
  LabId                      Int?
  href                       String?                      @db.Text
  CasandraTestId             String                       @db.VarChar(512)
  LabTestId                  String?                      @db.VarChar(512)
  TestName                   String?                      @db.VarChar(512)
  AlternativeName            String?                      @db.VarChar(512)
  AlternativeName1           String?                      @db.VarChar(512)
  AlternativeName2           String?                      @db.VarChar(512)
  AlternativeName3           String?                      @db.VarChar(512)
  AlternativeName4           String?                      @db.VarChar(512)
  AlternativeName5           String?                      @db.VarChar(512)
  TestIncludes               String?                      @db.Text
  SpecimenType               String?                      @db.VarChar(512)
  SpecialInstructions        String?                      @db.Text
  Methodology                String?                      @db.Text
  TestDescription            String?                      @db.Text
  Diseases                   String?                      @db.Text
  Probes                     String?                      @db.Text
  ClinicalSignificance       String?                      @db.Text
  SpecimenRequirements       String?                      @db.Text
  Volume                     String?                      @db.VarChar(512)
  MinimumVolume              String?                      @db.VarChar(512)
  Container                  String?                      @db.Text
  Collection                 String?                      @db.Text
  StabilityRequirements      String?                      @db.LongText
  StorageTransportation      String?                      @db.Text
  PatientPreparation         String?                      @db.Text
  CausesForRejection         String?                      @db.Text
  TestUsage                  String?                      @db.Text
  TestLimitations            String?                      @db.Text
  CPTCodes                   String?                      @db.Text
  NewYorkApproved            String?                      @db.VarChar(512)
  LevelOfService             String?                      @db.VarChar(512)
  TurnAroundTime             String?                      @db.VarChar(512)
  AssayCategory              String?                      @db.LongText
  ReferenceRanges            String?                      @db.LongText
  SetupSchedule              String?                      @db.LongText
  AlternativeSpecimen        String?                      @db.LongText
  LoincCodesText             String?                      @db.LongText
  LoincCodesHTML             String?                      @db.LongText
  TestCategory               String?                      @db.VarChar(512)
  TestSubCategory            String?                      @db.VarChar(512)
  CreatedAt                  DateTime                     @default(now()) @db.DateTime(0)
  UpdatedAt                  DateTime                     @default(now()) @db.DateTime(0)
  LabOrderTest               LabOrderTest[]
  OrganizationFavoriteTest   OrganizationFavoriteTest[]
  ProviderFavoriteTest       ProviderFavoriteTest[]
  SponsoredTest              SponsoredTest[]
  TestBiomarker              TestBiomarker[]
  Lab                        Lab?                         @relation(fields: [LabId], references: [LabId], onDelete: NoAction, onUpdate: NoAction, map: "lab_fk_constraint")
  TestCptCode                TestCptCode[]
  TestGene                   TestGene[]
  TestOrderLoinc             TestOrderLoinc[]
  TestResultLoinc            TestResultLoinc[]

  @@unique([LabId, LabTestId], map: "LabAndLabTestId")
  @@index([LabId], map: "lab_fk_constraint")
}

model TestCptCode {
  Id          Int         @id @default(autoincrement())
  TestId      Int
  LabTestId   String?     @db.VarChar(512)
  CptCode     String?     @db.VarChar(512)
  Modifier    String?     @db.VarChar(512)
  Comments    String?     @db.Text
  CreatedAt   DateTime    @default(now()) @db.DateTime(0)
  UpdatedAt   DateTime    @default(now()) @db.DateTime(0)
  TestCatalog TestCatalog @relation(fields: [TestId], references: [TestId], onDelete: NoAction, onUpdate: NoAction, map: "tc_cptcode_fk_constraint")

  @@index([TestId], map: "tc_cptcode_fk_constraint")
}

model TestGene {
  Id                  Int         @id @default(autoincrement())
  TestId              Int
  LabTestId           String?     @db.VarChar(512)
  Gene                String      @db.VarChar(20)
  TranscriptReference String?     @db.VarChar(512)
  CreatedAt           DateTime    @default(now()) @db.DateTime(0)
  UpdatedAt           DateTime    @default(now()) @db.DateTime(0)
  TestCatalog         TestCatalog @relation(fields: [TestId], references: [TestId], onDelete: NoAction, onUpdate: NoAction, map: "tc_gene_fk_constraint")

  @@unique([TestId, Gene], map: "TestBiomarker_UNIQUE")
  @@index([Gene], map: "idx_Gene")
  @@index([TestId], map: "idx_TestId")
}

model TestOrderLoinc {
  Id          Int         @id @default(autoincrement())
  TestId      Int
  LabTestId   String?     @db.VarChar(512)
  OrderLoinc  String?     @db.VarChar(512)
  CreatedAt   DateTime    @default(now()) @db.DateTime(0)
  UpdatedAt   DateTime    @default(now()) @db.DateTime(0)
  LOINC       LOINC?      @relation(fields: [OrderLoinc], references: [Loinc_Num], onDelete: NoAction, onUpdate: NoAction, map: "fk_order_loinc")
  TestCatalog TestCatalog @relation(fields: [TestId], references: [TestId], onDelete: NoAction, onUpdate: NoAction, map: "tc_order_loinc_fk_constraint")

  @@unique([TestId, OrderLoinc], map: "TestId_OrderLoin_UNIQUE")
  @@index([OrderLoinc], map: "idx_OrderLoinc")
  @@index([TestId], map: "tc_order_loinc_fk_constraint")
}

model TestResultLoinc {
  Id             Int         @id @default(autoincrement())
  TestId         Int
  LabTestId      String?     @db.VarChar(512)
  ResultCode     String?     @db.VarChar(512)
  ResultCodeName String?     @db.VarChar(512)
  UofM           String?     @db.VarChar(512)
  ResultLoinc    String?     @db.VarChar(512)
  CreatedAt      DateTime    @default(now()) @db.DateTime(0)
  UpdatedAt      DateTime    @default(now()) @db.DateTime(0)
  LOINC          LOINC?      @relation(fields: [ResultLoinc], references: [Loinc_Num], onDelete: NoAction, onUpdate: NoAction, map: "fk_result_loinc")
  TestCatalog    TestCatalog @relation(fields: [TestId], references: [TestId], onDelete: NoAction, onUpdate: NoAction, map: "tc_result_loinc_fk_constraint")

  @@index([ResultLoinc], map: "idx_ResultLoinc")
  @@index([TestId], map: "tc_result_loinc_fk_constraint")
}

model User {
  id            String         @id
  name          String?
  email         String?        @unique
  password      String?        @db.VarChar(255)
  emailVerified DateTime?
  image         String?
  Account       Account?
  Session       Session[]
  UserAttribute UserAttribute?
}

model UserAttribute {
  Id       String                  @id @default(dbgenerated("(uuid())")) @db.VarChar(45)
  UserId   String                  @unique(map: "UserId") @db.VarChar(45)
  UserType UserAttribute_UserType?
  Admin    Admin?
  Provider Provider?
  User     User                    @relation(fields: [UserId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "userattribute_ibfk_1")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

enum UserAttribute_UserType {
  Admin
  Provider
}
